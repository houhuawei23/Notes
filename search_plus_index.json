{"./":{"url":"./","title":"Introduction","keywords":"","body":"My Notes for nearly Everything, by hhw ÂçöËßÇËÄåÁ∫¶ÂèñÔºåÂéöÁßØËÄåËñÑÂèë„ÄÇ1 Learn: Record learning resources, environment configuration, common questions and precautions when learning something or a certain skill Linux: Linux related notes, including Linux distribution, display, user management, input method, etc. PythonLibs - Programming: Programming related notes, about design patterns and so on. ReadingNotes: Personal reading notes, including books and articles. Network: Network related notes, including network protocols, network architecture, etc. Papers: Papers I read and want to remember. ConfigExamples: Configuration examples for different tools and editors. Git: Git related notes, including basic usage, branch management, etc. Misc: Miscellaneous notes, uncategorized notes. ‚≠ê If you think this repository is helpful to you, please give me a star! üòö "},"ConfigExamples/ConfigExamples.html":{"url":"ConfigExamples/ConfigExamples.html","title":"ConfigExamples","keywords":"","body":"Configuration Examples Configuration Examples .clang-format .gitignore .clang-format --- Language: Cpp AccessModifierOffset: -2 AlignAfterOpenBracket: Align AlignArrayOfStructures: None AlignConsecutiveMacros: None AlignConsecutiveAssignments: None AlignConsecutiveBitFields: None AlignConsecutiveDeclarations: None AlignEscapedNewlines: Left AlignOperands: Align AlignTrailingComments: true ... .gitignore **/.** **/__pycache__ **/data **/__pycache__ **/*.model *.zip *.pyc *.pyo "},"Git/Github.html":{"url":"Git/Github.html","title":"Github","keywords":"","body":"Github Github Stars: Github Starred Repositories Manager Displaying Contributors Image on README files with no Pain! contributors-img: contrib.rocks contributors-img all-contributors Best-README-Template Github Actions: GitHub Actions for GitHub Pges Github Profile: wakatime: Dashboards for developers, dashboard github-readme-stats waka-readme-stats This GitHub action helps to add cool dev metrics to your github profile Readme waka-readme Wakatime Weekly Metrics on your Profile Readme. Github Resources: orignianl link: https://github.com/pathto/Sitemap.svg raw link: https://github.com/pathto/Sitemap.svg?raw=true auto redirect to: https://raw.githubusercontent.com/pathto/Sitemap.svg raw.githubusercontent.com: github Áî®Êù•Â≠òÂÇ®Áî®Êà∑‰∏ä‰º†Êñá‰ª∂ÁöÑÊúçÂä°Âú∞ÂùÄ„ÄÇÊîæÂú®‰∫öÈ©¨ÈÄä s3 ‰∏ä„ÄÇÊòØ github ÁöÑÁ¥†ÊùêÊúçÂä°Âô® (assets server), ÈÅøÂÖçË∑ü‰∏ªÊúçÂä°Êä¢Âç†Ë¥üËΩΩ raw.githubusercontent.com/username/repo-name/branch-name/path Replace username with the username of the user that created the repo. Replace repo-name with the name of the repo. Replace branch-name with the name of the branch. Replace path with the path to the file. "},"Git/git.html":{"url":"Git/git.html","title":"git","keywords":"","body":"Git Commands Q & A git-scm Commands git branch git remote git push git merge git config git rebase git reset git branch # List all branches (local and remote; the current branch is highlighted by *): git branch --all # Create new branch based on the current commit: git branch branch_name # Create new branch based on a specific commit: git branch branch_name commit_hash # Rename a branch (must not have it checked out to do this): git branch -m|--move old_branch_name new_branch_name # Delete a local branch (must not have it checked out to do this): git branch -d|--delete branch_name # Delete a remote branch: git push remote_name --delete remote_branch_name git remote # chekout remotes git remote -v # Show information about a remote: git remote show remote_name # Add a remote: git remote add remote_name remote_url # Change the URL of a remote (use --add to keep the existing URL): git remote set-url remote_name new_url # Remove a remote: git remote remove remote_name # Rename a remote: git remote rename old_name new_name # add additional url to the remote branch named `origin` # after that, the `origin` branch will has multi url # if run `git push origin main`, git will push to both of them git remote set-url --add origin get push Push commits to a remote repository. # Send local changes in the current branch to its default remote counterpart: git push # Send changes from a specific local branch to its remote counterpart: git push remote_name local_branch # Send changes from a specific local branch to its remote counterpart, # and set the remote one as the default push/pull target of the local one: git push -u remote_name local_branch # --set-upstream git merge Merge branches # Merge a branch into your current branch: git merge branch_name # Edit the merge message: git merge --edit branch_name # Merge a branch and create a merge commit: git merge --no-ff branch_name # Abort a merge in case of conflicts: git merge --abort # Merge using a specific strategy: git merge --strategy strategy --strategy-option strategy_option branch_name # !! merge to only create a commit on top of current commit git merge --squash branch_name --ff, --no-ff, --ff-only Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed. With --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit. With --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward. With --ff-only, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status. --squash, --no-squash Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus). git config # You have divergent branches and need to specify how to reconcile them. # You can do so by running one of the following commands sometime before # your next pull: git config pull.rebase false # merge git config pull.rebase true # rebase git config pull.ff only # fast-forward only git rebase Reapply commits from one branch on top of another branch. Commonly used to \"move\" an entire branch to another base, creating copies of the commits in the new location. # Rebase the current branch on top of another specified branch: git rebase new_base_branch # Start an interactive rebase, which allows the commits to be reordered, omitted, combined or modified: git rebase -i|--interactive target_base_branch_or_commit_hash git reset Undo commits or unstage changes, by resetting the current Git HEAD to the specified state. If a path is passed, it works as \"unstage\"; if a commit hash or branch is passed, it works as \"uncommit\". # Unstage everything: git reset # Unstage specific file(s): git reset path/to/file1 path/to/file2 ... # Interactively unstage portions of a file: git reset --patch path/to/file # Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem: git reset HEAD~ # Undo the last two commits, adding their changes to the index, i.e. staged for commit: git reset --soft HEAD~2 # Discard any uncommitted changes, staged or not (for only unstaged changes, use git checkout): git reset --hard # !! Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then: git reset --hard commit Q & A How to set default upstream branch for git push or git pull? 1 checkout which branch your local branch is tracking: git branch -vv 2 set upstream branch for local branch git branch --set-upstream-to=origin/remote-branch-name local-branch-name 3 unset the upstream branch git branch --unset-upstream local-branch-name squash multiple commits into one to create a cleaner pull request upstream rep/branch 'abc/main', my rep/branch 'forked-abc/main' and 'forked-abc/dev' how to do: we can develop on 'forked-abc/dev' with multiple commits then checkout 'forked-abc/main' and merge 'forked-abc/dev' to it then rebase 'forked-abc/main' on top of 'abc/main' squash all the commits on 'forked-abc/main' into one commit finally i can create a pull request to 'abc/main' with only one conbined commit how: # Add the original repository as a remote git remote add upstream https://github.com/abc/main.git # Fetch latest changes git fetch upstream # Rebase your branch onto the latest upstream branch git checkout your-branch # main # git merge dev git rebase upstream/main # Squash commits git rebase -i upstream/main # Mark commits as `pick` or `squash`, then save # Force-push the squashed commit git push --force-with-lease origin your-branch # Create a pull request # Go to your forked repository and create a pull request to the original repository How to avoid enter password every time when pushing to a remote repository (https)? A: Use Git's credential helper to cache your credentials. Security Note!!! \\ Storing credentials in plain text (using the store helper) can be insecure, as anyone with access to your file system can read them. Use the cache helper or libsecret for better security. 1. Use the Credential Cache Helper The credential cache helper keeps your credentials in memory for a short period (default is 15 minutes). # enable credential cache helper git config --global credential.helper cache # change cache timeout (in seconds) git config --global credential.helper 'cache --timeout=3600' 2. Use the Credential Store Helper The credential store helper saves your credentials in a plain text file on disk, which is more persistent but less secure than the cache method. # enable the credential store helper git config --global credential.helper store When you use git pull or git push for the first time after configuring this, Git will prompt you for your username and password, and then store them in a file at ~/.git-credentials. 3. Use the libsecret Credential Helper The libsecret credential helper integrates with GNOME Keyring to securely store your credentials. # First, install the required package: sudo apt-get install libsecret-1-0 libsecret-1-dev # Then, you need to compile the `libsecret` credential helper. # This is a one-time setup: cd /usr/share/doc/git/contrib/credential/libsecret sudo make # Finally, configure Git to use the `libsecret` helper: git config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret 4. Store Credentials for a Single Repository If you want to store credentials for just one repository and not globally, navigate to your repository and run: git config credential.helper store "},"Guides/Self-Cultivation-of-Programmers.html":{"url":"Guides/Self-Cultivation-of-Programmers.html","title":"Self-Cultivation-of-Programmers","keywords":"","body":"Self Cultivation of Programmers reference: Á®ãÂ∫èÂëòÁöÑËá™Êàë‰øÆÂÖª ÂÜôÁªôÂπ¥ËΩªÁ®ãÂ∫èÂëòÁöÑÂª∫ËÆÆ ÊØî‚Äú‰∏ÄËà¨‰∫∫‚ÄùÊõ¥Âä™Âäõ ÈÄÇÊó∂Âª∫Á´ã‰∏™‰∫∫ÊùÉÂ®Å ‰øùÊåÅÂ•ΩÂ•áÂøÉ ÊäõÂºÄ‰ª£Á†Å‰∏é‰∫∫Ê≤üÈÄöÔºåÁªìËØÜÊõ¥‰ºòÁßÄÁöÑ‰∫∫ or ÈÄöËøá‰ª£Á†Å/ÂèÇ‰∏éÈ°πÁõÆÁªìËØÜÂÖ∂‰ªñÂºÄÂèëËÄÖ ‰∏∫‰ºòÁßÄÁöÑ‰∫∫Â∑•‰ΩúÊàñÂä™Âäõ ÂçèË∞ÉÁîüÊ¥ª‰∏éÂ∑•‰ΩúÔºåenjoy your life Áõ∏‰ø°Ëá™Â∑±ÁöÑÂ§©ËµãÂíåÂàõÈÄ†Âäõ Â∞ΩÂèØËÉΩÊåÅÁª≠Âú∞„ÄÅÈïø‰πÖÂú∞ÂÅö‰∏Ä‰ª∂ÊúâÊÑè‰πâÁöÑ‰∫ãÔºåÊääÂÆÉÂÅöÂ•ΩÂÅöÁ≤æ ‰øùÊåÅ‰∏•Ë∞®„ÄÅÁª¥ÊåÅÂ£∞Ë™â Âã§‰∫éÊÄùËÄÉÔºå‰∏çËΩªÊòìËØ¥ÁÆÄÂçï/‰∏çÂèØËÉΩ ÊâæÂà∞Ëá™Â∑±ÊâÄÁÉ≠Áà±ÁöÑÔºåÂØπ‰∫∫ÂØπ‰∫ã‰øùÊåÅÁúüËØöÂíåÁÉ≠ÊÉÖ ÈîªÁÇºË°®ËææËÉΩÂäõÔºåÊï¢ËØ¥Â§öËØ¥ÔºåÂàõÈÄ†Êú∫‰ºö„ÄÅÊääÊè°Êú∫‰ºöÂ§öËÆ≤Â§öÂàÜ‰∫´ Ê∑±ÂÖ•Âú∞ÊÄùËÄÉÔºå‰∏çË¶ÅÊµÖÂ∞ùËæÑÊ≠¢„ÄÅÁöÆÊØõËÇ§ÊµÖ ÂñÑ‰∫éÊÄªÁªìÂΩíÁ∫≥Ôºå‰ªéÁ∫∑ÁπÅÁöÑË°®Èù¢Áé∞Ë±°‰∏≠ÊÄªÁªìÊäΩË±°ÂèëÁé∞ÈóÆÈ¢òÁöÑÊú¨Ë¥®„ÄÅÂèëÁé∞ÂÖ≥ÈîÆÁöÑÈóÆÈ¢ò Á∫µÊ®™Êç≠Èòñ„ÄÅÂêàÁ∫µËøûÊ®™ Â∞Ü‰∏çÂêåÈ¢ÜÂüü‰∏çÂêåËßíÂ∫¶ÁöÑ‰∏úË•øÁõ∏Ë¥ØÈÄö„ÄÅÂèëÁé∞Áõ∏‰ºº‰πãÂ§Ñ„ÄÅÂÖ±ÈÄöË¥®Â§ÑÔºåÂπ∂‰ªéËøÅÁßªÊØîËæÉ‰∏≠Ëé∑ÂæóÂêØÂèë ÂØπÊñ∞È≤úÊäÄÊúØ‰øùÊåÅÊïèÈîêÔºåÂ≠¶‰π†Êñ∞ÊäÄÊúØ„ÄÅÊñ∞ËßÇÂøµÂπ∂Â∞ÜÂÖ∂Â∫îÁî®Âà∞Ëá™Â∑±ÁöÑÂ∑•‰Ωú‰∏≠ Âπ≥Ë°°ÂèñËàçÔºåÂú®ÊúâÈôêÁöÑÊó∂Èó¥ÊúâÈôêÁöÑËµÑÊ∫êÊúâÈôêÁöÑËÉΩÂäõÂÜÖËß£ÂÜ≥ÈóÆÈ¢ò Âø´ÈÄüËø≠‰ª£Êõ¥Êñ∞ ‰ªéÂ§±Ë¥•‰∏≠Â≠¶‰π†ÔºåÁßØÁ¥ØÁªèÈ™åÔºåÊÄªÁªìÊñπÊ≥ï ÂØπËá™Â∑±„ÄÅÂØπÈ°πÁõÆ„ÄÅÂØπ‰ª£Á†Å„ÄÅÂØπ‰∫ãÊÉÖÊúâÁùÄÈ´òÁöÑËá™ÊàëË¶ÅÊ±Ç ‰∏çË¶ÅÂõæÁúÅ‰∫ãËÄåÂÅö‰∏Ä‰∫õÊÑöË†¢ÁöÑ‰∫ãÊÉÖ Â¶Ç‰ΩïÊâæÂà∞Èù†Ë∞±ÁöÑÁ®ãÂ∫èÂëò ÁÆÄÂéÜÔºöÈáçÁÇπÈ°πÁõÆÁªèÈ™åÔºõ‰∏éÁºñÁ®ãÊúâÂÖ≥ÁöÑÁ§æ‰ºöÂåñÊ¥ªÂä® Ëá™Êàë‰ªãÁªçÔºå‰ªãÁªçËá™Â∑±ÊúÄÊìÖÈïøÁöÑ„ÄÅÊúÄÊúâÊøÄÊÉÖÁöÑ ËØ≠Ë®ÄË°®ËææËÉΩÂäõ„ÄÅÈÄªËæëÊÄùÁª¥ËÉΩÂäõ„ÄÅ‰∏ì‰∏öËÉΩÂäõ ÊòØÂê¶ÊúâÊ∏ÖÊô∞ÁöÑËá™ÊàëËÆ§Áü•ÂíåËá™ÊàëËÇØÂÆö ÊòØÂê¶ÊúâËá™Â∑±ÊâÄÁÉ≠Áà±ÁöÑÔºåÊòØÂê¶ËëÜÊúâÊøÄÊÉÖ‰∏éÁÉ≠Âø± Âü∫Á°ÄÊâìÁâ¢‰∫ÜÂêóÔºü ËÆ°ÁÆóÊú∫ÂéüÁêÜÔºüËÆ°ÁÆóÊú∫ÁΩëÁªúÂü∫Êú¨ÂéüÁêÜ... ÂØπËá™Â∑±‰∏ìÁ≤æÁöÑÊäÄÊúØÊòØÂê¶Ë∂≥Â§üÊ∑±ÂÖ•Ôºü "},"Learn/Learn.html":{"url":"Learn/Learn.html","title":"Learn","keywords":"","body":"Learn Notes Áâ©Áâ©ËÄå‰∏çÁâ©‰∫éÁâ©„ÄÇ1 "},"Learn/LearnDrones/Note.html":{"url":"Learn/LearnDrones/Note.html","title":"LearnDrones","keywords":"","body":"Learn Drones Softwares Gazebo robot simulation Labs Êú∫Âô®‰∫∫Á†îÁ©∂Âõ¢Èòü multi_uav_simulator UPenn GRASP kumarrobotics ÂÆæÂ§ïÊ≥ïÂ∞º‰∫öÂ§ßÂ≠¶Â∑•Á®ãÁ≥ª General Robotics, Automation, Sensing and Perception (GRASP) Laboratory Vijay Kumar Áª¥Êù∞¬∑Â∫ìÈ©¨Â∞î Ëá¥Âäõ‰∫éÂàõÂª∫Ëá™‰∏ªÂú∞Èù¢ÂíåÁ©∫‰∏≠Êú∫Âô®‰∫∫„ÄÅËÆæËÆ°ÈõÜ‰ΩìË°å‰∏∫ÁöÑ‰ªøÁîüÁÆóÊ≥ï‰ª•ÂèäÊú∫Âô®‰∫∫Áæ§ HKUST Aerial Robotics È¶ôÊ∏ØÁßëÊäÄÂ§ßÂ≠¶ Á©∫‰∏≠Êú∫Âô®‰∫∫Á†îÁ©∂ÁªÑ github Ê≤àÂä≠Âäº Áä∂ÊÄÅ‰º∞ËÆ°„ÄÅ‰º†ÊÑüÂô®ËûçÂêà„ÄÅÂÆö‰ΩçÂíåÂú∞ÂõæÁªòÂà∂‰ª•ÂèäÂ§çÊùÇÁéØÂ¢É‰∏≠ÁöÑËá™‰∏ªÂØºËà™ VINS-MONO, Fiesta, FAST-planner SUSTech SmarT Autonomous Robotics Group github ÂçóÊñπÁßëÊäÄÂ§ßÂ≠¶ÔºàSUSTechÔºâ Âë®ÂçöÂÆá Âä©ÁêÜÊïôÊéàÔºàÂâØÁ†îÁ©∂ÂëòÔºâ ZJU FAST Lab ÊµôÊ±üÂ§ßÂ≠¶ Êó†‰∫∫Á≥ªÁªü‰∏éËá™‰∏ªËÆ°ÁÆóÂÆûÈ™åÂÆ§ È´òÈ£û ËÆ∏Ë∂Ö Êó†‰∫∫Êú∫ËøêÂä®ËßÑÂàí github Fast-Drone-250 ego-planner-swarm ego-planner IWIN Center for Intelligent Wireless Networks and Cooperative Control (IWIN Center) ‰∏äÊµ∑‰∫§ÈÄöÂ§ßÂ≠¶Ëá™Âä®ÂåñÁ≥ª Êô∫ËÉΩÊó†Á∫øÁΩëÁªú‰∏éÂçèÂêåÊéßÂà∂‰∏≠ÂøÉ ‰ΩïÂª∫Âπ≥ ETH-Z ASL ËãèÈªé‰∏ñËÅîÈÇ¶ÁêÜÂ∑•Â§ßÂ≠¶Ëá™‰∏ªÁ≥ªÁªüÂÆûÈ™åÂÆ§ Roland Siegwart Rotors_simulatorÔºåNext best view planner ËøêÂä®ËßÑÂàí„ÄÅÂª∫Âõæ„ÄÅÂæÆÂûãÊó†‰∫∫Êú∫„ÄÅÂÖ®ÂêëÈ£ûË°åÂô®„ÄÅÂ§™Èò≥ËÉΩÊó†‰∫∫Êú∫„ÄÅÊó†‰∫∫Êú∫ÁºñÈòüÈ£ûË°å ETH RPG ËãèÈªé‰∏ñËÅîÈÇ¶ÁêÜÂ∑•Â§ßÂ≠¶Ëá™‰∏ªÁ≥ªÁªüÂÆûÈ™åÂÆ§ ËßÜËßâÊó†‰∫∫Êú∫Ëá™‰∏ªÂØºËà™ÔºàÊó† GPS„ÄÅÊøÄÂÖâÈõ∑ËææÔºâ„ÄÅÂ§öÊú∫ÂçèÂêå„ÄÅËøêÂä®ËßÑÂàí„ÄÅÊéßÂà∂Á≠ñÁï•„ÄÅÊïèÊç∑È£ûË°å„ÄÅ‰æßÈáç‰∫éÁéØÂ¢ÉÊÑüÁü•Á≠â UZH-RPG ËãèÈªé‰∏ñÂ§ßÂ≠¶Êú∫Âô®‰∫∫‰∏éÊÑüÁü•Á†îÁ©∂ÁªÑ Scaramuzza ‰∏ªÊåÅÁöÑÂÆûÈ™åÂÆ§Ôºå ÂÆûÈ™åÂÆ§Â∑•‰ΩúÂåÖÊã¨ SVOÔºå‰∫ã‰ª∂Áõ∏Êú∫ÔºåÂü∫‰∫éÂ≠¶‰π†ÁöÑ‰∏ÄÁ≥ªÂàóÊó†‰∫∫Êú∫Ëá™‰∏ªÈ£ûË°å‰∏éÁ´ûÈÄüÁ≠âÂ∑•‰ΩúÔºåFlightmare Êó†‰∫∫Êú∫‰ªøÂπ≥Âè∞„ÄÇ MIT-ACL È∫ªÁúÅÁêÜÂ∑•Â§ßÂ≠¶Á©∫Èó¥ÊéßÂà∂ÂÆûÈ™åÂÆ§ Jonathan How ÊïôÊéà‰∏ªÊåÅÁöÑÂÆûÈ™åÂÆ§ÔºåÂÆûÈ™åÂÆ§Âú®Â§öÊú∫Ë∑ØÂæÑËßÑÂàíÔºåÂ§öÊô∫ËÉΩ‰ΩìÂº∫ÂåñÂ≠¶‰π†Ôºå‰∏ªÂä®ÊÑüÁü•ËøêÂä®ËßÑÂàíÁ≠âÈ¢ÜÂüüÊúâÂæàÂ•ΩÁöÑÂ∑•‰Ωú Â§ö‰º¶Â§öÂ§ßÂ≠¶È£ûË°åÁ≥ªÁªü‰∏éÊéßÂà∂ÂÆûÈ™åÂÆ§ÔºàUofT FSCÔºâ Hugh liu ÊïôÊéà‰∏ªÊåÅÁöÑÂÆûÈ™åÂÆ§„ÄÇ ÂÆûÈ™åÂÆ§ËøôÂá†Âπ¥Â∑•‰ΩúÈõÜ‰∏≠Âú®Êó†‰∫∫Êú∫Áª≥Á≥ªË¥üËΩΩÊéßÂà∂ÔºåÂ§öÊú∫Âçè‰ΩúÁª≥Á≥ªË¥üËΩΩÊéßÂà∂ÔºåÂ§öÊú∫ËøêÂä®ËßÑÂàíÁ≠âÈ¢ÜÂüü„ÄÇÊúâ‰∏ÄÊâπÁõ∏ÂΩìÂ•ΩÁöÑÂ∑•‰Ωú„ÄÇÂØπÊéßÂà∂ÊÑüÂÖ¥Ë∂£ÁöÑÊúãÂèãÂèØ‰ª•ÂÖ≥Ê≥®Ê≠§ÂÆûÈ™åÂÆ§„ÄÇ Âç°ËÄêÂü∫Ê¢ÖÈöÜÂ§ßÂ≠¶Êú∫Âô®‰∫∫Â≠¶Èô¢ÔºàAir LabÔºâ Á†îÁ©∂ÊñπÂêë‰∏∫Â§öÊóãÁøºÈ£ûË°åÂô®Ëá™‰∏ªÂØºËà™Á≥ªÁªü„ÄÅÁßªÂä®Âπ≥Âè∞Êó†‰∫∫Êú∫Ëá™‰∏ªÈôçËêΩÁ≠â„ÄÇ rislab Resilient Intelligent Systems Lab (RISLab) Carnegie Mellon University‚Äôs Robotics Institute Papers RACER: rapid collaborative exploration with a decentralized multi-UAV system ieeexplore 2023 IEEE Transactions on Robotics King-Sun Fu Memorial Best Paper Award Âë®ÂçöÂÆá ËØ•ÊñáÁ´†‰ªãÁªç‰∫Ü‰∏Ä‰∏™Âéª‰∏≠ÂøÉÂåñÁöÑÂ§öÊó†‰∫∫Êú∫ÔºàUnmanned Aerial Vehicles, UAVsÔºâÁ≥ªÁªüÔºåÊó®Âú®ÈÄöËøáÂçè‰ΩúÂø´ÈÄüÊé¢Á¥¢Êú™Áü•ÁéØÂ¢É„ÄÇËØ•Á≥ªÁªüÈ¶ñÂÖàÈÄöËøáÂú®Á∫øÁöÑÊú™Êé¢Á¥¢Âå∫ÂüüÂàÜËß£ÂíåÂü∫‰∫éÊàêÂØπ‰∫§‰∫íÁöÑÊñπÂºèË∞ÉÂ∫¶Â§öÊó†‰∫∫Êú∫ÔºåÂç≥‰æøÂú®ÂºÇÊ≠•Âíå‰∏çÁ®≥ÂÆöÁöÑÈÄö‰ø°Êù°‰ª∂‰∏ã‰πüËÉΩÂêàÁêÜÂàÜÈÖçÊé¢Á¥¢‰ªªÂä°„ÄÇÊ≠§Â§ñÔºåÈÄöËøá‰∏ÄÁßçËÄÉËôëÂÆπÈáèÁöÑËΩ¶ËæÜË∑ØÂæÑÈóÆÈ¢òÔºå‰ºòÂåñ‰∫ÜÊó†‰∫∫Êú∫Áæ§Ë¶ÜÁõñÊú™Áü•Á©∫Èó¥ÁöÑË∑ØÂæÑÔºåÂêàÁêÜÂπ≥Ë°°ÂêÑÊó†‰∫∫Êú∫ÁöÑÂ∑•‰ΩúËΩΩËç∑„ÄÇÂú®ËØ•Á≥ªÁªü‰∏≠ÔºåÊØè‰∏™Êó†‰∫∫Êú∫Ê†πÊçÆÂàÜÈÖçÁöÑ‰ªªÂä°ÔºåÈÄöËøáÂ±ÇÁ∫ßËßÑÂàíÂô®Âø´ÈÄüÂìçÂ∫îÁéØÂ¢ÉÂèòÂåñÔºå‰ªéËÄåÂÆâÂÖ®È´òÊïàÂú∞Êé¢Á¥¢Êú™Áü•Á©∫Èó¥„ÄÇÊó†‰∫∫Êú∫Èó¥ÈÄöËøáËûçÂêàËßÜËßâ„ÄÅÊÉØÊÄßÊµãÈáèÂçïÂÖÉ„ÄÅË∂ÖÂÆΩÂ∏¶Á≠âÂ§öÁßç‰º†ÊÑüÂô®‰ø°ÊÅØÂÆûÁé∞Áõ∏‰∫íÂÆö‰Ωç„ÄÇËØ•Á≥ªÁªüÂú®‰ªøÁúüÂíåÁúüÂÆû‰∏ñÁïåÁöÑ‰∏•Â≥ªÁéØÂ¢É‰∏≠ËøõË°å‰∫ÜÂ§ßÈáèÊµãËØïÔºåÂèØ‰ª•ÈÄÇÂ∫îÂÆ§ÂÜÖ„ÄÅÈáéÂ§ñÁ≠âÂ§öÁßçÂ§çÊùÇÂú∫ÊôØÔºàÂ¶Ç‰∏ãÂõæ 1ÔºâÔºåÊòæÁ§∫Âá∫‰∫ÜÈ´òÊïàÁéá„ÄÅÂèØÊâ©Â±ïÊÄßÂíåÂú®ÈÄö‰ø°ÂèóÈôêÊÉÖÂÜµ‰∏ãÁöÑÁ®≥ÂÅ•ÊÄß„ÄÇËØ•Â∑•‰ΩúÈ¶ñÊ¨°ÂÆûÁé∞‰∫ÜÂú®ÁúüÂÆû‰∏ñÁïåÂ§çÊùÇÂú∫ÊôØ‰∏≠Â§öÊó†‰∫∫Êú∫ÂÆåÂÖ®Âéª‰∏≠ÂøÉÂåñÁöÑÂçè‰ΩúÊé¢Á¥¢ÔºåÂØπ‰∫éÂêÑÁßçÊú∫Âô®‰∫∫Â∫îÁî®ÔºåÂ¶ÇÂ∑°Ê£Ä„ÄÅÊêúÊïëÁ≠âÔºåÂÖ∑ÊúâÈáçË¶ÅÁöÑÂÆûÈôÖÊÑè‰πâ„ÄÇ Journal ÊúüÂàä zhihu: Êú∫Âô®‰∫∫È¢ÜÂüü‰∏ªË¶ÅÊúüÂàäÂèäÂõΩÈôÖ‰ºöËÆÆÊ±áÊÄª 2021 Êú∫Âô®‰∫∫È¢ÜÂüü‰∏ªË¶ÅÂõΩÈôÖ‰ºöËÆÆ‰∏éÊúüÂàäÂàóË°® Science Robotics 26.1 Q1 1Q science IEEE Transactions on Robotics (TRO) IF 9.4, JCR Q1, CAS Q1 Computer Science Applications, Control and Systems Engineering, Electrical and Electronic Engineering ieee Êú∫Âô®‰∫∫È¢ÜÂüüÁöÑËÄÅÁâåÈ°∂Âàä International Journal of Robotics Research (IJRR) 7.5 Q1 Q2 sagepub Êú∫Âô®‰∫∫È¢ÜÂüüÁöÑËÄÅÁâåÈ°∂Âàä Drones IF 4.4, JCR Q1 (Remote Sensing), CAS Q2 mdpi UAV, UAS, RPAS Aerospace Science and Technology IF 5 JCR Q1, CAS Q1 sciencedirect Soft Robotics Q1 Robotics and Computer-Integrated Manufacturing 9.1 Q1 1 Âå∫ Ê≥®ÈáçËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÂíåÊú∫Ê¢∞Âà∂ÈÄ†Á≥ªÁªüÁöÑÁªìÂêà Vehicular Communications (Engineering: Automotive Engineering) IF 5.8, JCR Q1, CAS Q2 sciencedirect IEEE Transactions on Parallel and Distributed Systems (TPDS) ccf a, IF 5.6 ieee Robotics and Computer-Integrated Manufacturing The emphasis of the journal Robotics and Computer-Integrated Manufacturing is on disseminating the application of research to the development of new or improved industrially-relevant robotics, manufacturing technologies, and innovative manufacturing strategies. Preference is given to papers describing original research that includes both theory and experimental validation. Comprehensive review papers on topical issues related to robotics and manufacturing will also be considered. Papers on conventional machining processes, modelling and simulation, supply chain management, and resource optimisation, will generally be considered out of scope, as there are other more appropriate journals in these areas. Overly theoretical or mathematical papers will be directed to other more appropriate journals as well. Original papers are welcomed in the areas of industrial robotics, human-robot collaborative manufacturing, cloud-based manufacturing, cyber-physical production systems, big data analytics in manufacturing, smart mechatronics, machine learning, adaptive and sustainable manufacturing, and other fields involving unique manufacturing technologies. „ÄäÊú∫Âô®‰∫∫‰∏éËÆ°ÁÆóÊú∫ÈõÜÊàêÂà∂ÈÄ†„ÄãÊùÇÂøóÁöÑÈáçÁÇπÊòØ‰º†Êí≠Á†îÁ©∂Âú®Êñ∞ÂûãÊàñÊîπËøõÁöÑÂ∑•‰∏öÁõ∏ÂÖ≥Êú∫Âô®‰∫∫„ÄÅÂà∂ÈÄ†ÊäÄÊúØÂíåÂàõÊñ∞Âà∂ÈÄ†Á≠ñÁï•ÁöÑÂºÄÂèë‰∏≠ÁöÑÂ∫îÁî®„ÄÇ‰ºòÂÖàËÄÉËôëÊèèËø∞ÂéüÂàõÁ†îÁ©∂ÁöÑËÆ∫ÊñáÔºåÂåÖÊã¨ÁêÜËÆ∫ÂíåÂÆûÈ™åÈ™åËØÅ„ÄÇËøòÂ∞ÜËÄÉËôë‰∏éÊú∫Âô®‰∫∫ÂíåÂà∂ÈÄ†Áõ∏ÂÖ≥ÁöÑÁÉ≠Èó®ÈóÆÈ¢òÁöÑÁªºÂêàËØÑËÆ∫ËÆ∫Êñá„ÄÇÂÖ≥‰∫é‰º†ÁªüÂä†Â∑•Â∑•Ëâ∫„ÄÅÂª∫Ê®°Âíå‰ªøÁúü„ÄÅ‰æõÂ∫îÈìæÁÆ°ÁêÜÂíåËµÑÊ∫ê‰ºòÂåñÁöÑËÆ∫ÊñáÈÄöÂ∏∏Ë¢´ËÆ§‰∏∫Ë∂ÖÂá∫ËåÉÂõ¥ÔºåÂõ†‰∏∫Ëøô‰∫õÈ¢ÜÂüüËøòÊúâÂÖ∂‰ªñÊõ¥ÂêàÈÄÇÁöÑÊúüÂàä„ÄÇËøá‰∫éÁêÜËÆ∫ÊàñÊï∞Â≠¶ÁöÑËÆ∫Êñá‰πüÂ∞ÜË¢´ÂÆöÂêëÂà∞ÂÖ∂‰ªñÊõ¥ÂêàÈÄÇÁöÑÊúüÂàä„ÄÇÂ∑•‰∏öÊú∫Âô®‰∫∫„ÄÅ‰∫∫Êú∫ÂçèÂêåÂà∂ÈÄ†„ÄÅ‰∫ëÂà∂ÈÄ†„ÄÅÁΩëÁªúÁâ©ÁêÜÁîü‰∫ßÁ≥ªÁªü„ÄÅÂà∂ÈÄ†Â§ßÊï∞ÊçÆÂàÜÊûê„ÄÅÊô∫ËÉΩÊú∫Áîµ‰∏Ä‰ΩìÂåñ„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅËá™ÈÄÇÂ∫îÂíåÂèØÊåÅÁª≠Âà∂ÈÄ†‰ª•ÂèäÂÖ∂‰ªñÊ∂âÂèäÁã¨ÁâπÈ¢ÜÂüüÁöÑÂéüÂàõËÆ∫ÊñáÂèóÂà∞Ê¨¢ËøéÂà∂ÈÄ†ÊäÄÊúØ„ÄÇ Vehicular Communications (Engineering: Automotive Engineering) types of communications involving vehicles, including vehicle‚Äìto‚Äìvehicle and vehicle‚Äìto‚Äìinfrastructure. The scope includes (but not limited to) the following topics related to vehicular communications: ËØ•ÊúüÂàäÁöÑÁõÆÊ†áÊòØÂèëË°®ËΩ¶ËæÜÈÄö‰ø°È¢ÜÂüüÁöÑÈ´òË¥®ÈáèÂêåË°åËØÑÂÆ°ËÆ∫Êñá„ÄÇËåÉÂõ¥Ê∂µÁõñÊ∂âÂèäËΩ¶ËæÜÁöÑÊâÄÊúâÁ±ªÂûãÁöÑÈÄö‰ø°ÔºåÂåÖÊã¨ËΩ¶ËæÜÂØπËΩ¶ËæÜÂíåËΩ¶ËæÜÂØπÂü∫Á°ÄËÆæÊñΩ„ÄÇËåÉÂõ¥ÂåÖÊã¨Ôºà‰ΩÜ‰∏çÈôê‰∫éÔºâ‰ª•‰∏ã‰∏éËΩ¶ËæÜÈÄö‰ø°Áõ∏ÂÖ≥ÁöÑ‰∏ªÈ¢òÔºö Vehicle to vehicle and vehicle to infrastructure communications ËΩ¶ËæÜÂà∞ËΩ¶ËæÜÂíåËΩ¶ËæÜÂà∞Âü∫Á°ÄËÆæÊñΩÈÄö‰ø° Channel modelling, modulating and coding ‰ø°ÈÅìÂª∫Ê®°„ÄÅË∞ÉÂà∂ÂíåÁºñÁ†Å Congestion Control and scalability issues Êã•Â°ûÊéßÂà∂ÂíåÂèØÊâ©Â±ïÊÄßÈóÆÈ¢ò Protocol design, testing and verification ÂçèËÆÆËÆæËÆ°„ÄÅÊµãËØïÂíåÈ™åËØÅ Routing in vehicular networks ËΩ¶ËΩΩÁΩëÁªú‰∏≠ÁöÑË∑ØÁî± Security issues and countermeasures ÂÆâÂÖ®ÈóÆÈ¢òÂèäÂØπÁ≠ñ Deployment and field testing ÈÉ®ÁΩ≤ÂíåÁé∞Âú∫ÊµãËØï Reducing energy consumption and enhancing safety of vehicles Èôç‰ΩéËÉΩÊ∫êÊ∂àËÄóÂπ∂ÊèêÈ´òËΩ¶ËæÜÂÆâÂÖ®ÊÄß Wireless in‚Äìcar networks Êó†Á∫øËΩ¶ËΩΩÁΩëÁªú Data collection and dissemination methods Êï∞ÊçÆÊî∂ÈõÜÂíå‰º†Êí≠ÊñπÊ≥ï Mobility and handover issues ÁßªÂä®ÊÄßÂíåÁßª‰∫§ÈóÆÈ¢ò Safety and driver assistance applications ÂÆâÂÖ®ÂíåÈ©æÈ©∂ÂëòËæÖÂä©Â∫îÁî® UAV Êó†‰∫∫Êú∫ Underwater communications Ê∞¥‰∏ãÈÄöËÆØ Autonomous cooperative driving Ëá™Âä®ÂçèÂêåÈ©æÈ©∂ Social networks Á§æ‰∫§ÁΩëÁªú Internet of vehicles ËΩ¶ËÅîÁΩë Standardization of protocols ÂçèËÆÆÊ†áÂáÜÂåñ Drones scimagojr Drones (ISSN 2504-446X) is an international, peer-reviewed, open access journal published monthly online. The journal focuses on design and applications of drones, including unmanned aerial vehicle (UAV), Unmanned Aircraft Systems (UAS), and Remotely Piloted Aircraft Systems (RPAS), etc. Likewise, contributions based on unmanned water/underwater drones and unmanned ground vehicles are also welcomed. „ÄäÊó†‰∫∫Êú∫„ÄãÔºàISSN 2504-446XÔºâÊòØ‰∏Ä‰ªΩÂõΩÈôÖÂêåË°åËØÑÂÆ°„ÄÅÂºÄÊîæËé∑ÂèñÊúüÂàäÔºåÊØèÊúàÂú®Á∫øÂá∫Áâà„ÄÇËØ•ÊùÇÂøóÈáçÁÇπÂÖ≥Ê≥®Êó†‰∫∫Êú∫ÁöÑËÆæËÆ°ÂíåÂ∫îÁî®ÔºåÂåÖÊã¨Êó†‰∫∫Êú∫ÔºàUAVÔºâ„ÄÅÊó†‰∫∫Êú∫Á≥ªÁªüÔºàUASÔºâÂíåÈÅ•ÊéßÈ©æÈ©∂È£ûÊú∫Á≥ªÁªüÔºàRPASÔºâÁ≠â„ÄÇÂêåÊ†∑ÔºåÂü∫‰∫éÊó†‰∫∫Ê∞¥‰∏ä/Ê∞¥‰∏ãÊó†‰∫∫Êú∫ÂíåÊó†‰∫∫Âú∞Èù¢ËΩ¶ËæÜÁöÑË¥°ÁåÆ‰πüÂèóÂà∞Ê¨¢Ëøé„ÄÇ IEEE Transactions on Robotics The IEEE Transactions on Robotics (T-RO) publishes fundamental papers on all aspects of Robotics, featuring interdisciplinary approaches from computer science, control systems, electrical engineering, mathematics, mechanical engineering, and other fields. Robots and intelligent machines and systems are critical in areas such as industrial applications; service and personal assistants; surgical operations; space, underwater, and remote exploration; entertainment; safety, search, and rescue; military applications; agriculture applications; and intelligent vehicles. Special emphasis in the T-RO is placed on intelligent machines and systems for unstructured environments, where a significant portion of the environment is unknown and cannot be directly sensed or controlled. IEEE Êú∫Âô®‰∫∫Â≠¶Ê±áÂàä (T-RO) ÂèëË°®Êú∫Âô®‰∫∫Â≠¶ÂêÑ‰∏™ÊñπÈù¢ÁöÑÂü∫Á°ÄËÆ∫ÊñáÔºåÊ∂µÁõñËÆ°ÁÆóÊú∫ÁßëÂ≠¶„ÄÅÊéßÂà∂Á≥ªÁªü„ÄÅÁîµÊ∞îÂ∑•Á®ã„ÄÅÊï∞Â≠¶„ÄÅÊú∫Ê¢∞Â∑•Á®ãÂíåÂÖ∂‰ªñÈ¢ÜÂüüÁöÑË∑®Â≠¶ÁßëÊñπÊ≥ï„ÄÇÊú∫Âô®‰∫∫„ÄÅÊô∫ËÉΩÊú∫Âô®ÂíåÁ≥ªÁªüÂú®Â∑•‰∏öÂ∫îÁî®Á≠âÈ¢ÜÂüüËá≥ÂÖ≥ÈáçË¶ÅÔºõÊúçÂä°ÂíåÁßÅ‰∫∫Âä©ÁêÜÔºõÂ§ñÁßëÊâãÊúØÔºõÂ§™Á©∫„ÄÅÊ∞¥‰∏ãÂíåËøúÁ®ãÊé¢Á¥¢ÔºõÂ®±‰πê;ÂÆâÂÖ®„ÄÅÊêúÁ¥¢ÂíåÊïëÊè¥ÔºõÂÜõ‰∫ãÂ∫îÁî®ÔºõÂÜú‰∏öÂ∫îÁî®ÔºõÂíåÊô∫ËÉΩÊ±ΩËΩ¶„ÄÇ T-RO ÁâπÂà´Âº∫Ë∞ÉÈùûÁªìÊûÑÂåñÁéØÂ¢É‰∏≠ÁöÑÊô∫ËÉΩÊú∫Âô®ÂíåÁ≥ªÁªüÔºåÂÖ∂‰∏≠ÁéØÂ¢ÉÁöÑÂæàÂ§ß‰∏ÄÈÉ®ÂàÜÊòØÊú™Áü•ÁöÑÔºåÊó†Ê≥ïÁõ¥Êé•ÊÑüÁü•ÊàñÊéßÂà∂„ÄÇ Conference ‰ºöËÆÆ IEEE International Conference on Robotics and Automation (ICRA) icra all-proceedings H-Index 222 CCF: b CORE: b QUALIS: a1 Paper Submission Opens 15 July 2024 Paper Submission Deadline 15 September 2024 Notification of paper acceptance/rejection 31 January 2025 7.15 sub open ~ 9.15 sub ddl ~ 1.31 acc/rej ~ 5.19 conf ICRA2024PaperList IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) iros H-Index 65 CCF: c CORE: a QUALIS: a1 2025.03.01 sub ddl ~ 06.30 acc/rej ~ 2025.10.19 conf Robotic: Science and Systems (RSS) rss CORE: a* H-Index 72 1.31 sub ddl ~ 4.10 acc/rej ~ 3.21 conf Conference on Robot Learning (CoRL) corl 4.30 sub ddl ~ 8.1 acc/rej ~ 9.27 conf CAA ‰∏≠ÂõΩËá™Âä®ÂåñÂ≠¶‰ºöÊé®ËçêÂ≠¶ÊúØ‰ºöËÆÆ„ÄÅÁßëÊäÄÊúüÂàäÁõÆÂΩï 2022-12-06 ‰∏≠ÂõΩËá™Âä®ÂåñÂ≠¶‰ºöÊé®ËçêÂ≠¶ÊúØ‰ºöËÆÆ„ÄÅÁßëÊäÄÊúüÂàäÁõÆÂΩïÂèëÂ∏É „Ää‰ºöËÆÆÁõÆÂΩï„ÄãÂàÜ‰∏∫ A Á±ª„ÄÅB Á±ª„ÄÅC Á±ª‰∏âÊ°£„ÄÇA Á±ª‰ª£Ë°®ÂõΩÈôÖ‰∏äÊûÅÂ∞ëÊï∞ÁöÑÈ°∂Á∫ß‰ºöËÆÆÔºõB Á±ª‰ª£Ë°®ÂõΩÈôÖ‰∏äËëóÂêçÂíåÈùûÂ∏∏ÈáçË¶ÅÁöÑ‰ºöËÆÆÔºõC Á±ª‰ª£Ë°®ÂõΩÈôÖÂ≠¶ÊúØÁïåÊâÄËÆ§ÂèØÁöÑÈáçË¶Å‰ºöËÆÆ„ÄÇ„Ää‰ºöËÆÆÁõÆÂΩï„ÄãÂåÖÂê´Ëá™Âä®ÂåñÂ≠¶ÁßëÈ¢ÜÂüü 12 ‰∏™ÁªÜÂàÜÈ¢ÜÂüüÁöÑ 230 ‰∏™Â≠¶ÊúØ‰ºöËÆÆÔºå12 ‰∏™ÁªÜÂàÜÈ¢ÜÂüü‰∏∫Ôºö Ôºà1ÔºâÊéßÂà∂ÁêÜËÆ∫‰∏éÊéßÂà∂Â∑•Á®ãÔºõ Ôºà2ÔºâÊ®°ÂºèËØÜÂà´‰∏éÊô∫ËÉΩÁ≥ªÁªüÔºõ Ôºà3ÔºâÊ£ÄÊµãÊäÄÊúØ‰∏éËá™Âä®ÂåñË£ÖÁΩÆÔºõ Ôºà4ÔºâÂØºËà™„ÄÅÂà∂ÂØº‰∏éÊéßÂà∂Ôºõ Ôºà5ÔºâÁ≥ªÁªüÂ∑•Á®ãÔºõ Ôºà6ÔºâÁîüÁâ©‰ø°ÊÅØÂ≠¶Ôºõ Ôºà7Ôºâ‰ºÅ‰∏ö‰ø°ÊÅØÂåñÔºõ Ôºà8ÔºâÊô∫ËÉΩÊÑüÁü•‰∏éËá™‰∏ªÊéßÂà∂Ôºõ Ôºà9ÔºâÊú∫Âô®‰∫∫‰∏éÊó†‰∫∫Á≥ªÁªüÔºõ Ôºà10Ôºâ‰ªøÁúüÁßëÂ≠¶‰∏éÂ∑•Á®ãÔºõ Ôºà11ÔºâÁªºÂêà‰∫§ÂèâÔºõ Ôºà12ÔºâÂâçÊ≤øÈ´òÁ´Ø„ÄÇ „ÄäÊúüÂàäÁõÆÂΩï„ÄãÂª∂Áª≠ 2018 Âπ¥ÁâàÔºåÂàÜ‰∏∫ A Á±ª„ÄÅB Á±ª‰∏§Ê°£ÔºåÂÖ± 315 ‰∏™ÂàäÁâ©ÔºåA Á±ª‰ª£Ë°®ÂõΩÂÜÖÂ§ñÈ°∂Á∫ßÂ≠¶ÊúØÂàäÁâ©ÔºåB Á±ª‰ª£Ë°®ÂõΩÂÜÖÂ§ñËëóÂêçÂ≠¶ÊúØÂàäÁâ©„ÄÇÂÖ∂‰∏≠ÔºåA Á±ª‰∏≠Ââç 20%ÁöÑÈ°∂Â∞ñÊúüÂàäÂàíÂàÜ‰∏∫ A+Á±ªÔºå‰ª•ÊúüÂõΩÂÜÖÂ≠¶ÊúØÊúüÂàäÂØπÊ†áÁ™ÅÁ†¥„ÄÇ Tools RealSense Driver github source installation The shared object will be installed in /usr/local/lib, header files in /usr/local/include. sudo apt install libpcl-dev Mavros: Micro Air Vehicle Robot Operating System MAVLink extendable communication node for ROS with proxy for Ground Control Station. This package provides communication driver for various autopilots with MAVLink communication protocol. Additional it provides UDP MAVLink bridge for ground control stations (e.g. QGroundControl). mavros Áî®‰∫éÊó†‰∫∫Êú∫ÈÄö‰ø°ÔºåÂèØ‰ª•Â∞ÜÈ£ûÊéß‰∏é‰∏ªÊéßÁöÑ‰ø°ÊÅØËøõË°å‰∫§Êç¢ ceres-solver: googlesource An open source lib for modeling and solving large, complicated optimization problems. It can be used to solve Non-linear Least Squares problems with bounds constraints and general unconstrained optimization problems. ÂÆÉÂèØÁî®‰∫éÊ±ÇËß£ÂÖ∑ÊúâËæπÁïåÁ∫¶ÊùüÁöÑÈùûÁ∫øÊÄßÊúÄÂ∞è‰∫å‰πòÊ≥ïÈóÆÈ¢òÂíå‰∏ÄËà¨ÁöÑÊó†Á∫¶Êùü‰ºòÂåñÈóÆÈ¢ò„ÄÇ glog C++ implementation of the Google logging module. pip uninstall em pip install empy # install ros noetic dependencies # [ddynamic_reconfigure](https://github.com/pal-robotics/ddynamic_reconfigure) catkin_make_isolated --install -DPYTHON_EXECUTABLE=/usr/bin/python3 --force-cmake # must be: dont be higher than 0.10.0 Package: liblog4cxx-dev Version: 0.10.0-15ubuntu2 Concepts SDF Signed Distance Field Á¨¶Âè∑Ë∑ùÁ¶ªÂú∫ ÊèèËø∞ÊàñÂ≠òÂÇ®ÁÇπ‰∏éÂú∫ÊôØÁâ©‰ΩìË°®Èù¢‰ΩçÁΩÆÂÖ≥Á≥ªÁöÑÊñπÂºè ÂΩìÁÇπÂú®Áâ©‰ΩìÁöÑÂÜÖÈÉ®Êó∂Ë∑ùÁ¶ª‰∏∫Ë¥üÊï∞ÔºåÂú®Áâ©‰ΩìË°®Èù¢Êó∂Ë∑ùÁ¶ª‰∏∫ 0ÔºåÂú®Áâ©‰ΩìÂ§ñÈÉ®Êó∂Ë∑ùÁ¶ª‰∏∫Ê≠£Êï∞ ‰ΩúÁî®: Áî®‰∫éÂø´ÈÄüÊü•ËØ¢‰ªªÊÑè‰∏ÄÁÇπÂà∞Âú∫ÊôØ‰∏≠Áâ©‰ΩìË°®Èù¢ÁöÑÊúÄÁü≠Ë∑ùÁ¶ª Â¶Ç‰ΩïÂª∫Á´ãÂíå‰ΩøÁî®Ôºü Intro to Signed Distance Fields Gradient-based trajectory planning Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®ËøπËßÑÂàí blog: Gradient-based trajectory planning CHOMP: Gradient Optimization Techniques for Efficient Motion Planning GPT4o: Gradient-Based Trajectory Planning: Overview Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®ËøπËßÑÂàíÔºöÊ¶ÇËø∞ Gradient-based trajectory planning is a method used to determine a path or trajectory for an object (like a robot or vehicle) by iteratively improving an initial trajectory based on gradient information. The goal is to optimize a trajectory with respect to certain objectives, such as minimizing energy, avoiding obstacles, or reaching a target point efficiently. Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®ËøπËßÑÂàíÊòØ‰∏ÄÁßçÈÄöËøáÂü∫‰∫éÊ¢ØÂ∫¶‰ø°ÊÅØËø≠‰ª£ÊîπËøõÂàùÂßãËΩ®ËøπÊù•Á°ÆÂÆöÁâ©‰ΩìÔºàÂ¶ÇÊú∫Âô®‰∫∫ÊàñËΩ¶ËæÜÔºâÁöÑË∑ØÂæÑÊàñËΩ®ËøπÁöÑÊñπÊ≥ï„ÄÇÁõÆÊ†áÊòØÈíàÂØπÊüê‰∫õÁõÆÊ†á‰ºòÂåñËΩ®ËøπÔºå‰æãÂ¶ÇÊúÄÂ∞èÂåñËÉΩÈáè„ÄÅÈÅøÂºÄÈöúÁ¢çÁâ©ÊàñÊúâÊïàÂú∞Âà∞ËææÁõÆÊ†áÁÇπ„ÄÇ Key Thoughts of the Method ËØ•ÊñπÊ≥ïÁöÑÊ†∏ÂøÉÊÄùÊÉ≥ Optimization via Gradients: ÈÄöËøáÊ¢ØÂ∫¶ËøõË°å‰ºòÂåñÔºö The trajectory is treated as a variable in an optimization problem. ËΩ®ËøπË¢´ËßÜ‰∏∫‰ºòÂåñÈóÆÈ¢ò‰∏≠ÁöÑÂèòÈáè„ÄÇ Gradients of a cost function (e.g., distance to obstacles, time taken, energy expenditure) with respect to the trajectory are computed and used to iteratively improve the trajectory. ËÆ°ÁÆóÊàêÊú¨ÂáΩÊï∞Áõ∏ÂØπ‰∫éËΩ®ËøπÁöÑÊ¢ØÂ∫¶Ôºà‰æãÂ¶ÇÔºåÂà∞ÈöúÁ¢çÁâ©ÁöÑË∑ùÁ¶ª„ÄÅÊâÄËä±Ë¥πÁöÑÊó∂Èó¥„ÄÅËÉΩÈáèÊ∂àËÄóÔºâÂπ∂Áî®‰∫éËø≠‰ª£Âú∞ÊîπËøõËΩ®Ëøπ„ÄÇ Cost Function Design: ‰ª£‰ª∑ÂáΩÊï∞ËÆæËÆ°Ôºö A carefully designed cost function combines all relevant objectives, such as collision avoidance, smoothness, and time efficiency. Á≤æÂøÉËÆæËÆ°ÁöÑÊàêÊú¨ÂáΩÊï∞ÁªìÂêà‰∫ÜÊâÄÊúâÁõ∏ÂÖ≥ÁõÆÊ†áÔºå‰æãÂ¶ÇÈÅøÂÖçÁ¢∞Êíû„ÄÅÂπ≥ÊªëÂ∫¶ÂíåÊó∂Èó¥ÊïàÁéá„ÄÇ Commonly, the cost function includes terms for proximity to obstacles, adherence to desired dynamics, and overall trajectory smoothness. ÈÄöÂ∏∏ÔºåÊàêÊú¨ÂáΩÊï∞ÂåÖÊã¨‰∏éÈöúÁ¢çÁâ©ÁöÑÊé•ËøëÁ®ãÂ∫¶„ÄÅÂØπÊâÄÈúÄÂä®ÊÄÅÁöÑÈÅµÂÆà‰ª•ÂèäÊÄª‰ΩìËΩ®ËøπÂπ≥ÊªëÂ∫¶Á≠âÈ°π„ÄÇ Iterative Adjustment: Ëø≠‰ª£Ë∞ÉÊï¥Ôºö Starting with an initial trajectory, gradient descent or a similar optimization algorithm adjusts the trajectory step-by-step. ‰ªéÂàùÂßãËΩ®ËøπÂºÄÂßãÔºåÊ¢ØÂ∫¶‰∏ãÈôçÊàñÁ±ª‰ººÁöÑ‰ºòÂåñÁÆóÊ≥ïÈÄêÊ≠•Ë∞ÉÊï¥ËΩ®Ëøπ„ÄÇ Constraints (e.g., dynamics, kinematics) are often included to ensure feasible and safe paths. ÈÄöÂ∏∏ÂåÖÊã¨Á∫¶ÊùüÔºà‰æãÂ¶ÇÂä®ÂäõÂ≠¶„ÄÅËøêÂä®Â≠¶Ôºâ‰ª•Á°Æ‰øùÂèØË°å‰∏îÂÆâÂÖ®ÁöÑË∑ØÂæÑ„ÄÇ Scalability and Flexibility: ÂèØÊâ©Â±ïÊÄßÂíåÁÅµÊ¥ªÊÄßÔºö The method can handle high-dimensional trajectory spaces, making it suitable for robotic arms, drones, and autonomous vehicles. ËØ•ÊñπÊ≥ïÂèØ‰ª•Â§ÑÁêÜÈ´òÁª¥ËΩ®ËøπÁ©∫Èó¥Ôºå‰ΩøÂÖ∂ÈÄÇÁî®‰∫éÊú∫Ê¢∞ËáÇ„ÄÅÊó†‰∫∫Êú∫ÂíåËá™Âä®È©æÈ©∂ËΩ¶ËæÜ„ÄÇ Advantages ‰ºòÁÇπ Adaptability: Gradient-based methods can adapt trajectories to dynamic environments by continuously updating the solution as conditions change. ÈÄÇÂ∫îÊÄßÔºöÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑÊñπÊ≥ïÂèØ‰ª•ÈÄöËøáÈöèÁùÄÊù°‰ª∂ÂèòÂåñ‰∏çÊñ≠Êõ¥Êñ∞Ëß£ÂÜ≥ÊñπÊ°àÊù•‰ΩøËΩ®ËøπÈÄÇÂ∫îÂä®ÊÄÅÁéØÂ¢É„ÄÇ Optimality: These methods aim to find a locally (and sometimes globally) optimal solution based on the cost function. ÊúÄ‰ºòÊÄßÔºöËøô‰∫õÊñπÊ≥ïÊó®Âú®Âü∫‰∫éÊàêÊú¨ÂáΩÊï∞ÊâæÂà∞Â±ÄÈÉ®ÔºàÊúâÊó∂ÊòØÂÖ®Â±ÄÔºâÊúÄ‰ºòËß£„ÄÇ Mathematical Rigorousness: Strong theoretical foundation allows for analysis and guarantees under certain conditions. Êï∞Â≠¶‰∏•Ë∞®ÊÄßÔºöÂº∫Â§ßÁöÑÁêÜËÆ∫Âü∫Á°ÄÂèØ‰ª•Âú®‰∏ÄÂÆöÊù°‰ª∂‰∏ãËøõË°åÂàÜÊûêÂíå‰øùËØÅ„ÄÇ Wide Applicability: Useful for a range of domains like robotics, autonomous driving, and animation. ÂπøÊ≥õÁöÑÈÄÇÁî®ÊÄßÔºöÂèØÁî®‰∫éÊú∫Âô®‰∫∫„ÄÅËá™Âä®È©æÈ©∂ÂíåÂä®ÁîªÁ≠â‰∏ÄÁ≥ªÂàóÈ¢ÜÂüü„ÄÇ Smoothness: Incorporating smoothness constraints often results in trajectories that are smooth and practical for real-world use. Âπ≥ÊªëÂ∫¶ÔºöÁªìÂêàÂπ≥ÊªëÂ∫¶Á∫¶ÊùüÈÄöÂ∏∏‰ºö‰∫ßÁîüÂπ≥Êªë‰∏îÈÄÇÂêàÂÆûÈôÖ‰ΩøÁî®ÁöÑËΩ®Ëøπ„ÄÇ Disadvantages Áº∫ÁÇπ Local Minima: The method may converge to a suboptimal solution due to the presence of local minima in the cost function. Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºöÁî±‰∫éÊàêÊú¨ÂáΩÊï∞‰∏≠Â≠òÂú®Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåËØ•ÊñπÊ≥ïÂèØËÉΩ‰ºöÊî∂ÊïõÂà∞Ê¨°‰ºòËß£„ÄÇ Computational Cost: Computing gradients and solving high-dimensional optimization problems can be computationally expensive. ËÆ°ÁÆóÊàêÊú¨ÔºöËÆ°ÁÆóÊ¢ØÂ∫¶ÂíåËß£ÂÜ≥È´òÁª¥‰ºòÂåñÈóÆÈ¢òÁöÑËÆ°ÁÆóÊàêÊú¨ÂèØËÉΩÂæàÈ´ò„ÄÇ Dependence on Initial Guess: Performance and results heavily depend on the quality of the initial trajectory. ÂØπÂàùÂßãÁåúÊµãÁöÑ‰æùËµñÔºöÊÄßËÉΩÂíåÁªìÊûúÂú®ÂæàÂ§ßÁ®ãÂ∫¶‰∏äÂèñÂÜ≥‰∫éÂàùÂßãËΩ®ËøπÁöÑË¥®Èáè„ÄÇ Complex Cost Function Design: Designing an appropriate and effective cost function can be challenging and problem-specific. Â§çÊùÇÁöÑÊàêÊú¨ÂáΩÊï∞ËÆæËÆ°ÔºöËÆæËÆ°ÈÄÇÂΩì‰∏îÊúâÊïàÁöÑÊàêÊú¨ÂáΩÊï∞ÂèØËÉΩÂÖ∑ÊúâÊåëÊàòÊÄßÂπ∂‰∏îÈíàÂØπÂÖ∑‰ΩìÈóÆÈ¢ò„ÄÇ Dynamic Environments: Handling highly dynamic and uncertain environments can be difficult without extensive computational resources. Âä®ÊÄÅÁéØÂ¢ÉÔºöÂ¶ÇÊûúÊ≤°ÊúâÂ§ßÈáèÁöÑËÆ°ÁÆóËµÑÊ∫êÔºåÂ§ÑÁêÜÈ´òÂ∫¶Âä®ÊÄÅÂíå‰∏çÁ°ÆÂÆöÁöÑÁéØÂ¢ÉÂèØËÉΩ‰ºöÂæàÂõ∞Èöæ„ÄÇ Origin and Key Papers Ëµ∑Ê∫êÂíåÂÖ≥ÈîÆËÆ∫Êñá The principles of gradient-based optimization trace back to classical optimization theory. In trajectory planning, this concept has been extensively developed in robotics and control literature. A key early reference is \"CHOMP: Covariant Hamiltonian Optimization for Motion Planning\" by Marc Toussaint and Sachin Chitta, which formalized gradient-based optimization in the context of trajectory planning. Other significant contributions include works on STOMP (Stochastic Trajectory Optimization for Motion Planning) and TrajOpt (Trajectory Optimization). Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑ‰ºòÂåñÂéüÁêÜÂèØ‰ª•ËøΩÊ∫ØÂà∞ÁªèÂÖ∏‰ºòÂåñÁêÜËÆ∫„ÄÇ Âú®ËΩ®ËøπËßÑÂàí‰∏≠ÔºåËøô‰∏™Ê¶ÇÂøµÂ∑≤Âú®Êú∫Âô®‰∫∫ÊäÄÊúØÂíåÊéßÂà∂ÊñáÁåÆ‰∏≠ÂæóÂà∞ÂπøÊ≥õÂèëÂ±ï„ÄÇ ‰∏Ä‰∏™ÈáçË¶ÅÁöÑÊó©ÊúüÂèÇËÄÉÊñáÁåÆÊòØ Marc Toussaint Âíå Sachin Chitta Êí∞ÂÜôÁöÑ‚ÄúCHOMPÔºöËøêÂä®ËßÑÂàíÁöÑÂçèÂèòÂìàÂØÜÈ°ø‰ºòÂåñ‚Äù ÔºåÂÆÉÂú®ËΩ®ËøπËßÑÂàíÁöÑËÉåÊôØ‰∏ãÂΩ¢ÂºèÂåñ‰∫ÜÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑ‰ºòÂåñ„ÄÇ ÂÖ∂‰ªñÈáçË¶ÅË¥°ÁåÆÂåÖÊã¨STOMPÔºàËøêÂä®ËßÑÂàíÈöèÊú∫ËΩ®Ëøπ‰ºòÂåñÔºâÂíåTrajOptÔºàËΩ®Ëøπ‰ºòÂåñÔºâÊñπÈù¢ÁöÑÂ∑•‰Ωú„ÄÇ Applications Â∫îÁî®È¢ÜÂüü Autonomous Vehicles: Planning collision-free and efficient routes in complex environments. Robotics: Motion planning for robotic arms, humanoid robots, and drones. Computer Graphics: Smooth trajectory generation for animations. Space Exploration: Path optimization for spacecraft and planetary rovers. Medical Robotics: Trajectory planning for surgical robots to ensure precision. ÂåªÁñóÊú∫Âô®‰∫∫ÔºöÊâãÊúØÊú∫Âô®‰∫∫ÁöÑËΩ®ËøπËßÑÂàí‰ª•Á°Æ‰øùÁ≤æÂ∫¶„ÄÇ Ëá™Âä®È©æÈ©∂ËΩ¶ËæÜÔºöÂú®Â§çÊùÇÁéØÂ¢É‰∏≠ËßÑÂàíÊó†Á¢∞Êíû‰∏îÈ´òÊïàÁöÑË∑ØÁ∫ø„ÄÇ Êú∫Âô®‰∫∫ÊäÄÊúØÔºöÊú∫Ê¢∞ËáÇ„ÄÅ‰∫∫ÂΩ¢Êú∫Âô®‰∫∫ÂíåÊó†‰∫∫Êú∫ÁöÑËøêÂä®ËßÑÂàí„ÄÇ ËÆ°ÁÆóÊú∫ÂõæÂΩ¢Â≠¶ÔºöÂä®ÁîªÁöÑÂπ≥ÊªëËΩ®ËøπÁîüÊàê„ÄÇ Â§™Á©∫Êé¢Á¥¢ÔºöËà™Â§©Âô®ÂíåË°åÊòüÊº´Ê∏∏Âô®ÁöÑË∑ØÂæÑ‰ºòÂåñ„ÄÇ Related Techniques Áõ∏ÂÖ≥ÊäÄÊúØ Gradient-based trajectory planning is part of a broader class of optimization-based motion planning techniques, including: Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®ËøπËßÑÂàíÊòØÊõ¥ÂπøÊ≥õÁöÑÂü∫‰∫é‰ºòÂåñÁöÑËøêÂä®ËßÑÂàíÊäÄÊúØÁöÑ‰∏ÄÈÉ®ÂàÜÔºåÂåÖÊã¨Ôºö Sampling-based Planning (e.g., RRT, PRM): Focus on randomly sampling the configuration space. Âü∫‰∫éÈááÊ†∑ÁöÑËßÑÂàíÔºà‰æãÂ¶ÇÔºåRRT„ÄÅPRMÔºâ ÔºöÈáçÁÇπÊòØÂØπÈÖçÁΩÆÁ©∫Èó¥ËøõË°åÈöèÊú∫ÈááÊ†∑„ÄÇ Optimization-based Planning (e.g., CHOMP, STOMP): Emphasize iterative refinement using optimization. Âü∫‰∫é‰ºòÂåñÁöÑËßÑÂàíÔºà‰æãÂ¶Ç CHOMP„ÄÅSTOMPÔºâ ÔºöÂº∫Ë∞É‰ΩøÁî®‰ºòÂåñËøõË°åËø≠‰ª£ÁªÜÂåñ„ÄÇ Machine Learning Approaches: Use learned models to assist or replace traditional optimization techniques. Êú∫Âô®Â≠¶‰π†ÊñπÊ≥ïÔºö‰ΩøÁî®Â≠¶‰π†Ê®°ÂûãÊù•ËæÖÂä©ÊàñÂèñ‰ª£‰º†ÁªüÁöÑ‰ºòÂåñÊäÄÊúØ„ÄÇ Misc È´òËÄÅÂ∏àËÆ§‰∏∫Ôºö Science RoboticsÔºöËÆ§ÂèØÂ∫¶È´òÔºåÂ¶ÇÊûúÊúâÊØîËæÉÂ•ΩÁöÑÁßëÁ†îÂ∑•‰ΩúÔºåËÇØÂÆöÊòØË¶ÅÂÜ≤‰∏Ä‰∏ãÊäïÁ®øËøô‰∏™ÊúüÂàäÁöÑ TRO (IEEE Transactions on RoboticsÔºâ Âíå IJRR (The International Journal of Robotics ResearchÔºâËøô‰∏§‰∏™Â±û‰∫éÊØîËæÉÁ°¨Ê†∏ÁöÑÊúüÂàäÔºå‰πüÈùûÂ∏∏Â•Ω JFR (Journal of Field Robotics) ÊØîËæÉ‰æßÈáç‰∫éÈáéÂ§ñÂÆûÈ™åÔºå‰ΩÜÂêéÈù¢ÈáçÁªÑ‰∫ÜÔºåÂèòÂåñÊØîËæÉÂ§ß RAL (IEEE Robotics & Automation Letters) ÈÄöÂ∏∏Êù•ËØ¥Â¶ÇÊûú‰∏Ä‰∏™Â∑•‰ΩúÊØîËæÉÂÆåÊï¥Ôºå‰πüË∂ÖËøá‰∫Ü‰∏ÄËà¨ÁöÑ conference ÁöÑ‰ºöËÆÆÁöÑÔºåÁ®çÊúâÁÇπÁ®ãÂ∫¶ÁöÑËØùÔºå‰πüÂèØ‰ª•Êäï RALÔºåËøô‰∏™‰πüÊòØ‰∏Ä‰∏™Âæà‰∏ì‰∏öÂæàÂ•ΩÁöÑÊúüÂàä "},"Learn/LearnDrones/FastDrone-250.html":{"url":"Learn/LearnDrones/FastDrone-250.html","title":"FastDrone-250","keywords":"","body":"Fast-Drone 250 eigen error: no match for ‚Äòoperator=‚Äô Important: lower eigen from 3.4.0 to 3.3.7 lower liblog4cxx from 1.0.0 to 0.10.0 dependent ros package (noetic): control_toolbox - melodic-devel ddynamic_reconfigure - kinetic-devel geographic_info - master geometry2 - noetic-devel mavlink-gbp-release - release/noetic/mavlink mavros - master pcl_msgs - noetic-devel perception_pcl - melodic-devel realtime_tools - melodic-devel unique_identifier - master in your catkin workspace: catkin_make_isolated --install \\ -DCMAKE_BUILD_TYPE=Release \\ -DPYTHON_EXECUTABLE=/usr/bin/python3 "},"Learn/LearnDrones/Planner/FastPlanner-2019.html":{"url":"Learn/LearnDrones/Planner/FastPlanner-2019.html","title":"FastPlanner-2019","keywords":"","body":"Fast Planner 2019 B. Zhou, F. Gao, L. Wang, C. Liu, and S. Shen, Robust and efficient quadrotor trajectory generation for fast autonomous flight, IEEE Robotics and Automation Letters, vol. 4, no. 4, pp. 3529‚Äì3536, 2019 "},"Learn/LearnDrones/Planner/EGO-Swarm-2021.html":{"url":"Learn/LearnDrones/Planner/EGO-Swarm-2021.html","title":"EGO-Swarm-2021","keywords":"","body":"EGO-Swarm-21 Êú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßçÂéª‰∏≠ÂøÉÂåñÁöÑ„ÄÅÂºÇÊ≠•ÁöÑÁ≥ªÁªüÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåÁî®‰∫é‰ªÖÂà©Áî®Êú∫ËΩΩËµÑÊ∫êÂú®ÈöúÁ¢çÁâ©‰∏∞ÂØåÁöÑÊú™Áü•Âú∫ÊôØ‰∏≠ÂÆûÁé∞Â§öÊú∫Âô®‰∫∫Ëá™‰∏ªÂØºËà™„ÄÇËßÑÂàíÁ≥ªÁªüÊòØÂú®Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑÂ±ÄÈÉ®ËßÑÂàíÊ°ÜÊû∂‰∏ãÂà∂ÂÆöÁöÑÔºåÈÄöËøáÂ∞ÜÁ¢∞ÊíûÈ£éÈô©Ë°®Ëø∞‰∏∫ÈùûÁ∫øÊÄß‰ºòÂåñÈóÆÈ¢òÁöÑÊÉ©ÁΩöÊù•ÈÅøÂÖçÁ¢∞Êíû„ÄÇ‰∏∫‰∫ÜÊèêÈ´òÈ≤ÅÊ£íÊÄßÂπ∂ÊëÜËÑ±Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåÊàë‰ª¨ÈááÁî®‰∫Ü‰∏ÄÁßçËΩªÈáèÁ∫ßÊãìÊâëËΩ®ËøπÁîüÊàêÊñπÊ≥ï„ÄÇÁÑ∂ÂêéÔºåÊô∫ËÉΩ‰ΩìÔºàAgentÔºâÂà©Áî®‰∏çÂèØÈù†ÁöÑËΩ®ËøπÂÖ±‰∫´ÁΩëÁªúÔºåÂú®Âá†ÊØ´ÁßíÂÜÖÁîüÊàêÂÆâÂÖ®„ÄÅÂπ≥ÊªëÂíåÂä®ÊÄÅÂèØË°åÁöÑËΩ®Ëøπ„ÄÇÈÄöËøá‰ΩøÁî®Ê∑±Â∫¶ÂõæÂÉè‰∏≠ÁöÑÊô∫ËÉΩ‰ΩìÊ£ÄÊµãÊù•Á∫†Ê≠£Êô∫ËÉΩ‰Ωì‰πãÈó¥ÁöÑÁõ∏ÂØπÂÆö‰ΩçÊºÇÁßª„ÄÇÊàë‰ª¨ÁöÑÊñπÊ≥ïÂú®Ê®°ÊãüÂíåÂÆûÈôÖÂÆûÈ™å‰∏≠ÈÉΩÂæóÂà∞‰∫ÜÈ™åËØÅ„ÄÇÊ∫ê‰ª£Á†ÅÂ∑≤ÂèëÂ∏ÉÔºå‰æõÁ§æÂå∫ÂèÇËÄÉ„ÄÇ nontriviality of obstacle parameterization ÈöúÁ¢çÁâ©ÂèÇÊï∞ÂåñÁöÑÂ§çÊùÇÊÄß limited sensing range ÊúâÈôêÁöÑÊÑüÁü•ËåÉÂõ¥ unreliable and bandwidth limited communication ‰∏çÂèØÈù†ÂíåÂ∏¶ÂÆΩÊúâÈôêÁöÑÈÄö‰ø° positioning drift caused by inconsistent localization ‰∏ç‰∏ÄËá¥ÂÆö‰ΩçÂºïËµ∑ÁöÑ‰ΩçÁΩÆÊºÇÁßª ÊãìÊâëËßÑÂàíÂíå‰∫íÂä®ÈÅøÈöú 1 Introduction ÂõõÊóãÁøºÊú∫ÁöÑÁÅµÊ¥ªÊÄß‰ΩøÂæóËØ•Êú∫Âô®ËÉΩÂ§üÂú®Êú™Áü•ÁéØÂ¢É‰∏≠ËøõË°åÂçï‰∏ÄÊú∫Âô®Ëá™‰∏ªÂØºËà™ÔºåÂπ∂Âú®ÂºÄÊîæÊàñÂ∑≤Áü•È¢ÜÂüü‰∏≠ËøõË°åÂ§öÊú∫Á≤æÁ°ÆÁºñÈòüÊéßÂà∂„ÄÇÁÑ∂ËÄåÔºåÂæàÂ∞ëÊúâÂ∑•‰ΩúÂêåÊó∂ÁªìÂêàËøô‰∏§ËÄÖÊù•Â±ïÁ§∫ËÉΩÂ§üÂú®ÂÖ±‰∫´Áõ∏ÂêåÊú™Áü•Á©∫Èó¥ÁöÑÂõõÊóãÁøºÊú∫Áæ§‰Ωì‰∏≠ÂØºËà™ÁöÑÁúüÂÆûÁ≥ªÁªüÔºåÂ∞§ÂÖ∂ÊòØ‰ªÖÈÄöËøáÊú∫ËΩΩÂ§ÑÁêÜ„ÄÇÈÉ®ÁΩ≤Â§ö‰∏™ÂõõÊóãÁøºÊú∫Âú®Êú™Áü•ÁéØÂ¢É‰∏≠Â≠òÂú®ÁöÑÂõ∞ÈöæÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÈöúÁ¢çÁâ©ÂèÇÊï∞ÂåñÁöÑÂ§çÊùÇÊÄß„ÄÅÊúâÈôêÁöÑÊÑüÁü•ËåÉÂõ¥„ÄÅ‰∏çÂèØÈù†ÂíåÂ∏¶ÂÆΩÊúâÈôêÁöÑÈÄö‰ø°‰ª•ÂèäÁî±‰∏ç‰∏ÄËá¥ÂÆö‰ΩçÂºïËµ∑ÁöÑ‰ΩçÁΩÆÊºÇÁßª„ÄÇ‰∏Ä‰∫õÁõ∏ÂÖ≥Â∑•‰ΩúÔºå‰æãÂ¶ÇÔºåÊé®Ëøõ‰∫ÜÁúüÂÆûÁöÑÂõõÊóãÁøºÊú∫Áæ§‰ΩìËÉΩÂ§üÈÅøÈöúÁöÑËÉΩÂäõ„ÄÇÁÑ∂ËÄåÔºå‰∏äËø∞Âõ∞ÈöæÂú®Â§ßÂ§öÊï∞‰πãÂâçÁöÑÂ∑•‰Ωú‰∏≠ÁªèÂ∏∏Ë¢´ÂøΩÁï•ÔºåÂú®ËøêÂä®ÊçïÊçâÁ≥ªÁªüÊàñÁ∫ØÁ≤πÊ®°Êãü‰∏≠ÔºåÈôêÂà∂‰∫ÜÂÆÉ‰ª¨ÁÆóÊ≥ïÂú®ÂÆûË∑µ‰∏≠ÁöÑÂ∫îÁî®„ÄÇ Êú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßçÁ≥ªÁªüÊÄßÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåËÉΩÂ§üÂú®Â≠òÂú®‰∏äËø∞Âõ∞ÈöæÁöÑÊã•Êå§ÁéØÂ¢É‰∏≠ÂØπÂõõÊóãÁøºÊú∫Áæ§‰ΩìËøõË°åÈ´òÊÄßËÉΩË°åËøõ„ÄÇÊ≠§Â§ñÔºåÂÆÉ‰∏çÈúÄË¶ÅÂ§ñÈÉ®ÂÆö‰ΩçÂíåËÆ°ÁÆóÊàñÈ¢ÑÂÖàÊûÑÂª∫ÁöÑÂú∞Âõæ„ÄÇÊâÄÊèêÂá∫ÁöÑÁ≥ªÁªüÂêç‰∏∫$\\textbf{EGO-Swarm}$ÔºåÊòØÊàë‰ª¨ÂÖàÂâçÂ∑•‰Ωú ESDF-free Gradient-based lOcal planner (EGO-Planner) ÁöÑÊâ©Â±ïÔºå‰∏∫Êú™Áü•ÁéØÂ¢É‰∏≠Âçï‰∏ÄÂõõÊóãÁøºÊú∫ÁöÑÊú∫ËΩΩÂ±ÄÈÉ®ËßÑÂàíÂ•†ÂÆö‰∫ÜÂùöÂÆûÁöÑÂü∫Á°Ä„ÄÇËØ•Êâ©Â±ïÂåÖÊã¨‰∏§‰∏™ÈÉ®ÂàÜÔºåÊãìÊâëËßÑÂàíÂíå‰∫íÂä®ÈÅøÈöú„ÄÇ Â¶ÇÂõæ 3 ÊâÄÁ§∫ÔºåÈùûÂá∏ÈÖçÁΩÆÁ©∫Èó¥ÂèØËÉΩ‰ºöÂØºËá¥‰∏çÂ∏åÊúõÁöÑË°å‰∏∫Ôºå‰æãÂ¶ÇÂä®ÂäõÂ≠¶‰∏çÂèØË°åÊÄßÊàñÊã•Êå§ÂØºËà™„ÄÇÂõ†Ê≠§ÔºåÂÉèÊãìÊâëËßÑÂàíËøôÊ†∑ÁöÑÁ≠ñÁï•ÂèØ‰ª•ÊúâÂä©‰∫éÊëÜËÑ±Â±ÄÈÉ®ÊúÄÂ∞èÂÄº„ÄÇÂü∫‰∫é EGO-Planner ‰∏≠ÁöÑÁ¢∞ÊíûÊàêÊú¨ÂÖ¨ÂºèÔºåÂâçÁ´ØÊãìÊâëË∑ØÂæÑÊêúÁ¥¢ÊòØÈöêÂê´ÂÆåÊàêÁöÑÔºåÂõ†Ê≠§Âá†‰πé‰∏çÈúÄË¶ÅËÆ°ÁÆó„ÄÇ ÈÄöËøáÂ∞ÜÁæ§‰ΩìÁ¢∞ÊíûÁöÑÂä†ÊùÉÊÉ©ÁΩöÊ∑ªÂä†Âà∞ÁõÆÊ†áÂáΩÊï∞‰∏≠ÔºåÂÆûÁé∞‰∫ÜÂàÜÊï£ÁöÑ‰∫íÂä®ÈÅøÈöú„ÄÇËøô‰∏™ÊÉ©ÁΩöÊòØÈÄöËøáÂ∞ÜÊú™Êù•‰∏ÄÊÆµÊó∂Èó¥ÂÜÖÁöÑÊô∫ËÉΩ‰ΩìÂàÜÂ∏É‰∏éÊ≠£Âú®‰ºòÂåñÁöÑËΩ®ËøπËøõË°åÊØîËæÉÊù•ËØÑ‰º∞ÁöÑ„ÄÇ‰∏∫‰∫ÜÊúÄÂ∞èÂåñÊï∞ÊçÆ‰º†ËæìÂπ∂ÂÖÅËÆ∏‰∏çÂèØÈù†ÁöÑÈÄö‰ø°Ôºå‰ΩøÁî®ÂπøÊí≠ÁΩëÁªúÂÖ±‰∫´ËΩ®Ëøπ„ÄÇËÄåÊ†°Ê≠£Áõ∏ÂØπÂÆö‰ΩçÊºÇÁßªÔºàÂèØ‰ª•Â¢ûÂä†Âà∞ÂçäÁ±≥ÔºâÔºåÂàôÊòØÈÄöËøáÊØîËæÉÁõÆÂáªÊô∫ËÉΩ‰ΩìÁöÑËßÇÊµãÂíåËΩ®ËøπËØÑ‰º∞ÁöÑÈ¢ÑÊµãÊù•ËøõË°å„ÄÇ ÊãìÊâëËßÑÂàíÔºötopological planning ‰∫íÂä®ÈÅøÈöúÔºöreciprocal collision avoidance 2 Related Works A. Single Quadrotor Local Planning ÂçïÂõõÊóãÁøºÈ£ûË°åÂô®Â±ÄÈÉ®ËßÑÂàí Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËøêÂä®ËßÑÂàíÊòØÂõõÊóãÁøºÊú∫Âô®‰∫∫Â±ÄÈÉ®ËßÑÂàíÁöÑ‰∏ªÊµÅÊñπÊ≥ï„ÄÇÂü∫‰∫éÂºÄÂàõÊÄßÁöÑÁ†îÁ©∂ [4, 5]ÔºåËøô‰∫õÁ†îÁ©∂Â∞ÜÂ±ÄÈÉ®ËßÑÂàíÈóÆÈ¢òÂΩ¢ÂºèÂåñ‰∏∫Êó†Á∫¶ÊùüÁöÑÈùûÁ∫øÊÄß‰ºòÂåñÈóÆÈ¢òÔºåÊèêÂá∫‰∫Ü‰∏ÄÁ≥ªÂàóÁöÑÂ∑•‰Ωú [6]‚Äì[10]„ÄÇËøô‰∫õÂ∑•‰ΩúËÄÉËôë‰∫ÜËΩ®ËøπÁöÑÂπ≥ÊªëÊÄß„ÄÅÂèØË°åÊÄßÂíåÂÆâÂÖ®ÊÄßÔºåÈááÁî®‰∫ÜÂ§öÁßçÂèÇÊï∞ÂåñÊñπÊ≥ïÔºåÂåÖÊã¨Â§öÈ°πÂºèÂíå B Ê†∑Êù°Êõ≤Á∫ø„ÄÇÊúÄËøëÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂêç‰∏∫ EGO-Planner ÁöÑÂçïÂõõÊóãÁøºÂØºËà™Á≥ªÁªü [3]ÔºåÈÄöËøáÈááÁî®Êõ¥Á¥ßÂáëÁöÑÁéØÂ¢ÉË°®Á§∫ÊñπÊ≥ïÔºåËøõ‰∏ÄÊ≠•ÂáèÂ∞ë‰∫ÜËÆ°ÁÆóÊó∂Èó¥„ÄÇÊú¨ÊñáÁöÑÁ†îÁ©∂Âç≥Âü∫‰∫éÊ≠§Â∑•‰Ωú„ÄÇ Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËøêÂä®ËßÑÂàí EGO-Planner-20 B. Topological Planning ÊãìÊâëËßÑÂàí ÊãìÊâëËßÑÂàíÁî®‰∫éÈÅøÂÖçÂ±ÄÈÉ®ÊúÄÂ∞èÂÄº„ÄÇ Âü∫‰∫éÂ§çÂàÜÊûê‰∏≠ÁöÑ‰∫åÁª¥Êõ≤Èù¢ÂêåËÉöÁ≠â‰ª∑ÂÖ≥Á≥ª [11]ÔºåRosmann Á≠â [12]ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂú®‰∏çÂêåÊãìÊâëÁªìÊûÑ‰∏ã‰ΩøÁî® Voronoi ÂíåÂü∫‰∫éÈááÊ†∑ÁöÑÂâçÁ´Ø‰ª•Âèä TEBÔºàTimed-Elastic-BandsÔºâÂ±ÄÈÉ®ËßÑÂàíÂô® [13]‰Ωú ‰∏∫ÂêéÁ´ØÁöÑËΩ®ËøπËßÑÂàíÊñπÊ≥ï„ÄÇ ÁÑ∂ËÄåÔºå‰∏âÁª¥‰∏≠ÁöÑÂêåËÉöÁ≠â‰ª∑ÂÖ≥Á≥ªË¶ÅÁÆÄÂçïÂæóÂ§ö„ÄÇ‰∏∫‰∫ÜÊçïÊçâÂà∞Âå∫Âà´ÊòéÊòæÁöÑÊúâÁî®Ë∑ØÂæÑÔºåJaillet Á≠â [14]ÊûÑÂª∫‰∫ÜËßÜËßâÂèòÂΩ¢Ë∑ØÁΩëÔºåÂÆÉÂåÖÂê´‰∫ÜÊØîÂêå‰º¶Á≠â‰ª∑Á±ªÁöÑÂÖ∏ÂûãË∑ØÂæÑÊõ¥‰∏∞ÂØå‰∏îÊõ¥Áõ∏ÂÖ≥ÁöÑ‰ø°ÊÅØ„ÄÇÂü∫‰∫é [14]ÔºåZhou Á≠â [15]ÈÄöËøáÊèêÂá∫‰∏ÄÁßçÊúâÊïàÁöÑÊãìÊâëÁ≠â‰ª∑ÊÄßÊ£ÄÊµãÂÆûÁé∞‰∫ÜÂÆûÊó∂ÊãìÊâëËßÑÂàí„ÄÇÊàë‰ª¨Ëøõ‰∏ÄÊ≠•Êâ©Â±ï‰∫Ü EGO-Planner ‰ª•Âä†ÈÄüÊãìÊâëËßÑÂàíÁöÑÂâçÁ´ØÈÉ®ÂàÜ„ÄÇ C. Decentralized Drone Swarm Âéª‰∏≠ÂøÉÂåñÊó†‰∫∫Êú∫ÈõÜÁæ§ Âéª‰∏≠ÂøÉÂåñÊñπÊ≥ïÂ∑≤ÁªèÂú®ÊñáÁåÆ‰∏≠ÊèêÂá∫Ôºå‰æãÂ¶Ç [16]‚Äì[20]„ÄÇÈÄüÂ∫¶ÈöúÁ¢çË¢´Áî®Êù•‰øùËØÅÁÇπÊú∫Âô®‰∫∫ [16]„ÄÅ ÂÖ®ÂêëÊÄß‰ª£ÁêÜ[17]ÂíåÈùûÂÖ®ÂêëÊÄß‰ª£ÁêÜ [18]ÁöÑÊó†Á¢∞ÊíûËà™Ëøπ„ÄÇ Liu Á≠â‰∫∫ [21]ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂéª‰∏≠ÂøÉÂåñÂºÇÊ≠•ËßÑÂàíÁ≠ñÁï•ÔºåÁî®‰∫éÈÅøÂÖçÈùôÊÄÅ/Âä®ÊÄÅÈöúÁ¢çÁâ©ÂíåËΩ¶ËæÜÈó¥Á¢∞Êíû„ÄÇËôΩÁÑ∂Ëøô‰∫õÁÆóÊ≥ïÈÄöËøá‰ªøÁúüËøõË°å‰∫ÜÈ™åËØÅÔºå‰ΩÜÊú™ÈõÜÊàêÊÑüÁü•„ÄÅÂª∫ÂõæÂíåËßÑÂàíËÉΩÂäõ„ÄÇÂÆûÈ™åÁªìÊûúÂú®ÊñáÁåÆ‰∏≠Â∑≤ÁªèÂ±ïÁ§∫ [19, 20]„ÄÇ [19]ÂÆûÁé∞‰∫ÜÂ§öËΩ¶ËæÜÁÇπÂØπÁÇπËΩ¨ÁßªËÄåÊó†ÈúÄÂ§ñÈÉ®ÈöúÁ¢çÁâ©ÔºåËÄå [20]Âàô‰æùËµñ‰∫é‰∏ìÈó®ÁöÑËßÑÂàí‰ºòÂÖàÁ∫ß„ÄÇÁÑ∂ËÄåÔºåËøô‰∫õÁÆóÊ≥ïÂùáÊú™Âú®ÂÆûÂú∞ÁéØÂ¢É‰∏≠ÂÆûÁé∞ÂÖ®Ëá™‰∏ªÂåñ„ÄÇ 3 IMPLICIT TOPOLOGICAL TRAJECTORY GENERATION OF GRADIENT-BASED LOCAL PLANNING Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑÂ±ÄÈÉ®ËßÑÂàíÈöêÂºèÊãìÊâëËΩ®ËøπÁîüÊàê Êú¨ËäÇÈ¶ñÂÖà‰ªãÁªç‰∫ÜÊàë‰ª¨‰πãÂâçÂÖ≥‰∫é EGO-Planner ÁöÑÂ∑•‰Ωú\\cite{zhou2020ego}ÔºåËøôÊòØÊàë‰ª¨ÊèêÂá∫ÁöÑÁæ§‰ΩìÁ≥ªÁªüÁöÑÂü∫Á°Ä„ÄÇ ÁÑ∂ÂêéËß£Èáä‰∫ÜÊâÄÊèêÂá∫ÁöÑÊãìÊâëËßÑÂàíÁ≠ñÁï•„ÄÇ A. An ESDF-Free Gradient-based local planner ‰Ωú‰∏∫Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑÂ±ÄÈÉ®ËßÑÂàíÂô®ÔºåEGO-Planner Â∞ÜËΩ®ËøπÁîüÊàêÈóÆÈ¢òÂΩ¢ÂºèÂåñ‰∏∫‰∏Ä‰∏™ÈùûÁ∫øÊÄß‰ºòÂåñÈóÆÈ¢òÔºåÂÆÉÂú®Âπ≥ÊªëÂ∫¶ $J_s$„ÄÅÁ¢∞Êíû $J_c$„ÄÅÂä®ÊÄÅÂèØË°åÊÄß $J_d$ ÂíåÁªàÁ´ØËøõÂ∫¶ $J_t$ ‰πãÈó¥ËøõË°åÊùÉË°°„ÄÇ ‰ºòÂåñÈóÆÈ¢òÁöÑÂÜ≥Á≠ñÂèòÈáèÊù•Ëá™‰∫éÊéßÂà∂ÁÇπ $\\mathbf{Q}$ÔºåËøô‰∫õÊéßÂà∂ÁÇπÁî®‰∫éÂèÇÊï∞ÂåñËΩ®ËøπÁöÑÂùáÂåÄ B-Ê†∑Êù° $\\mathbf{\\Phi}$„ÄÇÈóÆÈ¢òÂÆö‰πâÂ¶Ç‰∏ãÔºö min‚Å°QJEGO=‚àëŒªrJr, \\min _{\\mathbf{Q}} J_{\\mathrm{EGO}}=\\sum \\lambda_{r} J_{r}, Qmin‚ÄãJEGO‚Äã=‚àëŒªr‚ÄãJr‚Äã, ÂÖ∂‰∏≠ $r={s,c,d,t}$Ôºå‰∏ãÊ†á‰∏∫$\\lambda$Ë°®Á§∫Áõ∏Â∫îÁöÑÊùÉÈáç„ÄÇ $J$ ÁöÑÈ°πÂèØ‰ª•ÂàÜ‰∏∫‰∏§Á±ªÔºöÊúÄÂ∞èËØØÂ∑ÆÂíåËΩØÈöúÁ¢çÁ∫¶Êùü„ÄÇ ÊúÄÂ∞èËØØÂ∑ÆÈ°π $J_s$ Âíå$J_t$ÔºåÈÄöËøáÊúÄÂ∞èÂåñÂÜ≥Á≠ñÂèòÈáèÁ∫øÊÄßÂèòÊç¢$L(\\mathbf{Q})$‰∏éÊúüÊúõÂÄº $\\mathcal{D}$‰πãÈó¥ÁöÑÊÄªËØØÂ∑ÆÔºåË¢´Ë°®Á§∫‰∏∫ Jr=‚àëQ‚ààŒ¶‚à•L(Q)‚àíD‚à•nn J_{r}=\\sum_{\\mathbf{Q} \\in \\boldsymbol{\\Phi}}\\|L(\\mathbf{Q})-\\mathcal{D}\\|_{n}^{n} Jr‚Äã=Q‚ààŒ¶‚àë‚Äã‚à•L(Q)‚àíD‚à•nn‚Äã ËΩØËæπÁïåÁ∫¶ÊùüÈ°π $J_c$ Âíå $J_d$ ÊòØÊÉ©ÁΩöÂÜ≥Á≠ñÂèòÈáèË∂ÖËøáÁâπÂÆöÈòàÂÄº $\\mathcal{T}$ ÁöÑÂ∏∏ËßÅË°®ËææÂºè„ÄÇ Jr=‚àëQ‚ààŒ¶{‚à•L(Q)‚àí(T‚àíœµ)S‚à•nnL(Q)>(T‚àíœµ)0L(Q)‚â§(T‚àíœµ) J_{r}=\\sum_{\\mathbf{Q} \\in \\boldsymbol{\\Phi}}\\left\\{\\begin{array}{cl}\\left\\|\\frac{L(\\mathbf{Q})-(\\mathcal{T}-\\epsilon)}{S}\\right\\|_{n}^{n} & L(\\mathbf{Q})>(\\mathcal{T}-\\epsilon) \\\\ 0 & L(\\mathbf{Q}) \\leq(\\mathcal{T}-\\epsilon)\\end{array}\\right. Jr‚Äã=Q‚ààŒ¶‚àë‚Äã{‚à•‚à•‚à•‚à•‚ÄãSL(Q)‚àí(T‚àíœµ)‚Äã‚à•‚à•‚à•‚à•‚Äãnn‚Äã0‚ÄãL(Q)>(T‚àíœµ)L(Q)‚â§(T‚àíœµ)‚Äã ÂÖ∂‰∏≠ÔºåÂèÇÊï∞$S$Ôºå$n$Âíå $\\epsilon$ÂΩ±ÂìçÁùÄÂçïËæπÁ∫¶ÊùüËøë‰ººÁöÑÂáÜÁ°ÆÂ∫¶ÔºåÂ¶Ç\\cite{rosmann2012trajectory}ÊâÄËø∞„ÄÇ ÂèòÊç¢$L(\\cdot)$ÂíåÂèÇÊï∞Ê†πÊçÆÊÉ©ÁΩöÁ±ªÂûãÈÄâÊã©„ÄÇ Áî±‰∫éÁØáÂπÖÊúâÈôêÔºåÂú®Ê≠§Â§ÑÁúÅÁï•‰∫Ü$L(\\cdot)$ÁöÑÂÖ∑‰ΩìÂΩ¢ÂºèÔºåÂèØÂú®\\cite{zhou2020ego}‰∏≠ÊâæÂà∞„ÄÇ Âú® EGO-Planner ‰∏≠ÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÊñ∞È¢ñÁöÑÈöúÁ¢çÁâ©Ë∑ùÁ¶ª‰º∞ËÆ°ÊñπÊ≥ïÔºåËØ•ÊñπÊ≥ïÊ†πÊçÆÊØè‰∏™ $\\mathbf{Q}$Áã¨Á´ãÊã•ÊúâÁöÑÁéØÂ¢É‰ø°ÊÅØËøõË°åÂèÇÊï∞Âåñ„ÄÇ Áî±Ëã•Âπ≤ ${\\mathbf{p},\\mathbf{v}}$ÂØπÂèÇÊï∞ÂåñÁöÑ‰ø°ÊÅØÈ´òÂ∫¶ÊäΩË±°Ëá™Âë®Âõ¥ÈöúÁ¢çÁâ©ÔºåÂÖ∂‰∏≠ $\\mathbf{p}$Ë°®Á§∫ÈöúÁ¢çÁâ©Ë°®Èù¢‰∏äÁöÑÈîöÁÇπÔºå $\\mathbf{v}$Ë°®Á§∫‰ªéÂÜÖÈÉ®ÊåáÂêëÂ§ñÈÉ®ÁöÑÂÆâÂÖ®ÊñπÂêëÔºåÂ¶ÇÂõæ \\ref{pic:ap_v_pair} ÊâÄÁ§∫„ÄÇ ÁÑ∂ÂêéÔºåÁ¨¨ $i$ ‰∏™ÊéßÂà∂ÁÇπ $\\mathbf{Q}_i$Âà∞Á¨¨$j$‰∏™ÈöúÁ¢çÁâ©ÁöÑÈöúÁ¢çÁâ©Ë∑ùÁ¶ª$d{ij}$Ë¢´ÂÆö‰πâ‰∏∫ TODO ${\\mathbf{p},\\mathbf{v}}$ ÂØπÁöÑÁîüÊàêÂíåËΩ®Ëøπ‰ºòÂåñËøáÁ®ãÂ¶ÇÂõæ \\ref{pic:a*p_v_pair} Âíå \\ref{pic:final_traj}ÊâÄÁ§∫„ÄÇ È¶ñÂÖàÔºåÁªôÂá∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂàùÂßãËΩ®Ëøπ $\\mathbf{\\Phi}$ Ôºå‰∏çËÄÉËôëÁ¢∞Êíû„ÄÇ ÁÑ∂ÂêéÔºåÊêúÁ¥¢ËøûÊé•Á¢∞ÊíûÊÆµ‰∏§Á´ØÁöÑÂÆâÂÖ®Ë∑ØÂæÑ $\\mathbf{\\Gamma}$„ÄÇ ÁÑ∂ÂêéÔºå‰ªé$\\mathbf{\\Phi}$Âà∞ $\\mathbf{\\Gamma}$ ÁîüÊàêÂêëÈáè $\\mathbf{v}$ ÔºåÂπ∂Âú®ÈöúÁ¢çÁâ©Ë°®Èù¢ÂÆö‰πâ $\\mathbf{p}$ „ÄÇ ÈÄöËøáÁîüÊàêÁöÑ ${\\mathbf{p},\\mathbf{v}}$ ÂØπÔºåËßÑÂàíÂô®ÊúÄÂ§ßÂåñ $d*{ij}$ Âπ∂ËøîÂõû‰ºòÂåñÁöÑËΩ®Ëøπ„ÄÇ Áî±‰∫éÊñáÁ´†ÈïøÂ∫¶ÊúâÈôêÔºåÊàë‰ª¨Âè™Êèê‰æõ‰∫Ü EGO-Planner Âü∫Êú¨ÊÄùÊÉ≥ÁöÑÁÆÄÂåñÊèèËø∞„ÄÇ ËØ¶ÁªÜËß£ÈáäÂèØÂèÇËßÅ\\cite{zhou2020ego}„ÄÇ B. Implicit Topological Trajectory Generation ÂàÜÊûê\\cite{jaillet2008path, zhou2020robust}ÂèëÁé∞ÔºåÂπøÊ≥õ‰ΩøÁî®ÁöÑÂêå‰º¶Ê¶ÇÂøµÊó†Ê≥ïÂæàÂ•ΩÂú∞ÊçïÊçâ‰∏âÁª¥ÊÉÖÂÜµ‰∏ãÁöÑÂÄôÈÄâËΩ®ËøπÔºåÂ¶ÇÂõæ\\ref{pic:topo_relation}ÊâÄÁ§∫„ÄÇÂõ†Ê≠§ÔºåJaillet Á≠â‰∫∫\\cite{jaillet2008path}ÊèêÂá∫‰∫ÜÂú®‰∏âÁª¥Á©∫Èó¥‰∏≠Êõ¥ÊúâÁî®ÁöÑÂÖ≥Á≥ªÔºåÁß∞‰∏∫ÂèØËßÅÊÄßÂèòÂΩ¢ÔºàVD-visibility deformationÔºâÔºåËÄå Zhou Á≠â‰∫∫\\cite{zhou2020robust}Ëøõ‰∏ÄÊ≠•ÊèêÂèñ‰∫Ü VD ÁöÑ‰∏Ä‰∏™Â≠êÈõÜÔºåÁß∞‰∏∫ÂùáÂåÄÂèØËßÅÊÄßÂèòÂΩ¢ÔºàUVD-uniform visibility deformationÔºâÔºåËøô‰ΩøÂæóÂÆûÊó∂Êìç‰ΩúÊàê‰∏∫ÂèØËÉΩ„ÄÇÁÑ∂ËÄåÔºåÊú¨Êñá‰ªçÁÑ∂Ê≤øÁî®‰πãÂâçÁöÑÁ†îÁ©∂‰∏≠‰ΩøÁî®ÁöÑÊúØËØ≠‚ÄúÊãìÊâëËßÑÂàí‚ÄùÔºå‰ª•ÈÅøÂÖçÊ≠ß‰πâ„ÄÇÊª°Ë∂≥ UVD ÁöÑËΩ®ËøπË¢´ËÆ§‰∏∫ÊòØÂêåËÉöÁöÑ„ÄÇ\\cite{zhou2020robust}‰∏≠ÂÆö‰πâÁöÑ UVD ‰∏∫Ôºö ÂÆö‰πâ 1Ôºö ‰∏§Êù°ËΩ®Ëøπ $\\tau_1(s)$„ÄÅ $\\tau_2(s)$ÔºåÂÖ∂ÂèÇÊï∞‰∏∫ $s\\in \\left[0,1\\right]$Ôºå‰∏îÊª°Ë∂≥ $\\tau_1(0) = \\tau_2(0)$„ÄÅ $\\tau_1(1) = \\tau_2(1)$ ÁöÑÊù°‰ª∂ÔºåÂ¶ÇÊûúÂØπ‰∫éÊâÄÊúâÁöÑ $s$ÔºåÁ∫øÊÆµ $\\tau_1(s) \\tau_2(s)$ Ê≤°ÊúâÁ¢∞ÊíûÔºåÂàôÂ±û‰∫éÁõ∏ÂêåÁöÑ UVD Á±ªÂà´„ÄÇ ‰º†ÁªüÁöÑÊãìÊâëËßÑÂàíÊñπÊ≥ï \\cite{jaillet2008path, rosmann2012trajectory, rosmann2017integrated, zhou2020robust} ‰∏ªË¶ÅÁî±ÊãìÊâë‰∏çÂêåÁöÑË∑ØÂæÑÊêúÁ¥¢ÂíåÂêéÁ´Ø‰ºòÂåñÁªÑÊàêÔºå‰∏ªË¶ÅÂÖ≥Ê≥®Âú®ÊãìÊâë‰∏ä‰∏çÂêåÁöÑÂêå‰º¶‰∏≠ÂØªÊâæÂ§ö‰∏™ÂàùÂßãË∑ØÂæÑ„ÄÇ ‰∏éËøô‰∫õÊñπÊ≥ï‰∏çÂêåÔºåÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïÈÄöËøáÂ∞Ü $\\mathbf{v}$ ÂèçËΩ¨‰∏∫ $\\mathbf{v}{new} := -\\mathbf{v}$ÔºåÂú®‰∏çÂêåÊñπÂêë‰∏äÊûÑÂª∫Ë∑ùÁ¶ªÂú∫„ÄÇ ÁÑ∂ÂêéÔºå‰∏Ä‰∏™ÊêúÁ¥¢ËøáÁ®ãÂú®ÈöúÁ¢çÁâ©Ë°®Èù¢‰∏äÊ≤øÁùÄ $\\mathbf{v}{new}$ Á°ÆÂÆö‰∏Ä‰∏™Êñ∞ÁöÑÈîöÁÇπ $\\mathbf{p}{new}$ÔºåÂ¶ÇÂõæ\\ref{pic:multi*p_v} ÊâÄÁ§∫„ÄÇ ÂÆÉ‰ª¨ÊûÑÊàê‰∫ÜÊñ∞ÁöÑ‰∏ÄÂØπ ${\\mathbf{p}*{new}, \\mathbf{v}{new}}$ÔºåÂØºËá¥‰∫Ü‰∏Ä‰∏™‰∏çÂêåÁöÑÂ±ÄÈÉ®ÊûÅÂ∞èÂÄº„ÄÇ ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÊ≤°ÊúâÈááÁî®ÊòéÁ°ÆÁöÑË∑ØÂæÑÊêúÁ¥¢Ôºå‰ΩÜÊòØ‰ªª‰ΩïÁªèËøá $\\mathbf{p}$ Âíå $\\mathbf{p}_{new}$ ÁöÑË∑ØÂæÑÂØπÂ∫îÁùÄ Def.\\ref{def:UVD} Âú®Ëøô‰∏§‰∏™ÁÇπ‰∏äÁöÑËøùÂèç„ÄÇ ÈöèÂêéÔºå‰∏çÂêåÁöÑËΩ®ËøπÂú®‰∏çÂêåÁöÑÁ∫øÁ®ã‰∏≠Âπ∂Ë°åËøõË°å‰ºòÂåñÔºåÂ¶ÇÂõæ 4.d ÊâÄÁ§∫„ÄÇ ÊâßË°åÊàêÊú¨ÊúÄ‰ΩéÁöÑËΩ®Ëøπ„ÄÇ 4 Êó†‰∫∫Êú∫ÈõÜÁæ§ÂØºËà™ A. Reciprocal Collision Avoidance ‰∫íÁõ∏ÈÅøÂÖçÁ¢∞Êíû ËÆæ$t$Êó∂ÂàªÁ¨¨$k$‰∏™‰ª£ÁêÜÂú®$K$‰∏™‰ª£ÁêÜ‰∏≠ÁöÑ‰ΩçÁΩÆÁä∂ÊÄÅ‰∏∫$x_k(t) \\in \\mathcal{X} \\subset \\mathbb{R}^3$„ÄÇ $\\mathcal{X}_k^{free}(t) \\subset \\mathcal{X}$ ÊòØËÄÉËôëÂÖ∂‰ªñ‰ª£ÁêÜÂ≠òÂú®Êó∂‰ª£ÁêÜ$k$Áä∂ÊÄÅÁ©∫Èó¥‰∏≠ÁöÑËá™Áî±Âå∫Âüü„ÄÇ Âõ†Ê≠§Ôºå$\\mathcal{X}_k^{free}(t) := \\mathcal{X} \\backslash { i \\in \\mathbb{Z} \\backslash k, i \\leq K | x_i(t)}$ÔºåÂπ∂‰∏îÂØπ‰∫é$\\mathbf{\\Phi}_k$ÁöÑÂÆö‰πâÂüü‰∏≠ÁöÑ‰ªª‰Ωï$t$Ôºå$\\mathbf{\\Phi}_k(t) \\in \\mathcal{X}_k^{free}(t)$ÔºåÂ¶ÇÂõæ 6 ÊâÄÁ§∫„ÄÇ ‰∏é\\cite{liu2017search}‰∏çÂêåÔºåËøôÈáåÂøΩÁï•‰∫ÜÂ∑≤Âú® Sec.III-A ‰∏≠Â§ÑÁêÜÁöÑÈöúÁ¢çÁâ©ÂíåÂä®ÊÄÅÁ∫¶Êùü„ÄÇ ‰∏éÈöúÁ¢çÁâ©Á¢∞ÊíûÂíåÂä®ÊÄÅ‰∏çÂèØË°åÊÄßÁöÑÊÉ©ÁΩöÁ±ª‰ººÔºåÊàë‰ª¨‰∏∫‰ª£ÁêÜ$k$ÁöÑÁæ§‰ΩìÈÅøÁ¢∞Âà∂ÂÆö‰∫ÜÊÉ©ÁΩöÂáΩÊï∞$J_{w,k}$Ôºå‰Ωú‰∏∫ËΩØÁ∫¶Êùü„ÄÇ dk,i(t)=‚à•E1/2[Œ¶k(t)‚àíŒ¶i(t)]‚à•‚àí(C+œµ) \\begin{array}{l}d_{k, i}(t)=\\left\\|\\mathbf{E}^{1 / 2}\\left[\\boldsymbol{\\Phi}_{k}(t)-\\boldsymbol{\\Phi}_{i}(t)\\right]\\right\\|-(\\mathcal{C}+\\epsilon) \\\\\\end{array} dk,i‚Äã(t)=‚à•‚à•‚à•‚ÄãE1/2[Œ¶k‚Äã(t)‚àíŒ¶i‚Äã(t)]‚à•‚à•‚à•‚Äã‚àí(C+œµ)‚Äã ÂÖ∂‰∏≠Ôºå$i \\in \\mathbb{Z} \\backslash k, i \\leq K$ Ôºå$ts$ Âíå $t_e$ ÊòØËΩ®Ëøπ $\\mathbf{\\Phi}_k(t)$ Êó∂Èó¥Ë∑®Â∫¶ÂÜÖÁöÑÂÖ®Â±ÄËµ∑ÂßãÊó∂Èó¥ÂíåÁªìÊùüÊó∂Èó¥„ÄÇ $\\mathcal{C}$ ÊòØÁî®Êà∑ÂÆö‰πâÁöÑ‰ª£ÁêÜÈó¥Èöô„ÄÇ $\\mathbf{E}:=\\rm{diag}(1,1,1/c), c>1$ Â∞ÜÊ¨ßÂºèË∑ùÁ¶ªËΩ¨Êç¢‰∏∫ÂÖ∑ÊúâËæÉÁü≠‰∏ªËΩ¥ÁöÑÊ§≠ÂúÜË∑ùÁ¶ªÔºå‰ª•ÂáèËΩª‰∏ãÂÜ≤È£éÈô©„ÄÇ Â∞ÜÂä†ÊùÉÈ°π $J{w,k}$ Ê∑ªÂä†Âà∞ÊñπÁ®ã(1)‰∏≠ÔºåÂæóÂà∞ÊØè‰∏™‰ª£ÁêÜÁöÑÊÄª‰ºòÂåñÈóÆÈ¢ò„ÄÇ min‚Å°QJ=JEGO+ŒªwJw. \\min _{\\mathbf{Q}} J=J_{\\mathrm{EGO}}+\\lambda_{w} J_{w}. Qmin‚ÄãJ=JEGO‚Äã+Œªw‚ÄãJw‚Äã. ‰ªª‰ΩïÂåÖÂê´‰ªéÂÜ≥Á≠ñÂèòÈáèÂà∞ËΩ®Ëøπ‰∏äÁÇπÁöÑÊò†Â∞ÑÁöÑËΩ®ËøπÂèÇÊï∞ÂåñÊñπÊ≥ïÈÉΩÂèØ‰ª•Â∫îÁî®‰∫éÂÖ¨ÂºèÔºà\\ref{equ:swarm_collision}Ôºâ„ÄÇ Êú¨Êñá‰ΩøÁî®$p_b$Èò∂ÂùáÂåÄ B Ê†∑Êù°ÂØπËΩ®ËøπËøõË°åÂèÇÊï∞ÂåñÔºåËøô‰ΩøÂæó‰ΩçÁΩÆËØÑ‰º∞ÂÖ∑ÊúâÁü©ÈòµË°®Á§∫\\cite{zhou2019robust}„ÄÇ Œ¶(t)=s(t)‚ä§Mpb+1qms(t)=[1s(t)s2(t)‚ãØspb(t)]‚ä§qm=[Qm‚àípbQm‚àípb+1Qm‚àípb+2‚ãØQm]‚ä§ \\begin{array}{l}\\boldsymbol{\\Phi}(t)=\\mathbf{s}(t)^{\\top} \\mathbf{M}_{p_{b}+1} \\mathbf{q}_{m} \\\\ \\mathbf{s}(t)=\\left[\\begin{array}{lllll}1 & s(t) & s^{2}(t) & \\cdots & s^{p_{b}}(t)\\end{array}\\right]^{\\top} \\\\ \\mathbf{q}_{m}=\\left[\\begin{array}{lllll}\\mathbf{Q}_{m-p_{b}} & \\mathbf{Q}_{m-p_{b}+1} & \\mathbf{Q}_{m-p_{b}+2} & \\cdots & \\mathbf{Q}_{m}\\end{array}\\right]^{\\top} \\\\\\end{array} Œ¶(t)=s(t)‚ä§Mpb‚Äã+1‚Äãqm‚Äãs(t)=[1‚Äãs(t)‚Äãs2(t)‚Äã‚ãØ‚Äãspb‚Äã(t)‚Äã]‚ä§qm‚Äã=[Qm‚àípb‚Äã‚Äã‚ÄãQm‚àípb‚Äã+1‚Äã‚ÄãQm‚àípb‚Äã+2‚Äã‚Äã‚ãØ‚ÄãQm‚Äã‚Äã]‚ä§‚Äã ÂÖ∂‰∏≠$\\mathbf{M}{p_b+1}$ÊòØÁî±$p_b$Á°ÆÂÆöÁöÑÂ∏∏Êï∞Áü©ÈòµÔºåÂΩì$t$Â±û‰∫éËäÇÁÇπË∑®Â∫¶$(t_m, t{m+1}]$Êó∂Ôºå$s(t)=(t-t_m)/\\triangle t$„ÄÇ B. Localization Drift Compensation ÂÆö‰ΩçÂÅèÁßªË°•ÂÅø ‰Ωú‰∏∫‰∏™‰ΩìÂú®Êú™Áü•ÁéØÂ¢É‰∏≠ÁöÑÂÆö‰ΩçÔºàÊ≤°ÊúâÂèØÈù†ÁöÑÈ´òÈ¢ëÁéØË∑ØÈó≠ÂêàÔºâÔºåÂú®È£ûË°åËøáÁ®ã‰∏≠ÊºÇÁßª‰∏çÊñ≠ÁßØÁ¥Ø„ÄÇ Xu Á≠â‰∫∫ \\cite{xu2020decentralized} ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂü∫‰∫éÈ¢ùÂ§ñ UWB Ë∑ùÁ¶ªÊµãÈáèÁöÑËà™Á©∫Áæ§‰ΩìÁä∂ÊÄÅ‰º∞ËÆ°ÊñπÊ≥ïÔºåÂπ∂ÂÆûÁé∞‰∫ÜÂáÜÁ°ÆÁöÑÂçèÂêåÂÆö‰Ωç„ÄÇ ÁÑ∂ËÄåÔºåÊàë‰ª¨Êõ¥ÂÖ≥Ê≥®Á©øË∂äÂÖÖÊª°ÈöúÁ¢çÁöÑÁéØÂ¢ÉÔºåÂπ∂‰∏îÂøÖÈ°ª‰∏∫ÂÖ∂‰ªñÂ∫îÁî®Á®ãÂ∫è‰øùÁïôËÆ°ÁÆóÂíåÈÄö‰ø°ËµÑÊ∫ê„ÄÇ Therefore, inspired by \\cite{xu2020decentralized}, a simplified and lightweight relative drift estimation method is proposed by comparing the predicted position evaluated from received agents' trajectories and the measured positions from depth images of witnessed agents. Âõ†Ê≠§ÔºåÂú® \\cite{xu2020decentralized} ÁöÑÂêØÂèë‰∏ãÔºåÈÄöËøáÊØîËæÉ‰ªéÊé•Êî∂Âà∞ÁöÑ‰ª£ÁêÜËΩ®ËøπËØÑ‰º∞ÁöÑÈ¢ÑÊµã‰ΩçÁΩÆ‰∏éÁõÆÂáª‰ª£ÁêÜÊ∑±Â∫¶ÂõæÂÉè‰∏≠ÊµãÈáè‰ΩçÁΩÆÔºåÊèêÂá∫‰∫Ü‰∏ÄÁßçÁÆÄÂåñÂíåËΩªÈáèÁ∫ßÁöÑÁõ∏ÂØπÊºÇÁßª‰º∞ËÆ°ÊñπÊ≥ï„ÄÇ ÂΩìËΩ®ËøπË∑üË∏™ËØØÂ∑ÆÂèØ‰ª•ÂøΩÁï•‰∏çËÆ°ÔºåÂπ∂‰∏îÂèØËÉΩÂèëÁîüÁ¢∞ÊíûÁöÑ‰ªª‰Ωï‰∏§‰∏™‰ª£ÁêÜ‰∏≠Ëá≥Â∞ëÊúâ‰∏ÄÂè∞ËÉΩÁúãÂà∞Âè¶‰∏ÄÂè∞Êó∂ÔºåËØ•Á≠ñÁï•ÁîüÊïà„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨‰ΩøÁî® \\cite{MelKum1105} ‰∏≠ÁöÑÊéßÂà∂Âô®ËøõË°åÁ≤æÁ°ÆË∑üË∏™ÔºåÂπ∂‰ΩøÁî®ÂπøËßíÁõ∏Êú∫Êù•Èôç‰ΩéÂ§±Âéª‰ª£ÁêÜÁöÑÂèØËÉΩÊÄß„ÄÇ Ê∂àÈô§ÊºÇÁßªÁöÑËøáÁ®ãÂ¶Ç‰∏ã„ÄÇ Âú®ËØÑ‰º∞‰ª£ÁêÜ$i$ÁöÑÂΩìÂâç‰ΩçÁΩÆ$\\mathbf{\\Phi}i(t{now})$ÂêéÔºåÁ°ÆÂÆö‰∏Ä‰∏™‰ª•$\\mathbf{\\Phi}i(t{now})$‰∏∫‰∏≠ÂøÉÔºåÂçäÂæÑ‰∏∫$\\mathcal{R}$ÁöÑÁêÉÂΩ¢‰ø°‰ªªÂå∫Âüü$\\mathcal{S} \\subset \\mathbb{R}^3$ÔºåÂÖ∂‰∏≠$\\mathcal{R}$ÊòØ‰∏Ä‰∏™ÁªèÈ™åÂèÇÊï∞ÔºåË°®Á§∫‰ªéÂÆûÈ™å‰∏≠‰º∞ËÆ°ÁöÑÂÖ∏ÂûãÊºÇÁßªÁöÑ‰∏äÁïå„ÄÇ ÁÑ∂ÂêéÔºåÂ∞Ü$\\mathcal{S}$Êò†Â∞ÑÂà∞ÂΩìÂâçÊçïËé∑ÁöÑÊ∑±Â∫¶ÂõæÂÉèÔºåÂç≥Êª°Ë∂≥ÁöÑÂå∫Âüü$\\mathcal{S'} \\subset \\mathbb{R}^2$„ÄÇ z[s‚Ä≤‚ä§1]‚ä§=KTwc[s‚ä§1]‚ä§, z\\left[\\begin{array}{ll}\\mathbf{s}^{\\prime}{ }^{\\top} & 1\\end{array}\\right]^{\\top}=\\mathbf{K} \\mathbf{T}_{\\mathrm{w}}^{\\mathrm{c}}\\left[\\begin{array}{ll}\\mathbf{s}^{\\top} & 1\\end{array}\\right]^{\\top}, z[s‚Ä≤‚ä§‚Äã1‚Äã]‚ä§=KTwc‚Äã[s‚ä§‚Äã1‚Äã]‚ä§, ÂÖ∂‰∏≠$\\mathbf{s'} \\in \\mathcal{S'}$Ôºå$\\mathbf{s} \\in \\mathcal{S}$Ôºå$\\mathbf{K}$Âíå$\\mathbf{T}^{\\rm{c}}_{\\rm{w}}$ÊòØÁõ∏Êú∫ÁöÑÂÜÖÂèÇÂíåÂ§ñÂèÇÁü©ÈòµÔºå$z$ÊòØ${s}$Ê≤ø‰∏ªÂÖâËΩ¥ÂÅèÁ¶ªÂÖâÂ≠¶‰∏≠ÂøÉÁöÑÂÅèÂ∑Æ„ÄÇ $\\mathcal{S'}$ÊòØ‰∏Ä‰∏™ÈúÄË¶ÅËøõË°åÂ§çÊùÇËÆ°ÁÆóÊâçËÉΩÂæóÂà∞ÁöÑÊ§≠ÂúÜÈî•Êõ≤Á∫ø„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨ÈááÁî®‰∫Ü‰∏Ä‰∏™Ëøë‰ººÁöÑËΩ¥ÂØπÈΩêÊ§≠ÂúÜ$\\mathcal{\\bar{S}'}$Êù•‰ª£ÊõøÁ≤æÁ°ÆÁöÑ$\\mathcal{S'}$„ÄÇ Á≤æÁ°ÆÂÆö‰πâ‰ø°ËµñÂå∫ÂüüÂπ∂‰∏çÊòØÂøÖË¶ÅÁöÑÔºåÂõ†‰∏∫ÂÆÉÂè™ÊòØ‰∏Ä‰∏™ÁªèÈ™åÂå∫Âüü„ÄÇ ÁÑ∂ÂêéÊàë‰ª¨Â∞Ü$\\mathcal{\\bar{S}'}$‰∏≠ÁöÑÊØè‰∏™ÁÇπÊäïÂΩ±Âà∞‰∏ñÁïåÂùêÊ†áÁ≥ªÔºåÂπ∂Êî∂ÈõÜÂ±û‰∫é$\\mathcal{S}$ÁöÑÁÇπÔºåËøôÊ†∑ÂæóÂà∞‰∏Ä‰∏™ÁÇπÁ∞á$\\mathcal{P} \\subset \\mathcal{S}$„ÄÇ ÁÑ∂ÂêéÔºå‰ª£ÁêÜËßÇÊµãÁöÑ‰ΩçÁΩÆ$\\mathbf{P}$Ë¢´ËßÜ‰∏∫$\\mathcal{P}$ÁöÑ‰∏≠ÂøÉÔºàÁ¨¨‰∏ÄÂéüÂßãÁü©-first raw momentÔºâ„ÄÇ P=Œº1‚Ä≤(P). \\mathbf{P}=\\mu_{1}^{\\prime}(\\mathcal{P}). P=Œº1‚Ä≤‚Äã(P). Â¶ÇÊûú$\\mathcal{P}$‰ªÖÂåÖÂê´ÂØπÂ∫î‰ª£ÁêÜÁöÑËßÇÊµãËÄåÊ≤°Êúâ‰ªª‰ΩïÊó†ÂÖ≥ÁöÑÁâ©‰ΩìÔºåÂàôÁ≠âÂºèÔºà\\ref{equ:moment}ÔºâÊàêÁ´ãÔºå‰ΩÜËøô‰∏çËÉΩ‰øùËØÅ„ÄÇ ÁÑ∂ËÄåÔºåÁî±‰∫éÊØè‰∏™‰ª£ÁêÜÈÉΩÂØπÈÇªËøëÁâ©‰ΩìÊúâÈó¥ÈöîÁöÑËΩ®ËøπËßÑÂàíÔºåÁ≠âÂºèÔºà\\ref{equ:moment}ÔºâÂú®Â§ßÂ§öÊï∞Êó∂Èó¥ÂÜÖÊàêÁ´ã„ÄÇ ‰∏∫‰∫ÜÊîπËøõ‰ª£ÁêÜÊ£ÄÊµãÁöÑÈ≤ÅÊ£íÊÄßÔºåËøòÊ∑ªÂä†‰∫ÜÂÖ∂‰ªñÊù°‰ª∂ÔºåÂ¶ÇÂÉèÁ¥†Êï∞ÁõÆ„ÄÅ$\\mathcal{P}$ÁöÑ‰∫åÈò∂‰∏≠ÂøÉÁü©ÔºåÂΩìÂâçÊµãÈáè‰∏éÂÖàÂâçÊµãÈáè‰πãÈó¥ÁöÑÂ∑ÆÂºÇÁ≠â„ÄÇ Êõ¥‰∏•Ê†ºÁöÑÊ†áÂáÜ‰ºöÂ¢ûÂä†ËØØËØÜÁéáÔºå‰ΩÜÁî±‰∫éÂÆö‰ΩçÊºÇÁßªÂèòÂåñÁºìÊÖ¢ÔºåËøôÊòØÊó†ÂÆ≥ÁöÑ„ÄÇ ÊúÄÂêéÔºå$\\mathbf{\\Phi}i(t{now})$Âíå$\\mathbf{P}$‰πãÈó¥ÁöÑËØØÂ∑ÆË¢´ÈÄÅÂÖ•‰∏Ä‰∏™Êª§Ê≥¢Âô®ÔºåÁÑ∂ÂêéËé∑Âæó‰º∞ËÆ°ÁöÑÊºÇÁßª„ÄÇ C. Agent Removal from Depth Images ‰ªéÊ∑±Â∫¶Âõæ‰∏≠Âà†Èô§‰ª£ÁêÜ Êàë‰ª¨‰ΩøÁî®Âç†ÊçÆÊ†ÖÊ†ºÂú∞ÂõæÊù•Â≠òÂÇ®ÈùôÊÄÅÈöúÁ¢çÁâ©ÔºåÂπ∂‰ΩøÁî®Ê∑±Â∫¶ÂõæÂÉèËøõË°åÂú∞ÂõæËûçÂêà„ÄÇ ÁßªÂä®‰ª£ÁêÜÂú®Á¨¨\\ref{sec:Reciprocal_Collision_Avoidance}ËäÇ‰∏≠ÂæóÂà∞Â§ÑÁêÜ„ÄÇ Âõ†Ê≠§ÔºåÂú®Âú∞ÂõæÊûÑÂª∫‰∏≠Êó†ÈúÄËÆ∞ÂΩïÁßªÂä®‰ª£ÁêÜÂπ∂Â∞ÜÂÖ∂ËßÜ‰∏∫ÈöúÁ¢çÁâ©ÔºåÁîöËá≥‰ºö‰∫ßÁîü‰∏çÂøÖË¶ÅÁöÑÂπ≤Êâ∞„ÄÇ ‰∏∫‰∫ÜÊ∂àÈô§ÁßªÂä®Áâ©‰ΩìÁöÑÂΩ±ÂìçÔºåÊàë‰ª¨Âú®Á¨¨\\ref{sec:compensate_localization_drafting}ËäÇ‰∏≠ÈÄöËøáÈÅÆÁΩ©ÂíåÁßªÈô§Ê£ÄÊµãÂà∞ÁöÑ‰ª£ÁêÜÁöÑÂÉèÁ¥†‰ªéÊ∑±Â∫¶ÂõæÂÉè‰∏≠ÂâîÈô§ÔºåÂ¶ÇÂõæ 7 ÊâÄÁ§∫„ÄÇ Èô§Ê≠§‰πãÂ§ñÔºåÈÅÆÊå°‰∫ÜÂ§ßÈÉ®ÂàÜËßÜÈáéÁöÑÁßªÂä®Áâ©‰Ωì‰πü‰ºöÂØπËßÜËßâÊÉØÊÄßÈáåÁ®ãËÆ°ÔºàVIOÔºâ‰∫ßÁîüÂπ≤Êâ∞„ÄÇ Âõ†Ê≠§ÔºåÁÅ∞Â∫¶ÂõæÂÉè‰∏äÁöÑ‰ª£ÁêÜ‰πü‰ºöÈÄöËøáÁõ∏Â∫îÊ∑±Â∫¶ÂõæÂÉèÁöÑÁõ∏ÂêåÈÅÆÁΩ©ËøõË°åÁßªÈô§„ÄÇ ËøôÈáå‰ΩøÁî®ÁöÑ‰ª£ÁêÜÊ£ÄÊµãÊ†áÂáÜËæÉ‰∏∫ÂÆΩÊùæÔºåÂõ†‰∏∫ËØØÂà§ÁöÑÊ≠£Ê†∑Êú¨ÊØîËØØÂà§ÁöÑË¥üÊ†∑Êú¨Êõ¥‰∏∫ÊúâÂÆ≥„ÄÇ 5 System Architecture Á≥ªÁªüÊû∂ÊûÑÂ¶ÇÂõæ 8 ÊâÄÁ§∫ÔºåÂÖ∂‰∏≠ÂåÖÂê´‰∫ÜÂçï‰∏™‰ª£ÁêÜÂíåÂ§ö Agent ÈÄö‰ø°Á≥ªÁªüÁöÑËØ¶ÁªÜÊû∂ÊûÑ„ÄÇ A. Navigation System of A Single Agent Âçï‰∏ÄÊô∫ËÉΩ‰ΩìÁ≥ªÁªüÔºåÂåÖÊã¨Á°¨‰ª∂ÂíåËΩØ‰ª∂ËÆæÁΩÆÔºåÂü∫‰∫éÊàë‰ª¨ÂÖàÂâçÁöÑÂ∑•‰ΩúEGO-Planner \\cite{zhou2020ego}ÔºåÂ¢ûÂä†‰∫Ü‰∏Ä‰∏™Ê®°ÂùóÊù•Ë°•ÂÅø VIO ÊºÇÁßªÂπ∂Âú®ÂõæÂÉè‰∏≠ÂéªÈô§Ë¢´ËßÇÂØüÂà∞ÁöÑÊô∫ËÉΩ‰Ωì„ÄÇ ÂØπ‰∫éÊú™Áü•ÁéØÂ¢É‰∏≠ÁöÑËΩ®ËøπÁîüÊàêÔºå‰ΩøÁî®Êú¨Âú∞ËßÑÂàíÂô®„ÄÇ ÂΩìÂΩìÂâçËΩ®Ëøπ‰∏éÊñ∞ÂèëÁé∞ÁöÑÈöúÁ¢çÁâ©ÂèëÁîüÁ¢∞ÊíûÊàñÊô∫ËÉΩ‰ΩìÊé•ËøëÂΩìÂâçËΩ®ËøπÁöÑÁªìÊùüÊó∂ÔºåÊøÄÊ¥ªËßÑÂàí„ÄÇ B. Communication Framework Á≥ªÁªüÁî±‰∏§‰∏™ÁΩëÁªúËøûÊé•ÔºåÂç≥ÂÖ±‰∫´ËΩ®ËøπÁöÑÂπøÊí≠ÁΩëÁªúÂíåÂêåÊ≠•Êó∂Èó¥Êà≥‰ª•ÂèäÁÆ°ÁêÜÈ°∫Â∫èÂêØÂä®ÁöÑÈìæÁΩëÁªú„ÄÇ Broadcast Network ÂπøÊí≠ÁΩëÁªúÔºö ‰∏ÄÊó¶‰∏Ä‰∏™ agent ÁîüÊàê‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑÊó†Á¢∞ÊíûËΩ®ËøπÔºåÂÆÉ‰ºöÁ´ãÂç≥ÂπøÊí≠ÁªôÊâÄÊúâÁöÑ agent„ÄÇ ÂÖ∂‰ªñ agent Êé•Êî∂Âπ∂Â≠òÂÇ®Ëøô‰∏™ËΩ®ËøπÔºå‰ª•‰æøÂú®ÂøÖË¶ÅÊó∂‰∏∫Ëá™Â∑±ÁîüÊàêÂÆâÂÖ®ËΩ®Ëøπ„ÄÇ ËøôÁßçÈó≠ÁéØÁ≠ñÁï•Âú®ÁΩëÁªúËøûÊé•Á®≥ÂÆö‰∏îÂª∂ËøüÂèØÂøΩÁï•ÁöÑÁêÜÊÉ≥ÊÉÖÂÜµ‰∏ãËÉΩÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ ÁÑ∂ËÄåÔºåÂú®ÂÆûË∑µ‰∏≠‰∏çËÉΩ‰øùËØÅËøô‰∏ÄÁÇπ„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏§ÁßçÊñπÊ≥ïÊù•ÂáèÂ∞ëÁ¢∞ÊíûÁöÑÂèØËÉΩÊÄß„ÄÇ È¶ñÂÖàÔºåÂú®ÁΩëÁªúÂÆπÈáè‰∏ã‰ª•ÁªôÂÆöÈ¢ëÁéáÂπøÊí≠‰∏Ä‰∏™ËΩ®Ëøπ„ÄÇ Ëøô‰∏ç‰ºöÂºïËµ∑ËÆ°ÁÆóË¥üÊãÖÔºåÂõ†‰∏∫ÂÖ∏ÂûãÁöÑËΩ®ËøπÂåÖÂê´ 3D Ëà™ÁÇπÂíåÂÖ∂‰ªñÂèÇÊï∞ÔºåÂ§ßÂ∞èÂ∞è‰∫é 0.5KB„ÄÇ Áõ∏ÊØî‰πã‰∏ãÔºåÁé∞‰ª£Êó†Á∫øÁΩëÁªúÂ¶ÇËìùÁâô\\footnote{https://www.bluetooth.com/}ÂèØ‰ª•ÂÆûÁé∞Ë∂ÖËøá 1Mbps ÁöÑÈÄüÂ∫¶„ÄÇ ÂÖ∂Ê¨°ÔºåÊØè‰∏™ agent Âú®‰ªéÂπøÊí≠ÁΩëÁªúÊé•Êî∂Âà∞ËΩ®ËøπÂêéÁ´ãÂç≥Ê£ÄÊü•Á¢∞ÊíûÔºåÂ¶ÇÊûúÂèëÁé∞ÊΩúÂú®Á¢∞ÊíûÔºåÂ∞±‰ºöÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑÊó†Á¢∞ÊíûËΩ®Ëøπ„ÄÇ Ëøô‰∏ÄÁ≠ñÁï•ÂèØ‰ª•Ëß£ÂÜ≥Â§ö‰∏™ agent Âú®ÂæàÁü≠ÁöÑÊó∂Èó¥ÂÜÖÁîüÊàêËΩ®ËøπÔºåËÄåÊ≤°ÊúâÊé•Êî∂Âà∞ÂÖ∂‰ªñ agent ÁöÑËΩ®ËøπÁöÑÈóÆÈ¢òÔºåËøôÊòØÁî±‰∫éÂª∂ËøüÊàñÊï∞ÊçÆÂåÖ‰∏¢Â§±ÈÄ†ÊàêÁöÑ„ÄÇ Ê≠§Â§ñÔºåËÄÉËôëÂà∞ agent Êï∞ÈáèÁöÑÂ¢ûÂä†‰ºöÂØºËá¥ËÆ°ÁÆóÂ§çÊùÇÂ∫¶ÁöÑÂ¢ûÂä†„ÄÇ Âú®ËßÑÂàí‰πãÂâçÔºåÊØè‰∏™ agent Â∞ÜÂÖ∂ÂΩìÂâç‰ΩçÁΩÆ‰∏éÊé•Êî∂Âà∞ÁöÑÂë®Âõ¥ agent ÁöÑËΩ®ËøπËøõË°åÊØîËæÉÔºå‰ªª‰ΩïË∂ÖÂá∫ËßÑÂàíËåÉÂõ¥ÁöÑËΩ®ËøπÂ∞ÜË¢´ÂøΩÁï•„ÄÇ 2ÔºâChain Network ÈìæÂºèÁΩëÁªúÔºö ‰∏Ä‰∏™Âü∫‰∫éËøûÊé•ÁöÑÁ®≥ÂÆöÈìæÁΩëÁªúË¢´Áî®‰∫éÊó∂Èó¥Êà≥ÂêåÊ≠•ÂíåÁ≥ªÁªüÂêØÂä®ÁÆ°ÁêÜ„ÄÇ Âú®Á≥ªÁªüÂêØÂä®Êó∂Ôºå‰ª£ÁêÜÁîüÊàêÈ¢ÑÂÆö‰πâÈ°∫Â∫èÁöÑËΩ®Ëøπ„ÄÇ ÊØè‰∏™‰ª£ÁêÜÈÄöËøáÈìæÁΩëÁªúÂú®Êî∂Âà∞‰ºòÂÖàÁ∫ßÊõ¥È´òÁöÑ‰ª£ÁêÜÁöÑËΩ®ËøπÂêéÁîüÊàêÂàùÂßãËΩ®Ëøπ„ÄÇ ËøôÁßçÁ≠ñÁï•ÈÅøÂÖç‰∫ÜÂú®Á≥ªÁªüÂêØÂä®ËøáÁ®ã‰∏≠Áî±‰∫éÂêåÊó∂ÁîüÊàêËΩ®ËøπËÄåÂºïËµ∑ÁöÑÊ∑∑‰π±ÔºåÂõ†‰∏∫‰ª£ÁêÜÂú®ÈÇ£Êó∂Ê≤°ÊúâÂÖ∂‰ªñËΩ®ËøπÁöÑ‰ø°ÊÅØ„ÄÇ 6 Âü∫ÂáÜÊµãËØï Âú®Ê®°Êãü‰∏≠Ôºå‰ΩøÁî® i7-9700KF CPU ËøõË°åÂü∫ÂáÜÊØîËæÉ„ÄÇÂØπ‰∫éÂèÇÊï∞ËÆæÁΩÆÔºåËßÑÂàíËßÜË∑ùËÆæÁΩÆ‰∏∫ 7.5m„ÄÇ$\\lambda_s=1.0,~\\lambda_c=\\lambda_w=\\lambda_t=0.5,~\\lambda_d=0.1$„ÄÇÂú∞ÂõæÂàÜËæ®Áéá‰∏∫ 0.1m„ÄÇÈáçÊñ∞ËßÑÂàíÊØèÁßíËß¶Âèë‰∏ÄÊ¨°ÊàñËÄÖÈ¢ÑÊµãÂà∞Á¢∞ÊíûÊó∂Ëß¶Âèë„ÄÇËøô‰∏™ËÆæÁΩÆÂú®Ê®°ÊãüÂíåÁúüÂÆû‰∏ñÁïåÂÆûÈ™å‰∏≠ÈÉΩË¢´ÈááÁî®„ÄÇ A. Topological Planning\r Êàë‰ª¨Â∞ÜÊâÄÂª∫ËÆÆÁöÑ EGO-Swarm ‰∏é Fast-Planner\\cite{zhou2020robust}Âú®ÂÄôÈÄâËΩ®ËøπÊï∞ÂíåÂâçÁ´ØÊãìÊâëË∑ØÂæÑÊêúÁ¥¢ÁöÑËÆ°ÁÆóÊó∂Èó¥ÊñπÈù¢ÁöÑÊãìÊâëËßÑÂàíÊÄßËÉΩËøõË°åÊØîËæÉ„ÄÇ Â¶ÇÂõæ 9 ÊâÄÁ§∫ÔºåEGO-Swarm ÂèëÁé∞ÁöÑÂÄôÈÄâËΩ®ËøπËæÉÂ∞ëÔºåËøôÊÑèÂë≥ÁùÄÊâæÂà∞ÂÖ®Â±ÄÊúÄ‰ºòËß£ÁöÑÊ¶ÇÁéáËæÉ‰ΩéÔºå‰ΩÜÊØî\\cite{zhou2020robust}Âø´ 100 ÂÄç„ÄÇ Áî±‰∫é Fast-Planner ÈÄöËøá PRM\\cite{kavraki1996probabilistic}ÂõæÊêúÁ¥¢„ÄÅË∑ØÂæÑÁº©Áü≠ÂíåË∑ØÂæÑ‰øÆÂâ™Êù•ÊâæÂà∞ÊãìÊâë‰∏ä‰∏çÂêåÁöÑË∑ØÂæÑÔºåËøô‰∫õÊñπÊ≥ïËÄóÊó∂ËæÉÈïø‰ΩÜËá™Áî±Â∫¶ËæÉÈ´òÔºå‰∏éÊâÄÊèêÂá∫ÁöÑÈöêÂºèÊãìÊâëË∑ØÂæÑÊêúÁ¥¢ÊñπÊ≥ïÁõ∏ÊØî„ÄÇ B. Swarm Planning In Empty Space Á©∫Âú∞ Êàë‰ª¨Â∞ÜÊèêÂá∫ÁöÑÊñπÊ≥ï‰∏é DMPC\\cite{luis2019trajectory}ÔºåORCA\\cite{van2011reciprocalnbody}Âíå RBP\\cite{park2020efficient}ËøõË°åÊØîËæÉÔºåÊØîËæÉÁöÑÊåáÊ†áÂåÖÊã¨È£ûË°åË∑ùÁ¶ª($d{\\rm{fly}}$)ÔºåÈ£ûË°åÊó∂Èó¥($t{\\rm{fly}}$)ÔºåÊØè‰∏™Êú∫Âô®‰∫∫ÁöÑÁ¢∞ÊíûÊ¨°Êï∞ÂíåËÆ°ÁÆóÊó∂Èó¥($t_{\\rm{cal}}$)„ÄÇ ÊØè‰∏™ÊØîËæÉÁöÑÊñπÊ≥ïÈÉΩ‰ΩøÁî®ÈªòËÆ§ÂèÇÊï∞ÔºåÈô§‰∫ÜÊúÄÂ§ßÈÄüÂ∫¶ÂíåÂä†ÈÄüÂ∫¶„ÄÇ Â¶ÇÂõæ\\ref{pic:multicomp}ÊâÄÁ§∫ÔºåÂÖ´‰∏™Êú∫Âô®‰∫∫Âú®‰∏Ä‰∏™ÂúÜÂúà‰∏äËøõË°å‰∫§Êç¢ËΩ¨Êç¢„ÄÇ Tab.\\ref{tab:plan_cmp}‰∏≠ÁöÑÁªìÊûúÊòØÊâÄÊúâÊú∫Âô®‰∫∫ÁöÑÂπ≥ÂùáÂÄº„ÄÇ $t{\\rm{cal}}$Áî®' *'Ë°®Á§∫ÔºåÂõ†‰∏∫Êàë‰ª¨ËÆ∞ÂΩïÁöÑÁ¶ªÁ∫øÊñπÊ≥ï DMPC Âíå RBP ÁöÑËÆ°ÁÆóÊó∂Èó¥ÊòØËÆ°ÂàíÊâÄÊúâÊú∫Âô®‰∫∫Êï¥‰∏™ËΩ®ËøπÁöÑÊÄªÊó∂Èó¥ÔºåËÄåÂØπ‰∫é ORCA Âíå EGO-Swarm Êù•ËØ¥ÔºåÂÆÉÊòØÊØè‰∏™Êú∫Âô®‰∫∫ÁöÑÊú¨Âú∞ÈáçÊñ∞ËßÑÂàíÊó∂Èó¥„ÄÇ Tab.\\ref{tab:plan_cmp}ÂíåÂõæ 10 Ë°®ÊòéÔºåRBP ÂÄæÂêë‰∫éÁîüÊàêÂÆâÂÖ®‰ΩÜ‰øùÂÆàÁöÑËΩ®ËøπÔºåÂõ†‰∏∫ÊûÑÂª∫Âá∏Áõ∏ÂØπÂÆâÂÖ®È£ûË°åËµ∞Âªä \\cite{park2020efficient}ÊòæËëóÂéãÁº©‰∫ÜËß£Á©∫Èó¥„ÄÇ DMPC ËÆæËÆ°Áî®‰∫éÂàÜÂ∏ÉÂºèÈÉ®ÁΩ≤„ÄÇ ÁÑ∂ËÄåÔºåÂú®ÁúüÂÆû‰∏ñÁïåÁöÑÂ∫îÁî®‰∏≠Êó†Ê≥ï‰øùËØÅÂáÜÁ°ÆÂíåÈ´òÈ¢ëÁöÑÂßøÊÄÅÈÄö‰ø°„ÄÇ È´òÊïàÁöÑËßÑÂàô‰Ωø ORCA Êõ¥Êñ∞ÈÄüÂ∫¶Âø´„ÄÇ ÁÑ∂ËÄåÔºå‰ΩøÁî®ÈÄüÂ∫¶‰Ωú‰∏∫ÊéßÂà∂ÂëΩ‰ª§‰ΩøÂÖ∂‰∏çÈÄÇÁî®‰∫éÂõõÊóãÁøºÁ≠â‰∏âÈò∂Á≥ªÁªü„ÄÇ Á¢∞ÊíûÈ£éÈô©‰πüÈôêÂà∂‰∫ÜÂÆÉÁöÑÂ∫îÁî®„ÄÇ Áõ∏ÊØî‰πã‰∏ãÔºåÊàë‰ª¨ÊèêÂá∫ÁöÑÊñπÊ≥ïÁîüÊàê‰∫ÜÊúÄÁü≠ÁöÑÊó†Á¢∞Êíû„ÄÅÈùû‰øùÂÆàÊÄßÁöÑËΩ®ËøπÔºåÂπ∂ÂÖ∑ÊúâÂø´ÈÄüËÆ°ÁÆóÁöÑÁâπÁÇπ„ÄÇ Âõ†Ê≠§ÔºåÂÆÉÂèØ‰ª•ÂÆûÁé∞ÂõõÊóãÁøºÁöÑÂÆûÊó∂Â∫îÁî®„ÄÇ In Obstacle-rich Environments Âú®ÈöúÁ¢çÁâ©ÂØÜÈõÜÁöÑÁéØÂ¢É Êàë‰ª¨Ê®°Êãü‰∫ÜÂçÅÊû∂Êó†‰∫∫Êú∫‰ª•ÊØèÁßí 2 Á±≥ÁöÑÈÄüÂ∫¶ÈôêÂà∂‰ªéÂú∞ÂõæÁöÑ‰∏ÄËæπÈ£ûÂà∞Âè¶‰∏ÄËæπÔºåÂõõÊóãÁøºÂçäÂæÑ‰∏∫ 0.2 Á±≥„ÄÇ Âõæ 2 ÊòØ 0.42 ‰∏™ÈöúÁ¢çÁâ©/$m^2$ÁöÑÊ®°ÊãüÂø´ÁÖß„ÄÇ ÊØè‰∏™‰ª£ÁêÜÂçïÁã¨ÊÑüÁü•ÁéØÂ¢ÉÔºåÂπ∂‰∏îÊûÑÂª∫ÁöÑÂ±ÄÈÉ®Âú∞Âõæ‰ª•‰∏çÂêåÁöÑÈ¢úËâ≤ÊòæÁ§∫„ÄÇ ÁªìÊûúÊÄªÁªìÂú®Ë°® 2 ‰∏≠ÔºåÂÖ∂‰∏≠$d{\\rm{fly}}$ÊòØÂπ≥ÂùáÈ£ûË°åË∑ùÁ¶ªÔºå$d{\\rm{safe}}$ÊòØÈ£ûË°åÊµãËØïÊúüÈó¥‰∏éÈöúÁ¢çÁâ©ÁöÑÊúÄËøëË∑ùÁ¶ª„ÄÇ ËÆæËÆ°‰∫Ü‰∏ÄÁßçÈÄÜÂêëÁÇπÂØπÁÇπËΩ¨Êç¢Ôºå‰ΩøÂæóÂú®Âú∞Âõæ‰∏≠ÂøÉÂë®Âõ¥‰∏çÂèØÈÅøÂÖçÂú∞ËøõË°åÁõ∏‰∫íÈÅøÁ¢∞„ÄÇ Âú®ËøôÁßçÊÉÖÊôØ‰∏ãÔºåÂ±û‰∫éÁæ§‰ΩìÁöÑÊØè‰∏™‰ª£ÁêÜÈÉΩÊàêÂäüÂú∞ËßÑÂàí‰∫ÜÂπ≥Á®≥‰∏îÂÆâÂÖ®ÁöÑËΩ®Ëøπ„ÄÇ Scalability Analysis ÂèØÊâ©Â±ïÊÄßÂàÜÊûê Êàë‰ª¨Âú®‰∏Ä‰∏™ÊÉÖÊôØ‰∏≠ËØÑ‰º∞ËÆ°ÁÆóÊÄßËÉΩÔºåÂÖ∂‰∏≠ÊéíÂàóÊàê‰∏ÄÊù°Áõ¥Á∫øÁöÑ‰ª£ÁêÜÈ£ûÂêëÈöèÊú∫ÁõÆÊ†áÁÇπÔºåË∑ùÁ¶ª 50 Á±≥„ÄÇÊ≠£Â¶ÇÂõæ 11 ÊâÄÁ§∫ÔºåÂú®Á¨¨ 5.B.1 ËäÇÁöÑÊåâÈúÄÁ¢∞ÊíûÊ£ÄÊü•Á≠ñÁï•ÁöÑÂΩ±Âìç‰∏ãÔºåÈöèÁùÄ‰ª£ÁêÜÊï∞ÈáèÁöÑÂ¢ûÂä†ÔºåÊó∂Èó¥Â§çÊùÇÂ∫¶ÈÄêÊ∏êË∂ã‰∫éÂπ≥Á®≥„ÄÇ 7 Real-World exp 1ÔºâIndoor Âú®ÂÆ§ÂÜÖÂÆûÈ™å‰∏≠ÔºåÈÄüÂ∫¶ÈôêÂà∂‰∏∫ 1.5 Á±≥/ÁßíÔºåÂ¶ÇÂõæ 12 ÊâÄÁ§∫„ÄÇ ÊúÄ‰∏äÊñπÁöÑÂõæÊòæÁ§∫‰∫Ü‰∏âÊû∂ÂõõÊóãÁøºÊó†‰∫∫Êú∫ËøõË°åÂæ™ÁéØ‰∫§Êç¢ÔºåÂπ∂ËøõË°å‰∫íÁõ∏ÈÅøÁ¢∞„ÄÇ Âú®‰∏≠Èó¥ÁöÑÂõæ‰∏≠ÔºåÂõõÊóãÁøºÊó†‰∫∫Êú∫ÊàêÂäü‰æùÊ¨°ÈÄöËøá‰∏Ä‰∏™Áã≠Á™ÑÁöÑÈó®„ÄÇ Âú®Â∫ïÈÉ®ÁöÑÂõæ‰∏≠ÔºåÁéØÂ¢ÉÊõ¥Âä†Êã•Êå§„ÄÇ ‰∏âÊû∂ÂõõÊóãÁøºÊó†‰∫∫Êú∫ÊàêÂäüÁ©øË∂ä‰∫ÜËøô‰∏™ÁéØÂ¢É„ÄÇ Âú®‰∏Ä‰∏™Ê†ëÊú®Èó¥Ë∑ùÂ§ßÁ∫¶‰∏∫ 2 Á±≥ÁöÑÊ£ÆÊûó‰∏≠ÔºåÂ¶ÇÂõæ 1 ÊâÄÁ§∫Ôºå‰∏â‰∏™ÂõõÊóãÁøºÊó†‰∫∫Êú∫‰∏ÄËµ∑‰ªéÊ£ÆÊûó‰∏≠Ëµ∑È£ûÔºåÂπ∂ÊàêÂäüÂà∞ËææÊ£ÆÊûóÂ§ñÁöÑÁõÆÊ†á‰ΩçÁΩÆ„ÄÇ ÈÄüÂ∫¶ÈôêÂà∂ËÆæÂÆö‰∏∫ 1.5 Á±≥/Áßí„ÄÇ ‰∏∫Ëøõ‰∏ÄÊ≠•Âº∫Ë∞ÉÁõ∏‰∫íÈÅøËÆ©ÔºåÊàë‰ª¨Â∞ÜÁõÆÊ†á‰ΩçÁΩÆÁõ∏ÂØπ‰∫éËµ∑Âßã‰ΩçÁΩÆÁöÑÈ°∫Â∫èÈ¢†ÂÄíÔºå‰ΩøÂæóÁõ∏‰∫íÈÅøËÆ©Êàê‰∏∫‰∏çÂèØÈÅøÂÖçÁöÑÔºåÂ∞±ÂÉèÊàë‰ª¨Âú®Á¨¨\\ref{sec:In_Obstacle-rich_Environments}ËäÇ‰∏≠ÊâÄÂÅöÁöÑÈÇ£Ê†∑„ÄÇ ÊúâÂÖ≥ÂÆûÈ™åÁöÑÊõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉÊàë‰ª¨Âú® github ‰∏äÁöÑ‰ª£Á†ÅÔºåÂπ∂ËßÇÁúãÊàë‰ª¨ÈôÑ‰∏äÁöÑËßÜÈ¢ë\\footnote{https://github.com/ZJU-FAST-Lab/ego-planner-swarm}„ÄÇ 8 ÊÄªÁªì Êú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßçÂú®Êú™Áü•ÊùÇ‰π±ÁéØÂ¢É‰∏≠Âà©Áî®‰ªÖÈôê‰∫éÊú∫ËΩΩËµÑÊ∫êÁöÑÂ§öÊú∫Âô®‰∫∫ÂØºËà™ÁöÑÁ≥ªÁªüÊÄßËß£ÂÜ≥ÊñπÊ°à„ÄÇ Âü∫ÂáÜÊØîËæÉË°®ÊòéÂÖ∂ËÆ°ÁÆóÊó∂Èó¥Áü≠‰∏îËΩ®ËøπË¥®ÈáèÈ´ò„ÄÇ ÂÆûÈôÖ‰∏ñÁïåÂÆûÈ™åÈ™åËØÅ‰∫ÜÂÖ∂È≤ÅÊ£íÊÄßÂíåÊïàÁéá "},"Learn/LearnDrones/Planner/EGO-Planner-2020.html":{"url":"Learn/LearnDrones/Planner/EGO-Planner-2020.html","title":"EGO-Planner-2020","keywords":"","body":"EGO-Planner-2020 EGO-Planner: An ESDF-free Gradient-based Local Planner for Quadrotors IEEE Robotics and Automation Letters (Volume: 6, Issue: 2, April 2021) github code arxiv Abstract Gradient-based planners are widely used for quadrotor local planning, in which a Euclidean Signed Distance Field (ESDF) is crucial for evaluating gradient magnitude and direction. Nevertheless, computing such a field has much redundancy since the trajectory optimization procedure only covers a very limited subspace of the ESDF updating range. In this paper, an ESDF-free gradient-based planning framework is proposed, which significantly reduces computation time. The main improvement is that the collision term in penalty function is formulated by comparing the colliding trajectory with a collision free guiding path . The resulting obstacle information will be stored only if the trajectory hits new obstacles, making the planner only extract necessary obstacle information. Then, we lengthen the time allocation if dynamical feasibility is violated. An anisotropic curve fitting algorithm is introduced to adjust higher order derivatives of the trajectory while maintaining the original shape. Benchmark comparisons and real-world experiments verify its robustness and high-performance. The source code is released as ros packages. Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËßÑÂàíÂô®ÂπøÊ≥õÁî®‰∫éÂõõÊóãÁøºÊú¨Âú∞ËßÑÂàíÔºåÂÖ∂‰∏≠ Ê¨ßÂá†ÈáåÂæóÊúâÁ¨¶Âè∑Ë∑ùÁ¶ªÂú∫ÔºàESDFÔºâÂØπ‰∫éËØÑ‰º∞Ê¢ØÂ∫¶Â§ßÂ∞èÂíåÊñπÂêëËá≥ÂÖ≥ÈáçË¶Å„ÄÇ ÁÑ∂ËÄåÔºåËÆ°ÁÆóËøôÊ†∑ÁöÑÂú∫‰ºöÂ≠òÂú®ÂæàÂ§öÂÜó‰ΩôÔºåÂõ†‰∏∫ËΩ®Ëøπ‰ºòÂåñËøáÁ®ã‰ªÖË¶ÜÁõñ ESDF Êõ¥Êñ∞ËåÉÂõ¥ÁöÑ‰∏Ä‰∏™ÈùûÂ∏∏ÊúâÈôêÁöÑÂ≠êÁ©∫Èó¥„ÄÇ Êú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßç Êó†ÈúÄESDFÁöÑÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑËßÑÂàíÊ°ÜÊû∂ÔºàESDF-free gradient-based planning frameworkÔºâÔºåÂ§ßÂ§ßÂáèÂ∞ë‰∫ÜËÆ°ÁÆóÊó∂Èó¥„ÄÇ ‰∏ªË¶ÅÊîπËøõÂú®‰∫éÈÄöËøáÂ∞Ü Á¢∞ÊíûËΩ®Ëøπ‰∏é Êó†Á¢∞ÊíûÂºïÂØºË∑ØÂæÑËøõË°å ÊØîËæÉ Êù•Âà∂ÂÆöÊÉ©ÁΩöÂáΩÊï∞‰∏≠ÁöÑ Á¢∞ÊíûÈ°π„ÄÇ ‰ªÖÂΩìËΩ®Ëøπ‰∏éÊñ∞ÈöúÁ¢çÁâ©Á¢∞ÊíûÊó∂ÔºåÊâç‰ºöÂ≠òÂÇ®ÁîüÊàêÁöÑÈöúÁ¢ç‰ø°ÊÅØÔºå‰ΩøËßÑÂàíÂô®‰ªÖÊèêÂèñÂøÖË¶ÅÁöÑÈöúÁ¢ç‰ø°ÊÅØ„ÄÇÁÑ∂ÂêéÔºåÂ¶ÇÊûúËøùÂèç‰∫ÜÂä®ÂäõÂ≠¶ÂèØË°åÊÄßÔºåÊàë‰ª¨‰ºöÂª∂ÈïøÊó∂Èó¥ÂàÜÈÖç„ÄÇ ÂºïÂÖ•‰∏ÄÁßç ÂêÑÂêëÂºÇÊÄßÊõ≤Á∫øÊãüÂêàÁÆóÊ≥ïÔºå‰ª•Ë∞ÉÊï¥ËΩ®ËøπÁöÑÈ´òÈò∂ÂØºÊï∞ÔºåÂêåÊó∂‰øùÊåÅÂéüÂßãÂΩ¢Áä∂„ÄÇ Âü∫ÂáÜÊØîËæÉÂíåÂÆûÈôÖÂÆûÈ™åÈ™åËØÅ‰∫ÜÂÖ∂È≤ÅÊ£íÊÄßÂíåÈ´òÊÄßËÉΩ„ÄÇÊ∫ê‰ª£Á†Å‰ª• ROS ËΩØ‰ª∂ÂåÖÂΩ¢ÂºèÂèëÂ∏É„ÄÇ 1 Introduction Traditionally, gradient-based planners rely on a pre-built ESDF map to evaluate the gradient magnitude and direction, and use numerical optimization to generate a local optimal solution. Although the optimization programs enjoy fast convergence, they suffer a lot from constructing the required ESDF beforehand. As the statistics (TABLE II from EWOK[2]) states, the ESDF computation takes up to about 70% of total processing time for conducting local planning. Therefore, we can safely claim that, building ESDF has become the bottleneck of gradient-based planners, preventing the method from being applied to resource-limited platforms. ‰º†Áªü‰∏äÔºåÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑËßÑÂàíÂô®‰æùÈù†È¢ÑÂÖàÊûÑÂª∫ÁöÑ ESDF ÂõæÊù•ËØÑ‰º∞Ê¢ØÂ∫¶Â§ßÂ∞èÂíåÊñπÂêëÔºåÂπ∂‰ΩøÁî®Êï∞ÂÄº‰ºòÂåñÊù•ÁîüÊàêÂ±ÄÈÉ®ÊúÄ‰ºòËß£„ÄÇÂ∞ΩÁÆ°‰ºòÂåñÁ®ãÂ∫èÂÖ∑ÊúâÂø´ÈÄüÊî∂ÊïõÁöÑ‰ºòÁÇπÔºå‰ΩÜÁî±‰∫éÈ¢ÑÂÖàÊûÑÂª∫ÊâÄÈúÄÁöÑ ESDFÔºåÂÆÉ‰ª¨ÂèóÂà∞ÂæàÂ§ßÂΩ±Âìç„ÄÇÊ≠£Â¶ÇÁªüËÆ°Êï∞ÊçÆÔºàÊù•Ëá™ EWOK [ 2 ]ÁöÑË°® II ÔºâÊâÄËø∞ÔºåESDF ËÆ°ÁÆóÂç†Áî®‰∫ÜËøõË°åÊú¨Âú∞ËßÑÂàíÁöÑÊÄªÂ§ÑÁêÜÊó∂Èó¥ÁöÑÁ∫¶ 70%„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÂèØ‰ª•ÊúâÊääÊè°Âú∞ËØ¥ÔºåÊûÑÂª∫ ESDF Â∑≤Êàê‰∏∫Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËßÑÂàíÂô®ÁöÑÁì∂È¢àÔºåÈòªÊ≠¢ËØ•ÊñπÊ≥ïÂ∫îÁî®‰∫éËµÑÊ∫êÊúâÈôêÁöÑÂπ≥Âè∞„ÄÇ Â∞ΩÁÆ° ESDF Ë¢´ÂπøÊ≥õ‰ΩøÁî®Ôºå‰ΩÜÂæàÂ∞ëÊúâ‰∫∫Á†îÁ©∂ÂÖ∂ÂøÖË¶ÅÊÄß„ÄÇÈÄöÂ∏∏Êù•ËØ¥ÔºåÊúâ‰∏§ÁßçÊñπÂºèÊù•ÊûÑÂª∫ ESDF„ÄÇÂ¶ÇÁ¨¨ 2 ËäÇÊâÄËø∞ÔºåËøô‰∫õÊñπÊ≥ïÂèØ‰ª•ÂàÜ‰∏∫ Â¢ûÈáèÂÖ®Â±ÄÊõ¥Êñ∞ÊñπÊ≥ï Âíå ÊâπÂ§ÑÁêÜÂ±ÄÈÉ®ËÆ°ÁÆóÊñπÊ≥ï„ÄÇÁÑ∂ËÄåÔºåËøô‰∏§ÁßçÊñπÊ≥ïÈÉΩÊ≤°Êúâ ÂÖ≥Ê≥®ËΩ®ËøπÊú¨Ë∫´ „ÄÇÂõ†Ê≠§ÔºåËÆ°ÁÆó ESDF ÂÄº‰∏äËä±Ë¥π‰∫ÜÂ§™Â§öÁöÑËÆ°ÁÆóÈáèÔºåËøô‰∫õ ESDF ÂÄºÂØπËßÑÂàíÊ≤°Êúâ‰ªª‰ΩïË¥°ÁåÆ„ÄÇÊç¢Âè•ËØùËØ¥ÔºåÂΩìÂâçÂü∫‰∫é ESDF ÁöÑÊñπÊ≥ïÂπ∂Ê≤°ÊúâÁõ¥Êé•ÂíåÂîØ‰∏ÄÂú∞ÊúçÂä°‰∫éËΩ®Ëøπ‰ºòÂåñ„ÄÇÂ¶ÇÂõæ 1 ÊâÄÁ§∫ÔºåÂú®‰∏ÄËà¨ÁöÑËá™‰∏ªÂØºËà™Âú∫ÊôØ‰∏≠ÔºåÊó†‰∫∫Êú∫Âè™ÈúÄË¶ÅÈÅøÂÖçÂ±ÄÈÉ®Á¢∞ÊíûÔºåËΩ®Ëøπ‰ªÖË¶ÜÁõñ‰∫Ü ESDF Êõ¥Êñ∞ËåÉÂõ¥ÁöÑÊúâÈôêÁ©∫Èó¥„ÄÇÂú®ÂÆûË∑µ‰∏≠ÔºåÂ∞ΩÁÆ°‰∏Ä‰∫õÊâãÂä®ËßÑÂàôÂèØ‰ª•ÂÜ≥ÂÆöËæÉÁ™ÑÁöÑ ESDF ËåÉÂõ¥ÔºåÂÆÉ‰ª¨Áº∫‰πèÁêÜËÆ∫ÁöÑÂêàÁêÜÊÄßÔºå‰ªçÁÑ∂‰ºöÂºïËµ∑‰∏çÂøÖË¶ÅÁöÑËÆ°ÁÆó„ÄÇ Figure 1: Trajectory during optimizing just covers a very limited space of the ESDF updating range. (ÂÖ∑ÊúâÁ¢∞ÊíûÊ£ÄÊµãÂíåËΩ®Ëøπ‰ºòÂåñÂäüËÉΩ) In this paper, we design an ESDF-free Gradient-based lOcal planning framework called EGO, and we incorporate careful engineering considerations to make it lightweight and robust. The proposed algorithm is composed of a gradient-based spline optimizer and a post-refinement procedure. Âú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨ËÆæËÆ°‰∫Ü‰∏Ä‰∏™ Êó†ESDFÁöÑÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑÊú¨Âú∞ËßÑÂàíÊ°ÜÊû∂ÔºåÁß∞‰∏∫ EGOÔºåÂπ∂ÁªìÂêàÁ≤æÂøÉÁöÑÂ∑•Á®ãËÄÉËôë‰ΩøÂÖ∂ËΩªÂ∑ß‰∏îÈ≤ÅÊ£í„ÄÇ ÊâÄÊèêÂá∫ÁöÑÁÆóÊ≥ïÁî±Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑ Ê†∑Êù°‰ºòÂåñÂô®Ôºàspline optimizerÔºâÂíå ÂêéÂ§ÑÁêÜÁ®ãÂ∫èÔºàa post-refinement procedureÔºâÁªÑÊàê„ÄÇ Firstly, we optimize the trajectory with smoothness, collision, and dynamical feasibility terms. Unlike traditional approaches that query pre-computed ESDF, we model the collision cost by comparing the trajectory inside obstacles with a guiding collision-free path. È¶ñÂÖàÔºåÊàë‰ª¨ÈÄöËøáÂπ≥ÊªëÂ∫¶„ÄÅÁ¢∞ÊíûÂíåÂä®ÂäõÂèØË°åÊÄßÁ≠âÈ°πËøõË°å‰∫ÜËΩ®Ëøπ‰ºòÂåñ„ÄÇ ‰∏é‰º†ÁªüÊñπÊ≥ï‰∏çÂêåÔºåÊàë‰ª¨ÈÄöËøáÂ∞ÜÈöúÁ¢çÁâ©ÂÜÖÁöÑËΩ®Ëøπ‰∏éÂºïÂØºÁöÑÊó†Á¢∞ÊíûË∑ØÂæÑËøõË°åÊØîËæÉÊù•ÂØπÁ¢∞ÊíûÊàêÊú¨ËøõË°åÂª∫Ê®°„ÄÇ We then project the forces onto the colliding trajectory and generate estimated gradient to wrap the trajectory out of obstacles. During the optimization, the trajectory will rebound a few times between nearby obstacles and finally terminate in a safe region. In this way, we only calculate the gradient when necessary, and avoid computing ESDF in regions irrelevant to the local trajectory. If the resulted trajectory violates dynamical limits, which is usually caused by unreasonable time allocation, the refinement process is activated. During the refinement, trajectory time is reallocated when the limits are exceeded. With the enlarged time allocation, a new B-spline that fits the previous dynamical infeasible one while balancing the feasibility and fitting accuracy is generated. To improve robustness, the fitting accuracy is modeled anisotropically with different penalties on axial and radial directions. ÁÑ∂ÂêéÔºåÊàë‰ª¨Â∞ÜÂäõÊäïÂΩ±Âà∞Á¢∞ÊíûËΩ®Ëøπ‰∏äÔºåÁîüÊàêÈ¢Ñ‰º∞ÁöÑÊ¢ØÂ∫¶‰ª•Â∞ÜËΩ®ËøπÂåÖË£πÂú®ÈöúÁ¢çÁâ©Â§ñÈÉ®„ÄÇ Âú®‰ºòÂåñËøáÁ®ã‰∏≠ÔºåËΩ®ËøπÂ∞ÜÂú®ÈôÑËøëÈöúÁ¢çÁâ©‰πãÈó¥ÂèçÂºπÂá†Ê¨°ÔºåÊúÄÂêéÂÅúÂú®‰∏Ä‰∏™ÂÆâÂÖ®Âå∫Âüü„ÄÇ ÈÄöËøáËøôÁßçÊñπÂºèÔºåÊàë‰ª¨ Âè™Âú®ÂøÖË¶ÅÊó∂ËÆ°ÁÆóÊ¢ØÂ∫¶ ÔºåÂπ∂ÈÅøÂÖçÂú®‰∏éÂ±ÄÈÉ®ËΩ®ËøπÊó†ÂÖ≥ÁöÑÂå∫ÂüüËÆ°ÁÆó ESDF„ÄÇ Â¶ÇÊûúÁîüÊàêÁöÑËΩ®ËøπËøùÂèçÂä®ÂäõÂ≠¶ÈôêÂà∂ÔºåÈÄöÂ∏∏ÊòØÁî±‰∫é‰∏çÂêàÁêÜÁöÑÊó∂Èó¥ÂàÜÈÖçÔºåÂ∞ÜÂêØÂä® ÂêéÁª≠‰ºòÂåñ „ÄÇ Âú®‰ºòÂåñËøáÁ®ã‰∏≠ÔºåË∂ÖÂá∫Êó∂Èó¥ÈôêÂà∂Êó∂Ôºå‰ºöÈáçÊñ∞ÂàÜÈÖçËΩ®ËøπÁöÑÊó∂Èó¥„ÄÇ ÈÄöËøáÂ¢ûÂä†Êó∂Èó¥ÂàÜÈÖçÔºåÊàë‰ª¨ÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑ B Ê†∑Êù°Êõ≤Á∫øÔºåÂÆÉÂèØ‰ª•ÊãüÂêàÂÖàÂâçÁöÑÂä®ÊÄÅ‰∏çÂèØË°åÊ†∑Êù°ÔºåÂêåÊó∂Âπ≥Ë°°ÂèØË°åÊÄßÂíåÊãüÂêàÁ≤æÂ∫¶„ÄÇ‰∏∫‰∫ÜÊèêÈ´òÈ≤ÅÊ£íÊÄßÔºåÊãüÂêàÁ≤æÂ∫¶ÈááÁî®ÂêÑÂêëÂºÇÊÄßÂª∫Ê®°ÔºåÂú®ËΩ¥ÂêëÂíåÂæÑÂêë‰∏äÂÖ∑Êúâ‰∏çÂêåÁöÑÊÉ©ÁΩö„ÄÇ ÊçÆÊàë‰ª¨ÊâÄÁü•ÔºåËøôÁßçÊñπÊ≥ïÊòØÈ¶ñÊ¨°ÂÆûÁé∞‰∫ÜÊó† ESDF ÁöÑÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑÂ±ÄÈÉ®ËßÑÂàí„ÄÇ ‰∏éÁé∞ÊúâÁöÑÊúÄÂÖàËøõÊñπÊ≥ïÁõ∏ÊØîÔºåÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïÂú®ÂøΩÁï• ESDF Áª¥Êä§ÁöÑÂêåÊó∂ÁîüÊàêÂÖ∑ÊúâÁõ∏ÂΩìÂπ≥ÊªëÂ∫¶Âíå‰æµÁï•ÊÄßÁöÑÂÆâÂÖ®ËΩ®ËøπÔºåËÆ°ÁÆóÊó∂Èó¥Èôç‰Ωé‰∫Ü‰∏Ä‰∏™Êï∞ÈáèÁ∫ß„ÄÇ Êàë‰ª¨ËøõË°å‰∫ÜÂÖ®Èù¢ÁöÑ‰ªøÁúüÂíåÂÆûÈôÖÊµãËØïÔºå‰ª•È™åËØÅÊàë‰ª¨ÁöÑÊñπÊ≥ï„ÄÇ Êú¨ÊñáÁöÑË¥°ÁåÆÂåÖÊã¨Ôºö We propose a novel and robust gradient-based quadrotor local planning method, which evaluates and projects gradient information directly from obstacles instead of a pre-built ESDF. Êàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÊñ∞È¢ñ‰∏îÁ®≥ÂÅ•ÁöÑÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑÂõõÊóãÁøºÂ±ÄÈÉ®ËßÑÂàíÊñπÊ≥ïÔºåËØ•ÊñπÊ≥ïÁõ¥Êé•ËØÑ‰º∞ÂíåÊäïÂΩ±Êù•Ëá™ÈöúÁ¢çÁâ©ÁöÑÊ¢ØÂ∫¶‰ø°ÊÅØÔºåËÄå‰∏çÊòØÈ¢ÑÂÖàÊûÑÂª∫ÁöÑ ESDF„ÄÇ We propose a lightweight yet effective trajectory refinement algorithm, which generates smoother trajectories by formulating the trajectory fitting problem with anisotropic error penalization. Êàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçËΩªÈáèÁ∫ß‰ΩÜÊúâÊïàÁöÑËΩ®Ëøπ‰ºòÂåñÁÆóÊ≥ïÔºåÈÄöËøáÈááÁî®ÂêÑÂêëÂºÇÊÄßËØØÂ∑ÆÊÉ©ÁΩöÊù•Âª∫Ê®°ËΩ®ËøπÊãüÂêàÈóÆÈ¢òÔºå‰ªéËÄåÁîüÊàêÊõ¥Âä†Âπ≥ÊªëÁöÑËΩ®Ëøπ„ÄÇ We integrate the proposed method into a fully autonomous quadrotor system, and release our software for the reference of the community. Êàë‰ª¨Â∞ÜÊèêÂá∫ÁöÑÊñπÊ≥ïÈõÜÊàêÂà∞‰∏Ä‰∏™ÂÆåÂÖ®Ëá™‰∏ªÁöÑÂõõÊóãÁøºÁ≥ªÁªü‰∏≠ÔºåÂπ∂Â∞ÜÊàë‰ª¨ÁöÑËΩØ‰ª∂ÂèëÂ∏ÉÁªôÁ§æÂå∫ÂèÇËÄÉ„ÄÇ 2 Related Work A. Gradient-based Motion Planning Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËøêÂä®ËßÑÂàíÊòØÊó†‰∫∫Êú∫Â±ÄÈÉ®ËΩ®ËøπÁîüÊàêÁöÑ‰∏ªÊµÅÊñπÊ≥ïÔºåÂÆÉÂ∞ÜÈóÆÈ¢òÂª∫Ê®°‰∏∫Êó†Á∫¶ÊùüÁöÑÈùûÁ∫øÊÄß‰ºòÂåñ„ÄÇ Ratliff Á≠â‰∫∫È¶ñÊ¨°Â∞Ü ESDFÂºïÂÖ•Êú∫Âô®‰∫∫ËøêÂä®ËßÑÂàí‰∏≠„ÄÇËÆ∏Â§öËßÑÂàíÊ°ÜÊû∂Âà©Áî®ÂÖ∂‰∏∞ÂØåÁöÑÊ¢ØÂ∫¶‰ø°ÊÅØÔºåÁõ¥Êé•Âú®ÈÖçÁΩÆÁ©∫Èó¥‰∏≠‰ºòÂåñËΩ®Ëøπ„ÄÇ ÁÑ∂ËÄåÔºåÂØπËΩ®ËøπËøõË°å Á¶ªÊï£Êó∂Èó¥‰ºòÂåñÂØπ‰∫éÊó†‰∫∫Êú∫Êù•ËØ¥‰∏çÂ§™ÈÄÇÁî®ÔºåÂõ†‰∏∫ÂÆÉÊõ¥Âä†ÊïèÊÑü‰∫éÂä®ÂäõÂ≠¶Á∫¶Êùü„ÄÇ Âõ†Ê≠§Ôºå[7] ÊèêÂá∫‰∫Ü‰∏ÄÁßçÈÄÇÁî®‰∫éÊó†‰∫∫Êú∫ËßÑÂàíÁöÑËøûÁª≠Êó∂Èó¥Â§öÈ°πÂºèËΩ®Ëøπ‰ºòÂåñÊñπÊ≥ï„ÄÇ ÁÑ∂ËÄåÔºåÊΩúÂú®ÂáΩÊï∞ÁöÑÁßØÂàÜÂØºËá¥‰∫ÜËæÉÈáçÁöÑËÆ°ÁÆóË¥üÊãÖ„ÄÇ Ê≠§Â§ñÔºåÂç≥‰ΩøËøõË°å‰∫ÜÈöèÊú∫ÈáçÂêØÔºåËØ•ÊñπÊ≥ïÁöÑÊàêÂäüÁéá‰πüÂè™ËææÂà∞Á∫¶ 70%„ÄÇ Èâ¥‰∫éËøô‰∫õÁº∫ÁÇπÔºå[2] ÂºïÂÖ•‰∫ÜËΩ®ËøπÁöÑ B Ê†∑Êù°ÂèÇÊï∞ÂåñÔºåÂÖÖÂàÜÂà©Áî®‰∫ÜÂá∏ÂåÖÁâπÊÄß„ÄÇ Âú® [8] ‰∏≠ÔºåÈÄöËøáÊâæÂà∞‰∏Ä‰∏™Êó†Á¢∞ÊíûÁöÑÂàùÂßãË∑ØÂæÑ‰Ωú‰∏∫ÂâçÁ´ØÔºåÊàêÂäüÁéáÊòæËëóÊèêÈ´ò„ÄÇ Ê≠§Â§ñÔºåÂΩìËÄÉËôëÂà∞ËøêÂä®Âä®ÂäõÂ≠¶Á∫¶ÊùüÊó∂ÔºåÂàùÂßãÊó†Á¢∞ÊíûË∑ØÂæÑÁöÑÁîüÊàêËøõ‰∏ÄÊ≠•ÊîπËøõ„ÄÇ Âë®Á≠â‰∫∫[11] Â∞ÜÊÑüÁü•ÊÑèËØÜÁ∫≥ÂÖ•Á≥ªÁªü‰∏≠Ôºå‰ΩøÂÖ∂Êõ¥Âä†È≤ÅÊ£í„ÄÇ Âú®‰∏äËø∞ÊñπÊ≥ï‰∏≠ÔºåESDF Âú®ËØÑ‰º∞‰∏éÈôÑËøëÈöúÁ¢çÁâ©ÁöÑË∑ùÁ¶ª„ÄÅÊ¢ØÂ∫¶ÂπÖÂ∫¶ÂíåÊñπÂêëÊñπÈù¢Ëµ∑ÁùÄÈáçË¶Å‰ΩúÁî®„ÄÇ B. Euclidean Signed Distance Field (ESDF) ESDF Âú®ËøáÂéªÁöÑ‰∫åÂçÅÂ§öÂπ¥‰∏≠‰∏ÄÁõ¥Ë¢´Áî®‰∫é‰ªéÂòàÊùÇÁöÑ‰º†ÊÑüÂô®Êï∞ÊçÆ‰∏≠ÊûÑÂª∫ÂØπË±° [12], Âπ∂Ëá™‰ªé [5] ‰πãÂêéÈáçÊñ∞ÂºïËµ∑ ‰∫ÜÊú∫Âô®‰∫∫ËøêÂä®ËßÑÂàíÁöÑÂÖ¥Ë∂£„ÄÇ Felzenszwalb Á≠â‰∫∫ [4] ÊèêÂá∫ ‰∫Ü‰∏ÄÁßçÈÄöËøáÂ∞ÜÊó∂Èó¥Â§çÊùÇÂ∫¶Èôç‰ΩéÂà∞ $O(n)$ Êù•ÊûÑÂª∫ ESDF ÁöÑÂåÖÁªúÁÆóÊ≥ï, ÂÖ∂‰∏≠ n Ë°®Á§∫‰ΩìÁ¥†Êï∞„ÄÇËôΩÁÑ∂ËØ•ÁÆóÊ≥ï‰∏çÈÄÇÁî®‰∫éÂ¢ûÈáèÂºèÂª∫Á´ã ESDF, ‰ΩÜÂú®ÂõõÊóãÁøºÈ£ûË°åËøáÁ®ã‰∏≠ÁªèÂ∏∏ÈúÄË¶ÅÂä®ÊÄÅ Êõ¥Êñ∞Âú∫Âüü„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò, Oleynikova [13] Âíå Han [3] ÊèêÂá∫‰∫ÜÂ¢ûÈáèÂºè ESDF ÁîüÊàêÊñπÊ≥ï, Âç≥ Voxblox Âíå FIESTA„ÄÇ Â∞ΩÁÆ°Ëøô‰∫õÊñπÊ≥ïÂú®Âä®ÊÄÅÊõ¥Êñ∞ÊÉÖÂÜµ‰∏ãÈùûÂ∏∏È´òÊïà, ‰ΩÜÁîüÊàê ÁöÑ ESDF Âá†‰πéÊÄªÊòØÂåÖÂê´ÂèØËÉΩÂú®ËßÑÂàíËøáÁ®ã‰∏≠Ê†πÊú¨‰∏ç‰ºö‰Ωø Áî®ÁöÑËßâ‰Ωô‰ø°ÊÅØ„ÄÇÂ¶ÇÂõæ 1 ÊâÄÁ§∫, ËØ•ËΩ®Ëøπ‰ªÖÂú®Êï¥‰∏™ ESDF Êõ¥Êñ∞ËåÉÂõ¥ÁöÑÈùûÂ∏∏ÊúâÈôêÁöÑÂ≠êÁ©∫Èó¥‰∏äÊâ´Êèè„ÄÇÂõ†Ê≠§, ËÆæËÆ°‰∏ÄÁßçÊõ¥Âä† Êô∫ËÉΩÂíåËΩªÈáèÁ∫ßÁöÑÊñπÊ≥ï, ËÄå‰∏çÊòØÁª¥Êä§Êï¥‰∏™Âú∫Âüü, ÂÖ∑ÊúâÂæàÈ´òÁöÑ‰ª∑ÂÄº„ÄÇ 3 Collision Avoidance Force Estimation ÈÅøÁ¢∞Âäõ‰º∞ËÆ° a) ÈÄöËøáÈöúÁ¢çÁâ©ÁöÑËΩ®Ëøπ $\\mathbf{\\Phi}$ ‰ºö‰∫ßÁîüÂ§ö‰∏™ ${\\mathbf{p},\\mathbf{v}}$ ÈÖçÂØπÁî®‰∫éÊéßÂà∂ÁÇπ„ÄÇÂÖ∂‰∏≠Ôºå $\\mathbf{p}$ ÊòØÈöúÁ¢çÁâ©Ë°®Èù¢ÁöÑÁÇπÔºå $\\mathbf{v}$ ÊòØ‰ªéÊéßÂà∂ÁÇπÊåáÂêë $\\mathbf{p}$ ÁöÑÂçï‰ΩçÂêëÈáè„ÄÇ b) ‰∏éÂàáÂêëÈáè $\\mathbf{R}_i$ ÂûÇÁõ¥ÁöÑÂπ≥Èù¢ $\\mathbf{\\Psi}$ ‰∏é $\\mathbf{\\Gamma}$ Áõ∏‰∫§ÔºåÂΩ¢Êàê‰∏ÄÊù°Á∫ø$l$Ôºå‰ªé‰∏≠Á°ÆÂÆöÂá∫‰∏Ä‰∏™ ${\\mathbf{p},\\mathbf{v}}$ ÈÖçÂØπ„ÄÇ c) Ë∑ùÁ¶ªÂú∫ÂÆö‰πâÁöÑÂàáÁâáÂèØËßÜÂåñË°®Á§∫‰∏∫ $d_{ij}=(\\mathbf{Q}{i}-\\mathbf{p}{ij}) \\cdot \\mathbf{v}_{ij}$ „ÄÇÈ¢úËâ≤Ë°®Á§∫Ë∑ùÁ¶ªÔºåÁÆ≠Â§¥Ë°®Á§∫Áõ∏ÂêåÁöÑÊ¢ØÂ∫¶ÔºåÂç≥ $\\mathbf{v}$ „ÄÇÂÖ∂‰∏≠Ôºå $\\mathbf{p}$ ‰Ωç‰∫éÈõ∂Ë∑ùÁ¶ªÂπ≥Èù¢‰∏ä„ÄÇ Âú®Êú¨Êñá‰∏≠ÔºåÂÜ≥Á≠ñÂèòÈáèÊòØB Ê†∑Êù°Êõ≤Á∫øÁöÑÊéßÂà∂ÁÇπ $\\mathbf{Q}$ „ÄÇ ÊØè‰∏™ $\\mathbf{Q}$ ÈÉΩÁã¨Á´ãÂú∞Êã•ÊúâËá™Â∑±ÁöÑÁéØÂ¢É‰ø°ÊÅØ„ÄÇ ‰∏ÄÂºÄÂßãÔºåÁªôÂÆö‰∏Ä‰∏™Êª°Ë∂≥ÁªàÁ´ØÁ∫¶ÊùüÊù°‰ª∂ÁöÑÊú¥Á¥†B Ê†∑Êù°Êõ≤Á∫ø $\\mathbf{\\Phi}$ Ôºå‰∏çËÄÉËôëÁ¢∞ÊíûÊÉÖÂÜµ„ÄÇ ÁÑ∂ÂêéÔºå‰ºòÂåñËøáÁ®ãÂºÄÂßã„ÄÇ Âú®ÊØèÊ¨°Ëø≠‰ª£‰∏≠Ê£ÄÊµãÂà∞Á¢∞ÊíûÊÆµÂêéÔºåÁîüÊàê‰∏Ä‰∏™Êó†Á¢∞ÊíûË∑ØÂæÑ $\\mathbf{\\Gamma}$ „ÄÇ Êé•ÁùÄÔºåÂ∞ÜÊØè‰∏™Á¢∞ÊíûÊÆµÁöÑÊéßÂà∂ÁÇπ $\\mathbf{Q}i$ ÂàÜÈÖçÂà∞ÈöúÁ¢çÁâ©Ë°®Èù¢ÁöÑÈîöÁÇπ $\\mathbf{p}{ij}$ ÔºåÂπ∂Â∏¶ÊúâÁõ∏Â∫îÁöÑÊñ•ÂäõÊñπÂêëÂêëÈáè $\\mathbf{v}{ij} =\\overrightarrow{Q{i} p_{i j}}$ ÔºåÂ¶ÇÂõæ 2.a ÊâÄÁ§∫„ÄÇ ÂÖ∂‰∏≠Ôºå$i \\in \\mathbb{N}_+$‰∏∫ÊéßÂà∂ÁÇπÁöÑÁ¥¢ÂºïÔºå$j \\in \\mathbb{N}$ ‰∏∫ ${\\mathbf{p},\\mathbf{v}}$ ÂØπÁöÑÁ¥¢Âºï„ÄÇ Ê≥®ÊÑèÔºåÊØè‰∏™ ${\\mathbf{p},\\mathbf{v}}$ ÂØπÂè™Â±û‰∫é‰∏Ä‰∏™ÁâπÂÆöÁöÑÊéßÂà∂ÁÇπ„ÄÇ‰∏∫‰∫ÜÁÆÄÊ¥ÅËµ∑ËßÅÔºåÊàë‰ª¨Âú®‰∏çÂºïËµ∑Ê≠ß‰πâÁöÑÊÉÖÂÜµ‰∏ãÁúÅÁï•‰∏ãÊ†á $ij$ „ÄÇ Êú¨Êñá‰∏≠ËØ¶ÁªÜÁöÑ ${\\mathbf{p},\\mathbf{v}}$ ÂØπÁîüÊàêËøáÁ®ãÊ¶ÇËø∞Âú®ÁÆóÊ≥ï1‰∏≠ÔºåÂπ∂Âú®Âõæ 3.b ‰∏≠ËøõË°å‰∫ÜËØ¥Êòé„ÄÇ ÁÑ∂ÂêéÔºåÂ∞Ü‰ªé $\\mathbf{Q}_i$ Âà∞Á¨¨ $j$ ‰∏™ÈöúÁ¢çÁâ©ÁöÑÈöúÁ¢çÁâ©Ë∑ùÁ¶ªÂÆö‰πâ‰∏∫ dij=(Qi‚àípij)‚ãÖvij d_{i j}=\\left(\\mathbf{Q}_{i}-\\mathbf{p}_{i j}\\right) \\cdot \\mathbf{v}_{i j} dij‚Äã=(Qi‚Äã‚àípij‚Äã)‚ãÖvij‚Äã def CheckAndAddObstacleInfo(E, Q): \"\"\" Function to check and add obstacle information. Args: - E: The environment - Q: Control Points Struct Returns: - Q: Updated Control Points Struct after adding obstacle info \"\"\" S = [] # Colliding segments # Check for colliding segments in each control point for Q_i in Q: if FindConsecutiveCollidingSegment(Q_i): S.append(GetCollisionSegment()) # Process each colliding segment for S_i in S: Gamma = PathSearch(E, S_i) # Not sure how `begin` and `end` are defined for S_i, # but assuming they are integer indices for j in range(S_i.begin, S_i.end + 1): p, v = FindPVpairs(Q[j], Gamma) Q[j].append((p, v)) return Q ‰∏∫‰∫ÜÈò≤Ê≠¢ËΩ®ËøπË¢´ÊãâÂá∫ÂΩìÂâçÈöúÁ¢çÁâ©Ââç„ÄÅËø≠‰ª£ËøáÁ®ã‰∏≠ÂèçÂ§çÁîüÊàê ${p, v}$ ÂØπÔºåÂà§Êñ≠ÊòØÂê¶‰∏∫Êñ∞ÈöúÁ¢çÁâ©ÁöÑÊ†áÂáÜÊòØ: Â¶ÇÊûúÊéßÂà∂ÁÇπ $Q_{i}$ Â§Ñ‰∫éÈöúÁ¢çÁâ©‰∏≠Êó∂ÔºåÂπ∂‰∏îÂØπ‰∫éÂΩìÂâçÂæóÂà∞ÁöÑÊâÄÊúâÈöúÁ¢çÁâ© $j$ Êª°Ë∂≥ $d_{i j}>0$ ÔºåÂàôËØ•Èöú Á¢çÁâ©‰∏∫Êñ∞ÂèëÁé∞ÁöÑÈöúÁ¢çÁâ©„ÄÇ‰ªéËÄåÂè™ËÆ°ÁÆóÂΩ±ÂìçËΩ®ËøπÁöÑÈöúÁ¢çÁâ©‰ø°ÊÅØÔºåÂáèÂ∞ëËøêË°åÊó∂Èó¥„ÄÇ To incorporate necessary environmental awareness into the local planner, we need to explicitly construct an objective function that keeps the trajectory away from obstacles. ESDF provides this vital collision information but with the price of a heavy computation burden. In addition, as shown in Fig.\\ref{pic:local_min}, ESDF-based planners can easily fall into a local minimum and fail to escape from obstacles, due to the insufficient or even wrong information from ESDF. To avoid such situations, an additional front-end is always needed to provide a collision-free initial trajectory. The above methodology outperforms ESDF in providing the vital information for collision avoidance, since the explicitly designed repulsive force can be fairly effective regarding various missions and environments. Moreover, the proposed method has no requirement for collision-free initialization. ‰∏∫‰∫ÜÂ∞ÜÂøÖË¶ÅÁöÑÁéØÂ¢ÉÊÑèËØÜËûçÂÖ•Â±ÄÈÉ®ËßÑÂàíÂô®‰∏≠ÔºåÊàë‰ª¨ÈúÄË¶ÅÊòéÁ°ÆÊûÑÂª∫‰∏Ä‰∏™ÁõÆÊ†áÂáΩÊï∞Ôºå‰ΩøËΩ®ËøπËøúÁ¶ªÈöúÁ¢çÁâ©„ÄÇ ESDF Êèê‰æõ‰∫ÜËøô‰∏™ÈáçË¶ÅÁöÑÁ¢∞Êíû‰ø°ÊÅØÔºå‰ΩÜ‰ªòÂá∫‰∫ÜÊ≤âÈáçÁöÑËÆ°ÁÆóË¥üÊãÖ„ÄÇ Ê≠§Â§ñÔºåÂ¶ÇÂõæ 2 ÊâÄÁ§∫ÔºåÂü∫‰∫é ESDF ÁöÑËßÑÂàíÂô®ÂæàÂÆπÊòìÈô∑ÂÖ•Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåÂπ∂‰∏çËÉΩÈÄÉÁ¶ªÈöúÁ¢çÁâ©ÔºåËøôÊòØÁî±‰∫é ESDF Êèê‰æõÁöÑ‰ø°ÊÅØ‰∏çË∂≥ÁîöËá≥ÈîôËØØ„ÄÇ ‰∏∫‰∫ÜÈÅøÂÖçËøôÁßçÊÉÖÂÜµÔºåÈ¢ùÂ§ñÁöÑÂâçÁ´ØÂßãÁªàÈúÄË¶ÅÊèê‰æõ‰∏Ä‰∏™Êó†Á¢∞ÊíûÁöÑÂàùÂßãËΩ®Ëøπ„ÄÇ ‰∏äËø∞ÊñπÊ≥ïÂú®Êèê‰æõÁî®‰∫éÈÅøÈöúÁöÑÈáçË¶Å‰ø°ÊÅØÊñπÈù¢‰ºò‰∫é ESDFÔºåÂõ†‰∏∫ÊòéÁ°ÆËÆæËÆ°ÁöÑÊñ•ÂäõÂØπ‰∫éÂêÑÁßç‰ªªÂä°ÂíåÁéØÂ¢ÉÈÉΩÈùûÂ∏∏ÊúâÊïà„ÄÇ Ê≠§Â§ñÔºåÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïÂØπÊó†Á¢∞ÊíûÁöÑÂàùÂßãÂåñÊ≤°ÊúâË¶ÅÊ±Ç„ÄÇ image 2: Ë∑ØÂæÑÈô∑ÂÖ•‰∫Ü‰∏Ä‰∏™Â±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåËøôÊòØÈùûÂ∏∏Â∏∏ËßÅÁöÑÊÉÖÂÜµÔºåÂõ†‰∏∫Áõ∏Êú∫Êó†Ê≥ïÁúãÂà∞ÈöúÁ¢çÁâ©ÁöÑËÉåÈù¢„ÄÇ 4 Gradient-Based Trajectory Optimization Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®Ëøπ‰ºòÂåñÂô® A. Problem Formulation Âú®Êú¨Êñá‰∏≠ÔºåËΩ®ËøπÁî±ÂùáÂåÄ B Ê†∑Êù°Êõ≤Á∫ø (uniform B-spline curve) $\\mathbf{\\Phi}$ ÂèÇÊï∞ÂåñÔºåËØ•Êõ≤Á∫øÁî±Ôºö ÂÖ∂Ê¨°Êï∞ $p_b$Ôºå $N_c$ ‰∏™ÊéßÂà∂ÁÇπ $\\left\\lbrace \\mathbf{Q}1, \\mathbf{Q}_2, \\cdots, \\mathbf{Q}{N_c} \\right\\rbrace$ Âíå ËäÇÁÇπÂêëÈáè $\\left{ t_1, t_2, \\cdots, t_M \\right}$ ÂîØ‰∏ÄÁ°ÆÂÆöÔºå ÂÖ∂‰∏≠ $\\mathbf{Q}_i \\in \\mathbb{R}^3$Ôºå$t_m \\in \\mathbb{R}$Ôºå$M=N_c+p_b$ „ÄÇ ‰∏∫‰∫ÜÁÆÄÂåñÂíåÊèêÈ´òËΩ®ËøπËØÑ‰º∞ÁöÑÊïàÁéáÔºåÊàë‰ª¨ÊñπÊ≥ï‰∏≠‰ΩøÁî®ÁöÑB Ê†∑Êù°ÊòØÂùáÂåÄÁöÑÔºåËøôÊÑèÂë≥ÁùÄÊØè‰∏™ËäÇÁÇπ‰∏éÂÖ∂Ââç‰∏Ä‰∏™ËäÇÁÇπ‰πãÈó¥ÊúâÁõ∏ÂêåÁöÑÊó∂Èó¥Èó¥Èöî $\\triangle t=t_{m+1}-t_m$ „ÄÇ Êú¨ÊñáÁöÑÈóÆÈ¢òÂΩ¢ÂºèÂåñÂü∫‰∫éÂΩìÂâçÊúÄÂÖàËøõÁöÑÂõõÊóãÁøºÊú∫Âô®‰∫∫Â±ÄÈÉ®ËßÑÂàíÊ°ÜÊû∂ Fast-Planner-19„ÄÇ B-Ê†∑Êù°ÂÖ∑ÊúâÂá∏ÂåÖÊÄßË¥®„ÄÇ ËØ•ÊÄßË¥®Ë°®Êòé B-Ê†∑Êù°Êõ≤Á∫øÁöÑÂçï‰∏™Âå∫Èó¥‰ªÖÁî± $p_b+1$ ‰∏™ËøûÁª≠ÊéßÂà∂ÁÇπÊéßÂà∂ÔºåÂπ∂‰Ωç‰∫éËøô‰∫õÁÇπÁöÑÂá∏ÂåÖÂÜÖ„ÄÇ ‰æãÂ¶ÇÔºåÂú® $(t_i, t_{i+1})$ Âå∫Èó¥ÂÜÖÁöÑ‰∏Ä‰∏™Âå∫ÊÆµ‰Ωç‰∫éÁî± ${\\mathbf{Q}{i-p_b}, \\mathbf{Q}{i-p_b+1}, \\cdots, \\mathbf{Q}_i}$ ÂΩ¢ÊàêÁöÑÂá∏ÂåÖÂÜÖ„ÄÇ Âè¶‰∏Ä‰∏™ÊÄßË¥®ÊòØ B-Ê†∑Êù°ÁöÑ $k$ Èò∂ÂØºÊï∞‰ªçÁÑ∂ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÊ¨°Êï∞ $p_{b,k}=p_b-k$ ÁöÑ B-Ê†∑Êù°„ÄÇ Áî±‰∫é $\\triangle t$ ‰∏é $\\mathbf{\\Phi}$ Áã¨Á´ãÔºåÈÄüÂ∫¶ $\\mathbf{V}_i$„ÄÅÂä†ÈÄüÂ∫¶ $\\mathbf{A}_i$ ÂíåÂä†Âä†ÈÄüÂ∫¶ $\\mathbf{J}_i$ Êõ≤Á∫øÁöÑÊéßÂà∂ÁÇπÂèØ‰ª•ÈÄöËøáÂ¶Ç‰∏ãÂÖ¨ÂºèËé∑ÂæóÔºö Vi=Qi+1‚àíQi‚ñ≥t,Ai=Vi+1‚àíVi‚ñ≥t,Ji=Ai+1‚àíAi‚ñ≥t \\mathbf{V}_{i}=\\frac{\\mathbf{Q}_{i+1}-\\mathbf{Q}_{i}}{\\triangle t}, \\quad \\mathbf{A}_{i}=\\frac{\\mathbf{V}_{i+1}-\\mathbf{V}_{i}}{\\triangle t}, \\quad \\mathbf{J}_{i}=\\frac{\\mathbf{A}_{i+1}-\\mathbf{A}_{i}}{\\triangle t} Vi‚Äã=‚ñ≥tQi+1‚Äã‚àíQi‚Äã‚Äã,Ai‚Äã=‚ñ≥tVi+1‚Äã‚àíVi‚Äã‚Äã,Ji‚Äã=‚ñ≥tAi+1‚Äã‚àíAi‚Äã‚Äã Êàë‰ª¨ÈÅµÂæ™ [15] ÁöÑÂ∑•‰ΩúÔºåÂú®Â∑ÆÂàÜÂπ≥Âù¶ËæìÂá∫Á©∫Èó¥ÁöÑÁº©ÂáèÁ©∫Èó¥ (reduced space of differentially flat output) ‰∏≠ËßÑÂàíÊéßÂà∂ÁÇπ $\\mathbf{Q} \\in \\mathbb{R}^3$ÔºàÊ†πÊçÆÊó†‰∫∫Êú∫ÁöÑÂæÆÂàÜÂπ≥Âù¶ÁâπÊÄßÈôç‰ΩéË¶ÅËßÑÂàíÁöÑÂèòÈáèÔºâ„ÄÇ ‰ºòÂåñÈóÆÈ¢òÁöÑË°®Ëø∞Â¶Ç‰∏ãÔºö min‚Å°QJ=ŒªsJs+ŒªcJc+ŒªdJd \\min _{\\mathbf{Q}} J=\\lambda_{s} J_{s}+\\lambda_{c} J_{c}+\\lambda_{d} J_{d} Qmin‚ÄãJ=Œªs‚ÄãJs‚Äã+Œªc‚ÄãJc‚Äã+Œªd‚ÄãJd‚Äã ÂÖ∂‰∏≠ $J_s$ ÊòØÂπ≥ÊªëÂ∫¶ÊÉ©ÁΩöÈ°πÔºå$J_c$ ÊòØÁ¢∞ÊíûÊÉ©ÁΩöÈ°πÔºåËÄå $J_d$ Ë°®Á§∫Âä®ÂäõÂ≠¶ÂèØË°åÈ°π„ÄÇ $\\lambda_s, \\lambda_c, \\lambda_d$ ÊòØÊØè‰∏™ÊÉ©ÁΩöÈ°πÁöÑÊùÉÈáç„ÄÇ 1ÔºâÂπ≥ÊªëÂ∫¶ÊÉ©ÁΩöÈ°π $J_s$ the smoothness penalty is formulized as the time integral over square derivatives of the trajectory (acceleration, jerk, etc.) Âú®\\cite{Usenko2017ewok}‰∏≠ÔºåÂπ≥ÊªëÊÉ©ÁΩöË¢´ÂÆö‰πâ‰∏∫ËΩ®Ëøπ‰∫åÈò∂ÂØºÊï∞ÔºàÂä†ÈÄüÂ∫¶„ÄÅ jerk Á≠âÔºâÁöÑÊó∂Èó¥ÁßØÂàÜ„ÄÇ Âú®\\cite{zhou2019robust}‰∏≠ÔºåÂè™ËÄÉËôëËΩ®ËøπÁöÑÂá†‰Ωï‰ø°ÊÅØÔºå‰∏çËÄÉËôëÊó∂Èó¥ÂàÜÈÖç„ÄÇ Âú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨ÁªìÂêà‰∫Ü‰∏§ÁßçÊñπÊ≥ïÊù•ÂØπÂä†ÈÄüÂ∫¶Âíå jerk ËøõË°åÂπ≥ÊñπÊÉ©ÁΩöÔºåËÄå‰∏çËøõË°åÊó∂Èó¥ÁßØÂàÜ„ÄÇ ÊúÄÂ∞èÂåñÈ´òÈò∂ÂØºÊï∞ËÉΩÂ§ü‰ΩøÂæóÊï¥ÊÆµËΩ®ËøπÂÖâÊªë„ÄÇÊâÄ‰ª•ÂÖâÊªëÈ°πÁî±Âä†ÈÄüÂ∫¶ÂíåÂä†Âä†ÈÄüÂ∫¶ÁöÑÂπ≥ÊñπÂíåÊûÑÊàê„ÄÇ ÈÄöËøáÂá∏ÂåÖÊÄßË¥®ÁöÑ‰ºòÂäøÔºåÂè™Ë¶ÅÊúÄÂ∞èÂåñ B Ê†∑Êù°ËΩ®ËøπÁöÑ‰∫åÈò∂ÂØºÂíå‰∏âÈò∂ÂØºÊéßÂà∂ÁÇπÁöÑÂπ≥ÊñπÂíå Â∞±Ë∂≥‰ª•ÂáèÂ∞èÊï¥‰∏™Êõ≤Á∫ø‰∏äÁöÑËøô‰∫õÂØºÊï∞„ÄÇ Âõ†Ê≠§ÔºåÂπ≥ÊªëÊÉ©ÁΩöÂáΩÊï∞ÁöÑÂÖ¨Âºè‰∏∫Ôºö Js=‚àëi=1Nc‚àí1‚à•Ai‚à•22+‚àëi=1Nc‚àí2‚à•Ji‚à•22, J_{s}=\\sum_{i=1}^{N_{c}-1}\\left\\|\\mathbf{A}_{i}\\right\\|_{2}^{2}+\\sum_{i=1}^{N_{c}-2}\\left\\|\\mathbf{J}_{i}\\right\\|_{2}^{2}, Js‚Äã=i=1‚àëNc‚Äã‚àí1‚Äã‚à•Ai‚Äã‚à•22‚Äã+i=1‚àëNc‚Äã‚àí2‚Äã‚à•Ji‚Äã‚à•22‚Äã, ÊúÄÂ∞èÂåñÈ´òÈò∂ÂØºÊï∞Ôºå‰ΩøÊï¥‰∏™ËΩ®ËøπÂèòÂæóÂπ≥Êªë„ÄÇ 2ÔºâÁ¢∞ÊíûÊÉ©ÁΩöÈ°π $J_c$ Á¢∞ÊíûÊÉ©ÁΩöÂ∞ÜÊéßÂà∂ÁÇπËøúÁ¶ªÈöúÁ¢çÁâ©„ÄÇ ËøôÊòØÈÄöËøáÈááÁî®ÂÆâÂÖ®Èó¥Èöô $s_f$ Âπ∂ÊÉ©ÁΩöÊª°Ë∂≥ $d_{ij} ÊÉ©ÁΩöÂáΩÊï∞ $j_c$ÔºåÈöèÁùÄ $d_{ij}$ ÂáèÂ∞èÔºå$j_c$ ÁöÑÊñúÁéáÂ∞±Ë∂äÂ∞èÔºå‰ªéËÄåÂæóÂà∞ÂàÜÊÆµÂáΩÊï∞Ôºö jc(i,j)={0(cij‚â§0)cij3(0cij‚â§sf)3sfcij2‚àí3sf2cij+sf3(cij>sf) \\begin{array}{rlr}j_{c}(i, j) & =\\left\\{\\begin{array}{lr}0 & \\left(c_{i j} \\leq 0\\right) \\\\\\\\ c_{i j}^{3} & \\left(0s_{f}\\right)\\end{array}\\right.\\end{array} jc‚Äã(i,j)‚Äã=‚é©‚é™‚é™‚é™‚é™‚é™‚é®‚é™‚é™‚é™‚é™‚é™‚éß‚Äã0cij3‚Äã3sf‚Äãcij2‚Äã‚àí3sf2‚Äãcij‚Äã+sf3‚Äã‚Äã(cij‚Äã‚â§0)(0cij‚Äã‚â§sf‚Äã)(cij‚Äã>sf‚Äã)‚Äã‚Äã ÂÖ∂‰∏≠ $c_{i j} =s_{f}-d_{i j}$, $j_c(i,j)$ ÊòØÁî± ${\\mathbf{p},\\mathbf{v}}_j$ ÂØπ‰∫é $\\mathbf{Q}_i$ ‰∫ßÁîüÁöÑ cost„ÄÇ ÊØè‰∏™ $\\mathbf{Q}_i$ ÁöÑÊàêÊú¨ÊòØÁã¨Á´ãËØÑ‰º∞ÁöÑÔºåÂπ∂‰∏î‰ªéÊâÄÊúâÂØπÂ∫îÁöÑ ${\\mathbf{p},\\mathbf{v}}_j$ ÂØπ‰∏≠Á¥ØÁßØ„ÄÇ Âõ†Ê≠§ÔºåÂ¶ÇÊûú‰∏Ä‰∏™ÊéßÂà∂ÁÇπÂèëÁé∞‰∫ÜÊõ¥Â§öÁöÑÈöúÁ¢çÁâ©ÔºåÂÆÉÂ∞ÜËé∑ÂæóÊõ¥È´òÁöÑËΩ®ËøπÂèòÂΩ¢ÊùÉÈáç„ÄÇ ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÁ¨¨ $i$ ‰∏™ÊéßÂà∂ÁÇπÁöÑÊàêÊú¨ÂÄº‰∏∫ $j_c(\\mathbf{Q}i)=\\sum{j=1}^{N_p} j_c(i,j)$ÔºåÂÖ∂‰∏≠ $N_p$ ÊòØÂ±û‰∫é $\\mathbf{Q}_i$ ÁöÑ ${\\mathbf{p},\\mathbf{v}}_j$ ÂØπÁöÑÊï∞Èáè„ÄÇ Â∞ÜÊâÄÊúâ $\\mathbf{Q}_i$ ‰∏äÁöÑÊàêÊú¨ÁªÑÂêàÂú®‰∏ÄËµ∑ÂæóÂà∞ÊÄªÊàêÊú¨ $J_c$ÔºåÂç≥Ôºö Jc=‚àëi=1Ncjc(Qi). J_{c}=\\sum_{i=1}^{N_{c}} j_{c}\\left(\\mathbf{Q}_{i}\\right). Jc‚Äã=i=1‚àëNc‚Äã‚Äãjc‚Äã(Qi‚Äã). ‰∏é‰º†ÁªüÁöÑÂü∫‰∫é ESDF ÁöÑÊñπÊ≥ïÔºàUsenko et al., 2017; Zhou et al., 2019Ôºâ‰∏çÂêåÔºå‰º†ÁªüÊñπÊ≥ïÈÄöËøáÂú®Âú∫‰∏äËøõË°å‰∏âÁ∫øÊÄßÊèíÂÄºÊù•ËÆ°ÁÆóÊ¢ØÂ∫¶ÔºåËÄåÊàë‰ª¨ÈÄöËøáÁõ¥Êé•Èó≠ÂºèËÆ°ÁÆó $J_c$ Áõ∏ÂØπ‰∫é $\\mathbf{Q}_i$ ÁöÑÂØºÊï∞Êù•Ëé∑ÂæóÊ¢ØÂ∫¶Ôºö ‚àÇJc‚àÇQi=‚àëi=1Nc‚àëj=1Npvij{0(cij‚â§0)‚àí3cij2(0cij‚â§sf)‚àí6sfcij+3sf2(cij>sf) \\frac{\\partial J_{c}}{\\partial \\mathbf{Q}_{i}}= \\sum_{i=1}^{N_{c}} \\sum_{j=1}^{N_{p}} \\mathbf{v}_{i j}\\left\\{\\begin{array}{lr} 0 & \\left(c_{i j} \\leq 0\\right) \\\\ -3 c_{i j}^{2} & \\left(0s_{f}\\right) \\end{array}\\right. ‚àÇQi‚Äã‚àÇJc‚Äã‚Äã=i=1‚àëNc‚Äã‚Äãj=1‚àëNp‚Äã‚Äãvij‚Äã‚é©‚é™‚é®‚é™‚éß‚Äã0‚àí3cij2‚Äã‚àí6sf‚Äãcij‚Äã+3sf2‚Äã‚Äã(cij‚Äã‚â§0)(0cij‚Äã‚â§sf‚Äã)(cij‚Äã>sf‚Äã)‚Äã 3ÔºâÂèØË°åÊÄßÊÉ©ÁΩöÈ°π $J_d$ Âä®ÂäõÂ≠¶ÂèØË°åÈ°πÈÄöËøáÈôêÂà∂ËΩ®ËøπÂú®‰∏â‰∏™ËΩ¥‰∏äÁöÑ $k$ Èò∂ÂØºÊï∞Êù•ÂÆûÁé∞„ÄÇÂæóÁõä‰∫é B Ê†∑Êù°Êõ≤Á∫øÁöÑÂá∏ÂåÖÊÄßË¥®ÔºåÂè™Ë¶ÅÂØπÊéßÂà∂ÁÇπËøõË°åÈôêÂà∂Âç≥ÂèØÊª°Ë∂≥Âä®ÂäõÂ≠¶ÂèØË°åÊÄß„ÄÇ ÈÄöËøáÈôêÂà∂ÊØè‰∏™Áª¥Â∫¶‰∏äËΩ®ËøπÁöÑÈ´òÈò∂ÂØºÊï∞Êù•Á°Æ‰øùÂèØË°åÊÄßÔºåÂç≥ÂØπÊâÄÊúâ $t$ Â∫îÁî® ‚à£Œ¶r(k)(t)‚à£Œ¶r,max(k) |\\mathbf{\\Phi}^{(k)}_r(t)| ‚à£Œ¶r(k)‚Äã(t)‚à£Œ¶r,max(k)‚Äã ÂÖ∂‰∏≠$r \\in {x, y, z}$ Ë°®Á§∫ÊØè‰∏™Áª¥Â∫¶„ÄÇ Áî±‰∫éÂá∏ÂåÖÊÄßË¥®ÔºåÈôêÂà∂ÊéßÂà∂ÁÇπÁöÑÂØºÊï∞Â∞±Ë∂≥‰ª•ÈôêÂà∂Êï¥‰∏™ B Ê†∑Êù°Êõ≤Á∫ø„ÄÇ Âõ†Ê≠§ÔºåÁΩöÂáΩÊï∞ÂèØ‰ª•Ë°®Á§∫‰∏∫Ôºö Jd=‚àëi=1NcwvF(Vi)+‚àëi=1Nc‚àí1waF(Ai)+‚àëi=1Nc‚àí2wjF(Ji) J_{d}= \\sum_{i=1}^{N_{c}} w_{v} F\\left(\\mathbf{V}_{i}\\right)+ \\sum_{i=1}^{N_{c}-1} w_{a} F\\left(\\mathbf{A}_{i}\\right)+ \\sum_{i=1}^{N_{c}-2} w_{j} F\\left(\\mathbf{J}_{i}\\right) Jd‚Äã=i=1‚àëNc‚Äã‚Äãwv‚ÄãF(Vi‚Äã)+i=1‚àëNc‚Äã‚àí1‚Äãwa‚ÄãF(Ai‚Äã)+i=1‚àëNc‚Äã‚àí2‚Äãwj‚ÄãF(Ji‚Äã) ÂÖ∂‰∏≠ $w_v, w_a, w_j$ ÊòØÊØè‰∏™È°πÁöÑÊùÉÈáçÔºåËÄå $F(\\cdot)$ ÊòØÂØπÊéßÂà∂ÁÇπÈ´òÈò∂ÂØºÊï∞ÁöÑ‰∏§Ê¨°ËøûÁª≠ÂèØÂæÆÂ∫¶ÈáèÂáΩÊï∞„ÄÇ F(C)=‚àër=x,y,zf(cr) F(\\mathbf{C})=\\sum_{r=x, y, z} f\\left(c_{r}\\right) F(C)=r=x,y,z‚àë‚Äãf(cr‚Äã) f(cr)={a1cr2+b1cr+c1(cr‚â§‚àícj)(‚àíŒªcm‚àícr)3(‚àícjcr‚àíŒªcm)0(‚àíŒªcm‚â§cr‚â§Œªcm)(cr‚àíŒªcm)3(Œªcmcrcj)a2cr2+b2cr+c2(cr‚â•cj) f\\left(c_{r}\\right)=\\left\\{\\begin{array}{lr}a_{1} c_{r}^{2}+b_{1} c_{r}+c_{1} & \\left(c_{r} \\leq-c_{j}\\right) \\\\\\\\ \\left(-\\lambda c_{m}-c_{r}\\right)^{3} & \\left(-c_{j}f(cr‚Äã)=‚é©‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é®‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚éß‚Äãa1‚Äãcr2‚Äã+b1‚Äãcr‚Äã+c1‚Äã(‚àíŒªcm‚Äã‚àícr‚Äã)30(cr‚Äã‚àíŒªcm‚Äã)3a2‚Äãcr2‚Äã+b2‚Äãcr‚Äã+c2‚Äã‚Äã(cr‚Äã‚â§‚àícj‚Äã)(‚àícj‚Äãcr‚Äã‚àíŒªcm‚Äã)(‚àíŒªcm‚Äã‚â§cr‚Äã‚â§Œªcm‚Äã)(Œªcm‚Äãcr‚Äãcj‚Äã)(cr‚Äã‚â•cj‚Äã)‚Äã ÂÖ∂‰∏≠Ôºå$c_r \\in \\mathbf{C} \\in {\\mathbf{V}{i}, \\mathbf{A}{i}, \\mathbf{J}_{i}}$ Ôºå$a_1,b_1,c_1,a_2,b_2,c_2$ Áî®‰∫éÊª°Ë∂≥ÂáΩÊï∞‰∫åÈò∂ËøûÁª≠ÊÄßÁöÑÊù°‰ª∂Ôºå$c_m$ ÊòØÂØºÊï∞ÁöÑÈôêÂà∂Ôºå$c_j$ ÊòØ‰∫åÊ¨°Âå∫Èó¥Âíå‰∏âÊ¨°Âå∫Èó¥ÁöÑÂàÜÂâ≤ÁÇπ„ÄÇ $\\lambda B. Numerical Optimization Êï∞ÂÄº‰ºòÂåñ ÁõÆÊ†áÂáΩÊï∞ $J$‰ºöÈöèÁùÄÊñ∞ÈöúÁ¢çÁâ©ÁöÑÂä†ÂÖ•ËÄå‰∏çÊñ≠ÊîπÂèòÔºåËøôÂ∞±Ë¶ÅÊ±ÇÊ±ÇËß£Âô®ËÉΩÂ§üÂø´ÈÄüÈáçÂêØÔºåÂπ∂‰∏îÁõÆÊ†áÂáΩÊï∞‰∏ªË¶ÅÁî±‰∫åÊ¨°È°πÁªÑÊàêÔºåÊâÄ‰ª• Hessian Áü©Èòµ‰ø°ÊÅØËÉΩÂ§üÂä†Âø´Êî∂ÊïõÈÄüÂ∫¶„ÄÇ‰ΩÜÂæóÂà∞Á≤æÁ°ÆÁöÑ Hessian Ê∂àËÄóÂ§ßÈáèËÆ°ÁÆóÊú∫ËµÑÊ∫ê„ÄÇÊâÄ‰ª•Êàë‰ª¨‰ΩøÁî®ÊãüÁâõÈ°øÊ≥ïÔºà quasi-Newton methodsÔºâ‰ªéÊ¢ØÂ∫¶‰ø°ÊÅØ‰∏≠Êù•Ëøë‰ººËÆ°ÁÆó Hessian„ÄÇ Êú¨Êñá‰∏≠ÊèêÂá∫ÁöÑÈóÆÈ¢òÂÖ∑Êúâ‰∏§‰∏™ÊñπÈù¢ÁöÑÁâπÁÇπ„ÄÇ È¶ñÂÖàÔºåÁõÆÊ†áÂáΩÊï∞ $J$ Ê†πÊçÆÊñ∞ÂèëÁé∞ÁöÑÈöúÁ¢çÁâ©ËøõË°åËá™ÈÄÇÂ∫îÂú∞ÊîπÂèò„ÄÇ ËøôË¶ÅÊ±ÇÊ±ÇËß£Âô®ËÉΩÂ§üÂø´ÈÄüÈáçÂêØ„ÄÇ ÂÖ∂Ê¨°Ôºå‰∫åÊ¨°È°πÂú®ÁõÆÊ†áÂáΩÊï∞ÁöÑÂà∂ÂÆö‰∏≠Âç†‰∏ªÂØºÂú∞‰ΩçÔºå‰ΩøÂæó $J$ Ëøë‰ºº‰∏∫‰∫åÊ¨°ÂáΩÊï∞„ÄÇ ËøôÊÑèÂë≥ÁùÄÂà©Áî®Êµ∑Ê£ÆÁü©Èòµ‰ø°ÊÅØÂèØ‰ª•ÊòæËëóÂä†Âø´Êî∂ÊïõÈÄüÂ∫¶„ÄÇ ÁÑ∂ËÄåÔºåÂú®ÂÆûÊó∂Â∫îÁî®‰∏≠Ëé∑ÂèñÁ≤æÁ°ÆÁöÑÈÄÜÊµ∑Ê£ÆÁü©ÈòµÊòØ‰∏çÂèØË°åÁöÑÔºåÂõ†‰∏∫ÂÆÉÊ∂àËÄó‰∫ÜÁõ∏ÂΩìÂ§öÁöÑËÆ°ÁÆóËµÑÊ∫ê„ÄÇ ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÈááÁî®‰∫Ü‰ªéÊ¢ØÂ∫¶‰ø°ÊÅØ‰∏≠Ëøë‰ººÈÄÜÊµ∑Ê£ÆÁü©ÈòµÁöÑÊãüÁâõÈ°øÊñπÊ≥ï„ÄÇ Áî±‰∫éÊ±ÇËß£Âô®ÁöÑÊÄßËÉΩ‰∏éÈóÆÈ¢òÊúâÂÖ≥ÔºåÊàë‰ª¨ÊØîËæÉ‰∫ÜÂ±û‰∫éÊãüÁâõÈ°øÊñπÊ≥ïÁöÑ‰∏âÁßçÁÆóÊ≥ï„ÄÇ ÂÆÉ‰ª¨ÂàÜÂà´ÊòØÔºö Barzilai-Borwein ÊñπÊ≥ï\\cite{barzilai1988two}ÔºåËØ•ÊñπÊ≥ïËÉΩÂ§üÂø´ÈÄüÈáçÂêØÔºåÂπ∂ÂÖ∑ÊúâÊúÄÁ≤óÁï•ÁöÑÊµ∑Ê£ÆÁü©Èòµ‰º∞ËÆ°Ôºõ Êà™Êñ≠ÁâõÈ°øÊ≥ï\\cite{steiha1983truncatednewton}ÔºåËØ•ÊñπÊ≥ïÈÄöËøáÂØπÁªôÂÆöÁä∂ÊÄÅÊ∑ªÂä†Â§ö‰∏™ÂæÆÂ∞èÊâ∞Âä®Êù•‰º∞ËÆ°Êµ∑Ê£ÆÁü©ÈòµÔºõ L-BFGS ÊñπÊ≥ï\\cite{liu1989limited}ÔºåËØ•ÊñπÊ≥ïÈÄöËøá‰πãÂâçÁöÑÁõÆÊ†áÂáΩÊï∞ËØÑ‰º∞Êù•Ëøë‰ºº‰º∞ËÆ°Êµ∑Ê£ÆÁü©ÈòµÔºå‰ΩÜÈúÄË¶Å‰∏ÄÁ≥ªÂàóËø≠‰ª£ÊâçËÉΩËææÂà∞Áõ∏ÂØπÂáÜÁ°ÆÁöÑ‰º∞ËÆ°„ÄÇ Âú®Á¨¨ \\ref{sec:solver_comp} ËäÇÁöÑÊØîËæÉ‰∏≠Ë°®ÊòéÔºåL-BFGS ÊñπÊ≥ïÂú®ÈÄÇÂΩìÈÄâÊã©ÂÜÖÂ≠òÂ§ßÂ∞èÁöÑÊÉÖÂÜµ‰∏ã‰ºò‰∫éÂÖ∂‰ªñ‰∏§ÁßçÁÆóÊ≥ïÔºåÂπ≥Ë°°‰∫ÜÈáçÂêØÁöÑÊçüÂ§±ÂíåÈÄÜÊµ∑Ê£ÆÁü©Èòµ‰º∞ËÆ°ÁöÑÂáÜÁ°ÆÊÄß„ÄÇ ËØ•ÁÆóÊ≥ïÁöÑÁÆÄË¶ÅËß£ÈáäÂ¶Ç‰∏ã„ÄÇ ÂØπ‰∫é‰∏Ä‰∏™Êó†Á∫¶Êùü‰ºòÂåñÈóÆÈ¢ò $\\mathop{min}_{\\mathbf{x} \\in {\\mathbb{R}^n}} f(\\mathbf{x})$ÔºåÊõ¥Êñ∞ $\\mathbf{x}$ ÈÅµÂæ™Ëøë‰ººÁâõÈ°øÊ≠•È™§„ÄÇ xk+1=xk‚àíŒ±kHk‚àáfkHk+1=VkTHkVk+œÅkskskT \\begin{array}{c}x_{k+1}=x k-\\alpha_{k} H_{k} \\nabla f_{k} \\\\\\\\ H_{k+1}=V_{k}^{T} H_{k} V_{k}+\\rho_{k} s_{k} s_{k}^{T}\\end{array} xk+1‚Äã=xk‚àíŒ±k‚ÄãHk‚Äã‚àáfk‚ÄãHk+1‚Äã=VkT‚ÄãHk‚ÄãVk‚Äã+œÅk‚Äãsk‚ÄãskT‚Äã‚Äã ÂÖ∂‰∏≠ $\\alpha_{k}$ ‰∏∫Ê≠•ÈïøÔºå $\\rho_{k}=\\left(y_{k}^{T} s_{k}\\right)^{-1}$ Ôºå$V_{k}=I-\\rho_{k} y_{k} s_{k}^{T}$Ôºå$s_{k}=x_{k+1}-x_{k}$ Ôºå$y_{k}=\\nabla f_{k+1}-\\nabla f_{k}$ „ÄÇ ÁÆóÊ≥ïÂ∞ÜÂºè Âè≥‰πò$ \\nabla f_{k}$ ÔºåÈÄíÂΩíÊâ©Â±ï m Ê≠•ÂêéÂæóÂà∞‰∫ÜÊúâÊïàÁöÑ„ÄÅÁ∫øÊÄßÊó∂Èó¥/Á©∫Èó¥Â§çÊùÇÂ∫¶ÁöÑÂèåÁéØÈÄíÂΩíÊõ¥Êñ∞ÊñπÊ≥ï„ÄÇL-BFGS ÁöÑÂßãÂåñÈÄÜ Hessian $H_{k}^{0}$ Áî± Barzilai-Borwein step ÁöÑÊùÉÈáçÊù•ÂæóÂà∞ Hk0=sk‚àí1Tyk‚àí1yk‚àí1Tyk‚àí1Iorsk‚àí1Tsk‚àí1sk‚àí1Tyk‚àí1I H_{k}^{0}=\\frac{s_{k-1}^{T} y_{k-1}}{y_{k-1}^{T} y_{k-1}} I \\quad or \\quad \\frac{s_{k-1}^{T} s_{k-1}}{s_{k-1}^{T} y_{k-1}} I Hk0‚Äã=yk‚àí1T‚Äãyk‚àí1‚Äãsk‚àí1T‚Äãyk‚àí1‚Äã‚ÄãIorsk‚àí1T‚Äãyk‚àí1‚Äãsk‚àí1T‚Äãsk‚àí1‚Äã‚ÄãI 5 Time Re-allocation and Trajectory Refinement Êó∂Èó¥ÈáçÂàÜÈÖçÂíåËΩ®ËøπÁªÜÂåñ Âú®‰ºòÂåñ‰πãÂâçÂàÜÈÖç‰∏Ä‰∏™ÂáÜÁ°ÆÁöÑÊó∂Èó¥ÁïåÈôêÊòØ‰∏çÂêàÁêÜÁöÑÔºåÂõ†‰∏∫ËßÑÂàíÂô®ÂØπÊúÄÁªàËΩ®ËøπÊ≤°Êúâ‰ªª‰Ωï‰ø°ÊÅØ„ÄÇ Âõ†Ê≠§ÔºåÈ¢ùÂ§ñÁöÑÊó∂Èó¥ÈáçÊñ∞ÂàÜÈÖçÁ®ãÂ∫èÂØπ‰∫éÁ°Æ‰øùÂä®ÂäõÂ≠¶ÂèØË°åÊÄßËá≥ÂÖ≥ÈáçË¶Å„ÄÇ ÂÖàÂâçÁöÑÁ†îÁ©∂\\cite{gao2020teach, zhou2019robust}Â∞ÜËΩ®ËøπÂèÇÊï∞Âåñ‰∏∫ÈùûÂùáÂåÄ B Ê†∑Êù°ÔºåÂπ∂Âú®‰∏Ä‰∫õÊÆµË∂ÖËøáÂØºÊï∞ÈôêÂà∂Êó∂Ëø≠‰ª£Âú∞Âª∂Èïø‰∏ÄÁªÑËäÇÁÇπË∑®Â∫¶„ÄÇ ÁÑ∂ËÄåÔºå‰∏Ä‰∏™ËäÇÁÇπË∑®Â∫¶ $\\triangle t_n$‰ºöÂΩ±ÂìçÂ§ö‰∏™ÊéßÂà∂ÁÇπÔºåÂèç‰πã‰∫¶ÁÑ∂ÔºåÂΩìË∞ÉÊï¥Èù†ËøëËµ∑ÂßãÁä∂ÊÄÅÁöÑËäÇÁÇπË∑®Â∫¶Êó∂Ôºå‰ºöÂØºËá¥‰∏é‰πãÂâçËΩ®ËøπÁöÑÈ´òÈò∂‰∏çËøûÁª≠ÊÄß„ÄÇ Âú®Êú¨ËäÇ‰∏≠ÔºåÊ†πÊçÆÁ¨¨ÂõõËäÇ‰∏≠ÂæóÂà∞ÁöÑÂÆâÂÖ®ËΩ®Ëøπ $\\mathbf{\\Phi}{s}$ ÔºåÁîüÊàê‰∏ÄÊù°Êó∂Èó¥ÂàÜÈÖçÂêàÁêÜÁöÑÂùáÂåÄ B Ê†∑Êù°ËΩ®Ëøπ $\\mathbf{\\Phi}{f}$ „ÄÇÁÑ∂ÂêéÔºåÊèêÂá∫‰∫Ü‰∏ÄÁßçÂêÑÂêëÂºÇÊÄßÊõ≤Á∫øÊãüÂêàÊñπÊ≥ïÔºàan anisotropic curve fifitting methodÔºâÔºå‰Ωø $\\mathbf{\\Phi}{f}$ ÂèØ‰ª•Ëá™Áî±Âú∞‰ºòÂåñÂÖ∂ÊéßÂà∂ÁÇπÔºå‰ª•Êª°Ë∂≥Êõ¥È´òÈò∂ÂØºÊï∞Á∫¶ÊùüÔºåÂêåÊó∂‰øùÊåÅ‰∏é $\\mathbf{\\Phi}{s}$ Âá†‰πéÁõ∏ÂêåÁöÑÂΩ¢Áä∂„ÄÇ È¶ñÂÖàÔºå‰∏é Fast-Planner Á±ª‰ººÔºåÊàë‰ª¨ËÆ°ÁÆóË∂ÖÂá∫ÈôêÂà∂ÁöÑÊØîÁéá„ÄÇ re=max‚Å°{‚à£Vi,r/vm‚à£,‚à£Aj,r/am‚à£,‚à£Jk,r/jm‚à£3,1} r_{e}=\\max \\left\\{\\left|\\mathbf{V}_{i, r} / v_{m}\\right|, \\sqrt{\\left|\\mathbf{A}_{j, r} / a_{m}\\right|}, \\sqrt[3]{\\left|\\mathbf{J}_{k, r} / j_{m}\\right|}, 1\\right\\} re‚Äã=max{‚à£Vi,r‚Äã/vm‚Äã‚à£,‚à£Aj,r‚Äã/am‚Äã‚à£‚Äã,3‚à£Jk,r‚Äã/jm‚Äã‚à£‚Äã,1} ÂÖ∂‰∏≠Ôºå$i\\in{1,\\cdots, N_c-1}$ Ôºå$j\\in{1,\\cdots, N_c-2}$ Ôºå$k\\in{1,\\cdots, N_c-3}$ Âíå $r\\in{x,y,z}$ ËΩ¥„ÄÇ ‰∏ãÊ†á‰∏∫$m$ÁöÑÊ¶ÇÂøµË°®Á§∫ÂØºÊï∞ÁöÑÈôêÂà∂„ÄÇ $r_e$ Ë°®Á§∫Áõ∏ÂØπ‰∫é $\\mathbf{\\Phi}{s}$ ÔºåÊàë‰ª¨Â∫îËØ•Âª∂Èïø $\\mathbf{\\Phi}{f}$ ÁöÑÊó∂Èó¥ÂàÜÈÖçÈáè„ÄÇ Ê≥®ÊÑèÔºå $\\mathbf{V}_i$Ôºå $\\mathbf{A}_j$ Âíå $\\mathbf{J}_k$ ‰∏é $\\triangle t$ ÁöÑÂπ≥ÊñπÂíå $\\triangle t$ ÁöÑÁ´ãÊñπÊàêÂèçÊØîÔºåÂèÇËßÅÂºèÔºà\\ref{equ:v_a_j}Ôºâ„ÄÇ ÁÑ∂ÂêéÊàë‰ª¨ÂæóÂà∞‰∫Ü $\\mathbf{\\Phi}_{f}$ ÁöÑÊñ∞Êó∂Èó¥Èó¥Èöî„ÄÇ Œît‚Ä≤=reŒît. \\Delta t^{\\prime}=r_{e} \\Delta t. Œît‚Ä≤=re‚ÄãŒît. $\\mathbf{\\Phi}{f}$ Âú®Êª°Ë∂≥ËæπÁïåÁ∫¶ÊùüÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄöËøáËß£‰∏Ä‰∏™Èó≠ÂºèÊúÄÂ∞è‰∫å‰πòÈóÆÈ¢òÔºåÂàùÂßãÂåñÁîüÊàêÊó∂Èó¥Ë∑®Â∫¶‰∏∫ $\\Delta t^{\\prime}$ ÁöÑËΩ®Ëøπ $\\mathbf{\\Phi}{f}$ ÔºåÂπ∂‰øùÊåÅ‰∏é $\\mathbf{\\Phi}_s$Áõ∏ÂêåÁöÑÂΩ¢Áä∂ÂíåÊéßÂà∂ÁÇπÊï∞Èáè„ÄÇ ÁÑ∂ÂêéÈÄöËøá‰ºòÂåñËøõ‰∏ÄÊ≠•‰ºòÂåñÂÖ∂Âπ≥ÊªëÊÄßÂíåÂèØË°åÊÄß„ÄÇ Áî±Âπ≥ÊªëÊÄß„ÄÅÂèØË°åÊÄßÂíåÊõ≤Á∫øÊãüÂêàÔºàÁ®çÂêé‰ªãÁªçÔºâÁöÑÁ∫øÊÄßÁªÑÂêàÊâÄÊûÑÈÄ†ÁöÑÊÉ©ÁΩöÂáΩÊï∞$J'$Ë¢´Áî®‰∫é‰ºòÂåñ„ÄÇ min‚Å°QJ‚Ä≤=ŒªsJs+ŒªdJd+ŒªfJf \\min _{\\mathbf{Q}} J^{\\prime}=\\lambda_{s} J_{s}+\\lambda_{d} J_{d}+\\lambda_{f} J_{f} Qmin‚ÄãJ‚Ä≤=Œªs‚ÄãJs‚Äã+Œªd‚ÄãJd‚Äã+Œªf‚ÄãJf‚Äã ÂÖ∂‰∏≠Ôºå $\\lambda_f$ ÊòØÊãüÂêàÈ°πÁöÑÊùÉÈáç„ÄÇ ÊãüÂêàÊÉ©ÁΩöÂáΩÊï∞ $J_f$ ÁöÑÂΩ¢ÂºèÊòØ‰ªéÁÇπ $\\mathbf{\\Phi}_f (\\alpha T')$ Âà∞Áõ∏Â∫îÁÇπ $\\mathbf{\\Phi}_s (\\alpha T)$ ÁöÑÂêÑÂêëÂºÇÊÄß‰ΩçÁßªÁöÑÁßØÂàÜÔºåÂÖ∂‰∏≠ $T$ Âíå $T'$ ÊòØ $\\mathbf{\\Phi}_s$ Âíå $\\mathbf{\\Phi}_f$ ÁöÑËΩ®ËøπÊåÅÁª≠Êó∂Èó¥Ôºå $\\alpha \\in [0,1]$„ÄÇ Áî±‰∫éÊãüÂêàÁöÑÊõ≤Á∫ø $\\mathbf{\\Phi}_{s}$ Â∑≤ÁªèÊ≤°ÊúâÁ¢∞ÊíûÔºåÂØπ‰∫é‰∏§Êù°Êõ≤Á∫øÔºåÊàë‰ª¨Áî®Â∏¶Êúâ‰ΩéÊùÉÈáçÁöÑËΩ¥Âêë‰ΩçÁßªÊù•ÊîæÂÆΩÂÖâÊªëË∞ÉÊï¥ÈôêÂà∂ÔºåÁî®È´òÊùÉÈáçÁöÑÂæÑÂêë‰ΩçÁßªÊù•Èò≤Ê≠¢Á¢∞Êíû„ÄÇ ‰∏∫‰∫ÜÂÆûÁé∞Ëøô‰∏ÄÁÇπÔºåÊàë‰ª¨‰ΩøÁî®ÁêÉÂ∫¶ÈáèÔºåÂ¶ÇÂõæ\\ref{pic:fitting}ÊâÄÁ§∫Ôºå‰ΩøÂæóÂú®Áõ∏ÂêåÁöÑÁêÉÈù¢‰∏äÁöÑ‰ΩçÁßª‰∫ßÁîüÁõ∏ÂêåÁöÑÊÉ©ÁΩö„ÄÇ Êàë‰ª¨Áî®‰∏Ä‰∏™Ê§≠ÂúÜÁªïÂÖ∂‰∏ªËΩ¥‰πã‰∏ÄÔºåÂç≥ÂàáÁ∫ø $\\dot{\\mathbf{\\Phi}}_s(\\alpha T)$ ÊóãËΩ¨Êù•ÂæóÂà∞ $\\mathbf{\\Phi}_f(\\alpha T')$ ÁöÑÊ§≠ÁêÉÈù¢„ÄÇ Âõ†Ê≠§ÔºåËΩ¥Âêë‰ΩçÁßª $d_a$ ÂíåÂæÑÂêë‰ΩçÁßª $d_r$ ÂèØ‰ª•ÈÄöËøáËÆ°ÁÆóÂæóÂà∞„ÄÇ da=(Œ¶f‚àíŒ¶s)‚ãÖŒ¶Àôs‚à•Œ¶Àôs‚à•,dr=‚à•(Œ¶f‚àíŒ¶s)√óŒ¶Àôs‚à•Œ¶Àôs‚à•‚à•. \\begin{array}{l}d_{a}=\\left(\\boldsymbol{\\Phi}_{f}-\\boldsymbol{\\Phi}_{s}\\right) \\cdot \\frac{\\dot{\\boldsymbol{\\Phi}}_{s}}{\\left\\|\\dot{\\boldsymbol{\\Phi}}_{s}\\right\\|}, \\\\ d_{r}=\\left\\|\\left(\\boldsymbol{\\Phi}_{f}-\\boldsymbol{\\Phi}_{s}\\right) \\times \\frac{\\dot{\\boldsymbol{\\Phi}}_{s}}{\\left\\|\\dot{\\boldsymbol{\\Phi}}_{s}\\right\\|}\\right\\| .\\end{array} da‚Äã=(Œ¶f‚Äã‚àíŒ¶s‚Äã)‚ãÖ‚à•Œ¶Àôs‚Äã‚à•Œ¶Àôs‚Äã‚Äã,dr‚Äã=‚à•‚à•‚à•‚à•‚à•‚Äã(Œ¶f‚Äã‚àíŒ¶s‚Äã)√ó‚à•Œ¶Àôs‚Äã‚à•Œ¶Àôs‚Äã‚Äã‚à•‚à•‚à•‚à•‚à•‚Äã.‚Äã ÂåπÈÖçÁ®ãÂ∫¶ÊÉ©ÁΩöÈ°πÂáΩÊï∞‰∏∫Ôºö Jf=‚à´01[da(Œ±T‚Ä≤)2a2+dr(Œ±T‚Ä≤)2b2]dŒ± J_{f}=\\int_{0}^{1}\\left[\\frac{d_{a}\\left(\\alpha T^{\\prime}\\right)^{2}}{a^{2}}+\\frac{d_{r}\\left(\\alpha T^{\\prime}\\right)^{2}}{b^{2}}\\right] \\mathrm{d} \\alpha Jf‚Äã=‚à´01‚Äã[a2da‚Äã(Œ±T‚Ä≤)2‚Äã+b2dr‚Äã(Œ±T‚Ä≤)2‚Äã]dŒ± ÂÖ∂‰∏≠$a$Âíå$b$ÂàÜÂà´‰ª£Ë°®Ê§≠ÂúÜÁöÑÂçäÈïøËΩ¥ÂíåÂçäÁü≠ËΩ¥„ÄÇ ËØ•ÈóÆÈ¢òÈÄöËøáL-BFGS ÁÆóÊ≥ïÊ±ÇËß£„ÄÇ 6 ÂÆûÈ™åÁªìÊûú A. Implementation Details ËßÑÂàíÊ°ÜÊû∂ÊÄªÁªìÂ¶Ç ÁÆóÊ≥ï2 ÊâÄÁ§∫„ÄÇ Êàë‰ª¨Â∞Ü B Ê†∑Êù°Ê¨°Êï∞ËÆæÁΩÆ‰∏∫ $p_b=3$„ÄÇ ÊéßÂà∂ÁÇπÁöÑÊï∞Èáè $N_c$ Â§ßÁ∫¶Âú® 25‰∏™Â∑¶Âè≥ÔºåËøôÊòØÁî±ËßÑÂàíÊ∞¥Âπ≥ÔºàÁ∫¶‰∏∫ 7mÔºâÂíåÁõ∏ÈÇªÁÇπ‰πãÈó¥ÁöÑÂàùÂßãË∑ùÁ¶ªÈó¥ÈöîÔºàÁ∫¶‰∏∫ 0.3mÔºâÂÜ≥ÂÆöÁöÑ„ÄÇ Ëøô‰∫õÊòØ‰∏∫‰∫ÜÂú®ÈóÆÈ¢òÁöÑÂ§çÊùÇÊÄßÂíåËá™Áî±Â∫¶‰πãÈó¥ÂèñÂæóÂπ≥Ë°°ËÄåËÆæÁΩÆÁöÑÁªèÈ™åÂèÇÊï∞„ÄÇ ÁÆóÊ≥ïÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫ $O(N_c)$ ÔºåÂõ†‰∏∫Ê†πÊçÆ B Ê†∑Êù°ÁöÑÂ±ÄÈÉ®ÊîØÊåÅÂ±ûÊÄßÔºå‰∏Ä‰∏™ÊéßÂà∂ÁÇπÂè™‰ºöÂΩ±ÂìçÈôÑËøëÁöÑÁ∫øÊÆµ„ÄÇ L-BFGS ÁöÑÂ§çÊùÇÊÄßÂú®Áõ∏ÂêåÁöÑÁõ∏ÂØπÂÖ¨Â∑Æ‰∏ä‰πüÊòØÁ∫øÊÄßÁöÑ„ÄÇ ÂØπ‰∫éÊó†Á¢∞ÊíûË∑ØÂæÑÊêúÁ¥¢ÔºåÊàë‰ª¨ÈááÁî® $A^*$ ÁÆóÊ≥ïÔºåÂú®Ë∑ØÂæÑ $\\mathbf{\\Gamma}$ ÊÄªÊòØËá™ÁÑ∂Âú∞Èù†ËøëÈöúÁ¢çÁâ©Ë°®Èù¢ÁöÑ‰ºòÁÇπ„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•Âú® $\\mathbf{\\Gamma}$ Â§ÑÈÄâÊã© $\\mathbf{p}$ ÔºåËÄåÊó†ÈúÄÊêúÁ¥¢ÈöúÁ¢çÁâ©Ë°®Èù¢„ÄÇ ÂØπ‰∫éÂú® Fig.\\ref{pic:3d_p_v_pairs}‰∏≠ÂÆö‰πâÁöÑÂêëÈáè $\\mathbf{R}_i$ÔºåÂèØ‰ª•ÈÄöËøáÂùáÂåÄ B Ê†∑Êù°ÂèÇÊï∞ÂåñÁöÑÊÄßË¥®Êé®ÂØºÂá∫Ôºå $\\mathbf{R}_i$Êª°Ë∂≥ Ri=Qi+1‚àíQi‚àí12Œît \\mathbf{R}_{i}=\\frac{\\mathbf{Q}_{i+1}-\\mathbf{Q}_{i-1}}{2 \\Delta t} Ri‚Äã=2ŒîtQi+1‚Äã‚àíQi‚àí1‚Äã‚Äã ÂèØ‰ª•È´òÊïàÂú∞ËÆ°ÁÆó„ÄÇ Âºè\\ref{equ:fitness}Ë¢´Á¶ªÊï£Âåñ‰∏∫ÊúâÈôêÊï∞ÈáèÁöÑÁÇπ $\\mathbf{\\Phi}_f(k\\triangle t')$ Âíå $\\mathbf{\\Phi}_s(k\\triangle t)$ÔºåÂÖ∂‰∏≠$k \\in \\mathbb{N}, 0 \\leq k \\leq \\lfloor{T/\\triangle t}\\rfloor$„ÄÇ ‰∏∫‰∫ÜËøõ‰∏ÄÊ≠•‰øùËØÅÂÆâÂÖ®ÔºåÂú®ÊúÄÁªàËΩ®ËøπÂë®Âõ¥ÊâßË°å‰∫Ü‰∏Ä‰∏™ÂçäÂæÑÂõ∫ÂÆöÁöÑÂúÜÁÆ°ÁöÑÁ¢∞ÊíûÊ£ÄÊü•Ôºå‰ª•Êèê‰æõË∂≥Â§üÁöÑÈöúÁ¢çÁâ©Èó¥Èöô„ÄÇ Âè™ÊúâÂΩìÊ≤°ÊúâÊ£ÄÊµãÂà∞Á¢∞ÊíûÊó∂Ôºå‰ºòÂåñÂô®ÊâçÂÅúÊ≠¢„ÄÇ Êàë‰ª¨Âú®‰∏é\\cite{gao2020teach}Áõ∏ÂêåÁöÑÈ£ûË°åÂπ≥Âè∞‰∏äËøõË°å‰∫ÜÁúüÂÆû‰∏ñÁïåÁöÑÂÆûÈ™åÔºåËØ•Âπ≥Âè∞‰ΩøÁî® Intel RealSense D435 Ëé∑ÂèñÊ∑±Â∫¶\\footnote{https://www.intelrealsense.com/depth-camera-d435/}„ÄÇ Ê≠§Â§ñÔºåÊàë‰ª¨‰øÆÊîπ‰∫Ü Intel RealSense ÁöÑ ROS È©±Âä®Á®ãÂ∫èÔºå‰ΩøÂÖ∂ËÉΩÂ§üËÆ©ÊøÄÂÖâÂèëÂ∞ÑÂô®‰ª•ÊØèÈöî‰∏ÄÂ∏ßÁöÑÊñπÂºèËß¶Âèë„ÄÇ ËøôÊ†∑ÂèØ‰ª•Âú®ÊøÄÂÖâÂèëÂ∞ÑÂô®ÁöÑÂ∏ÆÂä©‰∏ãËæìÂá∫È´òË¥®ÈáèÁöÑÊ∑±Â∫¶ÂõæÂÉèÔºåÂπ∂‰∏î‰∏çÂèóÊøÄÂÖâÂπ≤Êâ∞ÁöÑÂèåÁõÆÂõæÂÉè„ÄÇ ‰øÆÊîπÂêéÁöÑÈ©±Âä®Á®ãÂ∫è‰πüÂ∑≤ÁªèÂºÄÊ∫ê„ÄÇ def ReboundPlanning(E, Q_last, G): \"\"\" This function implements the Rebound Planning algorithm. Args: - E: The environment - Q_last: The previous control point struct - G: The goal Returns: - Q: The optimized control point struct after rebound planning \"\"\" Q = FindInit(Q_last, G) while not IsCollisionFree(E, Q): CheckAndAddObstacleInfo(E, Q) J, gradient_G = EvaluatePenalty(Q) Q = OneStepOptimize(J, gradient_G) if not IsFeasible(Q): Q = ReAllocateTime(Q) Q = CurveFittingOptimize(Q) return Q B. Optimization Algorithms Comparison Âú®Êú¨ËäÇ‰∏≠Êàë‰ª¨Â∞ÜËÆ®ËÆ∫‰∏âÁßç‰∏çÂêåÁöÑ‰ºòÂåñÁÆóÊ≥ïÔºåÂåÖÊã¨ Barzilai-BorweinÔºàBBÔºâÊñπÊ≥ïÔºåÊúâÈôêÂ≠òÂÇ® BFGSÔºàL-BFGSÔºâÂíåÊà™Êñ≠ÁâõÈ°øÔºàT-NEWTONÔºâÊñπÊ≥ï„ÄÇÂÖ∑‰ΩìÊù•ËØ¥ÔºåÊØèÁßçÁÆóÊ≥ïÂú®ÈöèÊú∫Âú∞Âõæ‰∏äÁã¨Á´ãËøêË°å 100 Ê¨°„ÄÇÊâÄÊúâÁõ∏ÂÖ≥ÁöÑÂèÇÊï∞ÔºåÂåÖÊã¨ËæπÁïåÁ∫¶ÊùüÔºåÊó∂Èó¥ÂàÜÈÖçÔºåÂÜ≥Á≠ñÂèòÈáèÂàùÂßãÂåñÂíåÈöèÊú∫ÁßçÂ≠êÔºåÈÉΩËÆæÁΩÆ‰∏∫‰∏çÂêåÁÆóÊ≥ï‰πãÈó¥Áõ∏Âêå„ÄÇËÆ∞ÂΩï‰∫ÜÊàêÂäüÁéáÔºåËÆ°ÁÆóÊó∂Èó¥ÂíåÁõÆÊ†áÂáΩÊï∞ËØÑ‰º∞Ê¨°Êï∞ÁöÑÊï∞ÊçÆ„ÄÇÁî±‰∫éÂ§±Ë¥•Ê°à‰æã‰∏≠ÁöÑÊï∞ÊçÆÊòØÊó†ÊÑè‰πâÁöÑÔºåÂè™ÊúâÊàêÂäüÁöÑÊ°à‰æãË¢´ËÆ°Êï∞„ÄÇÁõ∏ÂÖ≥ÁªìÊûúÊòæÁ§∫Âú®Ë°®\\ref{tab:solver_comparison}‰∏≠ÔºåË°®Êòé L-BFGS ÊòéÊòæ‰ºò‰∫éÂè¶Â§ñ‰∏§ÁßçÁÆóÊ≥ï„ÄÇL-BFGS ‰ΩøÁî®‰∫åÈò∂Ê≥∞ÂãíÂ±ïÂºÄÁöÑÊñπÂºèÊù•Ëøë‰ººÊèèËø∞Á±ªÂûãÁöÑÈÄºËøëÔºåÈÄÇÁî®‰∫éÂú®Á¨¨\\ref{sec::problem_optimization}ËäÇ‰∏≠ÊèèËø∞ÁöÑÁõÆÊ†áÂáΩÊï∞‰ºòÂåñ„ÄÇÊà™Êñ≠ÁâõÈ°øÊñπÊ≥ï‰πüÂØπ‰∫åÈò∂‰ºòÂåñÊñπÂêë $\\mathbf{H}^{-1} \\nabla \\mathbf{f}_k$ËøõË°åËøë‰ºº„ÄÇÁÑ∂ËÄåÔºåËøáÂ§öÁöÑÁõÆÊ†áÂáΩÊï∞ËØÑ‰º∞‰ºöÂ¢ûÂä†‰ºòÂåñÊó∂Èó¥„ÄÇBB ÊñπÊ≥ïÈÄöËøáÊ†áÈáè $\\lambda$‰πò‰ª• $\\mathbf{I}$ Êù•‰º∞ËÆ° Hessian„ÄÇÁÑ∂ËÄåÔºåÂØπ Hessian ÁöÑ‰∏çÂÖÖÂàÜ‰º∞ËÆ°‰ªçÁÑ∂ÂØºËá¥Êî∂ÊïõÈÄüÂ∫¶ËæÉ‰Ωé„ÄÇ C. Trajectory Generation With & Without ESDF Êàë‰ª¨‰ΩøÁî®‰∏éÁ¨¨\\ref{sec:solver_comp}ËäÇÁõ∏ÂêåÁöÑËÆæÁΩÆÊù•ËøõË°åÊØîËæÉ„ÄÇ ËÄÉËôëÂà∞‰ΩøÁî®Âü∫‰∫é ESDF ÁöÑËΩ®ËøπÁîüÊàêÂô®ÁöÑÁõ¥Á∫øÂàùÂßãÂåñÊó∂Âú®\\cite{boyu2019ral}‰∏≠Ëß£ÈáäÁöÑÊàêÂäüÁéáËæÉ‰ΩéÔºåÊàë‰ª¨ÈááÁî®‰∫Ü‰∏ÄÁßçÊó†Á¢∞ÊíûÁöÑÂàùÂßãÂåñÊñπÊ≥ï„ÄÇ ÊØîËæÉÁªìÊûúËßÅË°®\\ref{tab:ESDF_comparison}„ÄÇ ‰∏∫‰∫ÜÊ∏ÖÊ•öËµ∑ËßÅÔºåÂü∫‰∫é ESDF ‰∏îÂ∏¶ÊúâÊó†Á¢∞ÊíûÂàùÂßãÂåñÁöÑÊñπÊ≥ïÁÆÄÁß∞‰∏∫\\textit{EI}Âíå\\textit{ENI}„ÄÇ ÊØîËæÉÁªìÊûúÊòæÁ§∫ÔºåÊâÄÊèêÂá∫ÁöÑ EGO ÁÆóÊ≥ïÂú®ÊàêÂäüÁéá‰∏ä‰∏éÂ∏¶ÊúâÊó†Á¢∞ÊíûÂàùÂßãÂåñÁöÑ ESDF ÊñπÊ≥ïÁõ∏ÂΩì„ÄÇ ÁÑ∂ËÄåÔºåEGO ‰∫ßÁîüÁöÑËΩ®ËøπËÉΩÈáèÔºàÂä†ÈÄüÂ∫¶ÁßØÂàÜÔºâÁ®çÂæÆÊõ¥È´ò„ÄÇ ËøôÊòØÂõ†‰∏∫ EGO ÁöÑÊéßÂà∂ÁÇπ‰∏≠ÂåÖÂê´Â§ö‰∏™ÂØπÔºåÁõ∏ÊØî EIÔºåÂÆÉ‰∫ßÁîüÁöÑËΩ®ËøπÂèòÂΩ¢ÂäõÊõ¥Âº∫ÔºåÂ¶Ç Sec.\\ref{sec::colli_fun}‰∏≠ÊâÄËø∞„ÄÇ Âè¶‰∏ÄÊñπÈù¢ÔºåÊõ¥Âº∫ÁöÑÂäõÂä†ÈÄü‰∫ÜÊî∂ÊïõËøáÁ®ãÔºå‰ªéËÄåÁº©Áü≠‰∫Ü‰ºòÂåñÊó∂Èó¥„ÄÇ ENI ÁöÑÊüê‰∫õÁªüËÆ°Êï∞ÊçÆÔºàÁÅ∞Ëâ≤ÊòæÁ§∫ÔºâÂèØËÉΩ‰∏çÂ§™ÊúâËØ¥ÊúçÂäõÔºåÂõ†‰∏∫‰∏é EI Âíå EGO Áõ∏ÊØîÔºåENI ÊµãËØïÂè™Âú®Â∞ëÊï∞ÊÉÖÂÜµ‰∏ãÊàêÂäüÔºåËøô‰∫õÊÉÖÂÜµ‰∏ãÁîüÊàêÁöÑËΩ®ËøπÂú®ËÉΩÈáèÊàêÊú¨ÂíåÈÄüÂ∫¶ÊñπÈù¢Êõ¥Âä†Âπ≥Êªë„ÄÇ ÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂ∞ΩÁÆ°Â∞Ü ESDF Êõ¥Êñ∞Â§ßÂ∞èÂáèÂ∞èÂà∞$10 \\times 4 \\times 2~m^3$ÔºåÂàÜËæ®Áéá‰∏∫$0.1m$ÔºåÈÄÇÁî®‰∫é$9m$ÁöÑËΩ®ËøπÔºåESDF Êõ¥Êñ∞‰ªçÁÑ∂Âç†ÊçÆ‰∫ÜÂ§ßÈÉ®ÂàÜËÆ°ÁÆóÊó∂Èó¥„ÄÇ D. Multiple Planners Comparison Êàë‰ª¨Â∞ÜÊèêÂá∫ÁöÑËßÑÂàíÂô®‰∏é‰∏§ÁßçÊúÄÂÖàËøõÁöÑÊñπÊ≥ïÔºåFast-Planner\\cite{boyu2019ral}Âíå EWOK\\cite{Usenko2017ewok}ËøõË°åÊØîËæÉÔºåÂÆÉ‰ª¨Âà©Áî® ESDF Êù•ËØÑ‰º∞ÈöúÁ¢çÁâ©ÁöÑË∑ùÁ¶ªÂíåÊ¢ØÂ∫¶„ÄÇ ÊØè‰∏™ËßÑÂàíÂô®‰ªéÁõ∏ÂêåÁöÑËµ∑ÁÇπÂà∞ÁªàÁÇπËøêË°åÂçÅÊ¨°Ôºå‰ΩøÁî®‰∏çÂêåÂØÜÂ∫¶ÁöÑÈöúÁ¢çÁâ©„ÄÇ Âπ≥ÂùáÊÄßËÉΩÁªüËÆ°Êï∞ÊçÆÂíå ESDF ËÆ°ÁÆóÊó∂Èó¥Â¶ÇË°®\\ref{tab:plan_cmp2}ÂíåÂõæ\\ref{pic:plan_cmp}ÊâÄÁ§∫„ÄÇ ‰∏âÁßçÊñπÊ≥ïÂú® 0.5 ÈöúÁ¢çÁâ©/$m^2$Âú∞Âõæ‰∏äÁîüÊàêÁöÑËΩ®ËøπÂ¶ÇÂõæ\\ref{pic:traj_cmp}ÊâÄÁ§∫„ÄÇ Ê†πÊçÆË°®\\ref{tab:plan_cmp2}ÔºåÊàë‰ª¨ÂæóÂá∫ÁªìËÆ∫Ôºö‰∏é Fast-Planner Áõ∏ÊØîÔºåÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïÂú®È£ûË°åÊó∂Èó¥ÂíåËΩ®ËøπÈïøÂ∫¶‰∏äÊõ¥Áü≠Ôºå‰ΩÜËÉΩÈáèÊàêÊú¨Êõ¥È´ò„ÄÇ Ëøô‰∏ªË¶ÅÊòØÁî±\\cite{boyu2019ral}‰∏≠ÁöÑÂâçÁ´ØÂä®ÂäõÂ≠¶Ë∑ØÂæÑÊêúÁ¥¢ÂºïËµ∑ÁöÑ„ÄÇ Âú®ÂØÜÈõÜÁéØÂ¢É‰∏≠ÔºåEWOK ‰ºöÂØºËá¥Êâ≠Êõ≤ÁöÑËΩ®ËøπÔºåÂõ†‰∏∫ÁõÆÊ†áÂáΩÊï∞ÂåÖÂê´ÊåáÊï∞È°πÔºåÂØºËá¥‰ºòÂåñËøáÁ®ã‰∏çÁ®≥ÂÆö„ÄÇ Ê≠§Â§ñÔºåÊàë‰ª¨ÂæóÂá∫ÁªìËÆ∫ÔºöÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïËäÇÁúÅ‰∫ÜÂ§ßÈáèÂú®‰∏çÊõ¥Êñ∞ ESDF Êó∂ÁöÑËÆ°ÁÆóÊó∂Èó¥„ÄÇ E. Real-world Experiments Êàë‰ª¨Âú®ÊúâÈôêÁõ∏Êú∫ËßÜÈáé‰∏ãÁöÑÊùÇ‰π±Êú™Áü•ÁéØÂ¢É‰∏≠ËøõË°å‰∫ÜÂá†È°πÂÆûÈ™å„ÄÇ ÂÖ∂‰∏≠‰∏Ä‰∏™ÂÆûÈ™åÊòØÊåâÁÖßÈ¢ÑÂÖàÁªôÂÆöÁöÑËà™ÁÇπÈ£ûË°å„ÄÇ Âú®Ëøô‰∏™ÂÆûÈ™å‰∏≠ÔºåÊó†‰∫∫Êú∫‰ªé‰∏Ä‰∏™Â∞èÂäûÂÖ¨ÂÆ§Ëµ∑È£ûÔºåÈÄöËøáÈó®ÔºåÁªïÁùÄ‰∏Ä‰∏™Â§ßÁöÑÊùÇ‰π±ÊàøÈó¥È£ûË°åÔºåÁÑ∂ÂêéËøîÂõûÂäûÂÖ¨ÂÆ§ÔºåÂ¶ÇÂõæ\\ref{pic:realworld_exp}a ÂíåÂõæ\\ref{pic:traj_indoor}ÊâÄÁ§∫„ÄÇ ÂÆ§ÂÜÖÂÆûÈ™å‰∏≠ÊúÄÁ™ÑÁöÑÈÄöÈÅìÂ∞è‰∫é‰∏ÄÁ±≥ÔºåÂ¶ÇÂõæ\\ref{pic:traj_gen}ÊâÄÁ§∫„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåÊó†‰∫∫Êú∫Âú®ËøôÊ†∑‰∏Ä‰∏™ÊùÇ‰π±ÁöÑÁéØÂ¢É‰∏≠ËææÂà∞‰∫Ü 3.56 Á±≥/ÁßíÁöÑÈÄüÂ∫¶„ÄÇ Âè¶‰∏Ä‰∏™ÂÆ§ÂÜÖÂÆûÈ™åÊòØÂú®È£ûË°åËøáÁ®ã‰∏≠ÈöèÊú∫ÂíåÁ™ÅÁÑ∂ËøΩË∏™ÁõÆÊ†áÔºåÂ¶ÇÂõæ\\ref{pic:realworld_exp}c ÊâÄÁ§∫„ÄÇ Âú®Ëøô‰∏™ÊµãËØï‰∏≠ÔºåÊúâÈôêÁöÑËßÜÈáéÂ∏¶Êù•Êõ¥Â§ßÁöÑÊåëÊàòÔºåÂç≥Âú®Êé•Êî∂Âà∞Êñ∞ÁõÆÊ†áÊàñÊ£ÄÊµãÂà∞Á¢∞ÊíûÂ®ÅËÉÅÂêéÂøÖÈ°ªÁ´ãÂç≥ÁîüÊàêÂèØË°åÁöÑËΩ®Ëøπ„ÄÇ Âõ†Ê≠§ÔºåËøô‰∏™ÂÆûÈ™åÈ™åËØÅ‰∫ÜÊâÄÊèêÂá∫ÁöÑËßÑÂàíÂô®Âú®ÂèØË°åÊÄßÁöÑÂâçÊèê‰∏ãËÉΩÂ§üËøõË°åÊøÄËøõÁöÑÈ£ûË°å„ÄÇ Âú®Êà∑Â§ñÂÆûÈ™å‰∏≠ÔºåÊó†‰∫∫Êú∫Á©øËøáÂØÜÈõÜÁöÑÊ†ëÊûóÂíå‰ΩéÁüÆÁöÑÁÅåÊú®‰∏õÔºåÂ¶ÇÂõæ\\ref{pic:realworld_exp}b ÂíåÂõæ\\ref{pic:traj_outdoor}ÊâÄÁ§∫„ÄÇ Â∞ΩÁÆ°Êó†‰∫∫Êú∫Âë®Âõ¥ÁöÑÈ£éÊµÅÂØºËá¥Ê†ëÊûùÂíåÂè∂Â≠êÊëáÊëÜÔºå‰ΩøÂú∞Âõæ‰∏çÂ§™ÂèØÈù†Ôºå‰ΩÜÊó†‰∫∫Êú∫‰ªçÁÑ∂ËÉΩÂ§üËææÂà∞ 3 Á±≥/Áßí‰ª•‰∏äÁöÑÈÄüÂ∫¶„ÄÇ Âõ†Ê≠§ÔºåÊâÄÊèêÂá∫ÁöÑËßÑÂàíÂô®ÂèØ‰ª•Â§ÑÁêÜÂÆûÈ™åÂíåÁé∞Âú∫ÁéØÂ¢É„ÄÇ Êõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇËÄÉËßÜÈ¢ë\\footnote{https://youtu.be/UKoaGW7t7Dk}„ÄÇ 7 ÁªìËÆ∫ Âú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨Á†îÁ©∂‰∫Ü ESDF Âú®Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËΩ®ËøπËßÑÂàí‰∏≠ÁöÑÂøÖË¶ÅÊÄßÔºåÂπ∂ÊèêÂá∫‰∫Ü‰∏ÄÁßç‰∏çÈúÄË¶Å ESDF ÁöÑÂ±ÄÈÉ®ËßÑÂàíÂô®„ÄÇ ÂÆÉÁöÑÊÄßËÉΩ‰∏é‰∏Ä‰∫õÊúÄÂÖàËøõÁöÑÂü∫‰∫é ESDF ÁöÑËßÑÂàíÂô®Áõ∏ÂΩìÔºå‰ΩÜËÆ°ÁÆóÊó∂Èó¥ÂáèÂ∞ë‰∫Ü‰∏Ä‰∏™Êï∞ÈáèÁ∫ß„ÄÇ Âü∫ÂáÜÊØîËæÉÂíåÂÆûÈôÖÂÆûÈ™åÈ™åËØÅ‰∫ÜÂÖ∂È≤ÅÊ£íÊÄßÂíåÈ´òÊïàÊÄß„ÄÇ ÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ï‰ªçÁÑ∂Â≠òÂú®‰∏Ä‰∫õÁº∫Èô∑ÔºåÂÖ∂‰∏≠ÂåÖÊã¨ $A^*$ ÊêúÁ¥¢ÂºïÂÖ•ÁöÑÂ±ÄÈÉ®ÊúÄÂ∞èÂÄºÂíåÁªü‰∏ÄÊó∂Èó¥ÈáçÊñ∞ÂàÜÈÖçÂºïÂÖ•ÁöÑ‰øùÂÆàËΩ®Ëøπ„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨Â∞ÜËá¥Âäõ‰∫éËøõË°åÊãìÊâëËßÑÂàí‰ª•ÈÅøÂÖçÂ±ÄÈÉ®ÊúÄÂ∞èÂÄºÔºåÂπ∂ÈáçÊñ∞ÊûÑÂª∫ÈóÆÈ¢ò‰ª•ÁîüÊàêËøë‰ººÊúÄ‰ºòËΩ®Ëøπ„ÄÇ ËØ•ËßÑÂàíÂô®ÈÄÇÁî®‰∫éÈùôÊÄÅÁéØÂ¢ÉÔºåÂπ∂‰∏îÂèØ‰ª•Â§ÑÁêÜÁºìÊÖ¢ÁßªÂä®ÁöÑÈöúÁ¢çÁâ©ÔºàÈÄüÂ∫¶‰Ωé‰∫é 0.5m/sÔºâËÄåÊó†ÈúÄ‰ªª‰Ωï‰øÆÊîπ„ÄÇ Êàë‰ª¨Â∞ÜÊù•Â∞ÜÁ†îÁ©∂ÈÄöËøáÁßªÂä®Áâ©‰ΩìÊ£ÄÊµãÂíåÊãìÊâëËßÑÂàíÊù•Â∫îÂØπÂä®ÊÄÅÁéØÂ¢ÉÂØºËà™ÁöÑÈóÆÈ¢ò„ÄÇ "},"Learn/LearnDrones/Planner/Gradient-Based-Motion-Planning.html":{"url":"Learn/LearnDrones/Planner/Gradient-Based-Motion-Planning.html","title":"Gradient-Based-Motion-Planning","keywords":"","body":"Âü∫‰∫éÊ¢ØÂ∫¶ÁöÑËøêÂä®ËßÑÂàí CHOMP CHOMP: Gradient Optimization Techniques for Efficient Motion Planning 2009 IEEE International Conference on Robotics and Automation Covariant Hamiltonian Optimization for Motion Planning (CHOMP) ËøêÂä®ËßÑÂàíÁöÑÂçèÂèòÂìàÂØÜÈ°ø‰ºòÂåñ ÊëòË¶ÅÔºö Áé∞ÊúâÁöÑÈ´òÁª¥ËøêÂä®ËßÑÂàíÁÆóÊ≥ïÂú®ÊüêÁßçÁ®ãÂ∫¶‰∏äÊó¢ËøáÂ∫¶Âèà‰∏çË∂≥„ÄÇÂú®ÈöúÁ¢çÁâ©Á®ÄÁñèÂàÜÂ∏ÉÁöÑÈ¢ÜÂüü‰∏≠ÔºåÂü∫‰∫éÈááÊ†∑ÁöÑËßÑÂàíÂô®Áî®‰∫éÂØºËà™‚ÄúÁã≠Á™ÑÈÄöÈÅì‚ÄùÁöÑÂêØÂèëÂºèÊñπÊ≥ïÂèØËÉΩËøá‰∫éÂ§çÊùÇÔºõÊ≠§Â§ñÔºåËøòÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÂêéÂ§ÑÁêÜÔºå‰ª•ÂéªÈô§Ëøô‰∫õËßÑÂàíÂô®ÁîüÊàêË∑ØÂæÑ‰∏≠ÁöÑÈ¢†Á∞∏ÊàñÂ§ö‰ΩôÁöÑÂä®‰Ωú„ÄÇÂú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨‰ªãÁªç‰∫Ü CHOMPÔºå‰∏ÄÁßç‰ΩøÁî® ÂçèÂèòÊ¢ØÂ∫¶ÊäÄÊúØ covariant gradient techniques ÊåÅÁª≠‰ºòÂåñË∑ØÂæÑÁöÑÊñ∞ÊñπÊ≥ïÔºåÁî®‰∫éÊèêÈ´òÈááÊ†∑ËΩ®ËøπÁöÑË¥®Èáè„ÄÇÊàë‰ª¨ÁöÑ‰ºòÂåñÊäÄÊúØÊó¢ÂèØ‰ª•‰ºòÂåñÈ´òÈò∂Âä®ÊÄÅÊÄßÔºåÂèàÂèØ‰ª•Áõ∏ÂØπ‰∫é‰ª•ÂâçÁöÑË∑ØÂæÑ‰ºòÂåñÁ≠ñÁï•Âú®Êõ¥ÂπøÊ≥õÁöÑËæìÂÖ•Ë∑ØÂæÑ‰∏äÊî∂Êïõ„ÄÇÁâπÂà´Âú∞ÔºåÊàë‰ª¨ÊîæÂÆΩ‰∫ÜËøô‰∫õÁ≠ñÁï•Ë¶ÅÊ±ÇÁöÑËæìÂÖ•Ë∑ØÂæÑ‰∏äÁöÑÊó†Á¢∞ÊíûÂèØË°åÊÄßÂÖàÂÜ≥Êù°‰ª∂„ÄÇÂõ†Ê≠§ÔºåCHOMP ÂèØ‰ª•Áî®‰ΩúËÆ∏Â§öÂÆûÈôÖËßÑÂàíÊü•ËØ¢‰∏≠ÁöÑÁã¨Á´ãËøêÂä®ËßÑÂàíÂô®„ÄÇÊàë‰ª¨ÊºîÁ§∫‰∫ÜÊàë‰ª¨ÊèêËÆÆÁöÑÊñπÊ≥ïÂú®‰∏Ä‰∏™ 6-DOF Êú∫Âô®ËáÇÁöÑÊìçÁ∫µËßÑÂàí‰ª•ÂèäÂú®‰∏Ä‰∏™Ë°åËµ∞ÁöÑÂõõË∂≥Êú∫Âô®‰∫∫ÁöÑËΩ®ËøπÁîüÊàê‰∏≠ÁöÑÊúâÊïàÊÄß„ÄÇ Left: the initial straight-line trajectory through configuration space. Middle: the final trajectory post optimization. Right: the 15 end point configurations used to create the 105 planning problems discussed in section III. CHOMP Algorithm Covariant gradient descent ÂçèÂèòÊ¢ØÂ∫¶‰∏ãÈôç Understanding the update rule ÁêÜËß£Êõ¥Êñ∞ËßÑÂàô Obstacles and distance fields ÈöúÁ¢çÁâ©ÂíåË∑ùÁ¶ªÂú∫ Defining an obstacle potential ÂÆö‰πâÊΩúÂú®ÈöúÁ¢ç Smooth projection for joint limits ÂÖ≥ËäÇÈôêÂà∂ÁöÑÂπ≥ÊªëÊäïÂΩ± CHOMP In this section, we present CHOMP, a new trajectory optimization procedure based on covariant gradient descent. An important theme throughout this exposition is the proper use of geometrical relations, particularly as they apply to inner products. This is a particularly important idea in differential geometry [8]. These considerations appear in three primary locations within our technique. First, we find that in order to encourage smoothness we must measure the size of an update to our hypothesis in terms of the amount of a particular dynamical quantity (such as total velocity or total acceleration) it adds to the trajectory. Second, measurements of obstacle costs should be taken in the workspace so as to correctly account for the geometrical relationship between the robot and the surrounding environment. And finally, the same geometrical considerations used to update a trajectory should be used when correcting any joint limit violations that may occur. Sections II-A, II-D, and II-E detail each of these points in turn. Âú®Êú¨ËäÇ‰∏≠ÔºåÊàë‰ª¨‰ªãÁªç CHOMPÔºå‰∏ÄÁßçÂü∫‰∫éÂçèÂèòÊ¢ØÂ∫¶‰∏ãÈôçÁöÑÊñ∞ËΩ®Ëøπ‰ºòÂåñÁ®ãÂ∫è„ÄÇÊï¥‰∏™ÈòêËø∞ÁöÑ‰∏Ä‰∏™ÈáçË¶Å‰∏ªÈ¢òÊòØÂá†‰ΩïÂÖ≥Á≥ªÁöÑÊ≠£Á°Æ‰ΩøÁî®ÔºåÁâπÂà´ÊòØÂΩìÂÆÉ‰ª¨Â∫îÁî®‰∫éÂÜÖÁßØÊó∂„ÄÇËøôÊòØÂæÆÂàÜÂá†‰Ωï‰∏≠‰∏Ä‰∏™ÁâπÂà´ÈáçË¶ÅÁöÑÊÄùÊÉ≥ [8] „ÄÇËøô‰∫õËÄÉËôëÂõ†Á¥†Âá∫Áé∞Âú®Êàë‰ª¨ÊäÄÊúØ‰∏≠ÁöÑ‰∏â‰∏™‰∏ªË¶Å‰ΩçÁΩÆ„ÄÇ È¶ñÂÖàÔºåÊàë‰ª¨ÂèëÁé∞Ôºå‰∏∫‰∫ÜÈºìÂä±Âπ≥ÊªëÊÄßÔºåÊàë‰ª¨ÂøÖÈ°ªÊ†πÊçÆÊ∑ªÂä†Âà∞ËΩ®Ëøπ‰∏≠ÁöÑÁâπÂÆöÂä®ÊÄÅÈáèÔºà‰æãÂ¶ÇÊÄªÈÄüÂ∫¶ÊàñÊÄªÂä†ÈÄüÂ∫¶ÔºâÁöÑÈáèÊù•Ë°°ÈáèÂÅáËÆæÊõ¥Êñ∞ÁöÑÂ§ßÂ∞è„ÄÇ ÂÖ∂Ê¨°ÔºåÂ∫îÂú®Â∑•‰ΩúÁ©∫Èó¥‰∏≠ÊµãÈáèÈöúÁ¢çÁâ©ÊàêÊú¨Ôºå‰ª•‰æøÊ≠£Á°ÆËÄÉËôëÊú∫Âô®‰∫∫‰∏éÂë®Âõ¥ÁéØÂ¢É‰πãÈó¥ÁöÑÂá†‰ΩïÂÖ≥Á≥ª„ÄÇ ÊúÄÂêéÔºåÂú®Á∫†Ê≠£ÂèØËÉΩÂèëÁîüÁöÑ‰ªª‰ΩïÂÖ≥ËäÇÈôêÂà∂ËøùËßÑÊó∂ÔºåÂ∫î‰ΩøÁî®‰∏éÊõ¥Êñ∞ËΩ®ËøπÁõ∏ÂêåÁöÑÂá†‰ΩïËÄÉËôëÂõ†Á¥†„ÄÇ Sections II-A, II-D, Âíå II-E ‰æùÊ¨°ËØ¶ÁªÜËØ¥ÊòéÊØè‰∏ÄÁÇπ„ÄÇ Covariant gradient descent ÂçèÂèòÊ¢ØÂ∫¶‰∏ãÈôç Êàë‰ª¨‰ΩøÁî®‰∏§È°πÂØπËΩ®ËøπÊàêÊú¨ËøõË°åÂª∫Ê®°ÔºöÈöúÁ¢çÈ°π fobs ÔºåË°°ÈáèÈù†ËøëÈöúÁ¢çÁâ©ÁöÑÊàêÊú¨ÔºõÂíåÂâç‰∏Ä‰∏™ÊúØËØ≠ fprior ÔºåÂÆÉÊµãÈáèÊú∫Âô®‰∫∫ÁöÑÂä®ÊÄÅÈáèÔºå‰æãÂ¶ÇÂπ≥ÊªëÂ∫¶ÂíåÂä†ÈÄüÂ∫¶„ÄÇÊàë‰ª¨‰∏ÄËà¨ÂÅáËÆæ fprior ÊòØÁã¨Á´ã‰∫éÁéØÂ¢ÉÁöÑ„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÁöÑÁõÆÊ†áÂèØ‰ª•ÂÜôÊàê U(Œæ)=fprior(Œæ)+fobs(Œæ) U(\\xi) = f_{prior}(\\xi) + f_{obs}(\\xi) U(Œæ)=fprior‚Äã(Œæ)+fobs‚Äã(Œæ) Stomp Stomp: Stochastic trajectory optimization for motion planning ÊëòË¶Å ‚Äî Êàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßç‰ΩøÁî® ÈöèÊú∫ËΩ®Ëøπ‰ºòÂåñÊ°ÜÊû∂ËøõË°åËøêÂä®ËßÑÂàíÁöÑÊñ∞ÊñπÊ≥ï„ÄÇÊ≠§ÊñπÊ≥ï‰æùËµñ‰∫éÁîüÊàêÂô™Â£∞ËΩ®ËøπÊù•Êé¢Á¥¢ÂàùÂßãÔºàÂèØËÉΩ‰∏çÂèØË°åÔºâËΩ®ËøπÂë®Âõ¥ÁöÑÁ©∫Èó¥ÔºåÁÑ∂ÂêéÁªìÂêàÂÆÉ‰ª¨‰∫ßÁîü‰∏Ä‰∏™ÊàêÊú¨Êõ¥‰ΩéÁöÑÊõ¥Êñ∞ËΩ®Ëøπ„ÄÇÂú®ÊØèÊ¨°Ëø≠‰ª£‰∏≠ÔºåÂü∫‰∫éÈöúÁ¢çÂíåÂπ≥ÊªëÊÄßÊàêÊú¨ÁöÑÁªÑÂêà‰ºòÂåñ‰∏Ä‰∏™ÊàêÊú¨ÂáΩÊï∞„ÄÇÊàë‰ª¨‰ΩøÁî®ÁöÑÁâπÂÆö‰ºòÂåñÁÆóÊ≥ï‰∏çÈúÄË¶ÅÊ¢ØÂ∫¶‰ø°ÊÅØÔºåÂõ†Ê≠§ÂèØ‰ª•Âú®ÊàêÊú¨ÂáΩÊï∞‰∏≠ÂåÖÊã¨ÂèØËÉΩÊó†Ê≥ïËé∑ÂæóÂØºÊï∞ÁöÑ‰∏ÄËà¨ÊàêÊú¨Ôºà‰æãÂ¶ÇÔºåÂØπÂ∫î‰∫éÁ∫¶ÊùüÂíåÁîµÊú∫Êâ≠Áü©ÁöÑÊàêÊú¨Ôºâ„ÄÇÊàë‰ª¨Âú®Ê®°ÊãüÂíåÁßªÂä®Êìç‰ΩúÁ≥ªÁªü‰∏äÂ±ïÁ§∫‰∫ÜËøôÁßçÊñπÊ≥ïÔºåÁî®‰∫éÊó†Á∫¶ÊùüÂíåÂèóÁ∫¶ÊùüÁöÑ‰ªªÂä°„ÄÇÊàë‰ª¨ÂÆûÈ™åÊÄßÂú∞ÊòæÁ§∫ÔºåSTOMP ÁöÑÈöèÊú∫ÊÄß‰ΩøÂÖ∂ËÉΩÂ§üÂÖãÊúç CHOMP ËøôÊ†∑ÁöÑÂü∫‰∫éÊ¢ØÂ∫¶ÁöÑÊñπÊ≥ïÂèØËÉΩÈô∑ÂÖ•ÁöÑÂ±ÄÈÉ®ÊúÄÂ∞èÂÄº„ÄÇ Continuous-time trajectory optimization for online uav replanning Realtime trajectory replanning for mavs using uniform b-splines and a 3d circular buffer An efficient b-spline-based kinodynamic replanning framework for quadrotors Robust and efficient quadrotor trajectory generation for fast autonomous flight Raptor: Robust and perception aware trajectory replanning for quadrotor fast flight "},"Learn/LearnDrones/Planner/MicroFlyingRobots-2021.html":{"url":"Learn/LearnDrones/Planner/MicroFlyingRobots-2021.html","title":"MicroFlyingRobots-2021","keywords":"","body":"Swarm of micro flying robots in the wild Science Robotics Xin Zhou, Xiangyong Wen, Zhepei Wang, Yuman Gao, Haojia Li, Qianhao Wang, Tiankai Yang, Haojian Lu, Yanjun Cao, Chao Xu, Fei Gao Êï¥‰ΩìÁªìËÆ∫ ‰º†ÁªüÁöÑ‰ºòÂåñÁÆóÊ≥ïÂØπÈõÜÁæ§ËßÑÂàíËÄóÊó∂ÈïøÔºåËôΩÁÑ∂ÈÄöËøáÂ∞ÜÂÖ∂ÂàÜÁªÑËÉΩÁÆÄÂåñÂà∞Êüê‰∏™Á®ãÂ∫¶Ôºå‰ΩÜ‰ªçÊúâÈôê„ÄÇËÄåÂéª‰∏≠ÂøÉÂåñ„ÄÅÂ∞ÜÈóÆÈ¢òÈÄÇÂΩìËÆæÂÆöÔºåËÄóÊó∂ÊòæËëó‰∏ãÈôçÔºå‰∏îË∑üÊó†‰∫∫Êú∫Êï∞ÈáèÊàêÊ≠£ÊØî„ÄÇ ÈááÁî®ËÆæÂÆö ÈááÁî®ÈùôÊÄÅÁöÑÊ†ÖÊ†ºÂú∞ÂõæÔºåÂπ∂Âú®ÂÖ∂‰∏äÂè†Âä†Áî±Ê∑±Â∫¶ÂõæËØÜÂà´ÁöÑÂä®ÊÄÅÁâ©‰Ωì„ÄÇ ÂÆö‰ΩçÊ†πÊçÆ ËßÜËßâÊÉØÊÄßÁöÑÈáåÁ®ãËÆ°ÔºàÂü∫‰∫éÈùôÊÄÅÁéØÂ¢ÉÁöÑÁÅ∞Â∫¶ÂõæÔºâÂÆûÁé∞ÔºåÊ≤°Êúâ GPS„ÄÇ Êó†‰∫∫Êú∫ÁöÑËØÜÂà´‰∏ç‰æùÈù†Ê∑±Â∫¶Â≠¶‰π†ÔºåËÄåÊòØÊ∑±Â∫¶ÂõæÁöÑ pixel gatheringÔºàÈááÁî® boundingbox Âπ∂ÊçÆÊ≠§ËÆ°ÁÆóÊó†‰∫∫Êú∫‰πãÈó¥ÁöÑË∑ùÁ¶ªÔºâ„ÄÇ ÂàÜÊàê‰∏çÂêåÂú∫ÊôØÂíå‰ªªÂä°ÔºåÈááÁî®‰∏çÂêåÁöÑÈÄöËÆØÊñπÂºè„ÄÅÂèÇÊï∞ÈÖçÁΩÆÔºåËÄå‰∏çÊòØ‰∏ÄÂ•óÊñπÊ°àÈÄöÁî®„ÄÇ ÂÖ≥ÈîÆËßÇÁÇπ ÈÄö‰ø°ÊñπÂºèÔºö ‰∏≠ÂøÉÂåñÂú®ÂØÜÈõÜÈòµÂûãË°®Áé∞ÂæóÊõ¥Â•ΩÔºåÈöèÁùÄÊï∞ÈáèÂ¢ûÂä†ÂÖ∂Â§çÊùÇÂ∫¶Á∫øÊÄßÊèêÈ´òÔºõ ÁÇπÂØπÁÇπÈÄö‰ø°Âú®Á®ÄÁñèÊó∂Êï∞ÈáèÂ¢ûÂä†Âá†‰πé‰∏çÂ¢ûÂä†Â§çÊùÇÂ∫¶ÔºàÂõ†‰∏∫Ë∂ÖÂá∫‰∏ÄÂÆöË∑ùÁ¶ªÂ∞±‰∏çÈÄöËÆØÔºâÔºå‰ΩÜÂú®ÂØÜÈõÜÊó∂Â§çÊùÇÂ∫¶Â∞ÜÊåáÊï∞ÊèêÈ´ò„ÄÇ ËΩ®ËøπÂèÇÊï∞ÂåñÔºàÂÆûÁé∞ÈöæÂ∫¶‰æùÂ∫èÊèêÈ´òÔºâÔºö ÂàÜÊÆµÂ§öÈ°πÂºèÔºöÈúÄË¶ÅÂ§ßÈáèÁü©ÈòµËøêÁÆóËÄåÂØπËÆ°ÁÆóÊú∫Ë¥üÊãÖËæÉÈáçÔºõÂàÜÊÆµÁöÑÂÖ≥ÈîÆÁÇπ‰ΩçÁΩÆÁöÑÈÄâÊã©ÂØπÊïàÊûúÂíåÁÆóÂäõÂΩ±ÂìçÂæàÂ§ßÔºõË¶ÅÂä†ÂÖ•ËøûÁª≠ÊÄßÁ∫¶Êùü„ÄÇ Bezier Âíå B-Spline Êõ≤Á∫øÔºöconvex hull ÁâπÊÄßËÆ©Â¢ûÂä†Á∫¶ÊùüÂæàÊñπ‰æøÔºåËÄå‰∏îÂ§©ÁÑ∂ÂÖ∑Â§áËøûÁª≠ÊÄßÔºõÁº∫ÁÇπÊòØÂÅèÂêë‰øùÂÆàÔºåÊó†Ê≥ïÂèëÊå•ÊûÅÈôêÊú∫Âä®ËÉΩÂäõ„ÄÇ MINCOÔºà‰∏ÄÁßçÂ§öÈ°πÂºèËΩ®ËøπÁ±ªÔºâÔºöÈíàÂØπÈõÜÊàêÈìæË∑ØÁ≥ªÁªüËÆæËÆ°ÁöÑÊñ∞ÊñπÊ≥ïÔºåËÉΩÊé•ÂèóÂ§ßÈáèÁ∫¶ÊùüÊù°‰ª∂ËÆæÁΩÆÁöÑÂêåÊó∂Ôºå‰øùÊåÅÊó∂Á©∫ÊúÄ‰ºòÊÄßËÉΩÔºõ‰ΩÜÂøÖÈ°ªÂØπÂÖ∂ÁªìÊûúËøõË°åÂÖÖÂàÜÁöÑÂÜçÊ£ÄÊü•ÔºåËÄå‰∏îÂÆûÁé∞Ëµ∑Êù•ÂæàÂ§çÊùÇ„ÄÇ ÈÄö‰ø°ÂÜÖÂÆπÔºöÊ†πÊçÆÊâßË°åÁöÑ‰ªªÂä°ËÄå‰∏çÂêå„ÄÇ‰æãÂ¶Ç\"È£ûË∂äÊ£ÆÊûó\"‰ªªÂä°‰∏≠ÔºåÁõÆÁöÑÂú∞Â∑≤Áªè‰Ωú‰∏∫ÂèÇÊï∞ÊèêÂâçÂÜôÂÖ•ÊØè‰∏™Êó†‰∫∫Êú∫‰πã‰∏≠ÔºåÂõ†Ê≠§Êó†‰∫∫Êú∫‰πãÈó¥Âè™ÈúÄË¶Å‰∫§ÊµÅ\"ÂÆûÊó∂ÁöÑËΩ®Ëøπ\"„ÄÇ ÈÄöËÆØË∑ùÁ¶ªÂøÖÈ°ªÂ§ß‰∫é‰∏§ÂÄçÁöÑËßÑÂàíË∑ùÁ¶ªÔºöÂ∞è‰∫éËøô‰∏™Ë∑ùÁ¶ªÁöÑÊó†‰∫∫Êú∫Â∞Ü‰∫íÁõ∏ÂΩ±ÂìçÔºåÂ§ß‰∫éËøô‰∏™Ë∑ùÁ¶ªÁöÑÂú®Áâ©ÁêÜ‰∏äÂ∞±ÁïôÊúâË∂≥Â§üÁöÑÂèçÂ∫îÁ©∫Èó¥„ÄÇ ÈááÁî®Ëß¶ÂèëËÄåÈùûÂë®ÊúüÂºèÁöÑÈÄö‰ø°ÔºåÂú® 65m ÁöÑÁ´πÊûóÁ©øË∂ä‰ªªÂä°‰∏≠Ôºå10 Êû∂Êó†‰∫∫Êú∫Âπ≥ÂùáÂèëÈÄÅ‰∫Ü 100 Êù°ËΩ®ËøπÔºåÊé•Âèó 1000 Êù°ËΩ®Ëøπ„ÄÇÔºàÊ≥®ÔºöÂ∫îËØ•ÊòØËΩ®ËøπÂèëÁîüÈáçËßÑÂàíÊó∂ÊâçÂØπÂ§ñÂèëÈÄÅÔºå‰ª•ÂáèÂ∞ëÈÄöËÆØÈáè„ÄÇÂèØ‰ª•ÁúãÂà∞ÈÉ®ÂàÜÁöÑÊó†‰∫∫Êú∫ÂèëÈÄÅÈáèÊØîÂÖ∂‰ªñÁöÑÈ´ò 50%‰ª•‰∏ä„ÄÇÔºâ ÊëòË¶ÅÔºöÁ©∫‰∏≠Êú∫Âô®‰∫∫Ë¢´ÂπøÊ≥õÈÉ®ÁΩ≤Ôºå‰ΩÜÈ´òÂ∫¶ÊùÇ‰π±ÁöÑÁéØÂ¢ÉÔºåÂ¶Ç ËåÇÂØÜÁöÑÊ£ÆÊûó ÔºåÊó†‰∫∫Êú∫‰ªçÁÑ∂Êó†Ê≥ïËøõÂÖ•ÔºåÂØπÊàêÁæ§ÁöÑÊó†‰∫∫Êú∫Êù•ËØ¥Êõ¥ÊòØÂ¶ÇÊ≠§„ÄÇ Âú®Ëøô‰∫õÊÉÖÂÜµ‰∏ãÔºå‰ª•ÂâçÊú™Áü•ÁöÑÁéØÂ¢ÉÂíåÁã≠Á™ÑÁöÑËµ∞Âªä‰ª•ÂèäÁæ§‰ΩìÂçèË∞ÉÁöÑË¶ÅÊ±ÇÂèØËÉΩ‰ºöÂ∏¶Êù•ÊåëÊàò„ÄÇ ‰∏∫‰∫ÜÂú®ÈáéÂ§ñÂÆûÁé∞Áæ§‰ΩìÂØºËà™ÔºåÊàë‰ª¨ÂºÄÂèë‰∫Ü ÂÖ∑ÊúâËΩ®ËøπËßÑÂàíÂô®ÁöÑÂæÆÂûã‰ΩÜÂÆåÂÖ®Ëá™‰∏ªÁöÑÊó†‰∫∫Êú∫ÔºåËØ•Êó†‰∫∫Êú∫ÂèØ‰ª•Ê†πÊçÆÊù•Ëá™Êú∫ËΩΩ‰º†ÊÑüÂô®ÁöÑÊúâÈôê‰ø°ÊÅØÂèäÊó∂ÂáÜÁ°ÆÂú∞ËøêË°å„ÄÇ ËßÑÂàíÈóÆÈ¢òÊª°Ë∂≥È£ûË°åÊïàÁéá„ÄÅÈÅøÈöú„ÄÅÊú∫Âô®‰∫∫Èó¥ÈÅøÁ¢∞„ÄÅÂä®ÊÄÅÂèØË°åÊÄß„ÄÅÁæ§‰ΩìÂçèË∞ÉÁ≠âÂ§öÁßç‰ªªÂä°Ë¶ÅÊ±ÇÔºåÂÆûÁé∞‰∫ÜÂèØÊâ©Â±ïÁöÑËßÑÂàíÂô®„ÄÇ Ê≠§Â§ñÔºåÊâÄÊèêÂá∫ÁöÑËßÑÂàíÂô®Âü∫‰∫éÊó∂Á©∫ËÅîÂêà‰ºòÂåñÂêåÊ≠•ÂèòÂΩ¢ËΩ®ËøπÂΩ¢Áä∂Âπ∂Ë∞ÉÊï¥Êó∂Èó¥ÂàÜÈÖç„ÄÇ Âõ†Ê≠§ÔºåÂç≥‰ΩøÂú®ÊúÄÂèóÈôêÂà∂ÁöÑÁéØÂ¢É‰∏≠Ôºå‰πüÂèØ‰ª•Âú®Âá†ÊØ´ÁßíÂÜÖÂΩªÂ∫ïÂà©Áî®Ëß£Á©∫Èó¥ÂêéËé∑ÂæóÈ´òË¥®ÈáèÁöÑËΩ®Ëøπ„ÄÇ ËßÑÂàíÂô®ÊúÄÁªàÈõÜÊàêÂà∞ÂºÄÂèëÁöÑÊâãÊéåÂ§ßÂ∞èÁöÑÁæ§Âπ≥Âè∞‰∏≠ÔºåÂÖ∑ÊúâÊùøËΩΩÊÑüÁü•„ÄÅÂÆö‰ΩçÂíåÊéßÂà∂ÂäüËÉΩ„ÄÇ Âü∫ÂáÜÊØîËæÉÈ™åËØÅ‰∫ÜËßÑÂàíÂô®Âú®ËΩ®ËøπË¥®ÈáèÂíåËÆ°ÁÆóÊó∂Èó¥ÊñπÈù¢ÁöÑÂçìË∂äÊÄßËÉΩ„ÄÇ ÂêÑÁßçÁúüÂÆû‰∏ñÁïåÁöÑÁé∞Âú∫ÂÆûÈ™åËØÅÊòé‰∫ÜÊàë‰ª¨Á≥ªÁªüÁöÑÂèØÊâ©Â±ïÊÄß„ÄÇ Êàë‰ª¨ÁöÑÊñπÊ≥ïÂú®‰∏â‰∏™ÊñπÈù¢ÂèëÂ±ï‰∫ÜÁ©∫‰∏≠Êú∫Âô®‰∫∫ÊäÄÊúØÔºöÊùÇ‰π±ÁéØÂ¢ÉÂØºËà™ÁöÑËÉΩÂäõ„ÄÅÂØπ‰∏çÂêå‰ªªÂä°Ë¶ÅÊ±ÇÁöÑÂèØÊâ©Â±ïÊÄß‰ª•ÂèäÂú®Ê≤°ÊúâÂ§ñÈÉ®ËÆæÊñΩÁöÑÊÉÖÂÜµ‰∏ã‰Ωú‰∏∫Áæ§ÁöÑÂçèË∞É„ÄÇ "},"Learn/LearnDrones/Planner/Distributed-Swarm-Trajectory-Opt-for-Formation-Flight-in-Dense-Envs-2022.html":{"url":"Learn/LearnDrones/Planner/Distributed-Swarm-Trajectory-Opt-for-Formation-Flight-in-Dense-Envs-2022.html","title":"Distributed-Swarm-Trajectory-Opt-for-Formation-Flight-in-Dense-Envs-2022","keywords":"","body":"Âú®Á®†ÂØÜÁéØÂ¢É‰∏≠ÁöÑÂàÜÂ∏ÉÂºèÈõÜÁæ§Ë∑ØÂæÑËßÑÂàí‰ºòÂåñ-2022 Distributed swarm trajectory optimization for formation flight in dense environments ÈíàÂØπÁ©∫‰∏≠ÁºñÈòüÔºåÈ¢ÑÂÆöÂΩ¢ÂºèÂØºËà™Âú®ÂêÑÁßçÂú∫ÊôØ‰∏≠Ë¢´ÂπøÊ≥õÂ∫îÁî®„ÄÇÁÑ∂ËÄåÔºåÁõ∏ÂÖ≥ÁöÑËßÑÂàíÁ≠ñÁï•ÈÄöÂ∏∏Áº∫‰πèÂú®ÁπÅÊùÇÁéØÂ¢É‰∏≠ÈÅøÂÖçÈöúÁ¢çÁâ©ÁöÑËÉΩÂäõ„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂü∫‰∫é‰ºòÂåñÁöÑÊñπÊ≥ïÔºåÁ°Æ‰øùÁºñÈòüÈ£ûË°åÁöÑËΩ®ËøπÁîüÊàê‰∏ç‰ºöÂèëÁîüÁ¢∞Êíû„ÄÇÊú¨Êñá‰∏≠ÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÊñ∞È¢ñÁöÑ ÂèØÂæÆÂ∫¶ÈáèÊù•Ë°°ÈáèÁºñÈòü‰πãÈó¥ÁöÑ Êï¥‰ΩìÁõ∏‰ººË∑ùÁ¶ª„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨Â∞ÜËøô‰∏™Â∫¶ÈáèËΩ¨Âåñ‰∏∫‰∏Ä‰∏™‰ºòÂåñÊ°ÜÊû∂ÔºåÈÄöËøáÂ§öÈ°πÂºèËΩ®ËøπÊù•ÂÆûÁé∞ Á©∫Èó¥-Êó∂Èó¥ËßÑÂàí„ÄÇÂú®ËØ•Ê°ÜÊû∂‰∏≠ËøòÂä†ÂÖ•‰∫ÜÈÅøÂÖçÁ¢∞ÊíûÁöÑÊúÄÂ∞èÂåñÊÉ©ÁΩöÔºå‰ª•‰æøÂêåÊó∂Â§ÑÁêÜÁºñÈòü‰øùÊåÅÂíåÈöúÁ¢çÁâ©ÈÅøËÆ©„ÄÇ‰∏∫‰∫ÜÈ™åËØÅÊàë‰ª¨ÊñπÊ≥ïÁöÑÊïàÁéáÔºåÊàë‰ª¨‰∏éÂÖ∂‰ªñÂâçÊ≤ø‰ΩúÂìÅËøõË°å‰∫ÜÂü∫ÂáÜÊØîËæÉ„ÄÇÁªìÂêàËá™‰∏ªÂàÜÂ∏ÉÂºèÁ©∫‰∏≠ÁºñÈòüÁ≥ªÁªüÔºåÊàë‰ª¨ÊèêÂá∫ÁöÑÊñπÊ≥ïÂú®ÂØåÊúâÈöúÁ¢çÁâ©ÁöÑÂÆûÈôÖÁéØÂ¢ÉÂÆûÈ™å‰∏≠Â±ïÁ§∫‰∫ÜÂÖ∂È´òÊïàÊÄßÂíåÁ®≥ÂÅ•ÊÄß„ÄÇÊàë‰ª¨Â∞ÜÂèëÂ∏ÉÊ∫ê‰ª£Á†Å‰æõÁ§æÂå∫ÂèÇËÄÉ„ÄÇ "},"Learn/LearnDrones/Planner/Robust-Efficient-Trajectory-Planning-for-Formation-Flight-in-Dense-Environments-2023.html":{"url":"Learn/LearnDrones/Planner/Robust-Efficient-Trajectory-Planning-for-Formation-Flight-in-Dense-Environments-2023.html","title":"Robust-Efficient-Trajectory-Planning-for-Formation-Flight-in-Dense-Environments-2023","keywords":"","body":"ÂØÜÈõÜÁéØÂ¢É‰∏ãÁºñÈòüÈ£ûË°åÁöÑÁ®≥ÂÅ•È´òÊïàÁöÑËΩ®ËøπËßÑÂàí-2023 Robust and Efficient Trajectory Planning for Formation Flight in Dense Environments IEEE Transactions on Robotics https://arxiv.org/abs/2210.04048 ÁºñÈòüÈ£ûË°åÂú®Á©∫‰∏≠Êú∫Âô®‰∫∫Áæ§ÁöÑÂêÑÁßçÂ∫îÁî®‰∏≠ÂÖ∑ÊúâÂ∑®Â§ßÊΩúÂäõ„ÄÇÁÑ∂ËÄåÔºåÁé∞ÊúâÊñπÊ≥ïÁº∫‰πèÂú®ÂØÜÈõÜÁéØÂ¢É‰∏≠ÂÆûÁé∞ÂÆåÂÖ®Ëá™‰∏ªÁöÑÂ§ßËßÑÊ®°ÁºñÈòüÈ£ûË°åÁöÑËÉΩÂäõ„ÄÇ‰∏∫‰∫ÜÂº•Ë°•Ëøô‰∏ÄÂ∑ÆË∑ùÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÁºñÈòüÈ£ûË°åÁ≥ªÁªüÔºåËØ•Á≥ªÁªüËÉΩÊúâÊïàÂú∞Â∞ÜÁé∞ÂÆû‰∏ñÁïåÁöÑÁ∫¶ÊùüÊù°‰ª∂Êï¥ÂêàÂà∞Á©∫‰∏≠ÁºñÈòüÂØºËà™‰∏≠„ÄÇÊú¨ÊñáÊèêÂá∫‰∫Ü‰∏ÄÁßç ÂèØÂæÆÂàÜÁöÑÂü∫‰∫éÂõæÁöÑÂ∫¶ÈáèÊñπÊ≥ï (differentiable graph-based metric)ÔºåÁî®‰∫éÈáèÂåñÁºñÈòü‰πãÈó¥ÁöÑ Êï¥‰ΩìÁõ∏‰ººÂ∫¶ËØØÂ∑Æ „ÄÇËØ•ÊåáÊ†á‰∏çÂèóÊóãËΩ¨„ÄÅÂπ≥ÁßªÂíåÁº©ÊîæÁöÑÂΩ±ÂìçÔºå‰∏∫ÁºñÈòüÂçèË∞ÉÊèê‰æõ‰∫ÜÊõ¥Â§ßÁöÑËá™Áî±Â∫¶„ÄÇ Êàë‰ª¨ËÆæËÆ°‰∫Ü‰∏Ä‰∏™ ÂàÜÂ∏ÉÂºèËΩ®Ëøπ‰ºòÂåñÊ°ÜÊû∂ÔºåËØ•Ê°ÜÊû∂ËÄÉËôë‰∫ÜÁºñÈòüÁõ∏‰ººÊÄß„ÄÅÈÅøÈöúÂíåÂä®ÊÄÅÂèØË°åÊÄß„ÄÇÈÄöËøáÂ∞Ü‰ºòÂåñËøáÁ®ãËß£ËÄ¶Ôºå‰ΩøÂ§ßËßÑÊ®°ÁºñÈòüÈ£ûË°åÂú®ËÆ°ÁÆó‰∏äÂèØË°å„ÄÇ ‰∏∫‰∫ÜÊèêÈ´òÁºñÈòüÂú®È´òÂ∫¶ÂèóÈôêÂú∫ÊôØ‰∏≠ÁöÑÂØºËà™ÂºπÊÄßÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßç ËúÇÁæ§ÈáçÁªÑÊñπÊ≥ïÔºå ÈÄöËøáÁîüÊàêÂ±ÄÈÉ®ÂØºËà™ÁõÆÊ†áÔºåËá™ÈÄÇÂ∫îÂú∞Ë∞ÉÊï¥ÁºñÈòüÂèÇÊï∞Âíå‰ªªÂä°ÂàÜÈÖç „ÄÇÊú¨Á†îÁ©∂ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂêç‰∏∫ \"ÂÖ®Â±ÄÈáçÊò†Â∞Ñ-Â±ÄÈÉ®ÈáçËßÑÂàí \"Ôºàglobal-remap-local-replanÔºâÁöÑ Êñ∞ÂûãËúÇÁæ§ÂçèËÆÆÁ≠ñÁï•ÔºåÂπ∂ÊèêÂá∫‰∫Ü‰∏Ä‰∏™ ÁºñÈòüÁ∫ßË∑ØÂæÑËßÑÂàíÂô®Ôºå‰ª•ÂçèË∞ÉÂÖ®Â±ÄËßÑÂàíÂíåÂ±ÄÈÉ®ËΩ®Ëøπ‰ºòÂåñ„ÄÇ ‰∏∫‰∫ÜÈ™åËØÅÊâÄÊèêÂá∫ÁöÑÊñπÊ≥ïÔºåÊàë‰ª¨‰ªéÈÄÇÂ∫îÊÄß„ÄÅÂèØÈ¢ÑÊµãÊÄß„ÄÅÂºπÊÄß„ÄÅÂ§çÂéüÂäõÂíåÊïàÁéáÁ≠âÊñπÈù¢ËÆæËÆ°‰∫ÜÁªºÂêàÂü∫ÂáÜÔºåÂπ∂‰∏éÂÖ∂‰ªñÂâçÊ≤øÂ∑•‰ΩúËøõË°å‰∫ÜÊ®°Êãü„ÄÇÊúÄÂêéÔºåÈÄöËøá‰∏éÂ∏¶ÊúâÊú∫ËΩΩËÆ°ÁÆóÊú∫Âíå‰º†ÊÑüÂô®ÁöÑÊâãÊéåÂ§ßÂ∞èÁöÑËúÇÁæ§Âπ≥Âè∞ÈõÜÊàêÔºåÊàë‰ª¨ÊèêÂá∫ÁöÑÊñπÊ≥ïÂú®ÂØÜÈõÜÁöÑÂÆ§Â§ñÁéØÂ¢É‰∏≠ÂÆûÁé∞‰∫ÜÊúÄÂ§ßËßÑÊ®°ÁöÑÁºñÈòüÈ£ûË°åÔºåËØÅÊòé‰∫ÜÂÆÉÁöÑÈ´òÊïàÊÄßÂíåÈ≤ÅÊ£íÊÄß„ÄÇ Á©∫‰∏≠Áæ§ËÅö„ÄÅÁºñÈòüÈ£ûË°å„ÄÅÈÅøÈöú„ÄÅËøêÂä®ËßÑÂàí„ÄÅÂàÜÂ∏ÉÂºèËΩ®Ëøπ‰ºòÂåñ„ÄÇ Â∞ΩÁÆ°Â§ßÈáèÁöÑÁ†îÁ©∂Â∑•‰ΩúÈõÜ‰∏≠Âú®ÁºñÈòüÈ£ûË°åÂØºËà™‰∏äÔºå‰ΩÜÂú®ÂÖÖÊª°ÈöúÁ¢çÁâ©ÁöÑÂå∫Âüü‰∏≠ÂÆûÁé∞Á®≥ÂÅ•ÁöÑÁºñÈòüÈ£ûË°åÁöÑÁ†îÁ©∂ËøòÂæàÂ∞ë„ÄÇÂÆûÈôÖÂ∫îÁî®‰∏≠Â≠òÂú®‰∏â‰∏™Ê†∏ÂøÉÊåëÊàòÔºö ÔºàaÔºâÁºñÈòüÁª¥ÊåÅ‰∏éÈöúÁ¢çÁâ©ÈÅøÂÖç‰πãÈó¥ÁöÑÂõ∫ÊúâÂÜ≤Á™ÅÊòØ‰∏çÂèØÈÅøÂÖç‰∏îÈöæ‰ª•ÁºìËß£ÁöÑ„ÄÇ ÔºàbÔºâÈ¢ÑÂÆö‰πâÁºñÈòüÂú®ÂèóÈôêÁéØÂ¢É‰∏≠Áº∫‰πèÂºπÊÄßÈÄÇÂ∫îËÉΩÂäõ„ÄÇ ÔºàcÔºâÁî±‰∫éÊú™Áü•ÈöúÁ¢çÁâ©ÊàñÊúüÊúõÁºñÈòüÂΩ¢Áä∂ÁöÑÁ™ÅÁÑ∂ÂèòÂåñËÄåÂØºËá¥ÁöÑÊó†Â∫èÁä∂ÊÄÅÔºåÁæ§‰ΩìÁ≥ªÁªüÈöæ‰ª•ËøÖÈÄüÊÅ¢Â§ç„ÄÇ Âü∫‰∫é‰∏äËø∞ÊåëÊàòÔºåÊàë‰ª¨ÂæóÂá∫ÁªìËÆ∫ÔºåÁêÜÊÉ≥ÁöÑÁºñÈòüÈ£ûË°åÁ≥ªÁªüÂ∫îÂÖ∑Â§áÂú®ÈÅøÂÖçÈöúÁ¢çÁâ©ÁöÑÂêåÊó∂Áª¥ÊåÅÁºñÈòüÁöÑËÉΩÂäõÔºåÊ†πÊçÆÂèóÈôêÁéØÂ¢ÉË∞ÉÊï¥Áæ§‰ΩìÁºñÈòüÂàÜÂ∏ÉÔºåÂπ∂Âú®Á¥ßÊÄ•ÊÉÖÂÜµ‰∏ãÂø´ÈÄüÈáçÁªÑÁºñÈòüÁöÑËÉΩÂäõ„ÄÇ Ëøô‰∫õÁâπÂæÅË¢´Ê¶ÇÊã¨‰∏∫ PAPER ÂáÜÂàôÔºö Portability ÁßªÂä®ÊÄß ÔºöÁ©∫‰∏≠Êú∫Âô®‰∫∫ÈõÜÁæ§Â∫îÁî±ËΩªÂûãÂπ≥Âè∞„ÄÅÂèØÊâ©Â±ïÁ≥ªÁªüÂíåÂàÜÂ∏ÉÂºèÊû∂ÊûÑÁªÑÊàê„ÄÇ ÂèØÊâ©Â±ïÁ≥ªÁªüÊÑèÂë≥ÁùÄ‰∏ªË¶ÅÁªÑ‰ª∂ÔºàÂ¶Ç‰º∞ËÆ°„ÄÅÂÜ≥Á≠ñ„ÄÅËßÑÂàíÂíåÊéßÂà∂Ê®°ÂùóÔºâÂú®ÊØè‰∏™Êú∫Âô®‰∫∫‰∏äÈÉΩÊòØÁõ∏ÂêåÁöÑ„ÄÇ ÂàÜÂ∏ÉÂºèÊû∂ÊûÑËÉΩÂ§üÂ§©ÁÑ∂Âú∞ÊäµÂæ°‰∏™‰ΩìÁ°¨‰ª∂ÊïÖÈöú„ÄÇ ËøôÊòØÂÆûÁé∞Â§ßËßÑÊ®°ÁºñÈòüÈ£ûË°åÁöÑÂü∫Á°Ä„ÄÇ Adaptability ÈÄÇÂ∫îÊÄßÔºöÂΩìÈù¢‰∏¥ÈöúÁ¢çÊó∂ÔºåÊú∫Âô®‰∫∫Â∫îÂΩìÂú®Â±ÄÈÉ®ÈÄÇÂ∫îÂÖ∂ËΩ®ËøπÔºå‰ª•ÈÅøÂÖçÁ¢∞ÊíûÔºåÂπ∂Â∞ΩÈáèÂáèÂ∞ëÂØπÊï¥‰ΩìÁºñÈòüÊÄßËÉΩÁöÑÂΩ±Âìç„ÄÇËøôÁßçËÉΩÂäõÂèØ‰ª•ÁºìËß£ÁºñÈòüÁª¥ÊåÅÂíåÈöúÁ¢çÁâ©ÈÅøËÆ©‰πãÈó¥ÁöÑÂÜ≤Á™Å„ÄÇ Predictability ÂèØÈ¢ÑÊµãÊÄßÔºöÂèçÂ∫îÂºèÁöÑÂ±ÄÈÉ®ÂèçÈ¶àÊñπÊ≥ïÁöÑËßÜÈáéÁü≠ÊµÖÔºåÊó†Ê≥ïÊèêÂâçËÄÉËôëÂà∞Á∫¶ÊùüÊù°‰ª∂„ÄÇÊú∫Âô®‰∫∫Â∫îËØ•Âú®È¢ÑÊµãÁöÑÊó∂Èó¥ËåÉÂõ¥ÂÜÖ‰ºòÂåñËøêÂä®Ôºå‰ΩøÂæóÂΩ¢ÊàêËÉΩÂ§üÂØπÂÖ∂Âë®Âõ¥Êú™Êù•ÁéØÂ¢ÉÁöÑÂèòÂåñÂÅöÂá∫Âπ≥Á®≥ÂìçÂ∫îÔºåËøôÂØπ‰∫éÂØÜÈõÜÂå∫ÂüüÊòØÂøÖË¶ÅÁöÑ„ÄÇ Elasticity ÂºπÊÄßÔºöÂú®ÂèóÈôêÁéØÂ¢É‰∏≠ÔºåÂ¶ÇÁã≠Á™ÑÁöÑËµ∞ÂªäÊàñÊ¥ûÁ©¥‰∏≠ÔºåÂèØËÉΩ‰∏çÂ≠òÂú®ÈÄÇÁî®‰∫éÂõ∫ÂÆöÁºñÈòüÂΩ¢Áä∂ÁöÑÂèØË°å‰∏îÂÆâÂÖ®ÁöÑË∑ØÂæÑ„ÄÇÂõ†Ê≠§ÔºåÁæ§‰ΩìÊú∫Âô®‰∫∫ÈúÄË¶ÅÈÄöËøáË∞ÉÊï¥ÁºñÈòüÂàÜÂ∏ÉÔºàÂ¶ÇÂΩ¢Áä∂ÁöÑËßÑÊ®°Êàñ‰ªªÂä°ÂàÜÈÖçÔºâÊù•ÂÖ∑Â§áÂºπÊÄßÂíåÁÅµÊ¥ªÁöÑÂèòÂΩ¢ËÉΩÂäõÔºåÂêåÊó∂‰øùÊåÅÁºñÈòüÁöÑÂÆåÂÖ®ÊìçÁ∫µÊÄß„ÄÇ Resilience ÂèØÊÅ¢Â§çÊÄßÔºöÁºñÈòüÈ£ûË°åÂèØËÉΩ‰ºöÈÅáÂà∞Áî±Êú™Áü•ÈöúÁ¢çÁâ©ÊàñËÄÖÊúüÊúõÁºñÈòüÂΩ¢Áä∂ÁöÑÁ™ÅÁÑ∂ÊîπÂèòÂºïÂèëÁöÑ‰∏çÂà©ÊÉÖÂÜµ„ÄÇÂØºËà™Á≥ªÁªüÂ∫îÂÖ∑Â§áÂºπÊÄßÈáçÊñ∞ÁªÑÁªáÂíåÂºïÂØºÊï¥‰∏™ÁºñÈòüÁöÑËÉΩÂäõÔºå‰ª•‰ΩøÈ£ûË°åËÉΩÂ§üÂèäÊó∂‰ªéÊó†Â∫èÁä∂ÊÄÅ‰∏≠ÊÅ¢Â§ç„ÄÇ ‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÁºñÈòüÈ£ûË°åÁ≥ªÁªüÂ∫îÊª°Ë∂≥‰∏äËø∞ PAPER Ê†áÂáÜÔºåÂπ∂Á°Æ‰øùÊØè‰∏™Ê†áÂáÜÁöÑÊù°‰ª∂‰∏éÂÖ∂‰ªñÊù°‰ª∂Áõ∏ÂÆπ„ÄÇ Êàë‰ª¨‰πãÂâçÁöÑÂ∑•‰Ωú\\cite{quan2022formation}Âè™ÈÉ®ÂàÜÊª°Ë∂≥‰∫Ü\\textit{PAPER}Ê†áÂáÜÁöÑÂâç‰∏â‰∏™Êù°Ê¨æ„ÄÇ Êàë‰ª¨Â∞ÜÁºñÈòüÈ£ûË°åÈóÆÈ¢ò‰Ωú‰∏∫‰∏ÄÁßç ËÄ¶ÂêàÁöÑÂçèÂêåËΩ®Ëøπ‰ºòÂåñÈóÆÈ¢òÊù•Ëß£ÂÜ≥Ôºå‰∏ªË¶ÅÈÄÇÁî®‰∫éÂ∞èËßÑÊ®°ÁºñÈòüÂú∫ÊôØ„ÄÇ ÁÑ∂ËÄåÔºå‰ΩøÁî®Âü∫‰∫éÂõæÁöÑÁõ∏‰ººÂ∫¶Â∫¶ÈáèËß£ÂÜ≥ÁºñÈòüÁöÑÂçè‰ΩúÁ∫¶ÊùüËÆ°ÁÆóÈáèËæÉÂ§ßÔºåÂØºËá¥ÊØèÊ¨°‰ºòÂåñËø≠‰ª£ËøáÁ®ã‰∏≠ÁöÑÂºÄÈîÄÂ¢ûÂä†„ÄÇ Ê≠§Â§ñÔºåÂ∞ÜÂä®ÊÄÅÁöÑÊú∫Âô®‰∫∫Èó¥ÂÖ≥Á≥ªÈõÜÊàêÂà∞ËÄ¶ÂêàËΩ®Ëøπ‰ºòÂåñÈóÆÈ¢ò‰∏≠‰ºöÊòæËëóÂΩ±Âìç‰ºòÂåñËøáÁ®ãÁöÑÊïàÁéáÔºå‰ΩøÂÖ∂Âú®Êõ¥Â§ßËßÑÊ®°ÁöÑÁºñÈòüÊàñÊõ¥Â§çÊùÇÁöÑÂú∫ÊôØ‰∏≠‰∏çÂ§™ÈÄÇÁî®„ÄÇ Âú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÁºñÈòüÈ£ûË°åÁ≥ªÁªüÔºåÊª°Ë∂≥ÊâÄÊúâ\\textit{PAPER}Ê†áÂáÜ„ÄÇ ‰∏∫Ëß£ÂÜ≥[4]‰∏≠ÁöÑÊåëÊàòÔºåÊàë‰ª¨ÂºïÂÖ•‰∫Ü‰∏ÄÁßç Ëß£ËÄ¶ÁöÑÁºñÈòü‰ºòÂåñÊñπÊ≥ï Ôºå‰ª•ÊòæËëóÊèêÈ´òËÆ°ÁÆóÊïàÁéá„ÄÇ ËØ•ÊñπÊ≥ïÂåÖÊã¨‰∏§‰∏™ÁªÑÊàêÈÉ®ÂàÜ„ÄÇ È¶ñÂÖàÔºåÈ¢ÑÂÖàËÆ°ÁÆó ÊúÄ‰ºòÁºñÈòü‰ΩçÁΩÆÂ∫èÂàó ÔºåÈÅøÂÖç‰∫Ü‰ºòÂåñËøáÁ®ã‰∏≠ÈáçÂ§çÁöÑÂ∫¶ÈáèËÆ°ÁÆó„ÄÇ ÂÖ∂Ê¨°ÔºåÈááÁî®Âõ∫ÂÆöÊó∂Èó¥Èó¥ÈöîÈááÊ†∑ÊñπÊ≥ïÂ∞ÜÂä®ÊÄÅÁöÑÊú∫Âô®‰∫∫Èó¥ÂÖ≥Á≥ªËΩ¨Âåñ‰∏∫ ÈùôÊÄÅÁ∫¶ÊùüÔºåÊûÅÂ§ßÂú∞Èôç‰Ωé‰∫Ü‰ºòÂåñÈóÆÈ¢òÁöÑÂ§çÊùÇÊÄß„ÄÇ Ëøô‰∫õÊîπËøõ‰ΩøÂæóÊàë‰ª¨ÁöÑÊñπÊ≥ïÈÄÇÁî®‰∫éÂ§ßËßÑÊ®°ÁöÑÁæ§‰Ωì„ÄÇ Ê≠§Â§ñÔºå‰πãÂâçÁöÑÊñπÊ≥ïÁº∫‰πèÈáçÊñ∞ÁªÑÁªáÁæ§‰ΩìÁºñÈòüÁöÑËÉΩÂäõÔºåÂú®ÊÅ∂Âä£Êù°‰ª∂‰∏ãÔºåÁâπÂà´ÊòØÂΩìÂàùÂßã‰ΩçÁΩÆÊàñ‰ªªÂä°ÂàÜÈÖç‰∏çÂΩìÊó∂ÔºåÂèØËÉΩÂØºËá¥ÁºñÈòüÈ£ûË°åÊó†Â∫è„ÄÇ ‰∏∫Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßç Áæ§‰ΩìÈáçÊñ∞ÁªÑÁªáÊñπÊ≥ïÔºåÂèØ‰ª•ÈÄöËøá‰ºòÂåñÁºñÈòüÂèÇÊï∞Âíå‰ªªÂä°ÂàÜÈÖçÊù•ÂºπÊÄßÂú∞Ë∞ÉÊï¥ÁºñÈòüÂàÜÂ∏ÉÔºå‰ª•ÂìçÂ∫îÂ§ñÈÉ®Á∫¶Êùü„ÄÇ ÈöèÂêéÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßç Áæ§‰Ωì‰∏ÄËá¥ÊÄßÁ≠ñÁï•ÔºåÁß∞‰∏∫ ÂÖ®Â±ÄÈáçÊò†Â∞Ñ-Â±ÄÈÉ®ÈáçÊñ∞ËßÑÂàíÔºåËØ•Á≠ñÁï•ÂèØ‰ΩøÁæ§‰ΩìÈáçÊñ∞ÁªÑÁªáÁöÑÁªìÊûúÂæóÂà∞Âø´ÈÄüÂÆûÊñΩÔºå‰ªéËÄåÂú®Áæ§‰ΩìÊô∫ËÉΩ‰Ωì‰πãÈó¥ÂÆûÁé∞ÂÖ±ËØÜ„ÄÇ Ê≠§Â§ñÔºåËøòËÆæËÆ°‰∫Ü‰∏ÄÁßç‰ª•ÁºñÈòü‰∏∫Êï¥‰ΩìÁöÑ ÂÖ®Â±ÄË∑ØÂæÑËßÑÂàíÊñπÊ≥ïÔºåÁî®‰∫éÂºïÂØºÁæ§‰ΩìËµ∞Âá∫ÈöúÁ¢çÁâ©ÁöÑÊ≠ªÈîÅ„ÄÇ ÊúÄÂêéÔºåÊàë‰ª¨Â∞Ü‰º∞ËÆ°„ÄÅÂª∫Âõæ„ÄÅÂÜ≥Á≠ñ„ÄÅËßÑÂàíÂíåÊéßÂà∂Ê®°ÂùóÊï¥ÂêàÂà∞‰∫ÜÂ∏¶ÊúâÊú∫ËΩΩËÆ°ÁÆóÊú∫Âíå‰º†ÊÑüÂô®ÁöÑÊâãÊéåÂ§ßÂ∞èÁºñÈòüÂπ≥Âè∞‰∏≠ Micro Flying Robots-21ÔºåÂÆûÁé∞‰∫ÜÂú®ÂØÜÈõÜÁéØÂ¢É‰∏≠ÁöÑÂ§ßËßÑÊ®°ÁºñÈòüÈ£ûË°å„ÄÇ ÂÖ∑‰ΩìË¥°ÁåÆÂ¶Ç‰∏ã„ÄÇ Êàë‰ª¨ÂºïÂÖ•‰∫Ü‰∏ÄÁßç ÊúÄ‰ºò ÂΩ¢Êàê‰ΩçÁΩÆÂ∫èÂàó Ôºàformation position sequenceÔºâÔºåËØ•Â∫èÂàóÊòØ‰ΩøÁî®ÂèØÂæÆÁöÑÂü∫‰∫éÂõæÁöÑÂ∫¶ÈáèÊñπÊ≥ïÈ¢ÑÂÖàËÆ°ÁÆóÂæóÂá∫ÁöÑ~\\cite{quan2022formation}„ÄÇËøô‰∏™Â∫èÂàó‰ª£Ë°®‰∫ÜÂÖ∑ÊúâÊúÄ‰ΩéÁõ∏‰ººÂ∫¶ËØØÂ∑ÆÁöÑÊúÄ‰ºò‰ΩçÁΩÆÔºåÂáèÂ∞ë‰∫Ü‰ºòÂåñËøáÁ®ã‰∏≠ÈáçÂ§çËÆ°ÁÆóÁöÑÈúÄÊ±Ç„ÄÇ Êàë‰ª¨ËÆæËÆ°‰∫Ü‰∏Ä‰∏™ Ëß£ËÄ¶ÁöÑÁ©∫Èó¥-Êó∂Èó¥ËΩ®Ëøπ‰ºòÂåñÊ°ÜÊû∂ÔºåÊúâÊïàÂ§ÑÁêÜÂä®ÊÄÅÁöÑÊú∫Âô®‰∫∫‰πãÈó¥ÁöÑÂÖ≥Á≥ª„ÄÅÈÅøÈöúÂíåÂä®ÊÄÅÂèØË°åÊÄß„ÄÇ ‰∏éÊàë‰ª¨‰πãÂâçÁöÑÁ†îÁ©∂ÊàêÊûú~\\cite{quan2022formation}Áõ∏ÊØîÔºåÊàë‰ª¨Âú®Â§ßËßÑÊ®°Áæ§‰Ωì‰∏≠ÂÆûÁé∞‰∫ÜÊõ¥È´òÁöÑËÆ°ÁÆóÊïàÁéá„ÄÇ Êàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÁæ§ÈõÜÈáçÊñ∞ÁªÑÁªáÊñπÊ≥ïÔºåÂÆûÁé∞Áæ§ÈõÜÂàÜÂ∏ÉÁöÑÂºπÊÄßÂèòÂΩ¢ÔºåÂêåÊó∂Ëß£ÂÜ≥ÊúÄ‰Ω≥ÂΩ¢ÊÄÅÂØπÈΩêÂíå‰ªªÂä°ÂàÜÈÖçÈóÆÈ¢òÔºàÁÆÄÁß∞ ALASÔºâ„ÄÇËØ•ÊñπÊ≥ïÊèêÈ´ò‰∫ÜÁæ§ÈõÜÂΩ¢ÊàêÂØπÂèóÈôêÁéØÂ¢ÉÁöÑÂºπÊÄß„ÄÇÂÆÉÂáèËΩª‰∫ÜÂØπÈÄÇÂΩìÁöÑÂΩ¢ÊÄÅÂØπÈΩêÂíå‰ªªÂä°ÂàÜÈÖçÁöÑ‰æùËµñ„ÄÇ "},"Learn/LearnDrones/TaskAssignment/":{"url":"Learn/LearnDrones/TaskAssignment/","title":"index","keywords":"","body":"Task Assignment survey 2004.09Ôºö A Formal Analysis and Taxonomy of Task Allocation in Multi-Robot Systems Â§öÊú∫Âô®‰∫∫Á≥ªÁªü‰∏≠‰ªªÂä°ÂàÜÈÖçÁöÑÂΩ¢ÂºèÂàÜÊûêÂíåÂàÜÁ±ª 2018.10: Should We Compete or Should We Cooperate? Applying Game Theory to Task Allocation in Drone Swarms Êú∫Âô®‰∫∫Â∫îËØ•Âêà‰Ωú‰ª•ÂÆåÊàêÂ∞ΩÂèØËÉΩÂ§öÁöÑ‰ªªÂä° IROS 2019: A Mission Planning and Task Allocation Framework For Multi-UAV Swarm Coordination 2020.08: Energy Efficient Task Cooperation for Multi-UAV Networks: A Coalition Formation Game Approach Â§öÊó†‰∫∫Êú∫ÁΩëÁªúÁöÑËäÇËÉΩ‰ªªÂä°Âêà‰ΩúÔºöËÅîÁõüÂΩ¢ÊàêÂçöÂºàÊñπÊ≥ï IEEE Access College of Communications Engineering, Army of PLA, Nanjing, NUDT 2022.06: Task assignment algorithms for unmanned aerial vehicle networks: A comprehensive survey Êó†‰∫∫Êú∫ÁΩëÁªúÁöÑ‰ªªÂä°ÂàÜÈÖçÁÆóÊ≥ï: ÂÖ®Èù¢ÁöÑÁªºËø∞ Vehicular Communications cited 78 2022.10: A Survey of UAV Swarm Task Allocation Based on the Perspective of Coalition Formation IJSIR Âü∫‰∫éËÅîÁõüÁªÑÂª∫ËßÜËßíÁöÑÊó†‰∫∫Êú∫ÈõÜÁæ§‰ªªÂä°ÂàÜÈÖçÁ†îÁ©∂ÁªºËø∞ Engineering University of PAP, China 2023.11: A Review of Task Allocation Methods for UAVs 2024: A Heuristic Task Allocation Method Based on Overlapping Coalition Formation Game for Heterogeneous UAVs 2024.06: Distributed dynamic task allocation for unmanned aerial vehicle swarm systems: A networked evolutionary game-theoretic approach 2024.12: Application of Task Allocation Algorithms in Multi-UAV Intelligent Transportation Systems: A Critical Review ‰ªªÂä°ÂàÜÈÖçÁÆóÊ≥ïÂú®Â§öÊó†‰∫∫Êú∫Êô∫ËÉΩ‰∫§ÈÄöÁ≥ªÁªü‰∏≠ÁöÑÂ∫îÁî®: ÊâπÂà§ÊÄßÂõûÈ°æ ÈÉΩÁÅµÁêÜÂ∑•Â≠¶Èô¢Êú∫Ê¢∞‰∏éËà™Á©∫Ëà™Â§©Â∑•Á®ãÁ≥ª BDCC IF(3.7) 2025.01.19: Multi-UAV Task Assignment in Dynamic Environments: Current Trends and Future Directions Ê≤ôÁâπÂõΩÁéãÂ§ßÂ≠¶ doi papers 2024.05: Task Allocation in Heterogeneous Multi-Robot Systems Based on Preference-Driven Hedonic Game Âü∫‰∫éÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºàÁöÑÂºÇÊûÑÂ§öÊú∫Âô®‰∫∫Á≥ªÁªü‰ªªÂä°ÂàÜÈÖç ICRA; Li Wang 2024: Coalition Formation Game Approach for Task Allocation in Heterogeneous Multi-Robot Systems under Resource Constraints ËµÑÊ∫êÁ∫¶Êùü‰∏ãÂºÇÊûÑÂ§öÊú∫Âô®‰∫∫Á≥ªÁªü‰ªªÂä°ÂàÜÈÖçÁöÑËÅîÁõüÂΩ¢ÊàêÂçöÂºàÊñπÊ≥ï IROS; Li Wang 2024: Distributed task allocation algorithm for heterogeneous unmanned aerial vehicle swarm based on coalition formation game Âü∫‰∫éËÅîÁõüÂΩ¢ÊàêÂçöÂºàÁöÑÂºÇÊûÑÊó†‰∫∫Êú∫ÈõÜÁæ§ÂàÜÂ∏ÉÂºè‰ªªÂä°ÂàÜÈÖçÁÆóÊ≥ï projects and codes github: mission_planning RACER, a RApid Collaborative ExploRation approach using a fleet of decentralized UAVs. Policies Êó†‰∫∫Êú∫ÈõÜÁæ§‰ªªÂä°ÂàÜÈÖçÊäÄÊúØÁ†îÁ©∂ÁªºËø∞ Á≥ªÁªüÂ∑•Á®ã‰∏éÁîµÂ≠êÊäÄÊúØ, 2024, 46(3): 922-934 doi: 10.12305/j.issn.1001-506X.2024.03.18 US Small unmanned aircraft systems (SUAS) flight plan OTTO R P. Small unmanned aircraft systems (SUAS) flight plan: 2016-2036[R]. Washington, DC: United States Air Force, 2016. 2016 Âπ¥ 5 Êúà, ÁæéÂõΩÁ©∫ÂÜõÂèëÂ∏ÉÁöÑÂ∞èÂûãÊó†‰∫∫Êú∫Á≥ªÁªüÂèëÂ±ïË∑ØÁ∫øÂõæ„Ää2016-2036 Âπ¥Â∞èÂûãÊó†‰∫∫Êú∫Á≥ªÁªüÈ£ûË°åËßÑÂàí„Äã ‰∏∫Á°Æ‰øùÊàò‰∫âÁöÑÂà∂ËÉúËÉΩÂäõ‰∏éÂº∫ÂÜõ‰∫ãÂØπÊäóÁéØÂ¢É‰∏ãÁöÑÈùûÂØπÁß∞‰ºòÂäø, Â∫îÈáçÁÇπÁ†îÁ©∂Êõ¥ÂÖ∑ÊàêÊú¨ÊïàÁõäÂíå‰ΩúÊàòÂ®ÅÂäõÁöÑÈõÜÁæ§ÂºèÊó†‰∫∫Êú∫‰ΩúÊàòÊ†∑Âºè„ÄÇ ËØ¶ÁªÜÈòêËø∞‰∫Ü‚ÄúÊó†‰∫∫Êú∫ËúÇÁæ§‚ÄùÁöÑÊ¶ÇÂøµ, Âπ∂ËÆ°ÂàíÂú® 2036 Âπ¥Âª∫ÊàêÊ®™Ë∑®Ëà™Á©∫„ÄÅÂ§™Á©∫„ÄÅÁΩëÁ©∫‰∏âÂ§ß‰ΩúÊàòÈ¢ÜÂüüÁöÑÊó†‰∫∫Êú∫ÈõÜÁæ§‰ΩúÊàòÁ≥ªÁªü„ÄÇ Unmanned systems integrated roadmap 2017-2042 FACHEY K M, MILLER M J. Unmanned systems integrated roadmap 2017-2042[R]. Arlington Country: Office of the Secretary of Defense, 2018. 2018 Âπ¥ 8 Êúà, ÁæéÂõΩÂõΩÈò≤ÈÉ®ÂèëÂ∏ÉÁöÑ„ÄäÊó†‰∫∫Á≥ªÁªüÁªºÂêàË∑ØÁ∫øÂõæ 2017-2042„Äã ÊåáÂá∫‰∫Ü 19 È°πËøë„ÄÅËøúÊúüÈúÄË¶ÅÈáçÁÇπÂèëÂ±ïÁöÑÈù¢ÂêëÂÜõ‰∫ã‰ΩúÊàòÈúÄÊ±Ç„ÄÅËÉΩÂ§ßÂπÖÊèêÂçáÊó†‰∫∫Êú∫ÈõÜÁæ§‰ΩúÊàòÊïàËÉΩÁöÑÂÖ≥ÈîÆÊäÄÊúØ, ÂåÖÊã¨ÂºÄÊîæÂºè‰ΩìÁ≥ªÊû∂ÊûÑ„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅ‰∫∫Â∑•Êô∫ËÉΩÁ≠â„ÄÇ ÁæéÂõΩÊµ∑ÂÜõÁ†îÁ©∂ÁîüÈô¢ GIAMMARCO K, HUNT S, WHITCOMB C. An instructional design reference mission for search and rescue operations[R]. Monterey, California: Naval Postgraduate School, 2015. GILES C K. A framework for integrating the development of swarm unmanned aerial system doctrine and design[R]. Monterey, California: Department of Systems Engineering Naval Postgraduate School, 2017. ÊèêÂá∫‰∫Ü‰∏ÄÁßçÈù¢ÂêëÊó†‰∫∫ÈõÜÁæ§‰ΩúÊàò‰ΩìÁ≥ªËÆæËÆ°ÁöÑ‰∏Ä‰ΩìÂåñÊ°ÜÊû∂, ËØ•Ê°ÜÊû∂ÈíàÂØπÊú™Êù•Êó†‰∫∫Êú∫ÈõÜÁæ§‰ΩúÊàòÁöÑÂéª‰∏≠ÂøÉÂåñ„ÄÅËá™ÁªÑÁΩë„ÄÅÊâÅÂπ≥ÂåñÁªìÊûÑÁ≠âÁâπÁÇπ, ÊûÑÂª∫‰∫ÜÊó†‰∫∫Êú∫ÈõÜÁæ§‚Äú‰ΩøÂëΩ-ÊàòÊúØ-Ë°åÂä®-ÁÆóÊ≥ï-Êï∞ÊçÆ‚Äù‰∫îÂ±Ç‰ªªÂä°Ê°ÜÊû∂, Âπ∂‰ª•Êó†‰∫∫Êú∫ÈõÜÁæ§ÊâßË°åÊÉÖÊä•„ÄÅÁõëËßÜ„ÄÅ‰æ¶ÂØüÂíåÁ©∫Êàò‰ªªÂä°‰∏∫‰æãÂàÜÊûê‰∫ÜÊó†‰∫∫Êú∫ÈõÜÁæ§Âú®ÊØèÂ±Ç‰∏≠ÁöÑÂÖ∑‰Ωì‰ªªÂä°, ÁªôÂá∫‰∫ÜÂÖ∑‰ΩìÁöÑÂÜõ‰∫ãÊ¶ÇÂøµÊ®°Âûã„ÄÇ CN 2017-07„ÄäÊñ∞‰∏Ä‰ª£‰∫∫Â∑•Êô∫ËÉΩÂèëÂ±ïËßÑÂàí„Äã Â§öÊ¨°ÊèêÂèä‚ÄúÁæ§‰ΩìÊÑüÁü•„ÄÅÂçèÂêå‰∏éÊºîÂåñ‚Äù‚ÄúÁæ§‰ΩìÈõÜÊàêÊô∫ËÉΩ‚Äù‚ÄúËá™‰∏ªÊó†‰∫∫Á≥ªÁªü‚ÄùÁ≠âÊ¶ÇÂøµ, ÂêåÊó∂ÊòéÁ°ÆÊåáÂá∫Â∫îÂ∞Ü‰∫∫Â∑•Êô∫ËÉΩ‰∏éÊó†‰∫∫Êú∫ÈõÜÁæ§Á¥ßÂØÜËûçÂêà, ÂÄüÂä©‰∫∫Â∑•Êô∫ËÉΩÈáçÁÇπÁ™ÅÁ†¥Êó†‰∫∫Á≥ªÁªüÁõ∏ÂÖ≥Ê†∏ÂøÉÊäÄÊúØ, ÂÆûÁé∞Êó†‰∫∫Êú∫ÈõÜÁæ§Áõ∏ÂÖ≥ÊäÄÊúØÁöÑË∑®Ë∂äÂºèÂèëÂ±ï„ÄÇ PLA Ëß£ÊîæÂÜõÊä• 2019 Âπ¥ 10 ÊúàÂèëË°®„ÄäÂä†ÈÄüÊé®ËøõÂÜõ‰∫ãÊô∫ËÉΩÂåñ„ÄãÊñáÁ´†, Â∞ÜÊô∫ËÉΩÈõÜÁæ§‰ΩúÊàòÂçèÂêåÊäÄÊúØÂàó‰∏∫Êô∫ËÉΩÂåñÊàò‰∫âÁöÑÂü∫Áü≥; "},"Learn/LearnDrones/TaskAssignment/2019.11-A_Mission_Planning_and_Task_Allocation_Framework_For_Multi-UAV_Swarm_Coordination.html":{"url":"Learn/LearnDrones/TaskAssignment/2019.11-A_Mission_Planning_and_Task_Allocation_Framework_For_Multi-UAV_Swarm_Coordination.html","title":"2019 A Mission Planning and Task Allocation Framework For Multi-UAV Swarm Coordination","keywords":"","body":"A Mission Planning and Task Allocation Framework For Multi-UAV Swarm Coordination ‰∏ÄÁßçÁî®‰∫éÂ§öÊó†‰∫∫Êú∫ÈõÜÁæ§ÂçèË∞ÉÁöÑ‰ªªÂä°ËßÑÂàíÂíå‰ªªÂä°ÂàÜÈÖçÊ°ÜÊû∂ Abstract: This paper presents a multi-agent mission planning and task allocation framework designed to coordinate autonomous aerial vehicles engaged in a competition scenario. The development was a part of an inter-university UAV Swarm competition that was supported by BAE Systems. The proposed centralised system was developed with the main objectives of robustness and scalability. The system consists of a general mission planning module which decomposes the overall mission into identified sub-stages to achieve the overall mission goal. In order to enable autonomous defence actions a dynamic task allocation approach is proposed. The dynamic task allocation is using received information of detected enemies and utilises the information for a further combinatorial optimisation problem. In this work, we discuss the structure of the framework and present results obtained in a high-fidelity simulation environment. Moreover, a comparative study of the performance of three different optimization algorithms for the given combinatorial problem, namely Kuhn-Munkres, Jonker-Volgenant and Gale-Shapley, implemented in the system is included. The results demonstrate that the best allocation result performances, in terms of minimal costs, are obtained with utilising, both Kuhn-Munkres or Jonker-Volgenant methods, while the Gale-Shapley algorithms have benefits in terms of time efficiency for cases in which minimal costs are not the highest priority. Êú¨ÊñáÊèêÂá∫‰∫Ü‰∏Ä‰∏™Â§öÊô∫ËÉΩ‰Ωì‰ªªÂä°ËßÑÂàíÂíå‰ªªÂä°ÂàÜÈÖçÊ°ÜÊû∂ÔºåÊó®Âú®ÂçèË∞ÉÂèÇ‰∏éÊØîËµõÂú∫ÊôØÁöÑËá™Âä®È©æÈ©∂È£ûË°åÂô®„ÄÇËØ•ÂºÄÂèëÈ°πÁõÆÊòØ BAE Systems ÊîØÊåÅÁöÑÂ§ßÂ≠¶Èó¥Êó†‰∫∫Êú∫ Swarm Á´ûËµõÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇÊãüËÆÆÁöÑÈõÜ‰∏≠ÂºèÁ≥ªÁªüÁöÑ‰∏ªË¶ÅÁõÆÊ†áÊòØÁ®≥ÂÅ•ÊÄßÂíåÂèØÊâ©Â±ïÊÄß„ÄÇËØ•Á≥ªÁªüÁî±‰∏Ä‰∏™ÈÄöÁî®‰ªªÂä°ËßÑÂàíÊ®°ÂùóÁªÑÊàêÔºåËØ•Ê®°ÂùóÂ∞ÜÊï¥‰∏™‰ªªÂä°ÂàÜËß£‰∏∫Á°ÆÂÆöÁöÑÂ≠êÈò∂ÊÆµÔºå‰ª•ÂÆûÁé∞ÊÄª‰Ωì‰ªªÂä°ÁõÆÊ†á„ÄÇ‰∏∫‰∫ÜÂÆûÁé∞Ëá™‰∏ªÈò≤Âæ°Ë°åÂä®ÔºåÊèêÂá∫‰∫Ü‰∏ÄÁßçÂä®ÊÄÅ‰ªªÂä°ÂàÜÈÖçÊñπÊ≥ï„ÄÇÂä®ÊÄÅ‰ªªÂä°ÂàÜÈÖç‰ΩøÁî®Êé•Êî∂Âà∞ÁöÑÊ£ÄÊµãÂà∞ÁöÑÊïå‰∫∫ÁöÑ‰ø°ÊÅØÔºåÂπ∂Â∞ÜËøô‰∫õ‰ø°ÊÅØÁî®‰∫éËøõ‰∏ÄÊ≠•ÁöÑÁªÑÂêà‰ºòÂåñÈóÆÈ¢ò„ÄÇÂú®ËøôÈ°πÂ∑•‰Ωú‰∏≠ÔºåÊàë‰ª¨ËÆ®ËÆ∫‰∫ÜÊ°ÜÊû∂ÁöÑÁªìÊûÑÔºåÂπ∂Â±ïÁ§∫‰∫ÜÂú®È´ò‰øùÁúü‰ªøÁúüÁéØÂ¢É‰∏≠Ëé∑ÂæóÁöÑÁªìÊûú„ÄÇÊ≠§Â§ñÔºåËøòÂåÖÊã¨ÂØπÁ≥ªÁªü‰∏≠ÂÆûÁé∞ÁöÑÁªôÂÆöÁªÑÂêàÈóÆÈ¢òÁöÑ‰∏âÁßç‰∏çÂêå‰ºòÂåñÁÆóÊ≥ïÁöÑÊÄßËÉΩÁöÑÊØîËæÉÁ†îÁ©∂ÔºåÂç≥ Kuhn-Munkres„ÄÅJonker-Volgenant Âíå Gale-Shapley„ÄÇÁªìÊûúË°®ÊòéÔºåÂ∞±ÊúÄÂ∞èÊàêÊú¨ËÄåË®ÄÔºå‰ΩøÁî® Kuhn-Munkres Êàñ Jonker-Volgenant ÊñπÊ≥ïÂèØ‰ª•Ëé∑ÂæóÊúÄ‰Ω≥ÂàÜÈÖçÁªìÊûúÊÄßËÉΩÔºåËÄå Gale-Shapley ÁÆóÊ≥ïÂú®ÊúÄÂ∞èÊàêÊú¨‰∏çÊòØÊúÄÈ´ò‰ºòÂÖàÁ∫ßÁöÑÊÉÖÂÜµ‰∏ãÂú®Êó∂Èó¥ÊïàÁéáÊñπÈù¢ÂÖ∑Êúâ‰ºòÂäø„ÄÇ Published in: 2019 Workshop on Research, Education and Development of Unmanned Aerial Systems (RED UAS) ÂèëÂ∏É‰∫éÔºö 2019 Âπ¥Êó†‰∫∫Êú∫Á≥ªÁªüÁ†îÁ©∂„ÄÅÊïôËÇ≤ÂíåÂºÄÂèëÁ†îËÆ®‰ºö ÔºàRED UASÔºâ "},"Learn/LearnDrones/Ceres-Solver.html":{"url":"Learn/LearnDrones/Ceres-Solver.html","title":"Ceres-Solver","keywords":"","body":"Ceres-Solver doc Install (on debian12) # CMake sudo apt-get install cmake # google-glog + gflags # libgoogle-glog-dev: library that implements application-level logging # libgflags-dev: commandline flags module for C++ sudo apt-get install libgoogle-glog-dev libgflags-dev # Use ATLAS for BLAS & LAPACK # libatlas-base-dev: Automatically Tuned Linear Algebra Software, generic static sudo apt-get install libatlas-base-dev # Eigen3 # libeigen3-dev: lightweight C++ template library for linear algebra sudo apt-get install libeigen3-dev # SuiteSparse (optional) # libsuitesparse-dev: libraries for sparse matrices computations (development files) sudo apt-get install libsuitesparse-dev # to slow, skip it # FindTBB.cmake file(STRINGS \"${TBB_INCLUDE_DIR}/tbb/version.h\" # tbb_stddef.h -> version.h # https://github.com/ceres-solver/ceres-solver/issues/1036 TBB_VERSION_CONTENTS REGEX \"VERSION\") tar zxf ceres-solver-2.2.0.tar.gz mkdir ceres-bin cd ceres-bin cmake ../ceres-solver-2.2.0 make -j3 make test # Optionally install Ceres, it can also be exported using CMake which # allows Ceres to be used without requiring installation, see the documentation # for the EXPORT_BUILD_DIR option for more information. make install "},"Learn/LearnDrones/Eigen.html":{"url":"Learn/LearnDrones/Eigen.html","title":"Eigen","keywords":"","body":"Eigen eigen gitlab-eigen Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms. Eigen ÊòØ‰∏Ä‰∏™Áî®‰∫éÁ∫øÊÄß‰ª£Êï∞ÁöÑ C++ Ê®°ÊùøÂ∫ìÔºöÁü©Èòµ„ÄÅÂêëÈáè„ÄÅÊï∞ÂÄºÊ±ÇËß£Âô®ÂíåÁõ∏ÂÖ≥ÁÆóÊ≥ï„ÄÇ "},"Learn/GPU2CPU.html":{"url":"Learn/GPU2CPU.html","title":"GPU2CPU","keywords":"","body":"GPU to CPU MocCUDA MocCUDA High-Performance GPU-to-CPU Transpilation and Optimization via High-Level Parallel Constructs ÈÄöËøáÈ´òÁ∫ßÂπ∂Ë°åÁªìÊûÑÂÆûÁé∞È´òÊÄßËÉΩ GPU Âà∞ CPU ÁöÑËΩ¨ËØëÂíå‰ºòÂåñ William S. Moses, Ivan R. Ivanov, Jens Domke, Toshio Endo, Johannes Doerfert, Oleksandr Zinenko PPoPP '23: Proceedings of the 28th ACM SIGPLAN Annual Symposium on Principles and Practice of Parallel Programming PPoPP '23ÔºöÁ¨¨ 28 Â±ä ACM SIGPLAN Âπ∂Ë°åÁºñÁ®ãÂéüÁêÜ‰∏éÂÆûË∑µÂπ¥Â∫¶Á†îËÆ®‰ºöËÆ∫ÊñáÈõÜ While parallelism remains the main source of performance, architectural implementations and programming models change with each new hardware generation, often leading to costly application re-engineering. Most tools for performance portability require manual and costly application porting to yet another programming model. ËôΩÁÑ∂Âπ∂Ë°åÊÄß‰ªçÁÑ∂ÊòØÊÄßËÉΩÁöÑ‰∏ªË¶ÅÊù•Ê∫êÔºå‰ΩÜÊû∂ÊûÑÂÆûÁé∞ÂíåÁºñÁ®ãÊ®°Âûã‰ºöÈöèÁùÄÊØè‰∏Ä‰ª£Êñ∞Á°¨‰ª∂ÁöÑÂèòÂåñËÄåÂèòÂåñÔºåËøôÈÄöÂ∏∏‰ºöÂØºËá¥ÊòÇË¥µÁöÑÂ∫îÁî®Á®ãÂ∫èÈáçÊñ∞ËÆæËÆ°„ÄÇÂ§ßÂ§öÊï∞ÊÄßËÉΩÂèØÁßªÊ§çÊÄßÂ∑•ÂÖ∑ÈÉΩÈúÄË¶ÅÊâãÂä®‰∏îÊòÇË¥µÁöÑÂ∫îÁî®Á®ãÂ∫èÁßªÊ§çÂà∞Âè¶‰∏Ä‰∏™ÁºñÁ®ãÊ®°Âûã„ÄÇ We propose an alternative approach that automatically translates programs written in one programming model (CUDA), into another (CPU threads) based on Polygeist/MLIR. Our approach includes a representation of parallel constructs that allows conventional compiler transformations to apply transparently and without modification and enables parallelism-specific optimizations. We evaluate our framework by transpiling and optimizing the CUDA Rodinia benchmark suite for a multi-core CPU and achieve a 76% geomean speedup over handwritten OpenMP code. Further, we show how CUDA kernels from PyTorch can efficiently run and scale on the CPU-only Supercomputer Fugaku without user intervention. Our PyTorch compatibility layer making use of transpiled CUDA PyTorch kernels outperforms the PyTorch CPU native backend by 2.7√ó . Êàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÊõø‰ª£ÊñπÊ≥ïÔºåÂ∞ÜÁî®‰∏ÄÁßçÁºñÁ®ãÊ®°Âûã ÔºàCUDAÔºâ ÁºñÂÜôÁöÑÁ®ãÂ∫èËá™Âä®ËΩ¨Êç¢‰∏∫Âü∫‰∫é Polygeist/MLIR ÁöÑÂè¶‰∏Ä‰∏™ÁºñÁ®ãÊ®°ÂûãÔºà CPU Á∫øÁ®ãÔºâ„ÄÇÊàë‰ª¨ÁöÑÊñπÊ≥ïÂåÖÊã¨Âπ∂Ë°åÁªìÊûÑÁöÑË°®Á§∫ÔºåÂÆÉÂÖÅËÆ∏‰º†ÁªüÁöÑÁºñËØëÂô®ËΩ¨Êç¢ÈÄèÊòé‰∏îÊó†ÈúÄ‰øÆÊîπÂú∞Â∫îÁî®ÔºåÂπ∂ÊîØÊåÅÁâπÂÆö‰∫éÂπ∂Ë°åÊÄßÁöÑ‰ºòÂåñ„ÄÇÊàë‰ª¨ÈÄöËøá‰∏∫Â§öÊ†∏ CPU ËΩ¨ËØëÂíå‰ºòÂåñ CUDA Rodinia Âü∫ÂáÜÊµãËØïÂ•ó‰ª∂Êù•ËØÑ‰º∞Êàë‰ª¨ÁöÑÊ°ÜÊû∂ÔºåÂπ∂‰∏éÊâãÂÜôÁöÑ OpenMP ‰ª£Á†ÅÁõ∏ÊØîÂÆûÁé∞‰∫Ü 76% ÁöÑÂá†‰ΩïÂπ≥ÂùáÈÄüÂ∫¶ÊèêÂçá„ÄÇÊ≠§Â§ñÔºåÊàë‰ª¨ËøòÂ±ïÁ§∫‰∫Ü PyTorch ÁöÑ CUDA ÂÜÖÊ†∏Â¶Ç‰ΩïÂú®Á∫Ø CPU Ë∂ÖÁ∫ßËÆ°ÁÆóÊú∫ Fugaku ‰∏äÈ´òÊïàËøêË°åÂíåÊâ©Â±ïÔºåËÄåÊó†ÈúÄÁî®Êà∑Âπ≤È¢Ñ„ÄÇÊàë‰ª¨ÁöÑ PyTorch ÂÖºÂÆπÂ±Ç‰ΩøÁî®ËΩ¨ËØëÁöÑ CUDA PyTorch ÂÜÖÊ†∏ÔºåÂÖ∂ÊÄßËÉΩÊØî PyTorch CPU Êú¨Êú∫ÂêéÁ´ØÈ´òÂá∫ 2.7 √ó ÂÄç„ÄÇ We propose a compiler model for most common GPU constructs: multi-level parallelism, level-wide synchronization, and level-local memory. This differs from CPU parallelism, which provides a single level of parallelism, a unified memory and peer synchronization. In contrast to source and AST-level approaches, which operate before the optimization pipeline, and existing compiler approaches, which model synchronization as a ‚Äúblack-box‚Äù optimization barrier, we model synchronization entirely from memory semantics. This both allows synchronization-based code to inter-operate with existing optimizations and enables novel parallel-specific optimizations. Êàë‰ª¨‰∏∫ÊúÄÂ∏∏ËßÅÁöÑ GPU ÁªìÊûÑÊèêÂá∫‰∫Ü‰∏Ä‰∏™ÁºñËØëÂô®Ê®°ÂûãÔºöÂ§öÁ∫ßÂπ∂Ë°å„ÄÅÁ∫ßÂà´ËåÉÂõ¥ÂêåÊ≠•ÂíåÁ∫ßÂà´Êú¨Âú∞ÂÜÖÂ≠ò„ÄÇËøô‰∏é CPU Âπ∂Ë°å‰∏çÂêåÔºåÂêéËÄÖÊèê‰æõÂçïÁ∫ßÂπ∂Ë°å„ÄÅÁªü‰∏ÄÂÜÖÂ≠òÂíåÂØπÁ≠âÂêåÊ≠•„ÄÇ‰∏éÂú®‰ºòÂåñÁÆ°ÈÅì‰πãÂâçËøêË°åÁöÑÊ∫êÂíå AST Á∫ßÊñπÊ≥ï‰ª•ÂèäÂ∞ÜÂêåÊ≠•Âª∫Ê®°‰∏∫‚ÄúÈªëÁõí‚Äù‰ºòÂåñÂ±èÈöúÁöÑÁé∞ÊúâÁºñËØëÂô®ÊñπÊ≥ïÁõ∏ÊØîÔºåÊàë‰ª¨ÂÆåÂÖ®Ê†πÊçÆÂÜÖÂ≠òËØ≠‰πâÂØπÂêåÊ≠•ËøõË°åÂª∫Ê®°„ÄÇËøôÊó¢ÂÖÅËÆ∏Âü∫‰∫éÂêåÊ≠•ÁöÑ‰ª£Á†Å‰∏éÁé∞Êúâ‰ºòÂåñËøõË°å‰∫íÊìç‰ΩúÔºåÂèàÂèØ‰ª•ÂÆûÁé∞Êñ∞È¢ñÁöÑÂπ∂Ë°åÁâπÂÆö‰ºòÂåñ„ÄÇ Our model is implemented in the MLIR layer [20] of the LLVM compiler infrastructure [21] and it leverages MLIR‚Äôs nested-module approach for GPU codes [22] We extended the Polygeist [23] C/C++ frontend to support CUDA and to produce MLIR which preserves high-level parallelism and program structure. Our prototype compiler is capable of compiling PyTorch CUDA kernels, as well as other compute-intensive benchmarks, to any CPU architecture supported by LLVM. In addition to transformations accounting for the differences in the execution model, we also exploit parallelism on the CPU via OpenMP. Finally, our MocCUDA PyTorch integration uses our approach to compile and execute CUDA kernels in absence of a GPU while substituting unsupported calls. Êàë‰ª¨ÁöÑÊ®°ÂûãÂú® LLVM ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ[ 21 ]ÁöÑ MLIR Â±Ç[ 20 ]‰∏≠ÂÆûÁé∞ÔºåÂÆÉÂà©Áî® MLIR ÁöÑ GPU ‰ª£Á†ÅÂµåÂ•óÊ®°ÂùóÊñπÊ≥ï[ 22 ]Êàë‰ª¨Êâ©Â±ï‰∫Ü Polygeist [ 23 ] C/C++ ÂâçÁ´Ø‰ª•ÊîØÊåÅ CUDA Âπ∂ÁîüÊàêMLIR ‰øùÁïô‰∫ÜÈ´òÁ∫ßÂπ∂Ë°åÊÄßÂíåÁ®ãÂ∫èÁªìÊûÑ„ÄÇÊàë‰ª¨ÁöÑÂéüÂûãÁºñËØëÂô®ËÉΩÂ§üÂ∞Ü PyTorch CUDA ÂÜÖÊ†∏‰ª•ÂèäÂÖ∂‰ªñËÆ°ÁÆóÂØÜÈõÜÂûãÂü∫ÂáÜÁºñËØëÂà∞ LLVM ÊîØÊåÅÁöÑ‰ªª‰Ωï CPU Êû∂ÊûÑ„ÄÇÈô§‰∫ÜËÄÉËôëÊâßË°åÊ®°ÂûãÂ∑ÆÂºÇÁöÑËΩ¨Êç¢‰πãÂ§ñÔºåÊàë‰ª¨ËøòÈÄöËøá OpenMP Âà©Áî® CPU ‰∏äÁöÑÂπ∂Ë°åÊÄß„ÄÇÊúÄÂêéÔºåÊàë‰ª¨ÁöÑ MocCUDA PyTorch ÈõÜÊàê‰ΩøÁî®Êàë‰ª¨ÁöÑÊñπÊ≥ïÂú®Ê≤°Êúâ GPU ÁöÑÊÉÖÂÜµ‰∏ãÁºñËØëÂíåÊâßË°å CUDA ÂÜÖÊ†∏ÔºåÂêåÊó∂ÊõøÊç¢‰∏çÊîØÊåÅÁöÑË∞ÉÁî®„ÄÇ Overall, our paper makes the following contributions: ÊÄªÁöÑÊù•ËØ¥ÔºåÊàë‰ª¨ÁöÑËÆ∫ÊñáÂÅöÂá∫‰∫Ü‰ª•‰∏ãË¥°ÁåÆÔºö A common high-level and platform-agnostic representation of SIMT-style parallelism backed by a semantic definition of barrier synchronization that ensures correctness through memory semantics, which ensures transparent application of existing optimizations. SIMT ÂºèÂπ∂Ë°åÊÄßÁöÑÈÄöÁî®È´òÁ∫ß‰∏î‰∏éÂπ≥Âè∞Êó†ÂÖ≥ÁöÑË°®Á§∫ÂΩ¢ÂºèÔºåÁî±Â±èÈöúÂêåÊ≠•ÁöÑËØ≠‰πâÂÆö‰πâÊîØÊåÅÔºåÈÄöËøáÂÜÖÂ≠òËØ≠‰πâÁ°Æ‰øùÊ≠£Á°ÆÊÄßÔºå‰ªéËÄåÁ°Æ‰øùÁé∞Êúâ‰ºòÂåñÁöÑÈÄèÊòéÂ∫îÁî®„ÄÇ Novel parallel-specific optimizations which can exploit our high-level parallel semantics to optimize programs. Êñ∞È¢ñÁöÑÂπ∂Ë°åÁâπÂÆö‰ºòÂåñÂèØ‰ª•Âà©Áî®Êàë‰ª¨ÁöÑÈ´òÁ∫ßÂπ∂Ë°åËØ≠‰πâÊù•‰ºòÂåñÁ®ãÂ∫è„ÄÇ An extension to the Polygeist C/C++ frontend for MLIR which is capable of directly mapping GPU and CPU parallel constructs into our high-level parallelism primitives. MLIR ÁöÑ Polygeist C/C++ ÂâçÁ´ØÁöÑÊâ©Â±ïÔºåËÉΩÂ§üÁõ¥Êé•Â∞Ü GPU Âíå CPU Âπ∂Ë°åÁªìÊûÑÊò†Â∞ÑÂà∞Êàë‰ª¨ÁöÑÈ´òÁ∫ßÂπ∂Ë°åÂéüËØ≠‰∏≠„ÄÇ An end-to-end transpilation of CUDA to CPU for a subset of the Rodinia [24] benchmark suite and the internal CUDA kernels within PyTorch [2] necessary to run a Resnet-50 on the CPU-only Fugaku supercomputer. Â∞Ü CUDA Á´ØÂà∞Á´ØËΩ¨ËØë‰∏∫ CPUÔºåÁî®‰∫é Rodinia [ 24 ]Âü∫ÂáÜÊµãËØïÂ•ó‰ª∂ÁöÑÂ≠êÈõÜ‰ª•Âèä PyTorch [ 2 ]‰∏≠ÁöÑÂÜÖÈÉ® CUDA ÂÜÖÊ†∏ÔºåËøôÊòØÂú®Á∫Ø CPU Fugaku Ë∂ÖÁ∫ßËÆ°ÁÆóÊú∫‰∏äËøêË°å Resnet-50 ÊâÄÂøÖÈúÄÁöÑ„ÄÇ II-CPolygeist II-CÂ§öÁÅµ Polygeist is a C and C++ frontend for MLIR based on Clang [23]. It is capable of translating a broad range of C++ programs into a mix of MLIR dialects that preserve elements of the high-level structure of the program. In particular, Polygeist preserves structured control flow (loops and conditionals) as MLIR SCF dialect. It also simplifies analyses by preserving multi-dimensional array constructs whenever possible by relying on the MLIR‚Äôs multi-dimensional memory reference (memref) type. Finally, Poylgeist is able to identify parts of the program suitable for polyhedral optimization [28] and represent them using the Affine dialect. Polygeist ÊòØÂü∫‰∫é Clang [ 23 ] ÁöÑMLIR ÁöÑ C Âíå C++ ÂâçÁ´Ø„ÄÇÂÆÉËÉΩÂ§üÂ∞ÜÂêÑÁßç C++ Á®ãÂ∫èËΩ¨Êç¢‰∏∫ MLIR ÊñπË®ÄÁöÑÊ∑∑ÂêàÔºå‰ªéËÄå‰øùÁïôÁ®ãÂ∫èÈ´òÁ∫ßÁªìÊûÑÁöÑÂÖÉÁ¥†„ÄÇÁâπÂà´ÊòØÔºåPolygeist Â∞ÜÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºàÂæ™ÁéØÂíåÊù°‰ª∂Ôºâ‰øùÁïô‰∏∫ MLIR SCF ÊñπË®Ä„ÄÇÂÆÉËøòÈÄöËøá‰æùËµñ MLIR ÁöÑÂ§öÁª¥ÂÜÖÂ≠òÂºïÁî® (memref) Á±ªÂûãÂ∞ΩÂèØËÉΩ‰øùÁïôÂ§öÁª¥Êï∞ÁªÑÁªìÊûÑÊù•ÁÆÄÂåñÂàÜÊûê„ÄÇÊúÄÂêéÔºåPoylgeist ËÉΩÂ§üËØÜÂà´Á®ãÂ∫è‰∏≠ÈÄÇÂêàÂ§öÈù¢‰Ωì‰ºòÂåñÁöÑÈÉ®ÂàÜ[ 28 ]Âπ∂‰ΩøÁî®‰ªøÂ∞ÑÊñπË®ÄË°®Á§∫ÂÆÉ‰ª¨„ÄÇ Representation of GPU Kernel Launch We define the representation of a GPU kernel launch as follows (illustrated in Fig. 3): A 3D parallel for-loop over all blocks in the grid. A stack allocation for any shared memory, scoped to be unique per block. A 3D parallel for-loop over all threads in a block. A custom Polygeist barrier operation that provides equivalent semantics to a CUDA/ROCm synchronization. Êàë‰ª¨ÂÆö‰πâGPUÂÜÖÊ†∏ÂêØÂä®ÁöÑË°®Á§∫Â¶Ç‰∏ã(Â¶ÇÂõæ3ÊâÄÁ§∫): Âú®ÁΩëÊ†º‰∏≠ÊâÄÊúâÂùó‰∏äÁöÑ3DÂπ∂Ë°åforÂæ™ÁéØ„ÄÇ ÂØπ‰ªª‰ΩïÂÖ±‰∫´ÂÜÖÂ≠òÁöÑÂ†ÜÊ†àÂàÜÈÖç,ÊØè‰∏™ÂùóÁöÑËåÉÂõ¥ÊòØÂîØ‰∏ÄÁöÑ„ÄÇ Âú®‰∏Ä‰∏™Âùó‰∏≠ÊâÄÊúâÁ∫øÁ®ã‰∏äÁöÑ3DÂπ∂Ë°åforÂæ™ÁéØ„ÄÇ Êèê‰æõ‰∏é CUDA / ROCmÂêåÊ≠•Á≠âÊïàËØ≠‰πâÁöÑËá™ÂÆö‰πâ Polygeist Â±èÈöúÊìç‰Ωú„ÄÇ PolygeistGPU-Docker From CUDA to OpenCL: Towards a performance-portable solution for multi-platform GPU programmin https://www.sciencedirect.com/science/article/abs/pii/S0167819111001335 In this work, we evaluate OpenCL as a programming tool for developing performance-portable applications for GPGPU. While the Khronos group developed OpenCL with programming portability in mind, performance is not necessarily portable. OpenCL has required performance-impacting initializations that do not exist in other languages such as CUDA. Understanding these implications allows us to provide a single library with decent performance on a variety of platforms. We choose triangular solver (TRSM) and matrix multiplication (GEMM) as representative level 3 BLAS routines to implement in OpenCL. We profile TRSM to get the time distribution of the OpenCL runtime system. We then provide tuned GEMM kernels for both the NVIDIA Tesla C2050 and ATI Radeon 5870, the latest GPUs offered by both companies. We explore the benefits of using the texture cache, the performance ramifications of copying data into images, discrepancies in the OpenCL and CUDA compilers‚Äô optimizations, and other issues that affect the performance. Experimental results show that nearly 50% of peak performance can be obtained in GEMM on both GPUs in OpenCL. We also show that the performance of these kernels is not highly portable. Finally, we propose the use of auto-tuning to better explore these kernels‚Äô parameter space using search harness. Âú®ËøôÈ°πÂ∑•‰Ωú‰∏≠ÔºåÊàë‰ª¨Â∞Ü OpenCL ËØÑ‰º∞‰∏∫Áî®‰∫é‰∏∫ GPGPU ÂºÄÂèëÊÄßËÉΩÂèØÁßªÊ§çÂ∫îÁî®Á®ãÂ∫èÁöÑÁºñÁ®ãÂ∑•ÂÖ∑„ÄÇËôΩÁÑ∂ Khronos Â∞èÁªÑÂú®ÂºÄÂèë OpenCL Êó∂ËÄÉËôëÂà∞‰∫ÜÁºñÁ®ãÁöÑÂèØÁßªÊ§çÊÄßÔºå‰ΩÜÊÄßËÉΩ‰∏ç‰∏ÄÂÆöÊòØÂèØÁßªÊ§çÁöÑ„ÄÇOpenCL ÈúÄË¶ÅÂΩ±ÂìçÊÄßËÉΩÁöÑÂàùÂßãÂåñÔºåËÄåÂÖ∂‰ªñËØ≠Ë®ÄÔºàÂ¶Ç CUDAÔºâ‰∏≠‰∏çÂ≠òÂú®Ëøô‰∫õÂàùÂßãÂåñ„ÄÇ‰∫ÜËß£Ëøô‰∫õÂê´‰πâ‰ΩøÊàë‰ª¨ËÉΩÂ§üÂú®ÂêÑÁßçÂπ≥Âè∞‰∏äÊèê‰æõÂÖ∑ÊúâËâØÂ•ΩÊÄßËÉΩÁöÑÂçï‰∏™Â∫ì„ÄÇÊàë‰ª¨ÈÄâÊã©‰∏âËßíÊ±ÇËß£Âô® ÔºàTRSMÔºâ ÂíåÁü©Èòµ‰πòÊ≥ï ÔºàGEMMÔºâ ‰Ωú‰∏∫Âú® OpenCL ‰∏≠ÂÆûÁé∞ÁöÑ‰ª£Ë°®ÊÄß 3 Á∫ß BLAS ‰æãÁ®ã„ÄÇÊàë‰ª¨ÂàÜÊûê TRSM ‰ª•Ëé∑Âæó OpenCL ËøêË°åÊó∂Á≥ªÁªüÁöÑÊó∂Èó¥ÂàÜÂ∏É„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨‰∏∫ NVIDIA Tesla C2050 Âíå ATI Radeon 5870Ôºà‰∏§ÂÆ∂ÂÖ¨Âè∏Êèê‰æõÁöÑÊúÄÊñ∞ GPUÔºâÊèê‰æõÁªèËøáË∞ÉÊï¥ÁöÑ GEMM ÂÜÖÊ†∏„ÄÇÊàë‰ª¨Êé¢ËÆ®‰∫Ü‰ΩøÁî®Á∫πÁêÜÁºìÂ≠òÁöÑÂ•ΩÂ§Ñ„ÄÅÂ∞ÜÊï∞ÊçÆÂ§çÂà∂Âà∞ÂõæÂÉè‰∏≠ÁöÑÊÄßËÉΩÂΩ±Âìç„ÄÅOpenCL Âíå CUDA ÁºñËØëÂô®‰ºòÂåñ‰∏≠ÁöÑÂ∑ÆÂºÇ‰ª•ÂèäÂΩ±ÂìçÊÄßËÉΩÁöÑÂÖ∂‰ªñÈóÆÈ¢ò„ÄÇÂÆûÈ™åÁªìÊûúË°®ÊòéÔºåÂú® OpenCL ÁöÑ‰∏§‰∏™ GPU ‰∏äÔºåGEMM ÈÉΩÂèØ‰ª•Ëé∑ÂæóËøë 50% ÁöÑÂ≥∞ÂÄºÊÄßËÉΩ„ÄÇÊàë‰ª¨ËøòË°®ÊòéÔºåËøô‰∫õÂÜÖÊ†∏ÁöÑÊÄßËÉΩÂπ∂‰∏çÊòØÈ´òÂ∫¶ÂèØÁßªÊ§çÁöÑ„ÄÇÊúÄÂêéÔºåÊàë‰ª¨Âª∫ËÆÆ‰ΩøÁî®Ëá™Âä®Ë∞ÉÊï¥Ôºå‰ª•‰ΩøÁî®ÊêúÁ¥¢Â∑•ÂÖ∑Êõ¥Â•ΩÂú∞Êé¢Á¥¢Ëøô‰∫õÂÜÖÊ†∏ÁöÑÂèÇÊï∞Á©∫Èó¥„ÄÇ Kokkos: Enabling manycore performance portability through polymorphic memory access patterns KokkosÔºöÈÄöËøáÂ§öÊÄÅÂÜÖÂ≠òËÆøÈóÆÊ®°ÂºèÂÆûÁé∞‰ºóÊ†∏ÊÄßËÉΩÂèØÁßªÊ§çÊÄß Achieving Portability and Performance through OpenACC ÈÄöËøá OpenACC ÂÆûÁé∞ÂèØÁßªÊ§çÊÄßÂíåÊÄßËÉΩ https://ieeexplore.ieee.org/document/7081674 OpenACC is a directive-based programming model designed to allow easy access to emerging advanced architecture systems for existing production codes based on Fortran, C and C++. It also provides an approach to coding contemporary technologies without the need to learn complex vendor-specific languages, or understand the hardware at the deepest level. Portability and performance are the key features of this programming model, which are essential to productivity in real scientific applications. OpenACC support is provided by a number of vendors and is defined by an open standard. However the standard is relatively new, and the implementations are relatively immature. This paper experimentally evaluates the currently available compilers by assessing two approaches to the OpenACC programming model: the \"parallel\" and \"kernels\" constructs. The implementation of both of these construct is compared, for each vendor, showing performance differences of up to 84%. Additionally, we observe performance differences of up to 13% between the best vendor implementations. OpenACC features which appear to cause performance issues in certain compilers are identified and linked to differing default vector length clauses between vendors. These studies are carried out over a range of hardware including GPU, APU, Xeon and Xeon Phi based architectures. Finally, OpenACC performance, and productivity, are compared against the alternative native programming approaches on each targeted platform, including CUDA, OpenCL, OpenMP 4.0 and Intel Offload, in addition to MPI and OpenMP. OpenACC ÊòØ‰∏ÄÁßçÂü∫‰∫éÊåá‰ª§ÁöÑÁºñÁ®ãÊ®°ÂûãÔºåÊó®Âú®ÂÖÅËÆ∏ËΩªÊùæËÆøÈóÆÂü∫‰∫é Fortran„ÄÅC Âíå C++ ÁöÑÁé∞Êúâ‰∫ßÂìÅ‰ª£Á†ÅÁöÑÊñ∞ÂÖ¥È´òÁ∫ßÊû∂ÊûÑÁ≥ªÁªü„ÄÇÂÆÉËøòÊèê‰æõ‰∫Ü‰∏ÄÁßçÂØπÁé∞‰ª£ÊäÄÊúØËøõË°åÁºñÁ†ÅÁöÑÊñπÊ≥ïÔºåËÄåÊó†ÈúÄÂ≠¶‰π†Â§çÊùÇÁöÑ‰æõÂ∫îÂïÜÁâπÂÆöËØ≠Ë®ÄÔºå‰πüÊó†ÈúÄÊõ¥Ê∑±ÂÖ•Âú∞‰∫ÜËß£Á°¨‰ª∂„ÄÇÂèØÁßªÊ§çÊÄßÂíåÊÄßËÉΩÊòØËØ•ÁºñÁ®ãÊ®°ÂûãÁöÑÂÖ≥ÈîÆÁâπÊÄßÔºåËøôÂØπ‰∫éÂÆûÈôÖÁßëÂ≠¶Â∫îÁî®‰∏≠ÁöÑÁîü‰∫ßÂäõËá≥ÂÖ≥ÈáçË¶Å„ÄÇOpenACC ÊîØÊåÅÁî±ËÆ∏Â§ö‰æõÂ∫îÂïÜÊèê‰æõÔºåÂπ∂Áî±ÂºÄÊîæÊ†áÂáÜÂÆö‰πâ„ÄÇ‰ΩÜÊòØÔºåËØ•Ê†áÂáÜÁõ∏ÂØπËæÉÊñ∞ÔºåÂÆûÁé∞‰πüÁõ∏ÂØπ‰∏çÊàêÁÜü„ÄÇÊú¨ÊñáÈÄöËøáËØÑ‰º∞ OpenACC ÁºñÁ®ãÊ®°ÂûãÁöÑ‰∏§ÁßçÊñπÊ≥ïÔºà‚ÄúÂπ∂Ë°å‚ÄùÂíå‚ÄúÂÜÖÊ†∏‚ÄùÁªìÊûÑÔºâÊù•ÂÆûÈ™åËØÑ‰º∞ÂΩìÂâçÂèØÁî®ÁöÑÁºñËØëÂô®„ÄÇÂØπÊØè‰∏™‰æõÂ∫îÂïÜÁöÑËøô‰∏§ÁßçÁªìÊûÑÁöÑÂÆûÊñΩËøõË°å‰∫ÜÊØîËæÉÔºåÊòæÁ§∫ÊÄßËÉΩÂ∑ÆÂºÇÈ´òËææ 84%„ÄÇÊ≠§Â§ñÔºåÊàë‰ª¨ËßÇÂØüÂà∞ÊúÄ‰Ω≥‰æõÂ∫îÂïÜÂÆûÊñΩ‰πãÈó¥ÁöÑÊÄßËÉΩÂ∑ÆÂºÇÈ´òËææ 13%„ÄÇËØÜÂà´Âá∫Âú®Êüê‰∫õÁºñËØëÂô®‰∏≠‰ºº‰πé‰ºöÂØºËá¥ÊÄßËÉΩÈóÆÈ¢òÁöÑ OpenACC ÂäüËÉΩÔºåÂπ∂Â∞ÜÂÖ∂ÈìæÊé•Âà∞‰æõÂ∫îÂïÜ‰πãÈó¥‰∏çÂêåÁöÑÈªòËÆ§ÂêëÈáèÈïøÂ∫¶Â≠êÂè•„ÄÇËøô‰∫õÁ†îÁ©∂ÊòØÂú®‰∏ÄÁ≥ªÂàóÁ°¨‰ª∂‰∏äËøõË°åÁöÑÔºåÂåÖÊã¨Âü∫‰∫é GPU„ÄÅAPU„ÄÅXeon Âíå Xeon Phi ÁöÑÊû∂ÊûÑ„ÄÇÊúÄÂêéÔºåÂ∞Ü OpenACC ÁöÑÊÄßËÉΩÂíåÁîü‰∫ßÂäõ‰∏éÊØè‰∏™ÁõÆÊ†áÂπ≥Âè∞‰∏äÁöÑÊõø‰ª£ÂéüÁîüÁºñÁ®ãÊñπÊ≥ïËøõË°å‰∫ÜÊØîËæÉÔºåÂåÖÊã¨ CUDA„ÄÅOpenCL„ÄÅOpenMP 4.0 Âíå Intel OffloadÔºå‰ª•Âèä MPI Âíå OpenMP„ÄÇ GPU(CUDA) to CPU GPUOcelot GPUOcelot GPUOcelot: A dynamic compilation framework for PTX GPUOcelotÔºöPTX ÁöÑÂä®ÊÄÅÁºñËØëÊ°ÜÊû∂ Ocelot is a just-in-time compiler, which retargets PTX assembler (used internally by CUDA) for non-NVIDIA hardware. OcelotÊòØ‰∏Ä‰∏™Âç≥Êó∂ÁºñËØëÂô®ÔºåÂÆÉÈíàÂØπÈùû NVIDIA Á°¨‰ª∂ÈáçÊñ∞ÂÆö‰Ωç PTX Ê±áÁºñÂô®ÔºàÁî± CUDA ÂÜÖÈÉ®‰ΩøÁî®Ôºâ„ÄÇ HIPIFY HIPIFY: Convert CUDA to Portable C++ Code hipify-clang and hipify-perl are tools that automatically translate NVIDIA CUDA source code into portable HIP C++. hipify-clangÂíåhipify-perlÊòØËá™Âä®Â∞Ü NVIDIA CUDA Ê∫ê‰ª£Á†ÅËΩ¨Êç¢‰∏∫ÂèØÁßªÊ§ç HIP C++ ÁöÑÂ∑•ÂÖ∑„ÄÇ HIP HIP: C++ Heterogeneous-Compute Interface for Portability HIP is a C++ Runtime API and Kernel Language that allows developers to create portable applications for AMD and NVIDIA GPUs from single source code. HIP ÊòØ‰∏ÄÁßç C++ ËøêË°åÊó∂ API ÂíåÂÜÖÊ†∏ËØ≠Ë®ÄÔºåÂÖÅËÆ∏ÂºÄÂèë‰∫∫Âëò‰ªéÂçï‰∏ÄÊ∫ê‰ª£Á†ÅÂàõÂª∫ÈÄÇÁî®‰∫é AMD Âíå NVIDIA GPU ÁöÑÂèØÁßªÊ§çÂ∫îÁî®Á®ãÂ∫è„ÄÇ Key features include: ‰∏ªË¶ÅÁâπÁÇπÂåÖÊã¨Ôºö HIP is very thin and has little or no performance impact over coding directly in CUDA mode. HIP ÈùûÂ∏∏ËñÑÔºå‰∏éÁõ¥Êé•Âú® CUDA Ê®°Âºè‰∏ãÁºñÁ†ÅÁõ∏ÊØîÔºåÂá†‰πéÊ≤°ÊúâÊÄßËÉΩÂΩ±Âìç„ÄÇ HIP allows coding in a single-source C++ programming language including features such as templates, C++11 lambdas, classes, namespaces, and more. HIP ÂÖÅËÆ∏‰ΩøÁî®ÂçïÊ∫ê C++ ÁºñÁ®ãËØ≠Ë®ÄËøõË°åÁºñÁ†ÅÔºåÂåÖÊã¨Ê®°Êùø„ÄÅC++11 lambda„ÄÅÁ±ª„ÄÅÂëΩÂêçÁ©∫Èó¥Á≠âÂäüËÉΩ„ÄÇ HIP allows developers to use the \"best\" development environment and tools on each target platform. HIPÂÖÅËÆ∏ÂºÄÂèë‰∫∫ÂëòÂú®ÊØè‰∏™ÁõÆÊ†áÂπ≥Âè∞‰∏ä‰ΩøÁî®‚ÄúÊúÄÂ•ΩÁöÑ‚ÄùÂºÄÂèëÁéØÂ¢ÉÂíåÂ∑•ÂÖ∑„ÄÇ The HIPIFY tools automatically convert source from CUDA to HIP. HIPIFYÂ∑•ÂÖ∑Ëá™Âä®Â∞ÜÊ∫ê‰ªé CUDA ËΩ¨Êç¢‰∏∫ HIP„ÄÇ Developers can specialize for the platform (CUDA or AMD) to tune for performance or handle tricky cases. ÂºÄÂèë‰∫∫ÂëòÂèØ‰ª•‰∏ìÈó®ÈíàÂØπÂπ≥Âè∞ÔºàCUDA Êàñ AMDÔºâÊù•Ë∞ÉÊï¥ÊÄßËÉΩÊàñÂ§ÑÁêÜÊ£òÊâãÁöÑÊÉÖÂÜµ„ÄÇ Domain-Specific Multi-Level IR Rewriting for GPU: The Open Earth Compiler for GPU-accelerated Climate Simulation È¢ÜÂüüÁâπÂÆöÂ§öÁ∫ß IR ÈáçÂÜôÁî®‰∫é GPUÔºöGPU Âä†ÈÄüÊ∞îÂÄôÊ®°ÊãüÁöÑÂºÄÊîæÂú∞ÁêÉÁºñËØëÂô® https://dl.acm.org/doi/10.1145/3469030 2021.9.03 Most compilers have a single core intermediate representation (IR) (e.g., LLVM) sometimes complemented with vaguely defined IR-like data structures. This IR is commonly low-level and close to machine instructions. As a result, optimizations relying on domain-specific information are either not possible or require complex analysis to recover the missing information. In contrast, multi-level rewriting instantiates a hierarchy of dialects (IRs), lowers programs level-by-level, and performs code transformations at the most suitable level. We demonstrate the effectiveness of this approach for the weather and climate domain. In particular, we develop a prototype compiler and design stencil- and GPU-specific dialects based on a set of newly introduced design principles. We find that two domain-specific optimizations (500 lines of code) realized on top of LLVM‚Äôs extensible MLIR compiler infrastructure suffice to outperform state-of-the-art solutions. In essence, multi-level rewriting promises to herald the age of specialized compilers composed from domain- and target-specific dialects implemented on top of a shared infrastructure. Â§ßÂ§öÊï∞ÁºñËØëÂô®ÈÉΩÊúâ‰∏Ä‰∏™Âçï‰∏ÄÊ†∏ÂøÉÁöÑ‰∏≠Èó¥Ë°®Á§∫ÔºàIRÔºâÔºà‰æãÂ¶ÇÔºåLLVMÔºâÔºåÊúâÊó∂ËæÖ‰ª•Ê®°Á≥äÂÆö‰πâÁöÑÁ±ª‰ºº IR ÁöÑÊï∞ÊçÆÁªìÊûÑ„ÄÇËøô‰∏™ IR ÈÄöÂ∏∏ÊòØ‰ΩéÁ∫ß‰∏îÊé•ËøëÊú∫Âô®Êåá‰ª§ÁöÑ„ÄÇÂõ†Ê≠§Ôºå‰æùËµñ‰∫éÁâπÂÆöÈ¢ÜÂüü‰ø°ÊÅØÁöÑ‰ºòÂåñË¶Å‰πà‰∏çÂèØËÉΩÂÆûÁé∞ÔºåË¶Å‰πàÈúÄË¶ÅÂ§çÊùÇÁöÑÂàÜÊûêÊù•ÊÅ¢Â§çÁº∫Â§±ÁöÑ‰ø°ÊÅØ„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåÂ§öÁ∫ßÈáçÂÜôÂÆû‰æãÂåñ‰∫Ü‰∏ÄÁªÑÊñπË®ÄÔºàIRÔºâÁöÑÂ±ÇÊ¨°ÁªìÊûÑÔºåÈÄêÁ∫ßÈôç‰ΩéÁ®ãÂ∫èÁ∫ßÂà´ÔºåÂπ∂Âú®ÊúÄÂêàÈÄÇÁöÑÁ∫ßÂà´ÊâßË°å‰ª£Á†ÅËΩ¨Êç¢„ÄÇÊàë‰ª¨Â±ïÁ§∫‰∫ÜËøôÁßçÊñπÊ≥ïÂú®Â§©Ê∞îÂíåÊ∞îÂÄôÈ¢ÜÂüü‰∏≠ÁöÑÊúâÊïàÊÄß„ÄÇÁâπÂà´ÊòØÔºåÊàë‰ª¨ÂºÄÂèë‰∫Ü‰∏Ä‰∏™ÂéüÂûãÁºñËØëÂô®ÔºåÂπ∂Âü∫‰∫é‰∏ÄÁªÑÊñ∞ÂºïÂÖ•ÁöÑËÆæËÆ°ÂéüÂàôËÆæËÆ°‰∫ÜÊ®°ÊùøÂíå GPU ÁâπÂÆöÁöÑÊñπË®Ä„ÄÇÊàë‰ª¨ÂèëÁé∞ÔºåÂú® LLVM ÁöÑÂèØÊâ©Â±ï MLIR ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ‰πã‰∏äÂÆûÁé∞ÁöÑ‰∏§‰∏™ÁâπÂÆöÈ¢ÜÂüü‰ºòÂåñÔºà500 Ë°å‰ª£Á†ÅÔºâË∂≥‰ª•Ë∂ÖË∂äÊúÄÂÖàËøõÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇÊú¨Ë¥®‰∏äÔºåÂ§öÁ∫ßÈáçÂÜôÊúâÊúõÈ¢ÑÁ§∫ÁùÄÁî±È¢ÜÂüüÂíåÁõÆÊ†áÁâπÂÆöÊñπË®ÄÁªÑÊàêÁöÑ‰∏ìÁî®ÁºñËØëÂô®ÁöÑÊó∂‰ª£ÔºåËøô‰∫õÊñπË®ÄÊòØÂú®ÂÖ±‰∫´Âü∫Á°ÄËÆæÊñΩ‰πã‰∏äÂÆûÁé∞ÁöÑ„ÄÇ "},"Learn/LearnAIMA/":{"url":"Learn/LearnAIMA/","title":"LearnAIMA","keywords":"","body":"Á¨¨‰∏ÄÈÉ®ÂàÜ ‰∫∫Â∑•Êô∫ËÉΩÂü∫Á°Ä Á¨¨ 1 Á´† Áª™ËÆ∫ 1.1 ‰ªÄ‰πàÊòØ‰∫∫Â∑•Êô∫ËÉΩ 1.1.1 Á±ª‰∫∫Ë°å‰∏∫ÔºöÂõæÁÅµÊµãËØïÊñπÊ≥ï 1.1.2 Á±ª‰∫∫ÊÄùËÄÉÔºöËÆ§Áü•Âª∫Ê®°ÊñπÊ≥ï 1.1.3 ÁêÜÊÄßÊÄùËÄÉÔºö‚ÄúÊÄùÁª¥Ê≥ïÂàô‚ÄùÊñπÊ≥ï 1.1.4 ÁêÜÊÄßË°å‰∏∫ÔºöÁêÜÊÄßÊô∫ËÉΩ‰ΩìÊñπÊ≥ï 1.1.5 ÁõäÊú∫ 1.2 ‰∫∫Â∑•Êô∫ËÉΩÁöÑÂü∫Á°Ä 1.2.1 Âì≤Â≠¶ 1.2.2 Êï∞Â≠¶ 1.2.3 ÁªèÊµéÂ≠¶ 1.2.4 Á•ûÁªèÁßëÂ≠¶ 1.2.5 ÂøÉÁêÜÂ≠¶ 1.2.6 ËÆ°ÁÆóÊú∫Â∑•Á®ã 1.2.7 ÊéßÂà∂ÁêÜËÆ∫‰∏éÊéßÂà∂ËÆ∫ 1.2.8 ËØ≠Ë®ÄÂ≠¶ 1.3 ‰∫∫Â∑•Êô∫ËÉΩÁöÑÂéÜÂè≤ 1.3.1 ‰∫∫Â∑•Êô∫ËÉΩÁöÑËØûÁîüÔºà1943‚Äî1956Ôºâ 1.3.2 Êó©ÊúüÁÉ≠ÊÉÖÈ´òÊ∂®ÔºåÊúüÊúõÊó†ÈôêÔºà1952‚Äî1969Ôºâ 1.3.3 ‰∏Ä‰∫õÁé∞ÂÆûÔºà1966‚Äî1973Ôºâ 1.3.4 ‰∏ìÂÆ∂Á≥ªÁªüÔºà1969‚Äî1986Ôºâ 1.3.5 Á•ûÁªèÁΩëÁªúÁöÑÂõûÂΩíÔºà1986‚ÄîÁé∞Âú®Ôºâ 1.3.6 Ê¶ÇÁéáÊé®ÁêÜÂíåÊú∫Âô®Â≠¶‰π†Ôºà1987‚ÄîÁé∞Âú®Ôºâ 1.3.7 Â§ßÊï∞ÊçÆÔºà2001‚ÄîÁé∞Âú®Ôºâ 1.3.8 Ê∑±Â∫¶Â≠¶‰π†Ôºà2011‚ÄîÁé∞Âú®Ôºâ 1.4 ÁõÆÂâçÁöÑÂÖàËøõÊäÄÊúØ 1.5 ‰∫∫Â∑•Êô∫ËÉΩÁöÑÈ£éÈô©ÂíåÊî∂Áõä Á¨¨ 2 Á´† Êô∫ËÉΩ‰Ωì 2.1 Êô∫ËÉΩ‰ΩìÂíåÁéØÂ¢É 2.2 ËâØÂ•ΩË°å‰∏∫ÔºöÁêÜÊÄßÁöÑÊ¶ÇÂøµ 2.2.1 ÊÄßËÉΩÂ∫¶Èáè 2.2.2 ÁêÜÊÄß 2.2.3 ÂÖ®Áü•„ÄÅÂ≠¶‰π†ÂíåËá™‰∏ª 2.3 ÁéØÂ¢ÉÁöÑÊú¨Ë¥® 2.3.1 ÊåáÂÆö‰ªªÂä°ÁéØÂ¢É 2.3.2 ‰ªªÂä°ÁéØÂ¢ÉÁöÑÂ±ûÊÄß 2.4 Êô∫ËÉΩ‰ΩìÁöÑÁªìÊûÑ 2.4.1 Êô∫ËÉΩ‰ΩìÁ®ãÂ∫è 2.4.2 ÁÆÄÂçïÂèçÂ∞ÑÂûãÊô∫ËÉΩ‰Ωì 2.4.3 Âü∫‰∫éÊ®°ÂûãÁöÑÂèçÂ∞ÑÂûãÊô∫ËÉΩ‰Ωì 2.4.4 Âü∫‰∫éÁõÆÊ†áÁöÑÊô∫ËÉΩ‰Ωì 2.4.5 Âü∫‰∫éÊïàÁî®ÁöÑÊô∫ËÉΩ‰Ωì 2.4.6 Â≠¶‰π†ÂûãÊô∫ËÉΩ‰Ωì 2.4.7 Êô∫ËÉΩ‰ΩìÁ®ãÂ∫èÁöÑÁªÑ‰ª∂Â¶Ç‰ΩïÂ∑•‰Ωú Á¨¨‰∫åÈÉ®ÂàÜ ÈóÆÈ¢òÊ±ÇËß£ Á¨¨ 3 Á´† ÈÄöËøáÊêúÁ¥¢ËøõË°åÈóÆÈ¢òÊ±ÇËß£ 3.1 ÈóÆÈ¢òÊ±ÇËß£Êô∫ËÉΩ‰Ωì 3.1.1 ÊêúÁ¥¢ÈóÆÈ¢òÂíåËß£ 3.1.2 ÈóÆÈ¢òÂΩ¢ÂºèÂåñ 3.2 ÈóÆÈ¢òÁ§∫‰æã 3.2.1 Ê†áÂáÜÂåñÈóÆÈ¢ò 3.2.2 ÁúüÂÆû‰∏ñÁïåÈóÆÈ¢ò 3.3 ÊêúÁ¥¢ÁÆóÊ≥ï 3.3.1 ÊúÄ‰Ω≥‰ºòÂÖàÊêúÁ¥¢ 3.3.2 ÊêúÁ¥¢Êï∞ÊçÆÁªìÊûÑ 3.3.3 ÂÜó‰ΩôË∑ØÂæÑ 3.3.4 ÈóÆÈ¢òÊ±ÇËß£ÊÄßËÉΩËØÑ‰º∞ 3.4 Êó†‰ø°ÊÅØÊêúÁ¥¢Á≠ñÁï• 3.4.1 ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ 3.4.2 Dijkstra ÁÆóÊ≥ïÊàñ‰∏ÄËá¥‰ª£‰ª∑ÊêúÁ¥¢ 3.4.3 Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢‰∏éÂÜÖÂ≠òÈóÆÈ¢ò 3.4.4 Ê∑±Â∫¶ÂèóÈôêÂíåËø≠‰ª£Âä†Ê∑±ÊêúÁ¥¢ 3.4.5 ÂèåÂêëÊêúÁ¥¢ 3.4.6 Êó†‰ø°ÊÅØÊêúÁ¥¢ÁÆóÊ≥ïÂØπÊØî 3.5 Êúâ‰ø°ÊÅØÔºàÂêØÂèëÂºèÔºâÊêúÁ¥¢Á≠ñÁï• 3.5.1 Ë¥™ÂøÉÊúÄ‰Ω≥‰ºòÂÖàÊêúÁ¥¢ 3.5.2 A*ÊêúÁ¥¢ 3.5.3 ÊêúÁ¥¢Á≠âÂÄºÁ∫ø 3.5.4 Êª°ÊÑèÊêúÁ¥¢Ôºö‰∏çÂèØÂÆπËÆ∏ÁöÑÂêØÂèëÂºèÂáΩÊï∞‰∏éÂä†ÊùÉ A*ÊêúÁ¥¢ 3.5.5 ÂÜÖÂ≠òÂèóÈôêÊêúÁ¥¢ 3.5.6 ÂèåÂêëÂêØÂèëÂºèÊêúÁ¥¢ 3.6 ÂêØÂèëÂºèÂáΩÊï∞ 3.6.1 ÂêØÂèëÂºèÂáΩÊï∞ÁöÑÂáÜÁ°ÆÊÄßÂØπÊÄßËÉΩÁöÑÂΩ±Âìç 3.6.2 ‰ªéÊùæÂºõÈóÆÈ¢òÂá∫ÂèëÁîüÊàêÂêØÂèëÂºèÂáΩÊï∞ 3.6.3 ‰ªéÂ≠êÈóÆÈ¢òÂá∫ÂèëÁîüÊàêÂêØÂèëÂºèÂáΩÊï∞ÔºöÊ®°ÂºèÊï∞ÊçÆÂ∫ì 3.6.4 ‰ΩøÁî®Âú∞Ê†áÁîüÊàêÂêØÂèëÂºèÂáΩÊï∞ 3.6.5 Â≠¶‰π†‰ª•Êõ¥Â•ΩÂú∞ÊêúÁ¥¢ 3.6.6 ‰ªéÁªèÈ™å‰∏≠Â≠¶‰π†ÂêØÂèëÂºèÂáΩÊï∞ Á¨¨ 4 Á´† Â§çÊùÇÁéØÂ¢É‰∏≠ÁöÑÊêúÁ¥¢ 4.1 Â±ÄÈÉ®ÊêúÁ¥¢ÂíåÊúÄ‰ºòÂåñÈóÆÈ¢ò 4.1.1 Áà¨Â±±ÊêúÁ¥¢ 4.1.2 Ê®°ÊãüÈÄÄÁÅ´ 4.1.3 Â±ÄÈÉ®ÊùüÊêúÁ¥¢ 4.1.4 ËøõÂåñÁÆóÊ≥ï 4.2 ËøûÁª≠Á©∫Èó¥‰∏≠ÁöÑÂ±ÄÈÉ®ÊêúÁ¥¢ 4.3 ‰ΩøÁî®ÈùûÁ°ÆÂÆöÊÄßÂä®‰ΩúÁöÑÊêúÁ¥¢ 4.3.1 ‰∏çÁ®≥ÂÆöÁöÑÁúüÁ©∫Âê∏Â∞òÂô®‰∏ñÁïå 4.3.2 ‰∏éÊàñÊêúÁ¥¢Ê†ë 4.3.3 ÂèçÂ§çÂ∞ùËØï 4.4 ÈÉ®ÂàÜÂèØËßÇÊµãÁéØÂ¢É‰∏≠ÁöÑÊêúÁ¥¢ 4.4.1 Êó†ËßÇÊµã‰ø°ÊÅØÁöÑÊêúÁ¥¢ 4.4.2 ÈÉ®ÂàÜÂèØËßÇÊµãÁéØÂ¢É‰∏≠ÁöÑÊêúÁ¥¢ 4.4.3 Ê±ÇËß£ÈÉ®ÂàÜÂèØËßÇÊµãÈóÆÈ¢ò 4.4.4 ÈÉ®ÂàÜÂèØËßÇÊµãÁéØÂ¢É‰∏≠ÁöÑÊô∫ËÉΩ‰Ωì 4.5 Âú®Á∫øÊêúÁ¥¢Êô∫ËÉΩ‰ΩìÂíåÊú™Áü•ÁéØÂ¢É 4.5.1 Âú®Á∫øÊêúÁ¥¢ÈóÆÈ¢ò 4.5.2 Âú®Á∫øÊêúÁ¥¢Êô∫ËÉΩ‰Ωì 4.5.3 Âú®Á∫øÂ±ÄÈÉ®ÊêúÁ¥¢ 4.5.4 Âú®Á∫øÊêúÁ¥¢‰∏≠ÁöÑÂ≠¶‰π† Á¨¨ 5 Á´† ÂØπÊäóÊêúÁ¥¢ÂíåÂçöÂºà 5.1 ÂçöÂºàËÆ∫ 5.2 ÂçöÂºà‰∏≠ÁöÑ‰ºòÂåñÂÜ≥Á≠ñ 5.2.1 ÊûÅÂ∞èÂåñÊûÅÂ§ßÊêúÁ¥¢ÁÆóÊ≥ï 5.2.2 Â§ö‰∫∫ÂçöÂºà‰∏≠ÁöÑÊúÄ‰ºòÂÜ≥Á≠ñ 5.2.3 Ââ™Êûù 5.2.4 ÁßªÂä®È°∫Â∫è 5.3 ÂêØÂèëÂºèÊ†ëÊêúÁ¥¢ 5.3.1 ËØÑ‰ª∑ÂáΩÊï∞ 5.3.2 Êà™Êñ≠ÊêúÁ¥¢ 5.3.3 ÂâçÂêëÂâ™Êûù 5.3.4 ÊêúÁ¥¢ÂíåÊü•Ë°® 5.4 ËíôÁâπÂç°ÁΩóÊ†ëÊêúÁ¥¢ 5.5 ÈöèÊú∫ÂçöÂºà Êú∫‰ºöÂçöÂºàÁöÑËØÑ‰ª∑ÂáΩÊï∞ 5.6 ÈÉ®ÂàÜÂèØËßÇÊµãÂçöÂºà 5.6.1 ÂõõÂõΩÂÜõÊ£ãÔºöÈÉ®ÂàÜÂèØËßÇÊµãÁöÑÂõΩÈôÖË±°Ê£ã 5.6.2 Á∫∏ÁâåÊ∏∏Êàè 5.7 ÂçöÂºàÊêúÁ¥¢ÁÆóÊ≥ïÁöÑÂ±ÄÈôêÊÄß Á¨¨ 6 Á´† Á∫¶ÊùüÊª°Ë∂≥ÈóÆÈ¢ò 6.1 ÂÆö‰πâÁ∫¶ÊùüÊª°Ë∂≥ÈóÆÈ¢ò 6.1.1 ÈóÆÈ¢òÁ§∫‰æãÔºöÂú∞ÂõæÁùÄËâ≤ 6.1.2 ÈóÆÈ¢òÁ§∫‰æãÔºöËΩ¶Èó¥‰Ωú‰∏öË∞ÉÂ∫¶ 6.1.3 CSP ÂΩ¢Âºè‰ΩìÁ≥ªÁöÑÂèò‰Ωì 6.2 Á∫¶Êùü‰º†Êí≠ÔºöCSP ‰∏≠ÁöÑÊé®Êñ≠ 6.2.1 ËäÇÁÇπ‰∏ÄËá¥ÊÄß 6.2.2 Âºß‰∏ÄËá¥ÊÄß 6.2.3 Ë∑ØÂæÑ‰∏ÄËá¥ÊÄß 6.2.4 k ‰∏ÄËá¥ÊÄß 6.2.5 ÂÖ®Â±ÄÁ∫¶Êùü 6.2.6 Êï∞Áã¨ 6.3 CSP ÁöÑÂõûÊ∫ØÊêúÁ¥¢ 6.3.1 ÂèòÈáèÊéíÂ∫èÂíåÂÄºÊéíÂ∫è 6.3.2 ‰∫§ÊõøËøõË°åÊêúÁ¥¢ÂíåÊé®ÁêÜ 6.3.3 Êô∫ËÉΩÂõûÊ∫ØÔºöÂêëÂêéÁúã 6.3.4 Á∫¶ÊùüÂ≠¶‰π† 6.4 CSP ÁöÑÂ±ÄÈÉ®ÊêúÁ¥¢ 6.5 ÈóÆÈ¢òÁöÑÁªìÊûÑ 6.5.1 Ââ≤ÈõÜË∞ÉÊï¥ 6.5.2 Ê†ëÂàÜËß£ 6.5.3 ÂÄºÂØπÁß∞ Á¨¨‰∏âÈÉ®ÂàÜ Áü•ËØÜ„ÄÅÊé®ÁêÜÂíåËßÑÂàí Á¨¨ 7 Á´† ÈÄªËæëÊô∫ËÉΩ‰Ωì 7.1 Âü∫‰∫éÁü•ËØÜÁöÑÊô∫ËÉΩ‰Ωì 7.2 wumpus ‰∏ñÁïå 7.3 ÈÄªËæë 7.4 ÂëΩÈ¢òÈÄªËæëÔºö‰∏ÄÁßçÈùûÂ∏∏ÁÆÄÂçïÁöÑÈÄªËæë 7.4.1 ËØ≠Ê≥ï 7.4.2 ËØ≠‰πâ 7.4.3 ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁü•ËØÜÂ∫ì 7.4.4 ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊé®Êñ≠ËøáÁ®ã 7.5 ÂëΩÈ¢òÂÆöÁêÜËØÅÊòé 7.5.1 Êé®Êñ≠‰∏éËØÅÊòé 7.5.2 ÈÄöËøáÂΩíÁªìËØÅÊòé 7.5.3 ÈúçÊÅ©Â≠êÂè•‰∏éÁ°ÆÂÆöÂ≠êÂè• 7.5.4 ÂâçÂêëÈìæÊé•‰∏éÂèçÂêëÈìæÊé• 7.6 È´òÊïàÂëΩÈ¢òÊ®°ÂûãÊ£ÄÈ™å 7.6.1 ÂÆåÂ§áÁöÑÂõûÊ∫ØÁÆóÊ≥ï 7.6.2 Â±ÄÈÉ®ÊêúÁ¥¢ÁÆóÊ≥ï 7.6.3 ÈöèÊú∫ SAT ÈóÆÈ¢òÊ¶ÇËßà 7.7 Âü∫‰∫éÂëΩÈ¢òÈÄªËæëÁöÑÊô∫ËÉΩ‰Ωì 7.7.1 ‰∏ñÁïåÁöÑÂΩìÂâçÁä∂ÊÄÅ 7.7.2 Ê∑∑ÂêàÊô∫ËÉΩ‰Ωì 7.7.3 ÈÄªËæëÁä∂ÊÄÅ‰º∞ËÆ° 7.7.4 Áî®ÂëΩÈ¢òÊé®Êñ≠ËøõË°åËßÑÂàí Á¨¨ 8 Á´† ‰∏ÄÈò∂ÈÄªËæë 8.1 ÂõûÈ°æË°®Á§∫ 8.1.1 ÊÄùÊÉ≥ÁöÑËØ≠Ë®Ä 8.1.2 ÁªìÂêàÂΩ¢ÂºèËØ≠Ë®ÄÂíåËá™ÁÑ∂ËØ≠Ë®ÄÁöÑ‰ºòÁÇπ 8.2 ‰∏ÄÈò∂ÈÄªËæëÁöÑËØ≠Ê≥ïÂíåËØ≠‰πâ 8.2.1 ‰∏ÄÈò∂ÈÄªËæëÊ®°Âûã 8.2.2 Á¨¶Âè∑‰∏éËß£Èáä 8.2.3 È°π 8.2.4 ÂéüÂ≠êËØ≠Âè• 8.2.5 Â§çÂêàËØ≠Âè• 8.2.6 ÈáèËØç 8.2.7 Á≠âËØç 8.2.8 Êï∞ÊçÆÂ∫ìËØ≠‰πâ 8.3 ‰ΩøÁî®‰∏ÄÈò∂ÈÄªËæë 8.3.1 ‰∏ÄÈò∂ÈÄªËæëÁöÑÊñ≠Ë®Ä‰∏éÊü•ËØ¢ 8.3.2 ‰∫≤Â±ûÂÖ≥Á≥ªËÆ∫Âüü 8.3.3 Êï∞„ÄÅÈõÜÂêà‰∏éÂàóË°® 8.3.4 wumpus ‰∏ñÁïå 8.4 ‰∏ÄÈò∂ÈÄªËæë‰∏≠ÁöÑÁü•ËØÜÂ∑•Á®ã 8.4.1 Áü•ËØÜÂ∑•Á®ãÁöÑËøáÁ®ã 8.4.2 ÁîµÂ≠êÁîµË∑ØËÆ∫Âüü Á¨¨ 9 Á´† ‰∏ÄÈò∂ÈÄªËæë‰∏≠ÁöÑÊé®Êñ≠ 9.1 ÂëΩÈ¢òÊé®Êñ≠‰∏é‰∏ÄÈò∂Êé®Êñ≠ Á∫¶ÁÆÄ‰∏∫ÂëΩÈ¢òÊé®Êñ≠ 9.2 Âêà‰∏Ä‰∏é‰∏ÄÈò∂Êé®Êñ≠ 9.2.1 Âêà‰∏Ä 9.2.2 Â≠òÂÇ®‰∏éÊ£ÄÁ¥¢ 9.3 ÂâçÂêëÈìæÊé• 9.3.1 ‰∏ÄÈò∂Á°ÆÂÆöÂ≠êÂè• 9.3.2 ÁÆÄÂçïÁöÑÂâçÂêëÈìæÊé•ÁÆóÊ≥ï 9.3.3 È´òÊïàÂâçÂêëÈìæÊé• 9.4 ÂèçÂêëÈìæÊé• 9.4.1 ÂèçÂêëÈìæÊé•ÁÆóÊ≥ï 9.4.2 ÈÄªËæëÁºñÁ®ã 9.4.3 ÂÜó‰ΩôÊé®Êñ≠ÂíåÊó†ÈôêÂæ™ÁéØ 9.4.4 Prolog ÁöÑÊï∞ÊçÆÂ∫ìËØ≠‰πâ 9.4.5 Á∫¶ÊùüÈÄªËæëÁºñÁ®ã 9.5 ÂΩíÁªì 9.5.1 ‰∏ÄÈò∂ÈÄªËæëÁöÑÂêàÂèñËåÉÂºè 9.5.2 ÂΩíÁªìÊé®Êñ≠ËßÑÂàô 9.5.3 ËØÅÊòéËåÉ‰æã 9.5.4 ÂΩíÁªìÁöÑÂÆåÂ§áÊÄß 9.5.5 Á≠âËØç 9.5.6 ÂΩíÁªìÁ≠ñÁï• Á¨¨ 10 Á´† Áü•ËØÜË°®Á§∫ 10.1 Êú¨‰ΩìËÆ∫Â∑•Á®ã 10.2 Á±ªÂà´‰∏éÂØπË±° 10.2.1 Áâ©ÁêÜÁªÑÊàê 10.2.2 ÈáèÂ∫¶ 10.2.3 ÂØπË±°Ôºö‰∫ãÁâ©ÂíåÁâ©Ë¥® 10.3 ‰∫ã‰ª∂ 10.3.1 Êó∂Èó¥ 10.3.2 ÊµÅÂíåÂØπË±° 10.4 Á≤æÁ•ûÂØπË±°ÂíåÊ®°ÊÄÅÈÄªËæë ÂÖ∂‰ªñÊ®°ÊÄÅÈÄªËæë 10.5 Á±ªÂà´ÁöÑÊé®ÁêÜÁ≥ªÁªü 10.5.1 ËØ≠‰πâÁΩëÁªú 10.5.2 ÊèèËø∞ÈÄªËæë 10.6 Áî®Áº∫ÁúÅ‰ø°ÊÅØÊé®ÁêÜ 10.6.1 ÈôêÂÆö‰∏éÁº∫ÁúÅÈÄªËæë 10.6.2 ÁúüÂÄºÁª¥Êä§Á≥ªÁªü Á¨¨ 11 Á´† Ëá™Âä®ËßÑÂàí 11.1 ÁªèÂÖ∏ËßÑÂàíÁöÑÂÆö‰πâ 11.1.1 ËåÉ‰æãÈ¢ÜÂüüÔºöËà™Á©∫Ë¥ßÁâ©ËøêËæì 11.1.2 ËåÉ‰æãÈ¢ÜÂüüÔºöÂ§áÁî®ËΩÆËÉéÈóÆÈ¢ò 11.1.3 ËåÉ‰æãÈ¢ÜÂüüÔºöÁßØÊú®‰∏ñÁïå 11.2 ÁªèÂÖ∏ËßÑÂàíÁöÑÁÆóÊ≥ï 11.2.1 ËßÑÂàíÁöÑÂâçÂêëÁä∂ÊÄÅÁ©∫Èó¥ÊêúÁ¥¢ 11.2.2 ËßÑÂàíÁöÑÂèçÂêëÁä∂ÊÄÅÁ©∫Èó¥ÊêúÁ¥¢ 11.2.3 ‰ΩøÁî®Â∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßËßÑÂàí 11.2.4 ÂÖ∂‰ªñÁªèÂÖ∏ËßÑÂàíÊñπÊ≥ï 11.3 ËßÑÂàíÁöÑÂêØÂèëÂºèÊñπÊ≥ï 11.3.1 È¢ÜÂüüÊó†ÂÖ≥Ââ™Êûù 11.3.2 ËßÑÂàí‰∏≠ÁöÑÁä∂ÊÄÅÊäΩË±° 11.4 ÂàÜÂ±ÇËßÑÂàí 11.4.1 È´òÂ±ÇÂä®‰Ωú 11.4.2 ÊêúÁ¥¢Âü∫ÂÖÉËß£ 11.4.3 ÊêúÁ¥¢ÊäΩË±°Ëß£ 11.5 ÈùûÁ°ÆÂÆöÊÄßÂüüÁöÑËßÑÂàíÂíåË°åÂä® 11.5.1 Êó†‰º†ÊÑüÂô®ËßÑÂàí 11.5.2 Â∫îÂèòËßÑÂàí 11.5.3 Âú®Á∫øËßÑÂàí 11.6 Êó∂Èó¥„ÄÅË∞ÉÂ∫¶ÂíåËµÑÊ∫ê 11.6.1 Êó∂Èó¥Á∫¶ÊùüÂíåËµÑÊ∫êÁ∫¶ÊùüÁöÑË°®Á§∫ 11.6.2 Ëß£ÂÜ≥Ë∞ÉÂ∫¶ÈóÆÈ¢ò 11.7 ËßÑÂàíÊñπÊ≥ïÂàÜÊûê Á¨¨ÂõõÈÉ®ÂàÜ ‰∏çÁ°ÆÂÆöÁü•ËØÜÂíå‰∏çÁ°ÆÂÆöÊé®ÁêÜ Á¨¨ 12 Á´† ‰∏çÁ°ÆÂÆöÊÄßÁöÑÈáèÂåñ 12.1 ‰∏çÁ°ÆÂÆöÊÄß‰∏ãÁöÑÂä®‰Ωú 12.1.1 ‰∏çÁ°ÆÂÆöÊÄßÊ¶ÇËø∞ 12.1.2 ‰∏çÁ°ÆÂÆöÊÄß‰∏éÁêÜÊÄßÂÜ≥Á≠ñ 12.2 Âü∫Êú¨Ê¶ÇÁéáËÆ∞Âè∑ 12.2.1 Ê¶ÇÁéáÊòØÂÖ≥‰∫é‰ªÄ‰πàÁöÑ 12.2.2 Ê¶ÇÁéáÊñ≠Ë®Ä‰∏≠ÁöÑÂëΩÈ¢òËØ≠Ë®Ä 12.2.3 Ê¶ÇÁéáÂÖ¨ÁêÜÂèäÂÖ∂ÂêàÁêÜÊÄß 12.3 ‰ΩøÁî®ÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉËøõË°åÊé®Êñ≠ 12.4 Áã¨Á´ãÊÄß 12.5 Ë¥ùÂè∂ÊñØÊ≥ïÂàôÂèäÂÖ∂Â∫îÁî® 12.5.1 Â∫îÁî®Ë¥ùÂè∂ÊñØÊ≥ïÂàôÔºöÁÆÄÂçïÂÆû‰æã 12.5.2 Â∫îÁî®Ë¥ùÂè∂ÊñØÊ≥ïÂàôÔºöÂêàÂπ∂ËØÅÊçÆ 12.6 Êú¥Á¥†Ë¥ùÂè∂ÊñØÊ®°Âûã ‰ΩøÁî®Êú¥Á¥†Ë¥ùÂè∂ÊñØËøõË°åÊñáÊú¨ÂàÜÁ±ª 12.7 ÈáçÊ∏∏ wumpus ‰∏ñÁïå Á¨¨ 13 Á´† Ê¶ÇÁéáÊé®ÁêÜ 13.1 ‰∏çÁ°ÆÂÆöÂüüÁöÑÁü•ËØÜË°®Á§∫ 13.2 Ë¥ùÂè∂ÊñØÁΩëÁªúÁöÑËØ≠‰πâ 13.2.1 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂÖ≥Á≥ª 13.2.2 Êù°‰ª∂ÂàÜÂ∏ÉÁöÑÈ´òÊïàË°®Á§∫ 13.2.3 ËøûÁª≠ÂèòÈáèÁöÑË¥ùÂè∂ÊñØÁΩëÁªú 13.2.4 Ê°à‰æãÁ†îÁ©∂ÔºöÊ±ΩËΩ¶‰øùÈô© 13.3 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÁ≤æÁ°ÆÊé®Êñ≠ 13.3.1 ÈÄöËøáÊûö‰∏æËøõË°åÊé®Êñ≠ 13.3.2 ÂèòÈáèÊ∂àÂÖÉÁÆóÊ≥ï 13.3.3 Á≤æÁ°ÆÊé®Êñ≠ÁöÑÂ§çÊùÇÊÄß 13.3.4 ËÅöÁ±ªÁÆóÊ≥ï 13.4 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑËøë‰ººÊé®ÁêÜ 13.4.1 Áõ¥Êé•ÈááÊ†∑ÊñπÊ≥ï 13.4.2 ÈÄöËøáÈ©¨Â∞îÂèØÂ§´ÈìæÊ®°ÊãüËøõË°åÊé®Êñ≠ 13.4.3 ÁºñËØëËøë‰ººÊé®Êñ≠ 13.5 Âõ†ÊûúÁΩëÁªú 13.5.1 Ë°®Á§∫Âä®‰ΩúÔºödo Êìç‰Ωú 13.5.2 ÂêéÈó®ÂáÜÂàô Á¨¨ 14 Á´† Êó∂Èó¥‰∏äÁöÑÊ¶ÇÁéáÊé®ÁêÜ 14.1 Êó∂Èó¥‰∏é‰∏çÁ°ÆÂÆöÊÄß 14.1.1 Áä∂ÊÄÅ‰∏éËßÇÊµã 14.1.2 ËΩ¨ÁßªÊ®°Âûã‰∏é‰º†ÊÑüÂô®Ê®°Âûã 14.2 Êó∂Â∫èÊ®°Âûã‰∏≠ÁöÑÊé®Êñ≠ 14.2.1 Êª§Ê≥¢‰∏éÈ¢ÑÊµã 14.2.2 Âπ≥Êªë 14.2.3 ÂØªÊâæÊúÄÂèØËÉΩÂ∫èÂàó 14.3 ÈöêÈ©¨Â∞îÂèØÂ§´Ê®°Âûã 14.3.1 ÁÆÄÂåñÁü©ÈòµÁÆóÊ≥ï 14.3.2 ÈöêÈ©¨Â∞îÂèØÂ§´Ê®°ÂûãÁ§∫‰æãÔºöÂÆö‰Ωç 14.4 Âç°Â∞îÊõºÊª§Ê≥¢Âô® 14.4.1 Êõ¥Êñ∞È´òÊñØÂàÜÂ∏É 14.4.2 ÁÆÄÂçïÁöÑ‰∏ÄÁª¥Á§∫‰æã 14.4.3 ‰∏ÄËà¨ÊÉÖÂÜµ 14.4.4 Âç°Â∞îÊõºÊª§Ê≥¢ÁöÑÈÄÇÁî®ËåÉÂõ¥ 14.5 Âä®ÊÄÅË¥ùÂè∂ÊñØÁΩëÁªú 14.5.1 ÊûÑÂª∫Âä®ÊÄÅË¥ùÂè∂ÊñØÁΩëÁªú 14.5.2 Âä®ÊÄÅË¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÁ≤æÁ°ÆÊé®Êñ≠ 14.5.3 Âä®ÊÄÅË¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑËøë‰ººÊé®Êñ≠ Á¨¨ 15 Á´† Ê¶ÇÁéáÁºñÁ®ã 15.1 ÂÖ≥Á≥ªÊ¶ÇÁéáÊ®°Âûã 15.1.1 ËØ≠Ê≥ï‰∏éËØ≠‰πâ 15.1.2 ÂÆû‰æãÔºöËØÑÂÆöÁé©ÂÆ∂ÁöÑÊäÄËÉΩÁ≠âÁ∫ß 15.1.3 ÂÖ≥Á≥ªÊ¶ÇÁéáÊ®°Âûã‰∏≠ÁöÑÊé®Êñ≠ 15.2 ÂºÄÂÆáÂÆôÊ¶ÇÁéáÊ®°Âûã 15.2.1 ËØ≠‰πâ‰∏éËØ≠Ê≥ï 15.2.2 ÂºÄÂÆáÂÆôÊ¶ÇÁéáÊ®°ÂûãÁöÑÊé®Êñ≠ 15.2.3 Á§∫‰æã 15.3 ËøΩË∏™Â§çÊùÇ‰∏ñÁïå 15.3.1 Á§∫‰æãÔºöÂ§öÁõÆÊ†áË∑üË∏™ 15.3.2 Á§∫‰æãÔºö‰∫§ÈÄöÁõëÊéß 15.4 ‰Ωú‰∏∫Ê¶ÇÁéáÊ®°ÂûãÁöÑÁ®ãÂ∫è 15.4.1 Á§∫‰æãÔºöÊñáÊú¨ÈòÖËØª 15.4.2 ËØ≠Ê≥ï‰∏éËØ≠‰πâ 15.4.3 Êé®Êñ≠ÁªìÊûú 15.4.4 ÁªìÂêàÈ©¨Â∞îÂèØÂ§´Ê®°ÂûãÊîπËøõÁîüÊàêÁ®ãÂ∫è 15.4.5 ÁîüÊàêÁ®ãÂ∫èÁöÑÊé®Êñ≠ Á¨¨ 16 Á´† ÂÅöÁÆÄÂçïÂÜ≥Á≠ñ 16.1 Âú®‰∏çÁ°ÆÂÆöÊÄß‰∏ãÁªìÂêà‰ø°Âøµ‰∏éÊÑøÊúõ 16.2 ÊïàÁî®ÁêÜËÆ∫Âü∫Á°Ä 16.2.1 ÁêÜÊÄßÂÅèÂ•ΩÁöÑÁ∫¶Êùü 16.2.2 ÁêÜÊÄßÂÅèÂ•ΩÂØºËá¥ÊïàÁî® 16.3 ÊïàÁî®ÂáΩÊï∞ 16.3.1 ÊïàÁî®ËØÑ‰º∞ÂíåÊïàÁî®Â∞∫Â∫¶ 16.3.2 ÈáëÈí±ÁöÑÊïàÁî® 16.3.3 ÊúüÊúõÊïàÁî®‰∏éÂÜ≥Á≠ñÂêéÂ§±Êúõ 16.3.4 ‰∫∫Á±ªÂà§Êñ≠‰∏éÈùûÁêÜÊÄß 16.4 Â§öÂ±ûÊÄßÊïàÁî®ÂáΩÊï∞ 16.4.1 Âç†‰ºò 16.4.2 ÂÅèÂ•ΩÁªìÊûÑ‰∏éÂ§öÂ±ûÊÄßÊïàÁî® 16.5 ÂÜ≥Á≠ñÁΩëÁªú 16.5.1 ‰ΩøÁî®ÂÜ≥Á≠ñÁΩëÁªúË°®Á§∫ÂÜ≥Á≠ñÈóÆÈ¢ò 16.5.2 ËØÑ‰º∞ÂÜ≥Á≠ñÁΩëÁªú 16.6 ‰ø°ÊÅØ‰ª∑ÂÄº 16.6.1 ÁÆÄÂçïÁ§∫‰æã 16.6.2 ÂÆåÁæé‰ø°ÊÅØÁöÑ‰∏ÄËà¨ÂÖ¨Âºè 16.6.3 ‰ª∑ÂÄº‰ø°ÊÅØÁöÑÊÄßË¥® 16.6.4 ‰ø°ÊÅØÊî∂ÈõÜÊô∫ËÉΩ‰ΩìÁöÑÂÆûÁé∞ 16.6.5 ÈùûÁü≠ËßÜ‰ø°ÊÅØÊî∂ÈõÜ 16.6.6 ÊïèÊÑüÊÄßÂàÜÊûê‰∏éÂÅ•Â£ÆÂÜ≥Á≠ñ 16.7 Êú™Áü•ÂÅèÂ•Ω 16.7.1 ‰∏™‰∫∫ÂÅèÂ•ΩÁöÑ‰∏çÁ°ÆÂÆöÊÄß 16.7.2 È°∫‰ªé‰∫∫Á±ª Á¨¨ 17 Á´† ÂÅöÂ§çÊùÇÂÜ≥Á≠ñ 17.1 Â∫èË¥ØÂÜ≥Á≠ñÈóÆÈ¢ò 17.1.1 Êó∂Èó¥‰∏äÁöÑÊïàÁî® 17.1.2 ÊúÄ‰ºòÁ≠ñÁï•‰∏éÁä∂ÊÄÅÊïàÁî® 17.1.3 Â•ñÂä±ËßÑÊ®° 17.1.4 Ë°®Á§∫ MDP 17.2 MDP ÁöÑÁÆóÊ≥ï 17.2.1 ‰ª∑ÂÄºËø≠‰ª£ 17.2.2 Á≠ñÁï•Ëø≠‰ª£ 17.2.3 Á∫øÊÄßËßÑÂàí 17.2.4 MDP ÁöÑÂú®Á∫øÁÆóÊ≥ï 17.3 ËÄÅËôéÊú∫ÈóÆÈ¢ò 17.3.1 ËÆ°ÁÆóÂü∫Âª∑ÊñØÊåáÊï∞ 17.3.2 ‰ºØÂä™Âà©ËÄÅËôéÊú∫ 17.3.3 Ëøë‰ººÊúÄ‰ºòËÄÅËôéÊú∫Á≠ñÁï• 17.3.4 ‰∏çÂèØÁ¥¢ÂºïÂèò‰Ωì 17.4 ÈÉ®ÂàÜÂèØËßÇÊµã MDP POMDP ÁöÑÂÆö‰πâ 17.5 Ê±ÇËß£ POMDP ÁöÑÁÆóÊ≥ï 17.5.1 POMDP ÁöÑ‰ª∑ÂÄºËø≠‰ª£ 17.5.2 POMDP ÁöÑÂú®Á∫øÁÆóÊ≥ï Á¨¨ 18 Á´† Â§öÊô∫ËÉΩ‰ΩìÂÜ≥Á≠ñ 18.1 Â§öÊô∫ËÉΩ‰ΩìÁéØÂ¢ÉÁöÑÁâπÊÄß 18.1.1 Âçï‰∏™ÂÜ≥Á≠ñËÄÖ 18.1.2 Â§öÂÜ≥Á≠ñËÄÖ 18.1.3 Â§öÊô∫ËÉΩ‰ΩìËßÑÂàí 18.1.4 Â§öÊô∫ËÉΩ‰ΩìËßÑÂàíÔºöÂêà‰Ωú‰∏éÂçèË∞É 18.2 ÈùûÂêà‰ΩúÂçöÂºàËÆ∫ 18.2.1 ÂçïÊ≠•ÂçöÂºàÔºöÊ≠£ÂàôÂΩ¢ÂºèÂçöÂºà 18.2.2 Á§æ‰ºöÁ¶èÂà© 18.2.3 ÈáçÂ§çÂçöÂºà 18.2.4 Â∫èË¥ØÂçöÂºàÔºöÊâ©Â±ïÂΩ¢Âºè 18.2.5 ‰∏çÁ°ÆÂÆöÊî∂Áõä‰∏éËæÖÂä©ÂçöÂºà 18.3 Âêà‰ΩúÂçöÂºàËÆ∫ 18.3.1 ËÅîÁõüÁªìÊûÑ‰∏éÁªìÊûú 18.3.2 Âêà‰ΩúÂçöÂºà‰∏≠ÁöÑÁ≠ñÁï• 18.3.3 Âêà‰ΩúÂçöÂºà‰∏≠ÁöÑËÆ°ÁÆó 18.4 ÂÅöÈõÜ‰ΩìÂÜ≥Á≠ñ 18.4.1 Âú®ÂêàÂêåÁΩë‰∏≠ÂàÜÈÖç‰ªªÂä° 18.4.2 ÈÄöËøáÊãçÂçñÂàÜÈÖçÁ®ÄÁº∫ËµÑÊ∫ê 18.4.3 ÊäïÁ•® 18.4.4 ËÆÆ‰ª∑ Á¨¨‰∫îÈÉ®ÂàÜ Êú∫Âô®Â≠¶‰π† Á¨¨ 19 Á´† Ê†∑‰æãÂ≠¶‰π† 19.1 Â≠¶‰π†ÁöÑÂΩ¢Âºè 19.2 ÁõëÁù£Â≠¶‰π† ÈóÆÈ¢òÁ§∫‰æãÔºöÈ§êÂéÖÁ≠âÂæÖÈóÆÈ¢ò 19.3 ÂÜ≥Á≠ñÊ†ëÂ≠¶‰π† 19.3.1 ÂÜ≥Á≠ñÊ†ëÁöÑË°®ËææËÉΩÂäõ 19.3.2 ‰ªéÊ†∑‰æã‰∏≠Â≠¶‰π†ÂÜ≥Á≠ñÊ†ë 19.3.3 ÈÄâÊã©ÊµãËØïÂ±ûÊÄß 19.3.4 Ê≥õÂåñ‰∏éËøáÊãüÂêà 19.3.5 ÊãìÂ±ïÂÜ≥Á≠ñÊ†ëÁöÑÈÄÇÁî®ËåÉÂõ¥ 19.4 Ê®°ÂûãÈÄâÊã©‰∏éÊ®°Âûã‰ºòÂåñ 19.4.1 Ê®°ÂûãÈÄâÊã© 19.4.2 ‰ªéÈîôËØØÁéáÂà∞ÊçüÂ§±ÂáΩÊï∞ 19.4.3 Ê≠£ÂàôÂåñ 19.4.4 Ë∂ÖÂèÇÊï∞Ë∞ÉÊï¥ 19.5 Â≠¶‰π†ÁêÜËÆ∫ PAC Â≠¶‰π†Á§∫‰æãÔºöÂ≠¶‰π†ÂÜ≥Á≠ñÂàóË°® 19.6 Á∫øÊÄßÂõûÂΩí‰∏éÂàÜÁ±ª 19.6.1 ÂçïÂèòÈáèÁ∫øÊÄßÂõûÂΩí 19.6.2 Ê¢ØÂ∫¶‰∏ãÈôç 19.6.3 Â§öÂèòÈáèÁ∫øÊÄßÂõûÂΩí 19.6.4 Â∏¶ÊúâÁ°¨ÈòàÂÄºÁöÑÁ∫øÊÄßÂàÜÁ±ªÂô® 19.6.5 Âü∫‰∫éÈÄªËæëÊñØË∞õÂõûÂΩíÁöÑÁ∫øÊÄßÂàÜÁ±ªÂô® 19.7 ÈùûÂèÇÊï∞Ê®°Âûã 19.7.1 ÊúÄËøëÈÇªÊ®°Âûã 19.7.2 ‰ΩøÁî® k-d Ê†ëÂØªÊâæÊúÄËøëÈÇª 19.7.3 Â±ÄÈÉ®ÊïèÊÑüÂìàÂ∏å 19.7.4 ÈùûÂèÇÊï∞ÂõûÂΩí 19.7.5 ÊîØÊåÅÂêëÈáèÊú∫ 19.7.6 Ê†∏ÊäÄÂ∑ß 19.8 ÈõÜÊàêÂ≠¶‰π† 19.8.1 Ëá™Âä©ËÅöÂêàÊ≥ï 19.8.2 ÈöèÊú∫Ê£ÆÊûóÊ≥ï 19.8.3 Â†ÜÂè†Ê≥ï 19.8.4 Ëá™ÈÄÇÂ∫îÊèêÂçáÊ≥ï 19.8.5 Ê¢ØÂ∫¶ÊèêÂçáÊ≥ï 19.8.6 Âú®Á∫øÂ≠¶‰π† 19.9 ÂºÄÂèëÊú∫Âô®Â≠¶‰π†Á≥ªÁªü 19.9.1 ÈóÆÈ¢òÂΩ¢ÂºèÂåñ 19.9.2 Êï∞ÊçÆÊî∂ÈõÜ„ÄÅËØÑ‰º∞ÂíåÁÆ°ÁêÜ 19.9.3 Ê®°ÂûãÈÄâÊã©‰∏éËÆ≠ÁªÉ 19.9.4 ‰ø°‰ªª„ÄÅÂèØËß£ÈáäÊÄß„ÄÅÂèØËØ¥ÊòéÊÄß 19.9.5 Êìç‰Ωú„ÄÅÁõëÊéßÂíåÁª¥Êä§ Á¨¨ 20 Á´† Ê¶ÇÁéáÊ®°ÂûãÂ≠¶‰π† 20.1 ÁªüËÆ°Â≠¶‰π† 20.2 ÂÆåÂÖ®Êï∞ÊçÆÂ≠¶‰π† 20.2.1 ÊúÄÂ§ß‰ººÁÑ∂ÂèÇÊï∞Â≠¶‰π†ÔºöÁ¶ªÊï£Ê®°Âûã 20.2.2 Êú¥Á¥†Ë¥ùÂè∂ÊñØÊ®°Âûã 20.2.3 ÁîüÊàêÊ®°ÂûãÂíåÂà§Âà´Ê®°Âûã 20.2.4 ÊúÄÂ§ß‰ººÁÑ∂ÂèÇÊï∞Â≠¶‰π†ÔºöËøûÁª≠Ê®°Âûã 20.2.5 Ë¥ùÂè∂ÊñØÂèÇÊï∞Â≠¶‰π† 20.2.6 Ë¥ùÂè∂ÊñØÁ∫øÊÄßÂõûÂΩí 20.2.7 Ë¥ùÂè∂ÊñØÁΩëÁªúÁªìÊûÑÂ≠¶‰π† 20.2.8 ÈùûÂèÇÊï∞Ê®°ÂûãÂØÜÂ∫¶‰º∞ËÆ° 20.3 ÈöêÂèòÈáèÂ≠¶‰π†ÔºöEM ÁÆóÊ≥ï 20.3.1 Êó†ÁõëÁù£ËÅöÁ±ªÔºöÂ≠¶‰π†Ê∑∑ÂêàÈ´òÊñØ 20.3.2 Â≠¶‰π†Â∏¶ÈöêÂèòÈáèÁöÑË¥ùÂè∂ÊñØÁΩëÁªúÂèÇÊï∞ÂÄº 20.3.3 Â≠¶‰π†ÈöêÈ©¨Â∞îÂèØÂ§´Ê®°Âûã 20.3.4 EM ÁÆóÊ≥ïÁöÑ‰∏ÄËà¨ÂΩ¢Âºè 20.3.5 Â≠¶‰π†Â∏¶ÈöêÂèòÈáèÁöÑË¥ùÂè∂ÊñØÁΩëÁªúÁªìÊûÑ Á¨¨ 21 Á´† Ê∑±Â∫¶Â≠¶‰π† 21.1 ÁÆÄÂçïÂâçÈ¶àÁΩëÁªú 21.1.1 ÁΩëÁªú‰Ωú‰∏∫Â§çÊùÇÂáΩÊï∞ 21.1.2 Ê¢ØÂ∫¶‰∏éÂ≠¶‰π† 21.2 Ê∑±Â∫¶Â≠¶‰π†ÁöÑËÆ°ÁÆóÂõæ 21.2.1 ËæìÂÖ•ÁºñÁ†Å 21.2.2 ËæìÂá∫Â±Ç‰∏éÊçüÂ§±ÂáΩÊï∞ 21.2.3 ÈöêËóèÂ±Ç 21.3 Âç∑ÁßØÁΩëÁªú 21.3.1 Ê±†Âåñ‰∏é‰∏ãÈááÊ†∑ 21.3.2 Âç∑ÁßØÁ•ûÁªèÁΩëÁªúÁöÑÂº†ÈáèËøêÁÆó 21.3.3 ÊÆãÂ∑ÆÁΩëÁªú 21.4 Â≠¶‰π†ÁÆóÊ≥ï 21.4.1 ËÆ°ÁÆóÂõæ‰∏≠ÁöÑÊ¢ØÂ∫¶ËÆ°ÁÆó 21.4.2 ÊâπÈáèÂΩí‰∏ÄÂåñ 21.5 Ê≥õÂåñ 21.5.1 ÈÄâÊã©Ê≠£Á°ÆÁöÑÁΩëÁªúÊû∂ÊûÑ 21.5.2 Á•ûÁªèÊû∂ÊûÑÊêúÁ¥¢ 21.5.3 ÊùÉÈáçË°∞Âáè 21.5.4 ÊöÇÈÄÄÊ≥ï 21.6 Âæ™ÁéØÁ•ûÁªèÁΩëÁªú 21.6.1 ËÆ≠ÁªÉÂü∫Êú¨ÁöÑÂæ™ÁéØÁ•ûÁªèÁΩëÁªú 21.6.2 ÈïøÁü≠ÊúüËÆ∞ÂøÜ RNN 21.7 Êó†ÁõëÁù£Â≠¶‰π†‰∏éËøÅÁßªÂ≠¶‰π† 21.7.1 Êó†ÁõëÁù£Â≠¶‰π† 21.7.2 ËøÅÁßªÂ≠¶‰π†ÂíåÂ§ö‰ªªÂä°Â≠¶‰π† 21.8 Â∫îÁî® 21.8.1 ËßÜËßâ 21.8.2 Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ 21.8.3 Âº∫ÂåñÂ≠¶‰π† Á¨¨ 22 Á´† Âº∫ÂåñÂ≠¶‰π† 22.1 ‰ªéÂ•ñÂä±‰∏≠Â≠¶‰π† 22.2 Ë¢´Âä®Âº∫ÂåñÂ≠¶‰π† 22.2.1 Áõ¥Êé•ÊïàÁî®‰º∞ËÆ° 22.2.2 Ëá™ÈÄÇÂ∫îÂä®ÊÄÅËßÑÂàí 22.2.3 Êó∂Â∫èÂ∑ÆÂàÜÂ≠¶‰π† 22.3 ‰∏ªÂä®Âº∫ÂåñÂ≠¶‰π† 22.3.1 Êé¢Á¥¢ 22.3.2 ÂÆâÂÖ®Êé¢Á¥¢ 22.3.3 Êó∂Â∫èÂ∑ÆÂàÜ Q Â≠¶‰π† 22.4 Âº∫ÂåñÂ≠¶‰π†‰∏≠ÁöÑÊ≥õÂåñ 22.4.1 Ëøë‰ººÁõ¥Êé•ÊïàÁî®‰º∞ËÆ° 22.4.2 Ëøë‰ººÊó∂Â∫èÂ∑ÆÂàÜÂ≠¶‰π† 22.4.3 Ê∑±Â∫¶Âº∫ÂåñÂ≠¶‰π† 22.4.4 Â•ñÂä±ÂáΩÊï∞ËÆæËÆ° 22.4.5 ÂàÜÂ±ÇÂº∫ÂåñÂ≠¶‰π† 22.5 Á≠ñÁï•ÊêúÁ¥¢ 22.6 Â≠¶ÂæíÂ≠¶‰π†‰∏éÈÄÜÂº∫ÂåñÂ≠¶‰π† 22.7 Âº∫ÂåñÂ≠¶‰π†ÁöÑÂ∫îÁî® 22.7.1 Âú®ÁîµÂ≠êÊ∏∏Êàè‰∏≠ÁöÑÂ∫îÁî® 22.7.2 Âú®Êú∫Âô®‰∫∫ÊéßÂà∂‰∏≠ÁöÑÂ∫îÁî® Á¨¨ÂÖ≠ÈÉ®ÂàÜ Ê≤üÈÄö„ÄÅÊÑüÁü•ÂíåË°åÂä® Á¨¨ 23 Á´† Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ 23.1 ËØ≠Ë®ÄÊ®°Âûã 23.1.1 ËØçË¢ãÊ®°Âûã 23.1.2 n ÂÖÉÂçïËØçÊ®°Âûã 23.1.3 ÂÖ∂‰ªñ n ÂÖÉÊ®°Âûã 23.1.4 n ÂÖÉÊ®°ÂûãÁöÑÂπ≥Êªë 23.1.5 ÂçïËØçË°®Á§∫ 23.1.6 ËØçÊÄßÊ†áÊ≥® 23.1.7 ËØ≠Ë®ÄÊ®°ÂûãÁöÑÊØîËæÉ 23.2 ÊñáÊ≥ï E0 ÁöÑËØçÂÖ∏ 23.3 Âè•Ê≥ïÂàÜÊûê 23.3.1 ‰æùÂ≠òÂàÜÊûê 23.3.2 ‰ªéÊ†∑‰æã‰∏≠Â≠¶‰π†Âè•Ê≥ïÂàÜÊûêÂô® 23.4 Êâ©Â±ïÊñáÊ≥ï 23.4.1 ËØ≠‰πâËß£Èáä 23.4.2 Â≠¶‰π†ËØ≠‰πâÊñáÊ≥ï 23.5 ÁúüÂÆûËá™ÁÑ∂ËØ≠Ë®ÄÁöÑÂ§çÊùÇÊÄß 23.6 Ëá™ÁÑ∂ËØ≠Ë®Ä‰ªªÂä° Á¨¨ 24 Á´† Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰∏≠ÁöÑÊ∑±Â∫¶Â≠¶‰π† 24.1 ËØçÂµåÂÖ• 24.2 Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰∏≠ÁöÑÂæ™ÁéØÁ•ûÁªèÁΩëÁªú 24.2.1 ‰ΩøÁî®Âæ™ÁéØÁ•ûÁªèÁΩëÁªúÁöÑËØ≠Ë®ÄÊ®°Âûã 24.2.2 Áî®Âæ™ÁéØÁ•ûÁªèÁΩëÁªúËøõË°åÂàÜÁ±ª 24.2.3 Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰ªªÂä°‰∏≠ÁöÑ LSTM Ê®°Âûã 24.3 Â∫èÂàóÂà∞Â∫èÂàóÊ®°Âûã 24.3.1 Ê≥®ÊÑèÂäõ 24.3.2 Ëß£Á†Å 24.4 Transformer Êû∂ÊûÑ 24.4.1 Ëá™Ê≥®ÊÑèÂäõ 24.4.2 ‰ªéËá™Ê≥®ÊÑèÂäõÂà∞ Transformer 24.5 È¢ÑËÆ≠ÁªÉÂíåËøÅÁßªÂ≠¶‰π† 24.5.1 È¢ÑËÆ≠ÁªÉËØçÂµåÂÖ• 24.5.2 È¢ÑËÆ≠ÁªÉ‰∏ä‰∏ãÊñáË°®Á§∫ 24.5.3 Êé©Á†ÅËØ≠Ë®ÄÊ®°Âûã 24.6 ÊúÄÈ´òÊ∞¥Âπ≥ÔºàSOTAÔºâ Á¨¨ 25 Á´† ËÆ°ÁÆóÊú∫ËßÜËßâ 25.1 ÂºïË®Ä 25.2 ÂõæÂÉèÂΩ¢Êàê 25.2.1 Êó†ÈÄèÈïúÊàêÂÉèÔºöÈíàÂ≠îÁÖßÁõ∏Êú∫ 25.2.2 ÈÄèÈïúÁ≥ªÁªü 25.2.3 Áº©ÊîæÊ≠£‰∫§ÊäïÂΩ± 25.2.4 ÂÖâÁ∫ø‰∏éÊòéÊöó 25.2.5 È¢úËâ≤ 25.3 ÁÆÄÂçïÂõæÂÉèÁâπÂæÅ 25.3.1 ËæπÁºò 25.3.2 Á∫πÁêÜ 25.3.3 ÂÖâÊµÅ 25.3.4 Ëá™ÁÑ∂ÂõæÂÉèÂàÜÂâ≤ 25.4 ÂõæÂÉèÂàÜÁ±ª 25.4.1 Âü∫‰∫éÂç∑ÁßØÁ•ûÁªèÁΩëÁªúÁöÑÂõæÂÉèÂàÜÁ±ª 25.4.2 Âç∑ÁßØÁ•ûÁªèÁΩëÁªúÂØπÂõæÂÉèÂàÜÁ±ªÈóÆÈ¢òÊúâÊïàÁöÑÂéüÂõ† 25.5 Áâ©‰ΩìÊ£ÄÊµã 25.6 ‰∏âÁª¥‰∏ñÁïå 25.6.1 Â§ö‰∏™ËßÜÂõæ‰∏ãÁöÑ‰∏âÁª¥Á∫øÁ¥¢ 25.6.2 ÂèåÁõÆÁ´ã‰ΩìËßÜËßâ 25.6.3 ÁßªÂä®ÊëÑÂÉèÊú∫ÁªôÂá∫ÁöÑ‰∏âÁª¥Á∫øÁ¥¢ 25.6.4 Âçï‰∏™ËßÜÂõæÁöÑ‰∏âÁª¥Á∫øÁ¥¢ 25.7 ËÆ°ÁÆóÊú∫ËßÜËßâÁöÑÂ∫îÁî® 25.7.1 ÁêÜËß£‰∫∫Á±ªË°å‰∏∫ 25.7.2 ÂåπÈÖçÂõæÁâá‰∏éÊñáÂ≠ó 25.7.3 Â§öËßÜÂõæÈáçÂª∫ 25.7.4 ÂçïËßÜÂõæ‰∏≠ÁöÑÂá†‰Ωï 25.7.5 ÁîüÊàêÂõæÁâá 25.7.6 Âà©Áî®ËßÜËßâÊéßÂà∂ËøêÂä® Á¨¨ 26 Á´† Êú∫Âô®‰∫∫Â≠¶ 26.1 Êú∫Âô®‰∫∫ 26.2 Êú∫Âô®‰∫∫Á°¨‰ª∂ 26.2.1 Êú∫Âô®‰∫∫ÁöÑÁ°¨‰ª∂Â±ÇÈù¢ÂàÜÁ±ª 26.2.2 ÊÑüÁü•‰∏ñÁïå 26.2.3 ‰∫ßÁîüËøêÂä® 26.3 Êú∫Âô®‰∫∫Â≠¶Ëß£ÂÜ≥Âì™‰∫õÈóÆÈ¢ò 26.4 Êú∫Âô®‰∫∫ÊÑüÁü• 26.4.1 ÂÆö‰Ωç‰∏éÂú∞ÂõæÊûÑÂª∫ 26.4.2 ÂÖ∂‰ªñÊÑüÁü•Á±ªÂûã 26.4.3 Êú∫Âô®‰∫∫ÊÑüÁü•‰∏≠ÁöÑÁõëÁù£Â≠¶‰π†‰∏éÊó†ÁõëÁù£Â≠¶‰π† 26.5 ËßÑÂàí‰∏éÊéßÂà∂ 26.5.1 ÊûÑÂΩ¢Á©∫Èó¥ 26.5.2 ËøêÂä®ËßÑÂàí 26.5.3 ËΩ®ËøπË∑üË∏™ÊéßÂà∂ 26.5.4 ÊúÄ‰ºòÊéßÂà∂ 26.6 ËßÑÂàí‰∏çÁ°ÆÂÆöÁöÑËøêÂä® 26.7 Êú∫Âô®‰∫∫Â≠¶‰∏≠ÁöÑÂº∫ÂåñÂ≠¶‰π† 26.7.1 Âà©Áî®Ê®°Âûã 26.7.2 Âà©Áî®ÂÖ∂‰ªñ‰ø°ÊÅØ 26.8 ‰∫∫Á±ª‰∏éÊú∫Âô®‰∫∫ 26.8.1 ÂçèË∞É 26.8.2 Â≠¶‰π†ÂÅö‰∫∫Á±ªÊúüÊúõÁöÑ‰∫ãÊÉÖ 26.9 ÂÖ∂‰ªñÊú∫Âô®‰∫∫Ê°ÜÊû∂ 26.9.1 ÂèçÂ∫îÂºèÊéßÂà∂Âô® 26.9.2 ÂåÖÂÆπÊû∂ÊûÑ 26.10 Â∫îÁî®È¢ÜÂüü Á¨¨‰∏ÉÈÉ®ÂàÜ ÊÄªÁªì Á¨¨ 27 Á´† ‰∫∫Â∑•Êô∫ËÉΩÁöÑÂì≤Â≠¶„ÄÅ‰º¶ÁêÜÂíåÂÆâÂÖ®ÊÄß 27.1 ‰∫∫Â∑•Êô∫ËÉΩÁöÑÊûÅÈôê 27.1.1 Áî±ÈùûÂΩ¢ÂºèÂåñÂæóÂá∫ÁöÑËÆ∫ÊçÆ 27.1.2 Áî±ËÉΩÂäõÁº∫Èô∑ÂæóÂá∫ÁöÑËÆ∫ÊçÆ 27.1.3 Êï∞Â≠¶ÂºÇËÆÆ 27.1.4 Ë°°Èáè‰∫∫Â∑•Êô∫ËÉΩ 27.2 Êú∫Âô®ËÉΩÁúüÊ≠£Âú∞ÊÄùËÄÉÂêó 27.2.1 ‰∏≠ÊñáÊàøÈó¥ 27.2.2 ÊÑèËØÜ‰∏éÊÑüË¥® 27.3 ‰∫∫Â∑•Êô∫ËÉΩÁöÑ‰º¶ÁêÜ 27.3.1 Ëá¥ÂëΩÊÄßËá™‰∏ªÊ≠¶Âô® 27.3.2 ÁõëÊéß„ÄÅÂÆâÂÖ®‰∏éÈöêÁßÅ 27.3.3 ÂÖ¨Âπ≥‰∏éÂÅèËßÅ 27.3.4 ‰ø°‰ªª‰∏éÈÄèÊòéÂ∫¶ 27.3.5 Â∑•‰ΩúÂâçÊôØ 27.3.6 Êú∫Âô®‰∫∫ÊùÉÂà© 27.3.7 ‰∫∫Â∑•Êô∫ËÉΩÂÆâÂÖ®ÊÄß Á¨¨ 28 Á´† ‰∫∫Â∑•Êô∫ËÉΩÁöÑÊú™Êù• 28.1 ‰∫∫Â∑•Êô∫ËÉΩÁªÑ‰ª∂ 28.2 ‰∫∫Â∑•Êô∫ËÉΩÊû∂ÊûÑ ÈôÑÂΩï A Êï∞Â≠¶ËÉåÊôØÁü•ËØÜ A.1 Â§çÊùÇÊÄßÂàÜÊûêÂíå$O()$ËÆ∞Âè∑ A.1.1 Ê∏êËøëÂàÜÊûê A.1.2 NP Âõ∞ÈöæÂíåÂõ∫ÊúâÁöÑÈöæÈ¢ò A.2 ÂêëÈáèÔºåÁü©ÈòµÂíåÁ∫øÊÄß‰ª£Êï∞ A.3 Ê¶ÇÁéáÂàÜÂ∏É ËØªËÄÖÊúçÂä° "},"Learn/LearnAIMA/Ch12.html":{"url":"Learn/LearnAIMA/Ch12.html","title":"Ch12","keywords":"","body":"Ch12 Êú¨Á´†Ë°®ÊòéÊ¶ÇÁéáËÆ∫ÊòØ‰∏çÁ°ÆÂÆöÊé®ÁêÜÁöÑÂêàÈÄÇÂü∫Á°ÄÔºåÂπ∂ÁÆÄË¶Å‰ªãÁªç‰∫ÜÂÆÉÁöÑÂ∫îÁî®„ÄÇ ‰∏çÁ°ÆÂÆöÊÄßÁöÑ‰∫ßÁîüÊòØÁî±‰∫éÊÉ∞ÊÄßÂíåÊó†Áü•„ÄÇÂú®Â§çÊùÇÁöÑ„ÄÅÈùûÁ°ÆÂÆöÊÄßÁöÑÊàñÈÉ®ÂàÜÂèØËßÇÊµãÁöÑÁéØÂ¢É‰∏≠Ôºå‰∏çÁ°ÆÂÆöÊÄßÊòØ‰∏çÂèØÈÅøÂÖçÁöÑ„ÄÇ Ê¶ÇÁéáË°®Ëææ‰∫ÜÊô∫ËÉΩ‰ΩìÊó†Ê≥ïÂØπ‰∏Ä‰∏™ËØ≠Âè•ÁöÑÁúüÂÄºÂÅöÂá∫ÊòéÁ°ÆÁöÑÂà§Êñ≠„ÄÇÊ¶ÇÁéáÊ¶ÇÊã¨‰∫ÜÊô∫ËÉΩ‰ΩìÂØπ‰∫éËØÅÊçÆÁöÑ‰ø°Âøµ„ÄÇ ÂÜ≥Á≠ñËÆ∫ÁªìÂêà‰∫ÜÊô∫ËÉΩ‰ΩìÁöÑ‰ø°ÂøµÂíåÊ¨≤ÊúõÔºåÂ∞ÜÊúÄÂ§ßÊúüÊúõÊïàÁî®ÁöÑÂä®‰ΩúÂÆö‰πâ‰∏∫ÊúÄ‰Ω≥Âä®‰Ωú„ÄÇ ÂÜ≥Á≠ñËÆ∫ = Ê¶ÇÁéáËÆ∫ + ÊïàÁî®ÁêÜËÆ∫ÔºåMEU Âü∫Êú¨ÁöÑÊ¶ÇÁéáÈôàËø∞ÂåÖÊã¨ÁÆÄÂçïÂëΩÈ¢òÂíåÂ§çÊùÇÂëΩÈ¢ò‰∏äÁöÑÂÖàÈ™åÊ¶ÇÁéáÔºàÊàñÊó†Êù°‰ª∂Ê¶ÇÁéáÔºâÂíåÂêéÈ™åÊ¶ÇÁéáÔºàÊàñÊù°‰ª∂Ê¶ÇÁéáÔºâ„ÄÇ Ê¶ÇÁéáÂÖ¨ÁêÜÁ∫¶ÊùüÈÄªËæëÁõ∏ÂÖ≥ÂëΩÈ¢òÁöÑÊ¶ÇÁéá„ÄÇËøùËÉåÂÖ¨ÁêÜÁöÑÊô∫ËÉΩ‰ΩìÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÁöÑË°å‰∏∫ÂøÖÂÆöÊòØ‰∏çÁêÜÊÄßÁöÑ„ÄÇ ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É‰∏∫ÈöèÊú∫ÂèòÈáèÁöÑÊØèÁßçÂÆåÊï¥ËµãÂÄºÊåáÂÆö‰∫ÜÊ¶ÇÁéá„ÄÇÈÄöÂ∏∏ÔºåÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉËøá‰∫éÂ∫ûÂ§ßÔºå‰ª•Ëá≥‰∫éÊó†Ê≥ïÊòæÂºèÂú∞ÂàõÂª∫Âíå‰ΩøÁî®Ôºå‰ΩÜÂ¶ÇÊûúÂÖ∂ÂèØÁî®Êó∂ÔºåÂÆÉÂèØ‰ª•Áî®‰∫éÂõûÁ≠îÊü•ËØ¢ÔºåÂè™ÈúÄË¶ÅÁÆÄÂçïÂú∞Â∞ÜÂÖ∂‰∏≠‰∏éÊü•ËØ¢ÂëΩÈ¢òÂØπÂ∫îÁöÑÂèØËÉΩ‰∏ñÁïåÁöÑÊù°ÁõÆÁõ∏Âä†Âç≥ÂèØ„ÄÇ ÈöèÊú∫ÂèòÈáèÂ≠êÈõÜÈó¥ÁöÑÁªùÂØπÁã¨Á´ãÊÄßÂÖÅËÆ∏Â∞ÜÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÂàÜËß£ÊàêÂ∞èÁöÑËÅîÂêàÂàÜÂ∏ÉÔºåÊûÅÂ§ßÂú∞Èôç‰ΩéÂÆÉÁöÑÂ§çÊùÇÂ∫¶„ÄÇ Ë¥ùÂè∂ÊñØÊ≥ïÂàôÂÖÅËÆ∏ÈÄöËøáÂ∑≤Áü•ÁöÑÊù°‰ª∂Ê¶ÇÁéáÂéªËÆ°ÁÆóÊú™Áü•Ê¶ÇÁéáÔºåÊù°‰ª∂Ê¶ÇÁéáÈÄöÂ∏∏Âú®Âõ†ÊûúÊñπÂêë‰∏ä„ÄÇÂ∞ÜË¥ùÂè∂ÊñØÊ≥ïÂàôÂ∫îÁî®‰∫éÂ§öÊù°ËØÅÊçÆÊó∂‰ºöÈÅáÂà∞‰∏éÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÁõ∏ÂêåÁöÑËßÑÊ®°Êâ©Â±ïÈóÆÈ¢ò„ÄÇ Âüü‰∏≠ÁöÑÁõ¥Êé•Âõ†ÊûúÂÖ≥Á≥ªÂ∏¶Êù•ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂÖÅËÆ∏ÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉË¢´ÂàÜËß£ÊàêÂ∞èÁöÑÊù°‰ª∂ÂàÜÂ∏É„ÄÇÊú¥Á¥†Ë¥ùÂè∂ÊñØÊ®°ÂûãÂÅáËÆæÁªôÂÆöÂçïÂéüÂõ†ÂèòÈáèÊó∂ÔºåÊâÄÊúâÁªìÊûúÂèòÈáèÂÖ∑ÊúâÊù°‰ª∂Áã¨Á´ãÊÄß„ÄÇÊ®°ÂûãÂ§ßÂ∞èÈöèÁªìÊûú‰∏™Êï∞Á∫øÊÄßÂ¢ûÈïø„ÄÇ wumpus ‰∏ñÁïåÁöÑÊô∫ËÉΩ‰ΩìÂèØ‰ª•ËÆ°ÁÆó‰∏ñÁïå‰∏≠Êú™ËßÇÊµãÁöÑÊñπÈù¢ÁöÑÊ¶ÇÁéáÔºå‰ªéËÄåÊîπËøõÁ∫ØÈÄªËæëÊô∫ËÉΩ‰ΩìÁöÑÂÜ≥Á≠ñ„ÄÇÊù°‰ª∂Áã¨Á´ãÊÄßÁÆÄÂåñ‰∫ÜËøô‰∫õËÆ°ÁÆó„ÄÇ (33 Â∞ÅÁßÅ‰ø° / 81 Êù°Ê∂àÊÅØ) Áõ∏‰∫íÁã¨Á´ãÂíåÊù°‰ª∂Áã¨Á´ãÁöÑÂÖ≥Á≥ªÔºü - Áü•‰πé (zhihu.com) Ê¶ÇÁéáÂÆö‰πâ Ê¶ÇÁéáÁöÑÂÖ¨ÁêÜÂåñÂÆö‰πâ Ê¶ÇÁéáÊòØ‰∏Ä‰∏™‰∫ã‰ª∂ÈõÜÂêà‰∏äÁöÑÂ∫¶Èáè, Êª°Ë∂≥‰ª•‰∏ã 3 Êù°ÂÖ¨ÁêÜ„ÄÇ ÊØè‰∏™‰∫ã‰ª∂ÁöÑÂ∫¶ÈáèÂú® 0 Âíå 1 ‰πãÈó¥, ÂèØÂÜô‰∏∫ 0‚©ΩP(X=xi)‚©Ω10 \\leqslant P\\left(X=x_{i}\\right) \\leqslant 10‚©ΩP(X=xi‚Äã)‚©Ω1 ÔºåÂÖ∂‰∏≠ $X$ ÊòØË°®Á§∫‰∫ã‰ª∂ÁöÑÈöèÊú∫ÂèòÈáè, $x_{i}$ ÊòØ X ÁöÑÂèØËÉΩÁöÑÂÄº„ÄÇ‰∏ÄËà¨Êù•ËØ¥, ÈöèÊú∫ÂèòÈáèÁî®Â§ßÂÜôÂ≠óÊØçË°®Á§∫, ÂÆÉ‰ª¨ÁöÑÂÄºÁî®Â∞èÂÜôÂ≠óÊØçË°®Á§∫„ÄÇ Êï¥‰∏™ÈõÜÂêàÁöÑÂ∫¶Èáè‰∏∫ 1 , Âç≥ ‚àëi=1nP(X=xi)=1 \\sum_{i=1}^{n} P\\left(X=x_{i}\\right)=1 i=1‚àën‚ÄãP(X=xi‚Äã)=1 ‰∏çÁõ∏‰∫§‰∫ã‰ª∂ÁöÑÂπ∂ÈõÜÁöÑÊ¶ÇÁéáÁ≠â‰∫éÂçï‰∏™‰∫ã‰ª∂Ê¶ÇÁéáÁöÑÂíå, Âç≥ P(X=x1‚à®X=x2)=P(X=x1)+P(X=x2) P\\left(X=x_{1} \\vee X=x_{2}\\right)=P\\left(X=x_{1}\\right)+ P\\left(X=x_{2}\\right) P(X=x1‚Äã‚à®X=x2‚Äã)=P(X=x1‚Äã)+P(X=x2‚Äã) ËøôÈáå$x_{1}$Âíå$x_{2}$ÊòØ‰∏çÁõ∏‰∫§ÁöÑ„ÄÇ ÂÆπÊñ•ÂéüÁêÜÔºö P(a‚à®b)=P(a)+P(b)‚àíP(a‚àßb) P(a \\vee b) = P(a) + P(b) - P(a \\wedge b) P(a‚à®b)=P(a)+P(b)‚àíP(a‚àßb) ‰ªÄ‰πàÂè´‚ÄúÊ¶ÇÁéáÂÖ¨ÁêÜÁöÑËÆ∫ÊçÆ‚ÄùÔºü ‰∏∫‰ªÄ‰πà‰∏çÊúâËøùËÉå‚ÄúÊ¶ÇÁéáÂÖ¨ÁêÜ‚ÄùÁöÑ‰ø°ÂøµÈõÜÂêàÂë¢Ôºü Âõ†‰∏∫ËøùËÉåÊ¶ÇÁéáÂÖ¨ÁêÜÁöÑ‰ø°ÂøµÈõÜÂêàÊòØ‰∏çÂêàÁêÜÁöÑÔºåËÆæÊÉ≥‰∏Ä‰∏™ËµåÂ±ÄÔºåÂèÇÂä†ËÄÖÊåâÁÖß‰ªñÊåÅÊúâÁöÑ‰ø°ÂøµÁä∂ÊÄÅ‰∏ãÊ≥®Ôºå‰∏ãÊ≥®Êï∞Èáè‰∏éËá™Â∑±ÊåÅÊúâÁöÑ‰ø°ÂøµÁä∂ÊÄÅÊàêÊ≠£ÊØî„ÄÇÂèØ‰ª•ËØÅÊòéÔºåÂØπ‰∫éÊåâÁÖßËøùÂèçÊ¶ÇÁéáÂÖ¨ÁêÜÁöÑ‰ø°ÂøµÁä∂ÊÄÅËøõË°å‰∏ãÊ≥®ÁöÑÊô∫ËÉΩ‰ΩìÔºå‰∏ÄÂÆöÂ≠òÂú®ÊüêÁßçËµåÂ±ÄÁöÑÁªÑÂêàÔºå‰ΩøÂæóËØ•Êô∫ËÉΩ‰ΩìÊØèÊ¨°ÈÉΩ‰ºöËæìÈí±„ÄÇÔºüÔºüÔºü ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÔºöÊâÄÊúâÈöèÊú∫ÂèòÈáèÁöÑËÅîÂêàÂàÜÂ∏ÉÔºåÂç≥ÁªôÂÆöÊâÄÊúâÂèòÈáèÁöÑÊâÄÊúâÂèñÂÄºÁªÑÂêàÁöÑÊ¶ÇÁéáÂØÜÂ∫¶/Ê¶ÇÁéá ‰∏Ä‰∏™Ê¶ÇÁéáÊ®°ÂûãÂèØ‰ª•Áî±ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÂÆåÂÖ®Á°ÆÂÆö ËÄåÊØè‰∏™ÂëΩÈ¢òÁöÑÊ¶ÇÁéáÊòØËØ•ÂëΩÈ¢ò‰∏∫ÁúüÁöÑÂèØËÉΩ‰∏ñÁïåÁöÑÊ¶ÇÁéáÁöÑÊ±ÇÂíåÔºåÈÇ£‰πàÔºåÂ¶ÇÊûúÂ∑≤Áü•ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÔºåÊàë‰ª¨ÂéüÂàô‰∏äÂèØ‰ª•ËÆ°ÁÆó‰ªª‰ΩïÂëΩÈ¢òÁöÑÊ¶ÇÁéáÔºàÂõ†‰∏∫Êàë‰ª¨Â∑≤ÁªèÊåáÂÆö/ÁªôÂá∫‰∫ÜÊØè‰∏Ä‰∏™ÂèØËÉΩÁöÑÊ†∑Êú¨ÁÇπÁöÑÊ¶ÇÁéáÔºåË¶ÅÂÅöÁöÑÂè™ÊòØÊâæÂá∫Êª°Ë∂≥Ë¶ÅÊ±ÇÁöÑÊ†∑Êú¨ÁÇπÔºåÁÑ∂ÂêéÊ±ÇÂíåÔºâ„ÄÇ ÂÆûÈôÖ‰∏äÂë¢Ôºü ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÂÆûÈôÖ‰∏ä‰∏çÂèØÁü•/‰∏çÁü•ÈÅì ÂÆåÂÖ®Ê¶ÇÁéáÂàÜÂ∏ÉÁöÑÊ±ÇÂíåËÆ°ÁÆóÂ§çÊùÇÂ∫¶Èöæ‰ª•ÊâøÂèó ‰ΩøÁî®ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉËøõË°åÊé®Êñ≠ Ê¶ÇÁéáÊé®Êñ≠Ôºö‰ΩøÁî®ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É‰Ωú‰∏∫Áü•ËØÜÂ∫ìÔºåÁªôÂÆöËßÇÊµãËØÅÊçÆÔºå‰∏∫ÊØè‰∏™Êü•ËØ¢ÂëΩÈ¢òËÆ°ÁÆóÂêéÈ™åÊ¶ÇÁéá„ÄÇ ËæπÁºòÊ¶ÇÁéáÔºöÊäΩÂèñÂèòÈáèÂ≠êÈõÜ or Âçï‰∏™ÂèòÈáèÁöÑÂàÜÂ∏É ËæπÁºòÂåñ/Ê±ÇÂíåÊ∂àÂÖÉÔºöÂØπÂÖ∂‰ªñ/‰∏çÂÖ≥Ê≥®ÁöÑÂèòÈáèÂú®ÂÖ∂ÂÄºÂüü‰∏äÊ±ÇÂíå P(Y)=‚àëzP(Y,Z=z) \\mathbf{P}(\\mathbf{Y})=\\sum_{\\mathbf{z}} \\mathbf{P}(\\mathbf{Y}, \\mathbf{Z}=\\mathbf{z}) P(Y)=z‚àë‚ÄãP(Y,Z=z) Êù°‰ª∂ÂåñÔºö P(Y)=‚àëzP(Y‚à£z)P(z) \\mathbf{P}(\\mathbf{Y})=\\sum_{\\mathbf{z}} \\mathbf{P}(\\mathbf{Y} \\mid \\mathbf{z}) P(\\mathbf{z}) P(Y)=z‚àë‚ÄãP(Y‚à£z)P(z) ÈÄöÁî®Êé®Êñ≠ËøáÁ®ãÔºö X ÂæÖÊü•ËØ¢ÂçïÂèòÈáè E ËØÅÊçÆÂèòÈáèÂàóË°®Ôºåe ‰∏∫ËßÇÊµãÂÄºÂàóË°® Y Ââ©‰Ωô‰∏∫ËßÇÊµãÂèòÈáè P(X‚à£e)=Œ±P(X,e)=Œ±‚àëyP(X,e,y) \\mathbf{P}(X \\mid \\mathbf{e})=\\alpha \\mathbf{P}(X, \\mathbf{e})=\\alpha \\sum_{\\mathbf{y}} \\mathbf{P}(X, \\mathbf{e}, \\mathbf{y}) P(X‚à£e)=Œ±P(X,e)=Œ±y‚àë‚ÄãP(X,e,y) ÂÖ∂‰∏≠Ê±ÇÂíåÊòØÈíàÂØπÊâÄÊúâÂèØËÉΩÁöÑ$\\boldsymbol{y}$(‰πüÂ∞±ÊòØÊú™ËßÇÊµãÂèòÈáè$\\boldsymbol{Y}$ÁöÑÂÄºÁöÑÊâÄÊúâÂèØËÉΩÁªÑÂêà)„ÄÇÊ≥®ÊÑèÔºåÂèòÈáè$X$„ÄÅ$\\boldsymbol{E}$Âíå$\\boldsymbol{Y}$ÊûÑÊàê‰∫ÜÂüüÂèòÈáèÁöÑÂÆåÊï¥ÈõÜÂêà, ÊâÄ‰ª•$\\boldsymbol{P}(X, \\boldsymbol{e}, \\boldsymbol{y})$‰ªÖ‰ªÖÊòØÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÁöÑ‰∏Ä‰∏™Ê¶ÇÁéáÂ≠êÈõÜ„ÄÇ -$\\alpha$‰∏∫ÂΩí‰∏ÄÂåñÂ∏∏Êï∞ÔºåË¶Å‰ºöÂêàÁêÜÂà©Áî®‰ª•ÁÆÄÂåñËÆ°ÁÆó Áã¨Á´ãÊÄß Independence Independence (probability theory) - Wikipedia) Áã¨Á´ãÊÄßÊòØ‚Äú‰∫ãÁêÜ‚Äù‰∏äÂØπ‰∏§‰∏™ÈöèÊú∫‰∫ã‰ª∂ÁöÑÁöÑÂÖ≥Á≥ªËøõË°åËØÑÂà§ÔºåÂç≥‰∏çÁõ∏ÂÖ≥Ôºå‰∫í‰∏çÂΩ±ÂìçÔºåÂØπÊñπÂèëÁîü‰∏éÂê¶‰∏çÂΩ±ÂìçÊàëÂèëÁîüÁöÑÊ¶ÇÁéáÔºåÊàëÂèëÁîü‰∏éÂê¶‰πü‰∏çÂΩ±ÂìçÂØπÊñπÂèëÁîüÁöÑÊ¶ÇÁéá„ÄÇ Áã¨Á´ãÊÄßÂÆö‰πâ‰∏∫Ôºö ‰∏§‰∏™ÂëΩÈ¢ò a Âíå b ÊòØÁõ∏‰∫íÁã¨Á´ãÁöÑÔºåÂç≥ a Âíå b ÁöÑÊ¶ÇÁéáÊª°Ë∂≥Â¶Ç‰∏ãÂÖ≥Á≥ªÔºö P(a‚à£b)=P(a)orP(b‚à£a)=P(b)orP(a‚àßb)=P(a)P(b) P(a \\mid b)=P(a) \\quad or \\quad P(b \\mid a)=P(b) \\quad or \\quad P(a \\wedge b)=P(a) P(b) P(a‚à£b)=P(a)orP(b‚à£a)=P(b)orP(a‚àßb)=P(a)P(b) ‰∏§‰∏™ÈöèÊú∫ÂèòÈáè X Âíå Y ÊòØÁã¨Á´ãÁöÑÔºåÂΩì‰∏î‰ªÖÂΩìÔºö P(X‚à£Y)=P(X)orP(Y‚à£X)=P(Y)orP(X,Y)=P(X)P(Y) \\mathbf{P}(X \\mid Y)=\\mathbf{P}(X) \\quad or \\quad \\mathbf{P}(Y \\mid X)=\\mathbf{P}(Y) \\quad or \\quad \\mathbf{P}(X, Y)=\\mathbf{P}(X) \\mathbf{P}(Y) P(X‚à£Y)=P(X)orP(Y‚à£X)=P(Y)orP(X,Y)=P(X)P(Y) ‚ÄúÁã¨Á´ãÊÄß‚ÄùÊòØ‰∏ÄÁßçÂÆö‰πâÔºåÊòØ‰∏Ä‰∏™Êñ≠Ë®ÄÔºå‰πüÂ∞±ÊòØËØ¥Ôºö Â¶ÇÊûú‰∏§‰∏™‰∫ã‰ª∂Áã¨Á´ãÔºåÈÇ£‰πà‰∏ÄÂÆöÊª°Ë∂≥‰∏ãËø∞ÂÖ≥Á≥ªÂºèÔºõ Â¶ÇÊûú‰∏§‰∏™‰∫ã‰ª∂Êª°Ë∂≥‰∏äËø∞ÂÖ≥Á≥ªÂºèÔºåÈÇ£‰πàÂ∞±Áß∞Ëøô‰∏§‰∏™‰∫ã‰ª∂Áõ∏‰∫íÁã¨Á´ã„ÄÇ Â§öÂèòÈáèÔºö ‰∏§‰∏§Áã¨Á´ã pairwise independent ÊúâÈôê‰∫ã‰ª∂ÁöÑÈõÜÂêà$\\left{A_{i}\\right}_{i=1}^{n}$‰∏≠ÊØèÂØπ‰∫ã‰ª∂ÈÉΩÊòØÁõ∏‰∫íÁã¨Á´ãÁöÑÔºåÂàôÁß∞Ëøô‰∫õ‰∫ã‰ª∂ÊòØ‰∏§‰∏§Áã¨Á´ãÁöÑÔºö Pr‚Å°(Ai‚à©Aj)=Pr‚Å°(Ai)Pr‚Å°(Aj)(¬†‚àÄi,j‚àà{1,‚ãØ‚Äâ,n},¬†i‚â†j¬†) \\operatorname{Pr}\\left(A_{i} \\cap A_{j}\\right)=\\operatorname{Pr}\\left(A_{i}\\right) \\operatorname{Pr}\\left(A_{j}\\right) \\quad (~ \\forall i,j \\in \\{ 1,\\cdots,n\\},~ i\\neq j~) Pr(Ai‚Äã‚à©Aj‚Äã)=Pr(Ai‚Äã)Pr(Aj‚Äã)(¬†‚àÄi,j‚àà{1,‚ãØ,n},¬†iÓÄ†‚Äã=j¬†) Áõ∏‰∫íÁã¨Á´ã mutually independent ÊúâÈôê‰∫ã‰ª∂ÁöÑÈõÜÂêà$\\left{A_{i}\\right}_{i=1}^{n}$‰∏≠ÔºåÊØè‰∏™‰∫ã‰ª∂ÈÉΩ‰∏éÂÖ∂‰ªñ‰ªª‰Ωï‰∫ã‰ª∂ÊûÑÊàêÁöÑ‰∫§ÈõÜÁã¨Á´ãÔºåÂàôËøô‰∫õ‰∫ã‰ª∂ÊòØÁõ∏‰∫íÁã¨Á´ã ÁöÑ ÂØπÊ†∑Êú¨Á©∫Èó¥ÁöÑ‰ªªÊÑèÊúâÈôêÂ≠êÈõÜÂ∫èÂàó$A_1, \\cdots A_n$ÔºåÊúâÔºö Pr‚Å°(A1‚à©‚ãØ‚à©An)=Pr‚Å°(A1)‚ãØPr‚Å°(An) \\operatorname{Pr}\\left(A_{1} \\cap \\cdots \\cap A_{n}\\right)=\\operatorname{Pr}\\left(A_{1}\\right) \\cdots \\operatorname{Pr}\\left(A_{n}\\right) Pr(A1‚Äã‚à©‚ãØ‚à©An‚Äã)=Pr(A1‚Äã)‚ãØPr(An‚Äã) ÊàñÔºö Pr‚Å°(‚ãÇi=1nAi)=‚àèi=1nPr‚Å°(Ai) \\operatorname{Pr}\\left(\\bigcap_{i=1}^{n} A_{i}\\right)=\\prod_{i=1}^{n} \\operatorname{Pr}\\left(A_{i}\\right) Pr(i=1‚ãÇn‚ÄãAi‚Äã)=i=1‚àèn‚ÄãPr(Ai‚Äã) Ë¥ùÂè∂ÊñØÊ≥ïÂàô P(Y‚à£X)=P(X‚à£Y)P(Y)P(X) \\mathbf{P}(Y \\mid X)=\\frac{\\mathbf{P}(X \\mid Y) \\mathbf{P}(Y)}{\\mathbf{P}(X)} P(Y‚à£X)=P(X)P(X‚à£Y)P(Y)‚Äã ÊúâËØÅÊçÆÂèòÈáèÁöÑÂΩ¢ÂºèÔºö P(Y‚à£X,e)=P(X‚à£Y,e)P(Y‚à£e)P(X‚à£e) \\mathbf{P}(Y \\mid X, \\mathbf{e})=\\frac{\\mathbf{P}(X \\mid Y, \\mathbf{e}) \\mathbf{P}(Y \\mid \\mathbf{e})}{\\mathbf{P}(X \\mid \\mathbf{e})} P(Y‚à£X,e)=P(X‚à£e)P(X‚à£Y,e)P(Y‚à£e)‚Äã Êù°‰ª∂Áã¨Á´ãÊÄß ‰∏ÄËà¨ÂÆö‰πâÔºö P(X,Y‚à£Z)=P(X‚à£Z)P(Y‚à£Z) \\mathbf{P}(X, Y \\mid Z)=\\mathbf{P}(X \\mid Z) \\mathbf{P}(Y \\mid Z) P(X,Y‚à£Z)=P(X‚à£Z)P(Y‚à£Z) ÁªùÂØπÁã¨Á´ãÊÄß vs Êù°‰ª∂Áã¨Á´ãÊÄß ‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÔºå‰∏§ËÄÖ‰∏çËÉΩ‰∫íÊé®ÔºåÂç≥ÔºöÊù°‰ª∂Áã¨Á´ãÂæó‰∏çÂá∫Áã¨Á´ãÔºåÁã¨Á´ãÂæó‰∏çÂá∫Êù°‰ª∂Áã¨Á´ã ÁªùÂØπÁã¨Á´ãÁöÑ‰∏§‰∏™ÂèòÈáèÔºåÂú®ÁªôÂÆöÂè¶‰∏Ä‰∏™ÂèòÈáèÂêéÔºåÂèØËÉΩ‰ºöÁõ∏ÂÖ≥„ÄÇ Áõ∏ÂÖ≥ÁöÑ‰∏§‰∏™ÂèòÈáèÔºåÂú®ÁªôÂÆöÂè¶‰∏Ä‰∏™ÂèòÈáèÂêéÔºåÂèØËÉΩ‰ºöÊù°‰ª∂Áã¨Á´ã„ÄÇ Êú¥Á¥†Ë¥ùÂè∂ÊñØÊ®°Âûã ‰ΩøÁî®Êú¥Á¥†Ë¥ùÂè∂ÊñØËøõË°åÊñáÊú¨ÂàÜÁ±ª ÁªôÂÆöÂéüÂõ†Êó∂ÔºåÊâÄÊúâÁªìÊûúÈÉΩÊòØÊù°‰ª∂Áã¨Á´ãÁöÑÔºåÈÇ£‰πàÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÂèØÂÜô‰ΩúÔºö P(Cause,¬†Effect1,‚Ä¶,Effectn)=P(Cause)‚àèiP(Effecti‚à£Cause) \\mathbf{P}\\left(\\right. Cause,~ Effect_{1}, \\ldots, Effect \\left._{n}\\right) = \\mathbf{P}( Cause ) \\prod_{i} \\mathbf{P}\\left(\\right. Effect _{i} \\mid Cause ) P(Cause,¬†Effect1‚Äã,‚Ä¶,Effectn‚Äã)=P(Cause)i‚àè‚ÄãP(Effecti‚Äã‚à£Cause) ÁªèÂ∏∏‰Ωú‰∏∫Âú®ÁªôÂÆöÂéüÂõ†Êó∂ÔºåÁªìÊûúÂèòÈáèÂπ∂‰∏çÊòØ‰∏•Ê†ºÁã¨Á´ãÁöÑÊÉÖÂÜµÁöÑËøë‰ºº„ÄÇ ÁªôÂÆö‰∏Ä‰∫õËßÇÊµãÁªìÊûúÔºö P(Cause‚à£e)=Œ±‚àëyP(Cause,e,y) \\mathbf{P}( Cause \\mid \\mathbf{e})=\\alpha \\sum_{\\mathbf{y}} \\mathbf{P}( Cause , \\mathbf{e}, \\mathbf{y}) P(Cause‚à£e)=Œ±y‚àë‚ÄãP(Cause,e,y) Ëøõ‰∏ÄÊ≠•Ôºö P(¬†Cause¬†‚à£e)=Œ±‚àëyP(¬†Cause¬†)P(y‚à£¬†Cause¬†)(‚àèjP(ej‚à£¬†Cause¬†))=Œ±P(¬†Cause¬†)(‚àèjP(ej‚à£¬†Cause¬†))‚àëyP(y‚à£¬†Cause¬†)=Œ±P(¬†Cause¬†)‚àèjP(ej‚à£¬†Cause¬†) \\begin{aligned} \\mathbf{P}(\\text { Cause } \\mid \\mathbf{e}) & =\\alpha \\sum_{\\mathbf{y}} \\mathbf{P}(\\text { Cause }) \\mathbf{P}(\\mathbf{y} \\mid \\text { Cause })\\left(\\prod_{j} \\mathbf{P}\\left(e_{j} \\mid \\text { Cause }\\right)\\right) \\\\ & =\\alpha \\mathbf{P}(\\text { Cause })\\left(\\prod_{j} \\mathbf{P}\\left(e_{j} \\mid \\text { Cause }\\right)\\right) \\sum_{\\mathbf{y}} \\mathbf{P}(\\mathbf{y} \\mid \\text { Cause }) \\\\ & =\\alpha \\mathbf{P}(\\text { Cause }) \\prod_{j} \\mathbf{P}\\left(e_{j} \\mid \\text { Cause }\\right) \\end{aligned} P(¬†Cause¬†‚à£e)‚Äã=Œ±y‚àë‚ÄãP(¬†Cause¬†)P(y‚à£¬†Cause¬†)(j‚àè‚ÄãP(ej‚Äã‚à£¬†Cause¬†))=Œ±P(¬†Cause¬†)(j‚àè‚ÄãP(ej‚Äã‚à£¬†Cause¬†))y‚àë‚ÄãP(y‚à£¬†Cause¬†)=Œ±P(¬†Cause¬†)j‚àè‚ÄãP(ej‚Äã‚à£¬†Cause¬†)‚Äã ÂØπ‰∫éÊØè‰∏Ä‰∏™ÂèØËÉΩÁöÑÂéüÂõ†ÔºåÂ∞ÜÂéüÂõ†ÁöÑÂÖàÈ™åÊ¶ÇÁéáËØöÊÑèÂú®ÁªôÂÆöÂéüÂõ†Êó∂ÊâÄËßÇÊµãÂà∞ÁöÑÁªìÊûúÁöÑÊù°‰ª∂Ê¶ÇÁéáÔºåÁÑ∂ÂêéÂ∞ÜÁªìÊûúÂΩí‰∏ÄÂåñ„ÄÇ ËÆ°ÁÆóÂ§çÊùÇÂ∫¶‰∫éËßÇÊµãÂà∞ÁöÑÁªìÊûúÊï∞ÈáèÂëàÁ∫øÊÄßÂÖ≥Á≥ªÔºü‰∏ç‰æùËµñ‰∫é‰∏∫ËßÇÊµãÂà∞ÁöÑÁªìÊûúÊï∞Èáè„ÄÇ "},"Learn/LearnAIMA/Ch13/Ch13.html":{"url":"Learn/LearnAIMA/Ch13/Ch13.html","title":"Ch13","keywords":"","body":"Á¨¨ 13 Á´† Ê¶ÇÁéáÊé®ÁêÜ 13.1 ‰∏çÁ°ÆÂÆöÂüüÁöÑÁü•ËØÜË°®Á§∫ 13.2 Ë¥ùÂè∂ÊñØÁΩëÁªúÁöÑËØ≠‰πâ 13.2.1 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂÖ≥Á≥ª 13.2.2 Êù°‰ª∂ÂàÜÂ∏ÉÁöÑÈ´òÊïàË°®Á§∫ 13.2.3 ËøûÁª≠ÂèòÈáèÁöÑË¥ùÂè∂ÊñØÁΩëÁªú 13.2.4 Ê°à‰æãÁ†îÁ©∂ÔºöÊ±ΩËΩ¶‰øùÈô© 13.3 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÁ≤æÁ°ÆÊé®Êñ≠ 13.3.1 ÈÄöËøáÊûö‰∏æËøõË°åÊé®Êñ≠ 13.3.2 ÂèòÈáèÊ∂àÂÖÉÁÆóÊ≥ï 13.3.3 Á≤æÁ°ÆÊé®Êñ≠ÁöÑÂ§çÊùÇÊÄß 13.3.4 ËÅöÁ±ªÁÆóÊ≥ï 13.4 Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑËøë‰ººÊé®ÁêÜ 13.4.1 Áõ¥Êé•ÈááÊ†∑ÊñπÊ≥ï 13.4.2 ÈÄöËøáÈ©¨Â∞îÂèØÂ§´ÈìæÊ®°ÊãüËøõË°åÊé®Êñ≠ 13.4.3 ÁºñËØëËøë‰ººÊé®Êñ≠ 13.5 Âõ†ÊûúÁΩëÁªú 13.5.1 Ë°®Á§∫Âä®‰ΩúÔºödo Êìç‰Ωú 13.5.2 ÂêéÈó®ÂáÜÂàô Êú¨Á´†‰ªãÁªç‰∫ÜË¥ùÂè∂ÊñØÁΩëÁªúÔºåÂÆÉÊòØ‰∏ÄÁßçÂèëÂ±ïÊàêÁÜüÁöÑ‰∏çÁ°ÆÂÆöÁü•ËØÜË°®Á§∫ÊñπÊ≥ï„ÄÇË¥ùÂè∂ÊñØÁΩëÁªúÁöÑ‰ΩúÁî®Â§ßËá¥Á±ª‰ºº‰∫éÁ°ÆÂÆöÁü•ËØÜÁöÑÂëΩÈ¢òÈÄªËæë„ÄÇ Ë¥ùÂè∂ÊñØÁΩëÁªúÊòØÊúâÂêëÊó†ÁéØÂõæÔºåÂÖ∂‰∏≠ËäÇÁÇπÂØπÂ∫îÁùÄÈöèÊú∫ÂèòÈáèÔºõÁªôÂÆöÁà∂ËäÇÁÇπÔºåÊØè‰∏™ËäÇÁÇπÈÉΩËÉΩÊ±ÇÂá∫ËØ•ËäÇÁÇπÁöÑÊù°‰ª∂ÂàÜÂ∏É„ÄÇ Ë¥ùÂè∂ÊñØÁΩëÁªúÊèê‰æõ‰∫Ü‰∏ÄÁßçÁÆÄÊ¥ÅÁöÑÊñπÊ≥ïÊù•Ë°®Á§∫ÂüüÂÜÖÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂÖ≥Á≥ª„ÄÇ Ë¥ùÂè∂ÊñØÁΩëÁªúÊåáÂÆö‰∫ÜÂÖ∂ÂèòÈáèÁöÑËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É„ÄÇÂØπÊâÄÊúâÂèòÈáèÁöÑ‰ªª‰∏ÄËµãÂÄºÁöÑÊ¶ÇÁéáÂÆö‰πâ‰∏∫Â±ÄÈÉ®Êù°‰ª∂ÂàÜÂ∏É‰∏≠Áõ∏Â∫îÈ°πÁöÑ‰πòÁßØ„ÄÇË¥ùÂè∂ÊñØÁΩëÁªúÈÄöÂ∏∏ÊØîÊòæÂºèÊûö‰∏æÁöÑËÅîÂêàÂàÜÂ∏ÉÂ∞èÂæóÂ§ö„ÄÇ ËÆ∏Â§öÊù°‰ª∂ÂàÜÂ∏ÉÂèØ‰ª•Áî®Ê≠£ËßÑÂàÜÂ∏ÉÊóèÁ¥ßËá¥Âú∞Ë°®Á§∫„ÄÇÊ∑∑ÂêàË¥ùÂè∂ÊñØÁΩëÁªúÔºåÂåÖÊã¨Á¶ªÊï£ÂèòÈáèÂíåËøûÁª≠ÂèòÈáèÔºå‰ΩøÁî®ÂêÑÁßçÊ≠£ÂàôÂàÜÂ∏É„ÄÇ Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÊé®Êñ≠ÊòØÊåáÂú®ÁªôÂÆö‰∏ÄÁªÑËØÅÊçÆÂèòÈáèÁöÑÊÉÖÂÜµ‰∏ãÔºåËÆ°ÁÆó‰∏ÄÁªÑÊü•ËØ¢ÂèòÈáèÁöÑÊ¶ÇÁéáÂàÜÂ∏É„ÄÇÁ≤æÁ°ÆÊé®Êñ≠ÁÆóÊ≥ïÔºåÂ¶ÇÂèòÈáèÊ∂àÂÖÉÔºåÂ∞ΩÂèØËÉΩÈ´òÊïàÂú∞ËØÑ‰º∞Êù°‰ª∂Ê¶ÇÁéá‰πòÁßØ‰πãÂíå„ÄÇ Âú®Â§öÈáçÊ†ëÔºàÂçïËøûÈÄöÁΩëÁªúÔºâ‰∏≠ÔºåÁ≤æÁ°ÆÊé®Êñ≠ÁöÑÊó∂Èó¥‰∏éÁΩëÁªúÁöÑËßÑÊ®°ÂëàÁ∫øÊÄßÂÖ≥Á≥ª„ÄÇÂú®‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÔºåËøô‰∏™ÈóÆÈ¢òÊòØÊ£òÊâãÁöÑ„ÄÇ ÂÉè‰ººÁÑ∂Âä†ÊùÉÂíåÈ©¨Â∞îÂèØÂ§´ÈìæËíôÁâπÂç°ÁΩóËøôÊ†∑ÁöÑÈöèÊú∫ÈááÊ†∑ÊäÄÊúØÂèØ‰ª•ÁªôÂá∫ÁΩëÁªú‰∏≠ÁöÑÁúüÂÆûÂêéÈ™åÂàÜÂ∏ÉÂêàÁêÜÁöÑ‰º∞ËÆ°Ôºå‰∏éÁ≤æÁ°ÆÁÆóÊ≥ïÁõ∏ÊØîÔºåÂÆÉ‰ª¨ÂèØ‰ª•Â§ÑÁêÜËßÑÊ®°Êõ¥Â§ßÁöÑÁΩëÁªú„ÄÇ Ë¥ùÂè∂ÊñØÁΩëÁªúÊçïÊçâÊ¶ÇÁéáÂΩ±ÂìçÔºåËÄåÂõ†ÊûúÁΩëÁªúÊçïÊçâÂõ†ÊûúÂÖ≥Á≥ªÔºåÂπ∂ÂÖÅËÆ∏ÂØπÂπ≤È¢ÑÁªìÊûúÂíåËßÇÊµãÂÄºËøõË°åÈ¢ÑÊµã„ÄÇ "},"Learn/LearnAIMA/Ch13/BayesianNetwork.html":{"url":"Learn/LearnAIMA/Ch13/BayesianNetwork.html","title":"BayesianNetwork","keywords":"","body":"Ë¥ùÂè∂ÊñØÁΩëÁªú Bayesian Network ÂÖ≥‰∫éÁêÜËß£Ë¥ùÂè∂ÊñØÁΩëÁªúÁöÑÂá†ÁÇπÊ≥®ÊÑè‰∫ãÈ°π Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏§ÁßçÂá∫ÂèëÁÇπÁï•ÊúâÂ∑ÆÂºÇÁöÑÂÆö‰πâÔºö Á¨¨‰∏ÄÁßçÂÆö‰πâÔºå‰πüÊòØ AIMA ‰∏≠ÁöÑÂÆö‰πâÔºåÂÖ∂ÈÄªËæëÊòØÔºö È¶ñÂÖàÂÆö‰πâËäÇÁÇπÂÖ∑ÊúâÂèÇÊï∞$\\theta$ÔºåÂ∞ÜÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÂÆö‰πâ‰∏∫Ôºö P(x1,‚Ä¶,xn)=‚àèi=1nŒ∏(xi‚à£parents(Xi)) P\\left(x_{1}, \\ldots, x_{n}\\right)=\\prod_{i=1}^{n} \\theta\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) P(x1‚Äã,‚Ä¶,xn‚Äã)=i=1‚àèn‚ÄãŒ∏(xi‚Äã‚à£parents(Xi‚Äã)) ÁÑ∂ÂêéÊé•ÁùÄÁî±Êù°‰ª∂ÂàÜÂ∏ÉÁöÑÂÆö‰πâÂºèÔºå‰ª£ÂÖ•ÂèÇÊï∞$\\theta$ÔºåÂèëÁé∞Êù°‰ª∂Ê¶ÇÁéá‚ÄúÊÅ∞Â•Ω‚ÄùÁ≠â‰∫é$\\theta$Ôºö P(xi‚à£¬†parents¬†(Xi))‚â°P(xi,¬†parents¬†(Xi))P(¬†parents¬†(Xi))=‚àëyP(xi,parents‚Å°(Xi),y)‚àëxi‚Ä≤,yP(xi‚Ä≤,parents‚Å°(Xi),y)=Œ∏(xi‚à£parents(Xi)) \\begin{aligned} P\\left(x_{i} \\mid \\text { parents }\\left(X_{i}\\right)\\right) & \\equiv \\frac{P\\left(x_{i}, \\text { parents }\\left(X_{i}\\right)\\right)}{P\\left(\\text { parents }\\left(X_{i}\\right)\\right)} \\\\ \\\\ & =\\frac{\\sum_{\\mathbf{y}} P\\left(x_{i}, \\operatorname{parents}\\left(X_{i}\\right), \\mathbf{y}\\right)}{\\sum x_{i}^{\\prime}, \\mathbf{y} P\\left(x_{i}^{\\prime}, \\operatorname{parents}\\left(X_{i}\\right), \\mathbf{y} \\right) } \\\\\\\\ & = \\theta\\left(x_{i} \\mid\\right. \\text{parents} \\left.\\left(X_{i}\\right)\\right) \\end{aligned} P(xi‚Äã‚à£¬†parents¬†(Xi‚Äã))‚Äã‚â°P(¬†parents¬†(Xi‚Äã))P(xi‚Äã,¬†parents¬†(Xi‚Äã))‚Äã=‚àëxi‚Ä≤‚Äã,yP(xi‚Ä≤‚Äã,parents(Xi‚Äã),y)‚àëy‚ÄãP(xi‚Äã,parents(Xi‚Äã),y)‚Äã=Œ∏(xi‚Äã‚à£parents(Xi‚Äã))‚Äã ‰∫éÊòØÔºåÊàë‰ª¨ÂèØ‰ª•Â∞ÜÁΩëÁªú‰∏≠ÁöÑÂèÇÊï∞Ôºå‚ÄúËß£Èáä‚Äù‰∏∫Êù°‰ª∂Ê¶ÇÁéá„ÄÇ ‰∫éÊòØÔºåÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÂèØ‰ª•ÊîπÂÜô‰∏∫ÔºöÔºàÁî±ÂÆö‰πâ„ÄÅÊ¶ÇÁéáÂÖ¨ÁêÜÂØºÂá∫ÁöÑÂÆöÁêÜÔºâ P(x1,‚Ä¶,xn)=‚àèi=1nP(xi‚à£parents(Xi)) P\\left(x_{1}, \\ldots, x_{n}\\right)=\\prod_{i=1}^{n} P\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) P(x1‚Äã,‚Ä¶,xn‚Äã)=i=1‚àèn‚ÄãP(xi‚Äã‚à£parents(Xi‚Äã)) Âü∫‰∫é‰∏äÂºèÔºàÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÁöÑÊîπÂÜôÂºèÔºâÔºåÊàë‰ª¨ÂèØ‰ª•ÂØºÂá∫‰∏Ä‰∫õÁã¨Á´ãÊÄßÂÖ≥Á≥ªÔºåÂ¶Ç‚ÄúÁªôÂÆöÁà∂ËäÇÁÇπÊó∂ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄß‚ÄùÔºå‚ÄúÁªôÂÆöÈ©¨Â∞îÂèØÂ§´ÊØØÊó∂ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄß‚Äù„ÄÇ ÔºàÊ≥®ÊÑèÔºåËøô‰∫õÁã¨Á´ãÊÄßÂÆöÁêÜÔºåÊòØÁî±Ê¶ÇÁéáÂõæÊ®°ÂûãÁöÑÂÆö‰πâÊâÄÊé®Âá∫ÁöÑÔºå‰πüÂ∞±ÊòØÊé®Âá∫‰∫ÜÊù°‰ª∂Áã¨Á´ãÁöÑÂÆö‰πâÂºèÔºåËøõËÄåËØ¥ÊòéÂ≠òÂú®‰∏äËø∞ÁöÑÁã¨Á´ãÊÄßÂÆöÁêÜÔºâ Á¨¨‰∫åÁßçÁ±ªÂûãÁöÑÂÆö‰πâÔºåÊòØÁõ¥Êé•Â∞ÜË¥ùÂè∂ÊñØÁΩëÁªúËäÇÁÇπÁöÑÂèÇÊï∞$\\theta\\left(x{i} \\mid\\right. parents \\left.\\left(X{i}\\right)\\right)$ÔºåÂÆö‰πâ‰∏∫Êù°‰ª∂Ê¶ÇÁéáÂàÜÂ∏É$P\\left(x{i} \\mid\\right. parents \\left.\\left(X{i}\\right)\\right)$Ôºå‰πüÂ∞±ÊòØÁõ¥Êé•ÁªôÂá∫Ê®°ÂûãÁöÑÂèÇÊï∞ÁöÑËØ≠‰πâÔºö P(xi‚à£parents(Xi))=Œ∏(xi‚à£parents(Xi)) P\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) = \\theta\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) P(xi‚Äã‚à£parents(Xi‚Äã))=Œ∏(xi‚Äã‚à£parents(Xi‚Äã)) ÁÑ∂ÂêéÂÜçÁªôÂá∫ÂÅáËÆæ‚ÄúÁªôÂÆöÁà∂ËäÇÁÇπÔºåÂ≠êËäÇÁÇπÊù°‰ª∂Áã¨Á´ã‚ÄùÔºåËØ•ÂÅáËÆæÂèàÁß∞‰∏∫‚ÄúÈ©¨Â∞îÂèØÂ§´ÂÅáËÆæ‚Äù„ÄÇ ‰∏äËø∞ÂÆö‰πâ+ÂÅáËÆæÔºåÂêåÊ†∑ÂèØ‰ª•Êé®ÂØºÂá∫‚ÄúÂÆåÂÖ®ËÅîÂêàÂàÜÂ∏ÉÁöÑÊîπÂÜôÂºè‚ÄùÔºåÂç≥Ôºö P(x1,‚Ä¶,xn)=‚àèi=1nP(xi‚à£parents(Xi)) P\\left(x_{1}, \\ldots, x_{n}\\right)=\\prod_{i=1}^{n} P\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) P(x1‚Äã,‚Ä¶,xn‚Äã)=i=1‚àèn‚ÄãP(xi‚Äã‚à£parents(Xi‚Äã)) ‰∫éÊòØÔºåËøô‰∏§ÁßçÂÆö‰πâÊñπÂºèÔºåÂÆûÈôÖ‰∏äÊòØÁ≠â‰ª∑ÁöÑÔºåÂè™ÊòØÂá∫ÂèëÁÇπ‰∏çÂêå„ÄÇ Á¨¨‰∏ÄÁßçÂÆö‰πâÂá∫ÂèëÁÇπÂú®‰∫é‚Äú‰∏Ä‰∏™Ê¶ÇÁéáÊ®°ÂûãÂèØ‰ª•Áî±ÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÂÆåÂÖ®Á°ÆÂÆö‚ÄùÔºåÂõ†Ê≠§Áõ¥Êé•ÂÆö‰πâ‰∫ÜÂÆåÂÖ®ËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É„ÄÇ Á¨¨‰∫åÁßçÂÆö‰πâÊõ¥Ë¥¥ÂêàÂÆûÈôÖÂª∫Ê®°ÁöÑÈúÄË¶ÅÔºåÂç≥ÔºåÂú®ÂØπÈóÆÈ¢òÂª∫Ê®°Êó∂ÔºåÊàë‰ª¨‚ÄúÂêàÁêÜÂú∞‚ÄùÂºïÂÖ•È©¨Â∞îÁßëÂ§´ÂÅáËÆæÔºåÊûÑÂª∫Ëµ∑ÈóÆÈ¢òÁöÑÊ¶ÇÁéáÂõæÊ®°ÂûãÔºå‰ª•Ê±ÇËß£ÈóÆÈ¢òÊü•ËØ¢„ÄÇ Ê≥®ÊÑèÔºå‚ÄúÁªôÂÆöÁà∂ËäÇÁÇπÔºåÂ≠êËäÇÁÇπ‰πãÈó¥Áõ∏‰∫íÊù°‰ª∂Áã¨Á´ã‚ÄùÔºåËøô‰∏™ÂëΩÈ¢òÊòØ‰∏ç‰∏ÄÂÆöÊàêÁ´ãÁöÑ„ÄÇÊàë‰ª¨ÂèØ‰ª•Âú®Á¨¨‰∏ÄÁßçÂÆö‰πâ‰∏≠ÔºåÊé®ÂØºÂá∫ËøôÊù°ÂÆöÁêÜÔºå‰πüÂèØ‰ª•Âú®Á¨¨‰∫åÁßçÂÆö‰πâ‰∏≠ÔºåÁõ¥Êé•ÂºïÂÖ•ÂâçÊèêÂÅáËÆæ„ÄÇËøô‰∏™ÂëΩÈ¢ò‰∏çÊòØÊòæÁÑ∂Âú∞ÔºåÂπ≥Âá°Âú∞ÊàêÁ´ãÁöÑÔºå‰πüÂ∞±ÊòØËØ¥ÔºåËøô‰∏™ÂëΩÈ¢òÁöÑÊàêÁ´ãÊòØ‰∏Ä‰∏™ÂÅáËÆæ ‚Äî ÁªôÂÆöÁà∂ËäÇÁÇπÔºåÂ≠êËäÇÁÇπÂΩìÁÑ∂ÂèØËÉΩ‰∏çÊù°‰ª∂Áã¨Á´ã„ÄÇ Ê≥®ÊÑèÔºå‚ÄúÊù°‰ª∂Áã¨Á´ã‚ÄùÁöÑÊÄßË¥®Ôºå‰∏çÊòØ‰ªé‚Äú‰∫ãÁêÜ‚Äù‰∏äËØÅÊòéÁöÑ„ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºå‰∏çÊòØ‚ÄúÁªôÂÆöÁà∂ËäÇÁÇπÔºåÂ≠êËäÇÁÇπËá™ÁÑ∂ËÄåÁÑ∂Â∞±Êù°‰ª∂Áã¨Á´ã‰∫Ü‚ÄùÔºåÂ≠êËäÇÁÇπÁöÑÊù°‰ª∂Áã¨Á´ãÊòØÈÄöËøáÊ¶ÇÁéáÂõæÊ®°ÂûãÁöÑÂÆö‰πâÂØºÂá∫ÁöÑ„ÄÇ Ëá≥‰∫éÊâÄË∞ìÁöÑ‚ÄúÁªôÂÆöÂéüÂõ†ÔºåÁªìÊûúÂ∞±Êù°‰ª∂Áã¨Á´ã‚ÄùÁöÑÁõ¥ËßÇËÆ§ËØÜÔºåÊòØ‰∏∫‰∫Ü‰æø‰∫éÊàë‰ª¨Êõ¥Â•ΩÂú∞ÁêÜËß£ËøôÊù°ÂÆöÁêÜÔºåËÄå‰∏çÊòØ‰Ωú‰∏∫ËøôÊù°ÂÆöÁêÜÊàêÁ´ãÁöÑÂéüÂõ†„ÄÇ Ê¶ÇÁéáÂõæÊ®°Âûã+È©¨Â∞îÂèØÂ§´ÂÅáËÆæ=Ë¥ùÂè∂ÊñØÁΩëÁªúÔºü ÂèàÁß∞ ‰ø°ÂøµÁΩëÁªú Belief Network ‰ΩøÁî®ÊúâÂêëÊó†ÁéØÂõæ DAG Êù•ÂàªÁîªÂ±ûÊÄß‰πãÈó¥ÁöÑ‰æùËµñÂÖ≥Á≥ª ‰ΩøÁî®Êù°‰ª∂Ê¶ÇÁéáË°® CPT Êù•ÊèèËø∞Â±ûÊÄßÁöÑËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É ÂÆö‰πâ ‰∏Ä‰∏™Ë¥ùÂè∂ÊñØÁΩë $B$ Áî±ÁªìÊûÑ $G$ ÂíåÂèÇÊï∞ $\\Theta$ ‰∏§ÈÉ®ÂàÜÊûÑÊàê, Âç≥ $B=\\langle G, \\Theta\\rangle$ ÁΩëÁªúÁªìÊûÑ $G$ ÊòØ‰∏Ä‰∏™ÊúâÂêëÊó†ÁéØÂõæÔºåÂÖ∂ÊØè‰∏™ÁªìÁÇπÂØπÂ∫î‰∫é‰∏Ä‰∏™Â±ûÊÄßÔºåËã•‰∏§‰∏™Â±ûÊÄßÊúâÁõ¥Êé•‰æùËµñÂÖ≥Á≥ªÔºåÂàôÂÆÉ‰ª¨Áî±‰∏ÄÊù°ËæπËøûÊé•Ëµ∑Êù•Ôºõ ÂèÇÊï∞ $\\Theta$ ÂÆöÈáèÊèèËø∞ËøôÁßç‰æùËµñÂÖ≥Á≥ªÔºåÂÅáËÆæÂ±ûÊÄß $x{i} $Âú® $G$ ‰∏≠ÁöÑÁà∂ÁªìÁÇπÈõÜ‰∏∫ $\\pi{i}$ÔºåÂàô$ \\Theta$ ÂåÖÂê´‰∫ÜÊØè‰∏™Â±ûÊÄßÁöÑÊù°‰ª∂Ê¶ÇÁéáË°® $\\theta{x{i} \\mid \\pi{i}}=P{B}\\left(x{i} \\mid \\pi{i}\\right)$ ÂÖ∏ÂûãÁªìÊûÑÔºö ÂêåÁà∂ÁªìÊûÑ/ÂàÜÂèâÁªìÊûÑÔºö ÁªôÂÆöÁà∂ËäÇÁÇπ$x_1$ÁöÑÂèñÂÄºÔºå$x_3$‰∏é$x_4$Êù°‰ª∂Áã¨Á´ãÔºõ Ëã•Áà∂ËäÇÁÇπÂèñÂÄºÊú™Áü•ÔºåÂàôÂ≠êËäÇÁÇπ‰∏çÊù°‰ª∂Áã¨Á´ãÔºõ È°∫Â∫èÁªìÊûÑ/‰∏≤Ë°åÁªìÊûÑÔºö ÁªôÂÆö‰∏≠Èó¥ËäÇÁÇπ$x$ÁöÑÂèñÂÄºÔºå$y$‰∏é$z$Êù°‰ª∂Áã¨Á´ãÔºõ ÂêåÁêÜÔºü V ÂûãÁªìÊûÑ/Ê±áËÅöÁªìÊûÑ/ÂÜ≤ÊíûÁªìÊûÑÔºö ÁªôÂÆöÂ≠êËäÇÁÇπ$x_4$ÁöÑÂèñÂÄºÔºå$x_1$‰∏é$x_2$ÂøÖ‰∏çÁã¨Á´ãÔºõ Ëã•Â≠êËäÇÁÇπ$x_4$Êú™Áü•ÔºåÂàô$x_1$‰∏é$x_2$Áã¨Á´ãÔºåÁß∞‰Ωú‚ÄúËæπÈôÖÁã¨Á´ãÊÄß‚ÄùMarginal Independence„ÄÇ $x_4 $Áß∞‰ΩúÁ¢∞ÊíûÂõ†Â≠ê Â¶Ç‰ΩïÂàÜÊûêË¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÂèòÈáèÈó¥ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂë¢Ôºü ÊúâÂêëÂàÜÁ¶ª D-Speration ÂØπ‰∫éÁΩëÁªú‰∏≠ÁöÑÂèòÈáè$x$Ôºå$y$ÂíåÂèòÈáèÈõÜÂêà$\\mathbf{Z}$Ôºå$x$Âíå$y$Ë¢´$\\mathbf{Z}$ÊúâÂêëÂàÜÁ¶ªÔºà$x \\perp y \\mid \\mathbf{Z}$ÔºâÔºåÂÆö‰πâ‰∏∫Ôºö Âè™Á†îÁ©∂Á•ñÂÖàÂ≠êÂõæAncestral SubgraphÔºö$\\mathbf{X}$„ÄÅ$\\mathbf{Y}$„ÄÅ$\\mathbf{Z}$Âíå ÂÆÉ‰ª¨ÁöÑÁ•ñÂÖà ÈÅìÂæ∑ÂåñÔºöÂ∞Ü DAG ËΩ¨Êç¢ÊàêÈÅìÂæ∑ÂõæÔºö ÊâæÂá∫ DAG ‰∏≠ÊâÄÊúâÁöÑ V ÂûãÁªìÊûÑÔºåÂú® V ÂûãÁªìÊûÑÁöÑ‰∏§‰∏™Áà∂ËäÇÁÇπ‰πãÈó¥Ê∑ªÂä†‰∏ÄÊù°Êó†ÂêëËæπ Â∞ÜÊâÄÊúâÁöÑÊúâÂêëËæπÊîπ‰∏∫Êó†ÂêëËæπ PSÔºö‚ÄúÈÅìÂæ∑Âåñ‚ÄùÁöÑÂê´‰πâÊòØ-Â≠©Â≠êÁöÑÁà∂ÊØç‰πãÈó¥Â∫îÂª∫Á´ãÁâ¢Âõ∫ÁöÑÂÖ≥Á≥ªÔºåÂê¶ÂàôÊòØ‰∏ç‚ÄúÈÅìÂæ∑‚ÄùÁöÑ„ÄÇ $\\mathbf{Z}$ÈòªÂ°û‰∫Ü$x$‰∏é$y$‰πãÈó¥ÁöÑË∑ØÂæÑÔºå‰πüÂ∞±ÊòØÂ∞ÜÂèòÈáèÈõÜÂêà$\\mathbf{Z}$ÂéªÈô§‰πãÂêéÔºå$x$Âíå$y$ÂàÜÂ±û‰∫é‰∏§‰∏™ËÅîÈÄöÂàÜÊîØ„ÄÇ ÂàôÁß∞$x$Âíå$y$Ë¢´$\\mathbf{Z}$ÊúâÂêëÂàÜÁ¶ªÔºå$x$Âíå$y$Âú®ÁªôÂÆö$\\mathbf{Z}$Êó∂Êù°‰ª∂Áã¨Á´ã„ÄÇ MLBOP Ë¥ùÂè∂ÊñØÂíå‰ºòÂåñÊñπÊ≥ï ÂÆö‰πâ Ê¥ªË∑ÉÈìæ ËäÇÁÇπÈìæ$x_1, \\cdots x_n$Âú®ÁªôÂÆöÈõÜÂêà$\\mathbf{Z}$Êó∂ÊòØÊ¥ªË∑ÉÁöÑÔºåÊª°Ë∂≥Ôºö ÂØπ‰∫éËäÇÁÇπÈìæ‰∏≠‰ªªÊÑèÁöÑ‰∏Ä‰∏™ V ÂûãÁªìÊûÑ$x{i-1}\\rightarrow x_i \\leftarrow x{i+1}$ÔºåÈÉΩÊúâ$x_i$Êàñ$x_i$ÁöÑÊüê‰∏™Âêé‰ª£Âú®$\\mathbf{Z}$‰∏≠Ôºõ Èô§‰∏äËø∞‰πãÂ§ñÔºåÊ≤°ÊúâÂÖ∂‰ªñ‰ªª‰ΩïËäÇÁÇπÂú®$\\mathbf{Z}$‰∏≠„ÄÇ Âç≥ÔºöÂú®‰∏ÄÊù°Ê¥ªË∑ÉÁöÑÈìæ‰∏≠ÔºåÊ¶ÇÁéáËØÅÊçÆÁªèËøá$\\mathbf{Z}$ÔºåÂèØ‰ª•ÁïÖÈÄöÂú∞‰ªé$x_1$ÊµÅÂà∞$x_n$ÔºàÊàñÂèçÂêëÔºâ ÂÆö‰πâ ÊúâÂêëÂàÜÁ¶ª ÂØπ‰∫éË¥ùÂè∂ÊñØÁΩëÁªú BÔºå$\\mathbf{X}$„ÄÅ$\\mathbf{Y}$„ÄÅ$\\mathbf{Z}$ÊòØ B ‰∏≠‰∏â‰∏™‰∏çÁõ∏‰∫§ÁöÑËäÇÁÇπÈõÜÔºåËã•ÁªôÂÆö $\\mathbf{Z}$ ÁöÑÊù°‰ª∂‰∏ãÔºå$\\mathbf{X}$ Âíå$\\mathbf{Y}$ ‰πãÈó¥ÁöÑ‰ªªÊÑèËäÇÁÇπÂØπ $\\forall x\\in \\mathbf{X}, y \\in \\mathbf{Y}, ~ (x,y)$ ‰πãÈó¥ÔºåÈÉΩ‰∏çÂ≠òÂú®Ê¥ªË∑ÉÈìæ„ÄÇÂàôÁß∞ $\\mathbf{X}$ Âíå$\\mathbf{Y}$ Âú®ÁªôÂÆö $\\mathbf{Z}$ ÁöÑÊù°‰ª∂‰∏ãÊòØ‚ÄúÊúâÂêëÂàÜÁ¶ª‚ÄùÁöÑ„ÄÇÂ¶ÇÊûú‰∏çÊòØÊúâÂêëÂàÜÁ¶ªÁöÑÔºåÂàôÁß∞ $\\mathbf{X}$ Âíå $\\mathbf{Y}$ ÊòØÊúâÂêëËøûÈÄöÁöÑ„ÄÇ AIMA2 ËØ≠Ê≥ïÔºöÊØè‰∏Ä‰∏™ËäÇÁÇπ$Xi$ÈÉΩÈôÑÂä†‰∏Ä‰∫õÂ±ÄÈÉ®Ê¶ÇÁéá‰ø°$\\theta\\left(x{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right)$ÁöÑÊúâÂêëÊó†ÁéØÂõæ ËØ≠‰πâÔºö‰∏äËø∞Ê¶ÇÁéá‰ø°ÊÅØÂíåÂõæÂ¶Ç‰ΩïÂØπÂ∫î‰∫éÁΩëÁªú‰∏≠ÂèòÈáèÁöÑËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏ÉÔºü Â∞ÜËÅîÂêàÊ¶ÇÁéáÂàÜÂ∏É‰∏≠ÁöÑÊØè‰∏™Êù°ÁõÆ‚ÄúÂÆö‰πâ‚ÄùÂ¶Ç‰∏ãÔºö P(x1,‚Ä¶,xn)=‚àèi=1nŒ∏(xi‚à£parents(Xi)) P\\left(x_{1}, \\ldots, x_{n}\\right)=\\prod_{i=1}^{n} \\theta\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right) P(x1‚Äã,‚Ä¶,xn‚Äã)=i=1‚àèn‚ÄãŒ∏(xi‚Äã‚à£parents(Xi‚Äã)) Êàë‰ª¨ÊòØËøôÊ†∑ÂÆö‰πâÁöÑÔºå‰ΩÜÊòØÔºåÂ±ÄÈÉ®Ê¶ÇÁéáÂÄºÂà∞Â∫ïÊòØ‰ªÄ‰πàÔºüÂØπÂ∫î‰∫é‰ªÄ‰πàÂë¢Ôºü Á≠îÊ°àÊòØÔºåÁΩëÁªú‰∏≠ÁöÑ‚ÄúÂèÇÊï∞‚Äù/Â±ÄÈÉ®Ê¶ÇÁéáÂÄºÔºåÂ∞±ÊòØËÅîÂêàÂàÜÂ∏É‰∏≠ÊâÄÈöêÂê´ÁöÑÊù°‰ª∂Ê¶ÇÁéá$P\\left(x{i} \\mid\\right. parents \\left.\\left(X{i}\\right)\\right)$ Êù°‰ª∂Ê¶ÇÁéáÂàÜÂ∏É\">ËØÅÊòé Ë¥ùÂè∂ÊñØÁΩëÁªúÂèÇÊï∞Êù°‰ª∂Ê¶ÇÁéáÂàÜÂ∏É ‰∏∫‰ªÄ‰πà‰∏çÁõ¥Êé•Â∞ÜÂèÇÊï∞ÂÆö‰πâÊàêÊù°‰ª∂Ê¶ÇÁéáÂÄºÔºü ËÄåÊòØÂÖàÁî±ÂèÇÊï∞ÂÆö‰πâËÅîÂêàÊ¶ÇÁéáÔºåÁÑ∂ÂêéÂÜçÊé®ÂØºÂá∫Ëøô‰∫õÂèÇÊï∞Â∞±ÊòØÊù°‰ª∂Ê¶ÇÁéáÔºü Ë¥ùÂè∂ÊñØÁΩëÁªú‰∏≠ÁöÑÊù°‰ª∂Áã¨Á´ãÊÄßÂÖ≥Á≥ª ÊÄßË¥® 1-ÈùûÂ≠êÂ≠ôÊÄßË¥®ÔºöÁªôÂÆöÁà∂ËäÇÁÇπÔºåÊØè‰∏™Êù°‰ª∂ÂèòÈáèÁã¨Á´ã‰∫éÂÆÉÁöÑÈùûÂ≠êÂ≠ôËäÇÁÇπ ÊÄßË¥® 2-È©¨Â∞îÂèØÂ§´ÊØØÊÄßË¥®ÔºöÁªôÂÆö‰∏Ä‰∏™ÂèòÈáèÁöÑÁà∂ËäÇÁÇπ„ÄÅÂ≠êËäÇÁÇπ„ÄÅÂ≠êËäÇÁÇπÁöÑÁà∂ËäÇÁÇπÔºåËØ•ÂèòÈáèÊù°‰ª∂Áã¨Á´ã‰∫éÁΩëÁªú‰∏≠ÁöÑÊâÄÊúâÂÖ∂‰ªñËäÇÁÇπ„ÄÇ Â¶Ç‰ΩïËØÅÊòé‰∏äËø∞ÊÄßË¥®Ôºü Êù°‰ª∂ÂàÜÂ∏ÉÁöÑÈ´òÊïàË°®Á§∫ Ë¥ùÂè∂ÊñØÁΩëÁªúËäÇÁÇπÈó¥ÁöÑ‰æùËµñÂÖ≥Á≥ªÁî±Êù°‰ª∂ÂàÜÂ∏ÉË°®Á§∫ÔºåÂÅáËÆæÊüêËäÇÁÇπÁöÑÁà∂ËäÇÁÇπÈÉΩ‰∏∫Â∏ÉÂ∞îÂûãÂèòÈáèÔºåÁà∂ËäÇÁÇπÊï∞‰∏∫ kÔºåÂàôÂ°´ÂÜôËØ•ËäÇÁÇπÁöÑÊù°‰ª∂Ê¶ÇÁéáË°® CPT Â∞±Ë¶ÅÊúâ$2^k$‰∏™Êï∞ÂÄºÔºå‰∏îÈúÄË¶ÅÊàë‰ª¨ÂØπÊâÄÊúâÂèØËÉΩÁöÑÊù°‰ª∂‰∫ãÂÆûÊúâÂ§ßÈáèÁöÑÁªèÈ™åÔºàÊÑèÂë≥ÁùÄË¶ÅÊúâÂæàÂ§öÁöÑÊï∞ÊçÆÂêóÔºüÔºâ Ë¥ùÂè∂ÊñØÁΩëÁªúÁ≥ªÁªüÔºüÔºüÊúâËΩØ‰ª∂ÂèØ‰ª•‰ΩøÁî®ÂêóÔºü ÁªôÂÆö‰∏Ä‰∫õ‚ÄúÊ®°Âºè‚ÄùÔºåÂπ∂Êèê‰æõ‰∏Ä‰∫õÂèÇÊï∞Ôºå‰∏§ËÄÖÁªÑÂêàÊù•ÊåáÂÆöÂÆåÊï¥ÁöÑË°®Ôºü Á°ÆÂÆöÊÄßËäÇÁÇπÔºöÂÖ∂ÂÄºÁî±ÂÖ∂Áà∂ËäÇÁÇπÁöÑÂÄºÂÆåÂÖ®Á°ÆÂÆöÔºåÊ≤°Êúâ‰∏çÁ°ÆÂÆöÊÄß„ÄÇÂèØ‰ª•ÊòØÈÄªËæëÂÖ≥Á≥ª„ÄÅÊï∞ÂÄºÂÖ≥Á≥ª ÁâπÂÆö‰∫é‰∏ä‰∏ãÊñáÁöÑÁã¨Á´ãÊÄßÔºüCSI Â¶ÇÊûúÁªôÂÆöÂÖ∂‰ªñÂèòÈáèÁöÑÊüê‰∫õÂÄºÔºå‰∏Ä‰∏™ÂèòÈáèÊù°‰ª∂Áã¨Á´ã‰∫éÂÆÉÁöÑ‰∏Ä‰∫õÁà∂ËäÇÁÇπÔºåÂàôËøô‰∏™Êù°‰ª∂ÂàÜÂ∏ÉÂ≠òÂú® CSI„ÄÇ Â¶ÇÔºöÊ±ΩËΩ¶ÊòØÂê¶ÊçüÂùè Damage ‰æùËµñ‰∫éËΩ¶ÁöÑÂùöÂõ∫Á®ãÂ∫¶ Ruggedeness ÂíåÊ±ΩËΩ¶Âê¶ÂèëÁîü‰∫Ü‰∫ãÊïÖ Accident„ÄÇ ‰ΩÜÊòØÔºåÂ¶ÇÊûúÁü•ÈÅì Accident=FalseÔºåÂç≥Ê±ΩËΩ¶Ê≤°ÊúâÂèëÁîü‰∫ãÊïÖÔºåÈÇ£‰πàÔºåDamage ‰∏çÂÜç‰æùËµñ‰∫éÂÖ∂Ê±ΩËΩ¶ÁöÑÂùöÂõ∫Á®ãÂ∫¶ÔºàÂøΩÁï•ÂèØËÉΩÂØºËá¥Ê±ΩËΩ¶ÊçüÂùèÁöÑÂÖ∂‰ªñÂõ†Á¥†Ôºâ„ÄÇË¥ùÂè∂ÊñØÁ≥ªÁªüÈÄöÂ∏∏‰ΩøÁî®Êù°‰ª∂Âà§Êñ≠ ifelse ËØ≠Ê≥ïÊù•ÊåáÂÆöÊù°‰ª∂ÂàÜÂ∏ÉÔºå‰ª•ÂÆûÁé∞ CSIÔºåÂ¶ÇÔºö P(¬†Damage¬†‚à£¬†Ruggedness,¬†¬†Accident¬†)=¬†if¬†(¬†Accident¬†=¬†false¬†)¬†then¬†d1¬†else¬†d2¬†(Ruggedness¬†) \\begin{array}{l}\\mathbf{P}(\\text { Damage } \\mid \\text { Ruggedness, } \\text { Accident })= \\\\ \\left.\\text { if }(\\text { Accident }=\\text { false }) \\text { then } d_{1} \\text { else } d_{2} \\text { (Ruggedness }\\right)\\end{array} P(¬†Damage¬†‚à£¬†Ruggedness,¬†¬†Accident¬†)=¬†if¬†(¬†Accident¬†=¬†false¬†)¬†then¬†d1‚Äã¬†else¬†d2‚Äã¬†(Ruggedness¬†)‚Äã Âô™Â£∞ÈÄªËæëÂÖ≥Á≥ª-ÂàªÁîª‰∏çÁ°ÆÂÆöÂÖ≥Á≥ª ‚ÄúÂô™Â£∞Êàñ‚ÄùÂÖ≥Á≥ªÔºå‰∏∫Áà∂ËäÇÁÇπÂØºËá¥Â≠êËäÇÁÇπ‰∏∫ÁúüÁöÑËÉΩÂäõÂºïÂÖ•‰∏çÁ°ÆÂÆöÊÄßÔºåÁà∂ËäÇÁÇπ‰∏éÂ≠êËäÇÁÇπÈó¥ÁöÑÂõ†ÊûúÂÖ≥Á≥ªÂèØËÉΩ‰ºöË¢´ÊäëÂà∂Ôºå‰πüÂ∞±ÊòØÂ§±Êïà„ÄÇ Ê®°ÂûãÁöÑ‰∏§‰∏™ÂÅáËÆæÔºö ÂÅáËÆæÊâÄÊúâÂèØËÉΩÁöÑÂéüÂõ†ÈÉΩË¢´ÂàóÂá∫ ÂÅáËÆæÊØè‰∏™Áà∂ËäÇÁÇπÂØπÂ≠êËäÇÁÇπÁöÑÂõ†ÊûúÂÖ≥Á≥ªÁöÑÊäëÂà∂ÊòØÁõ∏‰∫íÁã¨Á´ãÁöÑ Áî±Ê≠§ÂèØÁü•ÔºåÂ≠êËäÇÁÇπ‰∏∫ÂÅáÔºåÂΩì‰∏î‰ªÖÂΩìÔºåÂÆÉÊâÄÊúâ‰∏∫ÁúüÁöÑÁà∂ËäÇÁÇπÈÉΩË¢´ÊäëÂà∂ÔºåÂÖ∂Êù°‰ª∂Ê¶ÇÁéáË°®‰∏∫Ôºö P(xi‚à£parents(Xi))=1‚àí‚àè{j:Xj=¬†true¬†}qj P\\left(x_{i} \\mid\\right. parents \\left.\\left(X_{i}\\right)\\right)=1-\\prod_{\\left\\{j: X_{j}=\\text { true }\\right\\}} q_{j} P(xi‚Äã‚à£parents(Xi‚Äã))=1‚àí{j:Xj‚Äã=¬†true¬†}‚àè‚Äãqj‚Äã ‰æùËµñ‰∫é$k$‰∏™Áà∂ËäÇÁÇπÁöÑÂèòÈáèÁöÑÂô™Â£∞ÈÄªËæëÂÖ≥Á≥ªÔºåÂèØ‰ª•‰ΩøÁî®$O(k)$‰∏™ÂèÇÊï∞ÔºåËÄåÈùû$O(2^k)$‰∏™ÔºåÊù•ÊèèËø∞ÂÆåÂÖ®Êù°‰ª∂Ê¶ÇÁéáË°®„ÄÇ ËøûÁª≠ÂèòÈáèÁöÑË¥ùÂè∂ÊñØÁΩëÁªú ÊñπÊ≥ïÔºö1 ËøûÁª≠ÂèòÈáèÁ¶ªÊï£Âåñ 2 Áî®‰∏ÄÊóèÊ†áÂáÜÁöÑÊ¶ÇÁéáÂØÜÂ∫¶ÂáΩÊï∞Êù•ÂÆö‰πâËøûÁª≠ÂèòÈáè Ê∑∑ÂêàË¥ùÂè∂ÊñØÁΩëÁªú-ÂêåÊó∂ÂÖ∑ÊúâÁ¶ªÊï£ÂíåËøûÁª≠ÂèòÈáè ËøûÁª≠ ‚Üí ËøûÁª≠ÔºõËøûÁª≠ ‚Üí Á¶ªÊï£ÔºõÁ¶ªÊï£ ‚Üí ËøûÁª≠ÔºõÁ¶ªÊï£ ‚Üí Á¶ªÊï£„ÄÇ ÂøÖÈ°ªÊåáÂÆö/Á°ÆÂÆö‰∏§ÁßçÂàÜÂ∏ÉÔºö ÂÖ∑ÊúâÁ¶ªÊï£ÊàñËøûÁª≠Áà∂ËäÇÁÇπÁöÑËøûÁª≠ÂûãÂèòÈáèÁöÑÊù°‰ª∂ÂàÜÂ∏É ÂÖ∑ÊúâËøûÁª≠Áà∂ËäÇÁÇπÁöÑÁ¶ªÊï£ÂûãÈöèÊú∫ÂèòÈáèÁöÑÊù°‰ª∂ÂàÜÂ∏É Á¶ªÊï£ ‚Üí ËøûÁª≠ÔºöÊûö‰∏æÁ¶ªÊï£Áà∂ËäÇÁÇπÁöÑÂèØËÉΩÂÄºÔºå‰∏∫ÊØè‰∏™ÂèØËÉΩÂÄºÈÄâÊã©‰∏Ä‰∏™ÂàÜÂ∏É„ÄÇ ËøûÁª≠ x‚Üí ËøûÁª≠ yÔºöÊåáÂÆö y ÁöÑÂàÜÂ∏ÉÂ¶Ç‰Ωï‰æùËµñ‰∫é xÔºåÂç≥Â∞Ü y ÁöÑÊ†áÂáÜÂàÜÂ∏É‰∏≠ÁöÑÂèÇÊï∞ÔºåÊåáÂÆö‰∏∫ x ÁöÑÂáΩÊï∞„ÄÇ y ÁöÑÂàÜÂ∏ÉÂ±û‰∫é‰∏ÄÁªÑÊ¶ÇÁéáÂØÜÂ∫¶ÂáΩÊï∞Ôºåy ÂàÜÂ∏ÉÁöÑÂèÇÊï∞‰æùËµñ‰∫é x„ÄÇ Â¶ÇÁ∫øÊÄßÈ´òÊñØÂàÜÂ∏ÉÔºö P(y‚à£x)=N(y;a‚ãÖx+b,œÉ2)=1œÉ(2œÄ)1/2e‚àí12(y‚àí(a‚ãÖh+b)œÉ)2 P(y \\mid x)= \\mathcal{N}\\left(y ; a \\cdot x +b, \\sigma^{2}\\right)= \\frac{1}{\\sigma (2 \\pi)^{1/2}} e^{-\\frac{1}{2}\\left(\\frac{y-\\left(a\\cdot h+b\\right)}{\\sigma}\\right)^{2}} P(y‚à£x)=N(y;a‚ãÖx+b,œÉ2)=œÉ(2œÄ)1/21‚Äãe‚àí21‚Äã(œÉy‚àí(a‚ãÖh+b)‚Äã)2 y ÁöÑÊù°‰ª∂ÂàÜÂ∏ÉÁöÑÂùáÂÄº$\\mu=a \\cdot x +b$ÈöèÁà∂ËäÇÁÇπÁöÑÂÄº$x$Á∫øÊÄßÂèòÂåñÔºåÊ†áÂáÜÂ∑Æ$\\sigma^{2}$Âõ∫ÂÆö„ÄÇ ËøûÁª≠ ‚Üí Á¶ªÊï£ÔºöÊ†πÊçÆÊÉÖÊôØÁ°ÆÂÆöÔºü Cost‚ÜíBuysÔºö‰ª∑Ê†º‰ΩéÔºå‰ºöË¥≠‰π∞Ôºõ‰ª∑Ê†ºÈ´òÔºå‰∏ç‰ºö‰π∞Ôºõ‰ª∑Ê†ºÂ§Ñ‰∫é‰∏≠Èó¥Âå∫ÂüüÔºå‰π∞ÁöÑÊ¶ÇÁéáÂπ≥Á®≥ÂèòÂåñ„ÄÇ ÂÉè‰∏Ä‰∏™‚ÄúËΩØ‚ÄùÈòàÂÄºÂáΩÊï∞ÔºàËΩØÊøÄÊ¥ªÂáΩÊï∞ÔºüSoftMaxÔºüÔºâ Â¶Ç‰ΩïÁ†îÁ©∂‰∏§‰∏™ÂèòÈáèÁöÑÁöÑÁõ∏ÂÖ≥ÊÄßÔºü ÂÅáËÆæÊàë‰ª¨ÊÉ≥Ë¶ÅÁ†îÁ©∂‰∏™‰∫∫Êî∂ÂÖ•‰∏éÂì™‰∫õÂõ†Á¥†ÊúâÂÖ≥ÔºåÊàë‰ª¨ÈÄöËøáË∞ÉÊü•Ëé∑Âæó‰∫ÜË∞ÉÊü•Êï∞ÊçÆÔºåÂÖ∏ÂûãÁöÑË°®È°π‰∏∫Ôºö ÂßìÂêç Êî∂ÂÖ• Áà∂ÊØçÂèóÊïôËÇ≤Á®ãÂ∫¶ ÂÆ∂Â∫≠Êî∂ÂÖ• ÂèóÊïôËÇ≤Á®ãÂ∫¶ Âº†‰∏â 5600 Â§ßÂ≠¶ÊØï‰∏ö 14000 Â§ßÂ≠¶ÊØï‰∏ö Áé∞Âú®ÂÅáËÆæÊàë‰ª¨Ë¶ÅÁ†îÁ©∂‰∏™‰∫∫Êî∂ÂÖ•‰∏é‰∏™‰∫∫ÂèóÊïôËÇ≤Á®ãÂ∫¶ÁöÑÂÖ≥Á≥ªÔºåÊàë‰ª¨Â∫îËØ•ÊÄé‰πàÂÅöÔºü Áõ¥ËßÇÂú∞ÔºåÊàë‰ª¨Âú®‰∏≠Â≠¶Êó∂ÈÉΩÂ≠¶ËøáÁöÑ‚ÄúÊéßÂà∂ÂèòÈáèÊ≥ï‚ÄùÔºåÂõ†Ê≠§ÂèØ‰ª•ÊéßÂà∂ÂÖ∂‰ªñÂèòÈáèÔºàPEÔºåIÔºâ‰∏çÂèò/Áõ∏ÂêåÔºåËßÇÂØü‰∏™‰∫∫Êî∂ÂÖ•ÈöèÂèóÊïôËÇ≤Á®ãÂ∫¶ÁöÑÂèòÂåñËßÑÂæã„ÄÇÁî±‰∫éÂÖ∂‰ªñÂèòÈáèÈÉΩÁõ∏ÂêåÔºåÂèó‰∏™‰∫∫Êî∂ÂÖ•ÁöÑÂèòÂåñÂ∫îÂÆåÂÖ®Áî±ÂèóÊïôËÇ≤Á®ãÂ∫¶ÂΩ±Âìç„ÄÇ ‰∏îÊÖ¢ÔºåÂÖ∂‰ªñÂèòÈáèÁúüÁöÑÈÉΩÁõ∏Âêå‰∫ÜÂêóÔºüÂØπ‰∫éÊ≤°ÊúâËßÇÊµãÂà∞ÁöÑÂèòÈáèÔºåÊàñËÄÖ‰∏çËÉΩËßÇÊµãÁöÑÂèòÈáèÔºåÊàë‰ª¨Ê†πÊú¨Ê≤°ÊúâÂäûÊ≥ïÊéßÂà∂ÔºåÂõ†‰∏∫Êàë‰ª¨Êâã‰∏äÂè™Êúâ‰∏ÄÊù°Êù°ÁöÑÊï∞ÊçÆ„ÄÇ ‰∏∫‰∫ÜÊõ¥Â•ΩÂú∞„ÄÅÊõ¥Ê∏ÖÊô∞Âú∞Á†îÁ©∂ÂèòÈáèÈó¥ÁöÑÁõ∏ÂÖ≥ÂÖ≥Á≥ªÔºåÊàë‰ª¨ÂèØ‰ª•Ê†πÊçÆ‚ÄúÂÖàÈ™åÁü•ËØÜ‚Äù‚Äî ‰πüÂ∞±ÊòØÊàë‰ª¨ÂØπÂèòÈáèÈó¥Âõ†ÊûúÂÖ≥Á≥ªÁöÑ‰∏ªËßÇËÆ§ËØÜÔºåÁªòÂà∂Âá∫‰∏Ä‰∏™ÂèòÈáèÂõ†ÊûúÂÖ≥Á≥ªÂõæÔºåÂ¶Ç‰∏ãÂõæ„ÄÇÔºàÊ≥®ÊÑèÔºåÁªòÂà∂ËØ•ÂõæÔºåÁõ∏ÂΩìÂÖ≥‰∫éÂºïÂÖ•‰∫Ü‰∏ÄÁßçÂÅáËÆæÔºåÂÆåÂÖ®ÂèØ‰ª•Â≠òÂú®Âè¶Áæ§Á†îÁ©∂‰∫∫ÂëòÔºåÁîªÂá∫ÂÆåÂÖ®‰∏çÂêåÁöÑÂèòÈáèÂõ†ÊûúÂÖ≥Á≥ªÂõæÔºå‰πüÂ∞±ÊòØÊàë‰ª¨ÂØπÂèòÈáèÈó¥ÂÖ≥Á≥ªÊúâ‰∏çÂêåÁöÑÂÅáËÆæ„ÄÇÊé•‰∏ãÊù•ÂØπÂèòÈáèÁõ∏ÂÖ≥ÊÄßÁöÑÂàÜÊûêÔºåÈÉΩÊòØÂª∫Á´ãÂú®ËØ•ÂÅáËÆæÂü∫Á°Ä‰πã‰∏äÁöÑ„ÄÇÔºâ ‰ªéÁªüËÆ°‰∏äÔºåÊàë‰ª¨Âè™ËÉΩÈÄöËøáÊï∞ÊçÆÂàÜÊûêÂèòÈáèÈó¥ÁöÑ‚ÄúÁõ∏ÂÖ≥ÊÄß‚ÄùÔºåËÄå‰∏çËÉΩÂæóÂá∫‚ÄúÂõ†ÊûúÊÄß‚Äù„ÄÇÊâÄ‰ª•ÔºåË¶ÅÁ†îÁ©∂Êî∂ÂÖ•‰∏éÂ§ßÂ≠¶ÊïôËÇ≤ÁöÑÔºàÁõ¥Êé•ÔºâÂÖ≥Á≥ªÔºåÊàë‰ª¨È¶ñÂÖàË¶ÅÊòéÁ°ÆÔºåÂì™‰∫õÂõ†Á¥† or ÂèòÈáèÔºå‰ºöÂΩ±ÂìçÊî∂ÂÖ•Ôºü‰πüÂ∞±ÊòØËØ¥ÔºåÂì™‰∫õÂèòÈáè‰∏éÊî∂ÂÖ•‰πãÈó¥Â≠òÂú®Áõ∏ÂÖ≥ÊÄßÔºü Á†îÁ©∂ÂèóÊïôËÇ≤Á®ãÂ∫¶ÂØπÊî∂ÂÖ•ÁöÑÁõ¥Êé•ÂΩ±ÂìçÔºå‰πüÂ∞±ÊòØ D‚ÜíY ËøôÊù°Ëæπ„ÄÇÂ∏åÊúõ Y ÁöÑÂèòÂåñÔºå‰ªÖÁî± D‚ÜíY ÁöÑÂΩ±ÂìçÊâÄÂÜ≥ÂÆö„ÄÇÈÇ£Â∞±Ë¶ÅÁ†îÁ©∂ÔºåD ËøòËÉΩÈÄöËøáÂì™‰∫õ‚ÄúË∑ØÂæÑ‚ÄùÂΩ±ÂìçÂà∞ Y Âë¢Ôºü D ‚Üí Y D ‚Üê I ‚Üí Y D ‚Üê PE ‚Üí I ‚Üí Y D ‚Üê B ‚Üí PE ‚Üí I ‚Üí Y ‰∏äÈù¢Âàó‰∏æ‰∫Ü 4 Êù°Áî± D Âá∫ÂèëÔºåÂèØËÉΩÂΩ±ÂìçÂà∞ Y ÁöÑ‚ÄúË∑ØÂæÑ‚Äù„ÄÇÊ≥®ÊÑèÔºåËØªËÄÖÂèØËÉΩ‰ºöÁñëÊÉëÔºåD ÂØπ Y ÁöÑÂΩ±ÂìçË∑ØÂæÑ‰∏∫‰ªÄ‰πàËøòÊúâÈÄÜÂêëÁöÑËæπÂë¢ÔºüÊúâÂêëËæπ‰ª£Ë°®ÁùÄÂèòÈáèÈó¥Â≠òÂú®Âõ†ÊûúÂÖ≥Á≥ªÔºåÂ¶ÇÊûúÊúâÈÄÜÂêëËæπÔºåÂ≤Ç‰∏çÊòØÊÑèÂë≥ÁùÄ‚ÄúÁªìÊûú‰ºöÂΩ±ÂìçÂéüÂõ†‚ÄùÔºü Âõ†ÊûúÂÖ≥Á≥ª‰∏äËÆ≤ÔºåÂéüÂõ†ÂΩìÁÑ∂‰∏ç‰ºöÂΩ±ÂìçÁªìÊûú„ÄÇ‰ΩÜÊòØÔºåÊ≥®ÊÑèÊàë‰ª¨ÊâÄÈù¢‰∏¥ÁöÑÂÆûÈôÖÈóÆÈ¢òÁöÑÊÉÖÊôØÔºåÊàë‰ª¨ÊâÄÈù¢ÂØπÁöÑÊòØË∞ÉÊü•ÂæóÂà∞ÁöÑÊï∞ÊçÆ„ÄÇ‰ªéÊï∞ÊçÆÂàÜÂ∏ÉÁöÑËßíÂ∫¶ÁúãÔºåÂ¶ÇÊûúÊàë‰ª¨ÂØπÁªìÊûú X Âä†‰ª•ÈôêÂà∂Ôºå‰πüÂ∞±ÊòØÈÄâÊã©Âá∫ X Êª°Ë∂≥‰∏ÄÂÆöË¶ÅÊ±ÇÁöÑÊï∞ÊçÆÔºå‰∏ÄÂÆö‰ºöÂΩ±ÂìçÂéüÂõ† Y ÁöÑÂàÜÂ∏É„ÄÇ‰∏æ‰æãÊù•ËÆ≤ÔºåÂÅáËÆæ‚Äú‰∏ãÈõ®‚ÄùÂíå‚ÄúÊ¥íÊ∞¥ËΩ¶ÁªèËøá‚ÄùÈÉΩ‰ºöÂØºËá¥‚ÄúËçâÂù™ÂèòÊπø‚ÄùÔºåÈÇ£‰πàÔºåËßÇÊµãÂà∞‚ÄúËçâÂù™ÂèòÊπø‚ÄùÔºå‰∏ÄÂÆö‰ºöÂΩ±ÂìçÊàë‰ª¨ÂØπ‚Äú‰∏ãÈõ®‚ÄùÂíå‚ÄúÊ¥íÊ∞¥ËΩ¶ÁªèËøá‚ÄùÂèëÁîüÁöÑÂà§Êñ≠ÔºåÂõ†‰∏∫‰∏§ËÄÖËá≥Â∞ëÊúâÂÖ∂‰∏ÄÂèëÁîü‰∫Ü„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÂú®ÁªüËÆ°ÈáåÈù¢ÔºåÈôêÂà∂ÁªìÊûúÔºå‰∏ÄÂÆö‰ºö‚ÄúÊª§Âéª‚ÄùÊüê‰∫õÂéüÂõ†ÔºåËøõËÄåÂØºËá¥ÂéüÂõ†Êï∞ÊçÆÂàÜÂ∏ÉÁöÑÂèòÂåñ„ÄÇ‰∫éÊòØÔºåÁªìÊûú‰ºö‚ÄúÂΩ±Âìç‚ÄùÂà∞ÂéüÂõ†„ÄÇ ÁªìÊûú‰ºö‚ÄúÂΩ±Âìç‚ÄùÂéüÂõ†ÔºåËøôÂêØÂèëÊàë‰ª¨Á†îÁ©∂ÂèòÈáèÈó¥ÁöÑÁõ∏ÂÖ≥ÂÖ≥Á≥ªÔºö‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÔºåÂèòÈáèÈó¥Â≠òÂú®Áõ∏ÂÖ≥ÂÖ≥Á≥ªÔºå‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÂèà‰∏çÂ≠òÂú®Âë¢Ôºü Êàë‰ª¨ÈááÂèñ‚ÄúÈ©¨Â∞îÂèØÂ§´ÂÅáËÆæ‚ÄùÔºåÂç≥‚ÄúÁªìÊûú‰ªÖÂç¥ÂÜ≥‰∫éÂéüÂõ†ÔºåÂú®ÂéüÂõ†ÁªôÂÆöÊó∂ÔºåÁªìÊûú‰πãÈó¥Êù°‰ª∂Áã¨Á´ã‚ÄùÔºå‰∫éÊòØ‰∏äËø∞Âõ†ÊûúÂÖ≥Á≥ªÂõæÂ∞±ÂèØ‰ª•ËΩ¨ÂåñÊàê‚ÄúË¥ùÂè∂ÊñØÁΩëÁªúÊ®°Âûã‚Äù„ÄÇ ÂèÇËÄÉË¥ùÂè∂ÊñØÁΩëÁªúÊ®°Âûã‰∏≠ÂèòÈáèÈó¥ÁöÑÁã¨Á´ãÊÄßÂÆöÁêÜÔºàË¥ùÂè∂ÊñØÁΩëÁªúÁöÑÂÖ∏Âûã/Âü∫Êú¨ÁªìÊûÑÔºâÔºö ÁªôÂÆöÁà∂ËäÇÁÇπÔºåÂ≠êËäÇÁÇπÊù°‰ª∂Áã¨Á´ãÔºõÁà∂ËäÇÁÇπÊú™Áü•ÔºåÂ≠êËäÇÁÇπÁõ∏ÂÖ≥„ÄÇ ÁªôÂÆöÂÜ≤ÊíûÂõ†Â≠êÔºåÁà∂ËäÇÁÇπÁõ∏ÂÖ≥ÔºõÈáçË£ÖÂõ†Â≠êÊú™Áü•ÔºåÁà∂ËäÇÁÇπÁã¨Á´ãÔºàÊ≤°ÊúâÂÖ∂‰ªñÁõ∏ÂÖ≥ÂÖ≥Á≥ªÔºâ„ÄÇ ÁªôÂÆö‰∏≠Èó¥ËäÇÁÇπÔºåÂÖàÂ∫èËäÇÁÇπ‰∏éÂêéÂ∫èËäÇÁÇπÊù°‰ª∂Áã¨Á´ãÔºõ‰∏≠Èó¥ËäÇÁÇπÊú™Áü•ÔºåÂÖàÂ∫èÂêéÂ∫èÁõ∏ÂÖ≥„ÄÇ Ê≥®ÊÑèÔºåÁõ∏ÂÖ≥ÊÄß‰∏çÂÖ∑ÊúâÊñπÂêëÊÄßÔºå‰πüÂ∞±ÊòØËØ¥ÔºåX ‰∏é Y Áõ∏ÂÖ≥ÔºåÊÑèÂë≥ÁùÄÂèòÈáèÂèòÂåñ‰∫ßÁîüÁöÑ‚ÄúÂΩ±Âìç‚ÄùÔºåÂèØ‰ª•‰ªé X ‰º†ÈÄíÂà∞ YÔºå‰πüÂèØ‰ª•‰ªé Y ‰º†ÈÄíÂà∞ X„ÄÇ ÂÜçÊ¨°ÂàÜÊûê D ÂèØËÉΩÂΩ±ÂìçÂà∞ Y ÁöÑÂõõÊù°Ë∑ØÂæÑÔºåÊàë‰ª¨Â∏åÊúõ D ÂèòÂåñ‰∫ßÁîüÁöÑ‚ÄúÂΩ±Âìç‚ÄùÔºåÂè™‰ªéË∑ØÂæÑ 1Ôºå‰πüÂ∞±ÊòØÁõ¥Êé•Ë∑ØÂæÑÔºåÁõ¥Êé•‰º†ÂØºÂà∞ Y„ÄÇÂ¶Ç‰ΩïÂ∞ÜÂêé 3 Êù°Ë∑ØÂæÑÂ†µ‰ΩèÔºüÊàë‰ª¨Â∏åÊúõÂèØ‰ª•ÈÄöËøá‚ÄúÊéßÂà∂‚ÄùÊüê‰∫õÂèòÈáèÔºå‰ΩøÂæó‚ÄúÂΩ±Âìç‰º†ÈÄíÈìæ‚Äù‰∏≠Êñ≠„ÄÇ‰πüÂ∞±ÊòØÁªôÂÆö‚ÄúÈìæ‚Äù‰∏≠ÁöÑÊüê‰∫õÂèòÈáèÔºå‰ΩøÂæóÈìæ‰∏≠‰∏§ËäÇÁÇπ‚ÄúÁã¨Á´ã‚ÄùÔºå‰πüÂ∞±‰∏≠Êñ≠‰∫Ü‚ÄúÂΩ±Âìç‚ÄùÁöÑ‰º†ÈÄí„ÄÇ Ê≥®ÊÑèÔºöÂæÖÁ†îÁ©∂ÂèòÈáèÔºàDÔºåYÔºâÂíåÈöêÂê´ÂèòÈáèÔºàBÔºâËÇØÂÆöÊòØ‰∏çËÉΩÊéßÂà∂ or Êó†Ê≥ïÊéßÂà∂ÁöÑ ÊéßÂà∂ÂèòÈáèIÔºö2„ÄÅ3„ÄÅ4 ‰∏≠Êñ≠ ÊéßÂà∂ÂèòÈáèPEÔºö3„ÄÅ4 ‰∏≠Êñ≠ ‰∫éÊòØÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÊéßÂà∂IÔºåÂ∞±ÂèØ‰ª•‰øùËØÅÔºåÊî∂ÂÖ• Y ÁöÑÂèòÂåñ‰ªÖÁî±ÂèóÊïôËÇ≤Á®ãÂ∫¶ D ÁöÑÂΩ±Âìç‰∫Ü„ÄÇ ÔºàÂú®ÁªôÂÆöÁöÑÂèòÈáèÂõ†ÊûúÂÖ≥Á≥ªÁöÑÂÅáËÆæ‰∏ãÔºåÂú®È©¨Â∞îÂèØÂ§´Êù°‰ª∂ÂÅáËÆæ‰∏ãÔºâ Âá†ÁÇπËØ¥ÊòéÔºö ÈóÆÈ¢ò 1Ôºö‚ÄúÊéßÂà∂ÂèòÈáèÊ≥ï‚ÄùÊúâÈóÆÈ¢òÂêóÔºü ÂÅöÂÆûÈ™åÁöÑÊéßÂà∂ÂèòÈáèÊ≥ïÔºåÊéßÂà∂‰∫ÜÂèØËÉΩÂØπÁªìÊûú‰∫ßÁîüÂΩ±ÂìçÁöÑÂÖ∂‰ªñÂéüÂõ†ÔºåÂπ∂ÂÅáËÆæÊó†Ê≥ïÊéßÂà∂ÁöÑÂõ†Á¥†ÈÉΩ‚ÄúÊ≤°Âèò‚ÄùÔºåÂú®ÂÅáÊÉ≥ÁöÑ‰∏ñÁïåÁöÑÊ¶ÇÁéáÂõæ‰∏≠ÔºåÊâÄÊúâÂÖ∂‰ªñÂèòÈáèÈÉΩ‚ÄúË¢´ÊéßÂà∂‚ÄùÔºåÂõ†ËÄåÂèØ‰ª•Êñ≠Ë®ÄÔºöÁªìÊûúÁöÑÂèòÂåñÔºå‰ªÖÁî±ÂæÖÁ†îÁ©∂ÁöÑÂéüÂõ†ÁöÑÂèòÂåñÊâÄÂÜ≥ÂÆö„ÄÇ ‰ΩÜÂú®ÂØπË∞ÉÊü•Êï∞ÊçÆËøõË°åÁªüËÆ°ÂàÜÊûêÊó∂ÔºåÊàë‰ª¨‰ªÖËÉΩÊéßÂà∂Ë∞ÉÊü•ÂæóÂà∞ÁöÑÊï∞ÊçÆÔºåÂØπ‰∫éÊ≤°ÊúâË∞ÉÊü•ÁöÑÊï∞ÊçÆÔºåÊàë‰ª¨Êó†Ê≥ï‰øùËØÅÂÆÉ‰ª¨Áõ∏ÂêåÔºåÂú®Êàë‰ª¨ÂÅáËÆæÁöÑÊ¶ÇÁéáÂõæ‰∏≠ÔºåÂ∞±Êó†Ê≥ï‰øùËØÅÁªìÊûúÂè™‰∏éÂéüÂõ†Áõ¥Êé•Áõ∏ÂÖ≥„ÄÇ Â∑•ÂÖ∑ÂèòÈáè ÂÅáËÆæË¶ÅÁ†îÁ©∂ÂèòÈáè Z ‰∏é Y ÁöÑÁõ¥Êé•ÂÖ≥Á≥ªÔºåÁªòÂà∂Âá∫ÁöÑÂÖ≥Á≥ªÂõæÂ¶ÇÊ°ÜÂÜÖÊâÄÁ§∫„ÄÇÊàë‰ª¨ÂèëÁé∞Êó†Ê≥ïÊéßÂà∂Êüê‰∏™ÂèòÈáèÔºå‰ΩøÂæó Y‚Üê U ‚Üí Z ËøôÊù°Ë∑ØÂæÑË¢´‰∏≠Êñ≠„ÄÇÊÄé‰πàÂäûÂë¢Ôºü Êó¢ÁÑ∂‰∏çËÉΩÁõ¥Êé•Á†îÁ©∂ Z ‰∏é Y ÁöÑÁõ¥Êé•ÂÖ≥Á≥ªÔºåÈÇ£Êàë‰ª¨ËØïÁùÄÈó¥Êé•Á†îÁ©∂‰∏Ä‰∏ãÔºöÂºïÂÖ•Â∑•ÂÖ∑ÂèòÈáè X„ÄÇ Á†îÁ©∂ X‚ÜíY‚ÜíZ Á†îÁ©∂ X‚ÜíY Â¶Ç‰ΩïÂæóÂá∫ Y‚ÜíZÔºü ËØÅÊòé È©¨Â∞îÂèØÂ§´ÊØØÊÄßË¥® Â¶Ç‰ΩïËØÅÊòéÔºüËØÅÊòéÁöÑ‰∏ÄËà¨ÊÄùË∑ØÊòØÊÄéÊ†∑ÁöÑÔºü Á•ñÂÖàÂõæ Ancestral Graph wiki Ê∑∑ÂêàÂõæÔºüÊúâÂêëÂõæ Êó†ÊúâÂêëÁéØË∑Ø - ÂêéÈó®Ë∑ØÂæÑÔºöÈô§Áõ¥Êé•Ë∑ØÂæÑÂ§ñÁöÑÁõ∏ÂÖ≥Ë∑ØÂæÑ 1. „ÄäÊú∫Âô®Â≠¶‰π†„Äã-Âë®ÂøóÂçé-Ê∏ÖÂçéÂ§ßÂ≠¶Âá∫ÁâàÁ§æ-P156 ‚Ü© 2. Artificial Intelligence: A Morden Approach-4th ‚Ü© "},"Learn/LearnAIMA/Ch18/Ch18.html":{"url":"Learn/LearnAIMA/Ch18/Ch18.html","title":"Ch18","keywords":"","body":"Á¨¨ 18 Á´† Â§öÊô∫ËÉΩ‰ΩìÂÜ≥Á≠ñ 18.1 Â§öÊô∫ËÉΩ‰ΩìÁéØÂ¢ÉÁöÑÁâπÊÄß 18.1.1 Âçï‰∏™ÂÜ≥Á≠ñËÄÖ 18.1.2 Â§öÂÜ≥Á≠ñËÄÖ 18.1.3 Â§öÊô∫ËÉΩ‰ΩìËßÑÂàí 18.1.4 Â§öÊô∫ËÉΩ‰ΩìËßÑÂàíÔºöÂêà‰Ωú‰∏éÂçèË∞É 18.2 ÈùûÂêà‰ΩúÂçöÂºàËÆ∫ 18.2.1 ÂçïÊ≠•ÂçöÂºàÔºöÊ≠£ÂàôÂΩ¢ÂºèÂçöÂºà 18.2.2 Á§æ‰ºöÁ¶èÂà© 18.2.3 ÈáçÂ§çÂçöÂºà 18.2.4 Â∫èË¥ØÂçöÂºàÔºöÊâ©Â±ïÂΩ¢Âºè 18.2.5 ‰∏çÁ°ÆÂÆöÊî∂Áõä‰∏éËæÖÂä©ÂçöÂºà 18.3 Âêà‰ΩúÂçöÂºàËÆ∫ 18.3.1 ËÅîÁõüÁªìÊûÑ‰∏éÁªìÊûú 18.3.2 Âêà‰ΩúÂçöÂºà‰∏≠ÁöÑÁ≠ñÁï• 18.3.3 Âêà‰ΩúÂçöÂºà‰∏≠ÁöÑËÆ°ÁÆó 18.4 ÂÅöÈõÜ‰ΩìÂÜ≥Á≠ñ 18.4.1 Âú®ÂêàÂêåÁΩë‰∏≠ÂàÜÈÖç‰ªªÂä° 18.4.2 ÈÄöËøáÊãçÂçñÂàÜÈÖçÁ®ÄÁº∫ËµÑÊ∫ê 18.4.3 ÊäïÁ•® 18.4.4 ËÆÆ‰ª∑ Â∞èÁªì ÂΩìÁéØÂ¢É‰∏≠ÊúâÂÖ∂‰ªñÊô∫ËÉΩ‰ΩìÈúÄË¶ÅÂêà‰ΩúÊàñÁ´û‰∫âÊó∂ÔºåÂ§öÊô∫ËÉΩ‰ΩìËßÑÂàíÊòØÂøÖË¶ÅÁöÑ„ÄÇÊàë‰ª¨ÂèØ‰ª•Âà∂ÂÆöËÅîÂêàËßÑÂàíÔºå‰ΩÜÂ¶ÇÊûú‰∏§‰∏™Êô∫ËÉΩ‰ΩìË¶ÅÂ∞±ÊâßË°åÂì™‰∏™ËÅîÂêàËßÑÂàíËææÊàê‰∏ÄËá¥ÔºåÂ∞±ÂøÖÈ°ª‰ª•ÊüêÁßçÂçèË∞ÉÂΩ¢ÂºèÂä†‰ª•Âä†Âº∫„ÄÇ ÂçöÂºàËÆ∫ÊèèËø∞ÁöÑÊòØÂú®Â§ö‰∏™Êô∫ËÉΩ‰ΩìÁõ∏‰∫í‰ΩúÁî®ÁöÑÊÉÖÂÜµ‰∏ãÔºåÊô∫ËÉΩ‰ΩìÁöÑÁêÜÊÄßË°å‰∏∫„ÄÇÂçöÂºàËÆ∫‰πã‰∫éÂ§öÊô∫ËÉΩ‰ΩìÂÜ≥Á≠ñÔºåÊ≠£Â¶ÇÂÜ≥Á≠ñËÆ∫‰πã‰∫éÂçïÊô∫ËÉΩ‰ΩìÂÜ≥Á≠ñ„ÄÇ ÂçöÂºàËÆ∫‰∏≠ÁöÑËß£Ê¶ÇÂøµÊó®Âú®ÊèèËø∞ÂçöÂºàÁöÑÁêÜÊÄßÁªìÊûú‚Äî‚ÄîÂ¶ÇÊûúÊØè‰∏™Êô∫ËÉΩ‰ΩìÈÉΩÈááÂèñÁêÜÊÄßË°å‰∏∫ÁöÑÊÉÖÂÜµ‰∏ãÂèØËÉΩÂá∫Áé∞ÁöÑÁªìÊûú„ÄÇ ÈùûÂêà‰ΩúÂçöÂºàËÆ∫ÂÅáËÆæÊô∫ËÉΩ‰ΩìÂøÖÈ°ªÁã¨Á´ãÂÅöÂá∫ÂÜ≥Á≠ñ„ÄÇÁ∫≥‰ªÄÂùáË°°ÊòØÈùûÂêà‰ΩúÂçöÂºàËÆ∫‰∏≠ÊúÄÈáçË¶ÅÁöÑËß£Ê¶ÇÂøµ„ÄÇÁ∫≥‰ªÄÂùáË°°ÊòØ‰∏ÄÁßçÊô∫ËÉΩ‰ΩìÊ≤°ÊúâÂä®Êú∫ÂÅèÁ¶ªÂÖ∂ÊåáÂÆöÁ≠ñÁï•ÁöÑÁ≠ñÁï•ÁªÑÂêà„ÄÇÊàë‰ª¨ÊúâÂ§ÑÁêÜÈáçÂ§çÂçöÂºàÂíåÂ∫èË¥ØÂçöÂºàÁöÑÊäÄÂ∑ß„ÄÇ Âêà‰ΩúÂçöÂºàËÆ∫ËÄÉËôëÁöÑÊòØÊô∫ËÉΩ‰Ωì‰∏∫‰∫ÜÂêà‰ΩúËÄåËææÊàêÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÂçèÁ∫¶‰ª•ÂΩ¢ÊàêËÅîÁõüÁöÑËÆæÁΩÆ„ÄÇÂêà‰ΩúÂçöÂºà‰∏≠ÁöÑËß£Ê¶ÇÂøµËØïÂõæÈòêÊòéÂì™‰∫õËÅîÁõüÊòØÁ®≥ÂÆöÁöÑÔºàÊ†∏ÔºâÔºå‰ª•ÂèäÂ¶Ç‰ΩïÂÖ¨Âπ≥ÂàÜÈÖçËÅîÁõüËé∑ÂæóÁöÑÂÄºÔºàÊ≤ôÊôÆÂà©ÂÄºÔºâ„ÄÇ ÂØπ‰∫éÊüê‰∫õÈáçË¶ÅÂæóÂ§öÊô∫ËÉΩ‰ΩìÂÜ≥Á≠ñÁ±ªÊúâ‰∏ìÈó®ÁöÑÊäÄÊúØÔºö‰ªªÂä°ÂÖ±‰∫´ÁöÑÂêàÂêåÁΩëÔºåË¢´Áî®Êù•ÊúâÊïàÂú∞ÂàÜÈÖçÁ®ÄÁº∫ËµÑÊ∫êÁöÑÊãçÂçñÔºåÂ∞±ÂÖ±ÂêåÂà©ÁõäËøõË°åËÆÆ‰ª∑‰ª•ËææÊàêÂçèÁ∫¶Ôºå‰ª•ÂèäËÅöÈõÜÂÅèÂ•ΩÁöÑÊäïÁ•®Á®ãÂ∫è„ÄÇ "},"Learn/LearnCUDA/APT-CUDA.html":{"url":"Learn/LearnCUDA/APT-CUDA.html","title":"APT-CUDA","keywords":"","body":"(base) ‚ûú sys-ycompiler git:(master) ‚úó sudo apt install nvidia-cuda-dev Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: dkms firmware-nvidia-gsp glx-alternative-mesa glx-alternative-nvidia glx-diversions libaccinj64-11.8 libcu++-dev libcub-dev libcublas11 libcublaslt11 libcuda1 libcudart11.0 libcufft10 libcufftw10 libcuinj64-11.8 libcupti-dev libcupti-doc libcupti11.8 libcurand10 libcusolver11 libcusolvermg11 libcusparse11 libgl-dev libglx-dev libnppc11 libnppial11 libnppicc11 libnppidei11 libnppif11 libnppig11 libnppim11 libnppist11 libnppisu11 libnppitc11 libnpps11 libnvblas11 libnvcuvid1 libnvidia-cfg1 libnvidia-ml-dev libnvidia-ml1 libnvidia-pkcs11-openssl3 libnvidia-ptxjitcompiler1 libnvjpeg11 libnvrtc-builtins11.8 libnvrtc11.2 libnvtoolsext1 libnvvm4 libthrust-dev libvdpau-dev linux-compiler-gcc-12-x86 linux-headers-6.1.0-27-amd64 linux-headers-6.1.0-27-common linux-headers-amd64 linux-kbuild-6.1 node-html5shiv nvidia-alternative nvidia-installer-cleanup nvidia-kernel-common nvidia-kernel-dkms nvidia-kernel-support nvidia-legacy-check nvidia-modprobe nvidia-persistenced nvidia-smi nvidia-support update-glx Suggested packages: menu nvidia-driver | nvidia-driver-any nvidia-cuda-mps nvidia-cuda-toolkit libvdpau-doc nodejs Recommended packages: libcuda1:i386 The following NEW packages will be installed: dkms firmware-nvidia-gsp glx-alternative-mesa glx-alternative-nvidia glx-diversions libaccinj64-11.8 libcu++-dev libcub-dev libcublas11 libcublaslt11 libcuda1 libcudart11.0 libcufft10 libcufftw10 libcuinj64-11.8 libcupti-dev libcupti-doc libcupti11.8 libcurand10 libcusolver11 libcusolvermg11 libcusparse11 libgl-dev libglx-dev libnppc11 libnppial11 libnppicc11 libnppidei11 libnppif11 libnppig11 libnppim11 libnppist11 libnppisu11 libnppitc11 libnpps11 libnvblas11 libnvcuvid1 libnvidia-cfg1 libnvidia-ml-dev libnvidia-ml1 libnvidia-pkcs11-openssl3 libnvidia-ptxjitcompiler1 libnvjpeg11 libnvrtc-builtins11.8 libnvrtc11.2 libnvtoolsext1 libnvvm4 libthrust-dev libvdpau-dev linux-compiler-gcc-12-x86 linux-headers-6.1.0-27-amd64 linux-headers-6.1.0-27-common linux-headers-amd64 linux-kbuild-6.1 node-html5shiv nvidia-alternative nvidia-cuda-dev nvidia-installer-cleanup nvidia-kernel-common nvidia-kernel-dkms nvidia-kernel-support nvidia-legacy-check nvidia-modprobe nvidia-persistenced nvidia-smi nvidia-support update-glx 0 upgraded, 67 newly installed, 0 to remove and 2 not upgraded. Need to get 1,592 MB of archives. After this operation, 5,429 MB of additional disk space will be used. Do you want to continue? [Y/n] Y Get:1 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 dkms all 3.0.10-8+deb12u1 [48.7 kB] Get:2 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 update-glx amd64 1.2.2 [5,432 B] Get:3 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 glx-alternative-mesa amd64 1.2.2 [4,760 B] Get:4 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 nvidia-installer-cleanup amd64 20220217+3~deb12u1 [13.3 kB] Get:5 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 glx-diversions amd64 1.2.2 [7,408 B] Get:6 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 glx-alternative-nvidia amd64 1.2.2 [5,776 B] Get:7 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-legacy-check amd64 535.183.01-1~deb12u1 [156 kB] Get:8 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 nvidia-support amd64 20220217+3~deb12u1 [14.2 kB] Get:9 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-alternative amd64 535.183.01-1~deb12u1 [152 kB] Get:10 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvidia-ptxjitcompiler1 amd64 535.183.01-1~deb12u1 [6,970 kB] Get:11 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvidia-pkcs11-openssl3 amd64 535.183.01-1~deb12u1 [154 kB] Get:12 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcuda1 amd64 535.183.01-1~deb12u1 [2,999 kB] Get:13 http://mirrors.ustc.edu.cn/debian bookworm/non-free-firmware amd64 firmware-nvidia-gsp amd64 535.183.01-1~deb12u1 [38.5 MB] Get:14 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 nvidia-kernel-common amd64 20220217+3~deb12u1 [4,488 B] Get:15 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 nvidia-modprobe amd64 535.161.07-1~deb12u1 [21.1 kB] Get:16 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-kernel-support amd64 535.183.01-1~deb12u1 [151 kB] Get:17 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-kernel-dkms amd64 535.183.01-1~deb12u1 [44.9 MB] Get:18 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvidia-cfg1 amd64 535.183.01-1~deb12u1 [240 kB] Get:19 http://mirrors.ustc.edu.cn/debian bookworm/contrib amd64 nvidia-persistenced amd64 535.171.04-1~deb12u1 [27.1 kB] Get:20 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcupti11.8 amd64 11.8.87~11.8.0-5~deb12u1 [8,039 kB] Get:21 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libaccinj64-11.8 amd64 11.8.87~11.8.0-5~deb12u1 [784 kB] Get:22 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libcu++-dev all 1.8.1-2 [554 kB] Get:23 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libcub-dev all 1.17.2-2 [245 kB] Get:24 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcublaslt11 amd64 11.11.3.6~11.8.0-5~deb12u1 [206 MB] Get:25 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcublas11 amd64 11.11.3.6~11.8.0-5~deb12u1 [44.5 MB] Get:26 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcudart11.0 amd64 11.8.89~11.8.0-5~deb12u1 [167 kB] Get:27 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcufft10 amd64 11.1.1+~10.9.0.58~11.8.0-5~deb12u1 [93.9 MB] Get:28 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcufftw10 amd64 11.1.1+~10.9.0.58~11.8.0-5~deb12u1 [393 kB] Get:29 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcuinj64-11.8 amd64 11.8.87~11.8.0-5~deb12u1 [928 kB] Get:30 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcupti-dev amd64 11.8.87~11.8.0-5~deb12u1 [7,892 kB] Get:31 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 node-html5shiv all 3.7.3+dfsg-5 [13.2 kB] Get:32 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcupti-doc all 11.8.87~11.8.0-5~deb12u1 [2,463 kB] Get:33 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcurand10 amd64 11.1.1+~10.3.0.86~11.8.0-5~deb12u1 [42.2 MB] Get:34 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcusolver11 amd64 11.4.1.48~11.8.0-5~deb12u1 [32.0 MB] Get:35 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcusolvermg11 amd64 11.4.1.48~11.8.0-5~deb12u1 [20.4 MB] 37% [35 libcusolvermg11 6,765 kB/20.4 MB 33%] 89.1 kB/s 3h 16min 21s Get:36 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcusparse11 amd64 11.7.5.86~11.8.0-5~deb12u1 [116 MB] Ign:36 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcusparse11 amd64 11.7.5.86~11.8.0-5~deb12u1 Get:37 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libglx-dev amd64 1.6.0-1 [15.3 kB] Get:38 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libgl-dev amd64 1.6.0-1 [100 kB] Get:39 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppc11 amd64 11.8.0.86~11.8.0-5~deb12u1 [391 kB] Get:40 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppial11 amd64 11.8.0.86~11.8.0-5~deb12u1 [5,547 kB] Get:41 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppicc11 amd64 11.8.0.86~11.8.0-5~deb12u1 [2,489 kB] Get:42 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppidei11 amd64 11.8.0.86~11.8.0-5~deb12u1 [2,626 kB] Get:43 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppif11 amd64 11.8.0.86~11.8.0-5~deb12u1 [48.0 MB] Get:44 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppig11 amd64 11.8.0.86~11.8.0-5~deb12u1 [15.4 MB] Get:45 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppim11 amd64 11.8.0.86~11.8.0-5~deb12u1 [3,195 kB] Get:46 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppist11 amd64 11.8.0.86~11.8.0-5~deb12u1 [16.3 MB] Get:47 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppisu11 amd64 11.8.0.86~11.8.0-5~deb12u1 [165 kB] Get:48 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnppitc11 amd64 11.8.0.86~11.8.0-5~deb12u1 [1,319 kB] Get:49 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnpps11 amd64 11.8.0.86~11.8.0-5~deb12u1 [7,502 kB] Get:50 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvblas11 amd64 11.11.3.6~11.8.0-5~deb12u1 [176 kB] Get:51 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvcuvid1 amd64 535.183.01-1~deb12u1 [1,501 kB] Get:52 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvidia-ml1 amd64 535.183.01-1~deb12u1 [684 kB] Get:53 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvidia-ml-dev amd64 11.8.86~11.8.0-5~deb12u1 [79.2 kB] Get:54 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvjpeg11 amd64 11.9.0.86~11.8.0-5~deb12u1 [1,873 kB] Get:55 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvrtc-builtins11.8 amd64 11.8.89~11.8.0-5~deb12u1 [130 kB] Get:56 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvrtc11.2 amd64 11.8.89~11.8.0-5~deb12u1 [16.4 MB] Get:57 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvtoolsext1 amd64 11.8.86~11.8.0-5~deb12u1 [31.9 kB] Get:58 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libnvvm4 amd64 11.8.89~11.8.0-5~deb12u1 [8,186 kB] Get:59 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libthrust-dev all 1.17.2-2 [445 kB] Get:60 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libvdpau-dev amd64 1.5-2 [41.5 kB] Get:61 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 linux-compiler-gcc-12-x86 amd64 6.1.115-1 [920 kB] Get:62 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 linux-headers-6.1.0-27-common all 6.1.115-1 [10.1 MB] Get:63 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 linux-kbuild-6.1 amd64 6.1.115-1 [1,177 kB] Get:64 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 linux-headers-6.1.0-27-amd64 amd64 6.1.115-1 [1,450 kB] Get:65 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 linux-headers-amd64 amd64 6.1.115-1 [1,416 B] Get:66 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-cuda-dev amd64 11.8.89~11.8.0-5~deb12u1 [774 MB] Ign:66 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-cuda-dev amd64 11.8.89~11.8.0-5~deb12u1 Get:67 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-smi amd64 535.183.01-1~deb12u1 [386 kB] Get:36 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 libcusparse11 amd64 11.7.5.86~11.8.0-5~deb12u1 [116 MB] Get:66 http://mirrors.ustc.edu.cn/debian bookworm/non-free amd64 nvidia-cuda-dev amd64 11.8.89~11.8.0-5~deb12u1 [774 MB] Fetched 944 MB in 21min 31s (731 kB/s) Extracting templates from packages: 100% Preconfiguring packages ... Selecting previously unselected package dkms. (Reading database ... 276371 files and directories currently installed.) Preparing to unpack .../dkms_3.0.10-8+deb12u1_all.deb ... Unpacking dkms (3.0.10-8+deb12u1) ... Selecting previously unselected package update-glx. Preparing to unpack .../update-glx_1.2.2_amd64.deb ... Unpacking update-glx (1.2.2) ... Selecting previously unselected package glx-alternative-mesa. Preparing to unpack .../glx-alternative-mesa_1.2.2_amd64.deb ... Unpacking glx-alternative-mesa (1.2.2) ... Selecting previously unselected package nvidia-installer-cleanup. Preparing to unpack .../nvidia-installer-cleanup_20220217+3~deb12u1_amd64.deb ... Unpacking nvidia-installer-cleanup (20220217+3~deb12u1) ... Setting up nvidia-installer-cleanup (20220217+3~deb12u1) ... Selecting previously unselected package glx-diversions. (Reading database ... 276535 files and directories currently installed.) Preparing to unpack .../glx-diversions_1.2.2_amd64.deb ... Unpacking glx-diversions (1.2.2) ... Selecting previously unselected package glx-alternative-nvidia. Preparing to unpack .../glx-alternative-nvidia_1.2.2_amd64.deb ... Unpacking glx-alternative-nvidia (1.2.2) ... Selecting previously unselected package nvidia-legacy-check. Preparing to unpack .../nvidia-legacy-check_535.183.01-1~deb12u1_amd64.deb ... Unpacking nvidia-legacy-check (535.183.01-1~deb12u1) ... Selecting previously unselected package nvidia-support. Preparing to unpack .../nvidia-support_20220217+3~deb12u1_amd64.deb ... Unpacking nvidia-support (20220217+3~deb12u1) ... Setting up nvidia-legacy-check (535.183.01-1~deb12u1) ... Selecting previously unselected package nvidia-alternative. (Reading database ... 276573 files and directories currently installed.) Preparing to unpack .../00-nvidia-alternative_535.183.01-1~deb12u1_amd64.deb ... Unpacking nvidia-alternative (535.183.01-1~deb12u1) ... Selecting previously unselected package libnvidia-ptxjitcompiler1:amd64. Preparing to unpack .../01-libnvidia-ptxjitcompiler1_535.183.01-1~deb12u1_amd64.deb ... Unpacking libnvidia-ptxjitcompiler1:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package libnvidia-pkcs11-openssl3:amd64. Preparing to unpack .../02-libnvidia-pkcs11-openssl3_535.183.01-1~deb12u1_amd64.deb ... Unpacking libnvidia-pkcs11-openssl3:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package libcuda1:amd64. Preparing to unpack .../03-libcuda1_535.183.01-1~deb12u1_amd64.deb ... Unpacking libcuda1:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package firmware-nvidia-gsp. Preparing to unpack .../04-firmware-nvidia-gsp_535.183.01-1~deb12u1_amd64.deb ... Unpacking firmware-nvidia-gsp (535.183.01-1~deb12u1) ... Selecting previously unselected package nvidia-kernel-common. Preparing to unpack .../05-nvidia-kernel-common_20220217+3~deb12u1_amd64.deb ... Unpacking nvidia-kernel-common (20220217+3~deb12u1) ... Selecting previously unselected package nvidia-modprobe. Preparing to unpack .../06-nvidia-modprobe_535.161.07-1~deb12u1_amd64.deb ... Unpacking nvidia-modprobe (535.161.07-1~deb12u1) ... Selecting previously unselected package nvidia-kernel-support. Preparing to unpack .../07-nvidia-kernel-support_535.183.01-1~deb12u1_amd64.deb ... Unpacking nvidia-kernel-support (535.183.01-1~deb12u1) ... Selecting previously unselected package nvidia-kernel-dkms. Preparing to unpack .../08-nvidia-kernel-dkms_535.183.01-1~deb12u1_amd64.deb ... Unpacking nvidia-kernel-dkms (535.183.01-1~deb12u1) ... Selecting previously unselected package libnvidia-cfg1:amd64. Preparing to unpack .../09-libnvidia-cfg1_535.183.01-1~deb12u1_amd64.deb ... Unpacking libnvidia-cfg1:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package nvidia-persistenced. Preparing to unpack .../10-nvidia-persistenced_535.171.04-1~deb12u1_amd64.deb ... Unpacking nvidia-persistenced (535.171.04-1~deb12u1) ... Selecting previously unselected package libcupti11.8:amd64. Preparing to unpack .../11-libcupti11.8_11.8.87~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcupti11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Selecting previously unselected package libaccinj64-11.8:amd64. Preparing to unpack .../12-libaccinj64-11.8_11.8.87~11.8.0-5~deb12u1_amd64.deb ... Unpacking libaccinj64-11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Selecting previously unselected package libcu++-dev. Preparing to unpack .../13-libcu++-dev_1.8.1-2_all.deb ... Unpacking libcu++-dev (1.8.1-2) ... Selecting previously unselected package libcub-dev. Preparing to unpack .../14-libcub-dev_1.17.2-2_all.deb ... Unpacking libcub-dev (1.17.2-2) ... Selecting previously unselected package libcublaslt11:amd64. Preparing to unpack .../15-libcublaslt11_11.11.3.6~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcublaslt11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Selecting previously unselected package libcublas11:amd64. Preparing to unpack .../16-libcublas11_11.11.3.6~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcublas11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Selecting previously unselected package libcudart11.0:amd64. Preparing to unpack .../17-libcudart11.0_11.8.89~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcudart11.0:amd64 (11.8.89~11.8.0-5~deb12u1) ... Selecting previously unselected package libcufft10:amd64. Preparing to unpack .../18-libcufft10_11.1.1+~10.9.0.58~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcufft10:amd64 (11.1.1+~10.9.0.58~11.8.0-5~deb12u1) ... Selecting previously unselected package libcufftw10:amd64. Preparing to unpack .../19-libcufftw10_11.1.1+~10.9.0.58~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcufftw10:amd64 (11.1.1+~10.9.0.58~11.8.0-5~deb12u1) ... Selecting previously unselected package libcuinj64-11.8:amd64. Preparing to unpack .../20-libcuinj64-11.8_11.8.87~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcuinj64-11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Selecting previously unselected package libcupti-dev:amd64. Preparing to unpack .../21-libcupti-dev_11.8.87~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcupti-dev:amd64 (11.8.87~11.8.0-5~deb12u1) ... Selecting previously unselected package node-html5shiv. Preparing to unpack .../22-node-html5shiv_3.7.3+dfsg-5_all.deb ... Unpacking node-html5shiv (3.7.3+dfsg-5) ... Selecting previously unselected package libcupti-doc. Preparing to unpack .../23-libcupti-doc_11.8.87~11.8.0-5~deb12u1_all.deb ... Unpacking libcupti-doc (11.8.87~11.8.0-5~deb12u1) ... Selecting previously unselected package libcurand10:amd64. Preparing to unpack .../24-libcurand10_11.1.1+~10.3.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcurand10:amd64 (11.1.1+~10.3.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libcusolver11:amd64. Preparing to unpack .../25-libcusolver11_11.4.1.48~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcusolver11:amd64 (11.4.1.48~11.8.0-5~deb12u1) ... Selecting previously unselected package libcusolvermg11:amd64. Preparing to unpack .../26-libcusolvermg11_11.4.1.48~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcusolvermg11:amd64 (11.4.1.48~11.8.0-5~deb12u1) ... Selecting previously unselected package libcusparse11:amd64. Preparing to unpack .../27-libcusparse11_11.7.5.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libcusparse11:amd64 (11.7.5.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libglx-dev:amd64. Preparing to unpack .../28-libglx-dev_1.6.0-1_amd64.deb ... Unpacking libglx-dev:amd64 (1.6.0-1) ... Selecting previously unselected package libgl-dev:amd64. Preparing to unpack .../29-libgl-dev_1.6.0-1_amd64.deb ... Unpacking libgl-dev:amd64 (1.6.0-1) ... Selecting previously unselected package libnppc11:amd64. Preparing to unpack .../30-libnppc11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppial11:amd64. Preparing to unpack .../31-libnppial11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppial11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppicc11:amd64. Preparing to unpack .../32-libnppicc11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppicc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppidei11:amd64. Preparing to unpack .../33-libnppidei11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppidei11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppif11:amd64. Preparing to unpack .../34-libnppif11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppif11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppig11:amd64. Preparing to unpack .../35-libnppig11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppig11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppim11:amd64. Preparing to unpack .../36-libnppim11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppim11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppist11:amd64. Preparing to unpack .../37-libnppist11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppist11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppisu11:amd64. Preparing to unpack .../38-libnppisu11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppisu11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnppitc11:amd64. Preparing to unpack .../39-libnppitc11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnppitc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnpps11:amd64. Preparing to unpack .../40-libnpps11_11.8.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnpps11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvblas11:amd64. Preparing to unpack .../41-libnvblas11_11.11.3.6~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvblas11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvcuvid1:amd64. Preparing to unpack .../42-libnvcuvid1_535.183.01-1~deb12u1_amd64.deb ... Unpacking libnvcuvid1:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package libnvidia-ml1:amd64. Preparing to unpack .../43-libnvidia-ml1_535.183.01-1~deb12u1_amd64.deb ... Unpacking libnvidia-ml1:amd64 (535.183.01-1~deb12u1) ... Selecting previously unselected package libnvidia-ml-dev:amd64. Preparing to unpack .../44-libnvidia-ml-dev_11.8.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvidia-ml-dev:amd64 (11.8.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvjpeg11:amd64. Preparing to unpack .../45-libnvjpeg11_11.9.0.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvjpeg11:amd64 (11.9.0.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvrtc-builtins11.8:amd64. Preparing to unpack .../46-libnvrtc-builtins11.8_11.8.89~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvrtc-builtins11.8:amd64 (11.8.89~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvrtc11.2:amd64. Preparing to unpack .../47-libnvrtc11.2_11.8.89~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvrtc11.2:amd64 (11.8.89~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvtoolsext1:amd64. Preparing to unpack .../48-libnvtoolsext1_11.8.86~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvtoolsext1:amd64 (11.8.86~11.8.0-5~deb12u1) ... Selecting previously unselected package libnvvm4:amd64. Preparing to unpack .../49-libnvvm4_11.8.89~11.8.0-5~deb12u1_amd64.deb ... Unpacking libnvvm4:amd64 (11.8.89~11.8.0-5~deb12u1) ... Selecting previously unselected package libthrust-dev. Preparing to unpack .../50-libthrust-dev_1.17.2-2_all.deb ... Unpacking libthrust-dev (1.17.2-2) ... Selecting previously unselected package libvdpau-dev:amd64. Preparing to unpack .../51-libvdpau-dev_1.5-2_amd64.deb ... Unpacking libvdpau-dev:amd64 (1.5-2) ... Selecting previously unselected package linux-compiler-gcc-12-x86. Preparing to unpack .../52-linux-compiler-gcc-12-x86_6.1.115-1_amd64.deb ... Unpacking linux-compiler-gcc-12-x86 (6.1.115-1) ... Selecting previously unselected package linux-headers-6.1.0-27-common. Preparing to unpack .../53-linux-headers-6.1.0-27-common_6.1.115-1_all.deb ... Unpacking linux-headers-6.1.0-27-common (6.1.115-1) ... Selecting previously unselected package linux-kbuild-6.1. Preparing to unpack .../54-linux-kbuild-6.1_6.1.115-1_amd64.deb ... Unpacking linux-kbuild-6.1 (6.1.115-1) ... Selecting previously unselected package linux-headers-6.1.0-27-amd64. Preparing to unpack .../55-linux-headers-6.1.0-27-amd64_6.1.115-1_amd64.deb ... Unpacking linux-headers-6.1.0-27-amd64 (6.1.115-1) ... Selecting previously unselected package linux-headers-amd64. Preparing to unpack .../56-linux-headers-amd64_6.1.115-1_amd64.deb ... Unpacking linux-headers-amd64 (6.1.115-1) ... Selecting previously unselected package nvidia-cuda-dev:amd64. Preparing to unpack .../57-nvidia-cuda-dev_11.8.89~11.8.0-5~deb12u1_amd64.deb ... Unpacking nvidia-cuda-dev:amd64 (11.8.89~11.8.0-5~deb12u1) ... Selecting previously unselected package nvidia-smi. Preparing to unpack .../58-nvidia-smi_535.183.01-1~deb12u1_amd64.deb ... Unpacking nvidia-smi (535.183.01-1~deb12u1) ... Setting up nvidia-support (20220217+3~deb12u1) ... Setting up linux-headers-6.1.0-27-common (6.1.115-1) ... Setting up libcusparse11:amd64 (11.7.5.86~11.8.0-5~deb12u1) ... Setting up nvidia-kernel-common (20220217+3~deb12u1) ... Setting up libnppc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libcu++-dev (1.8.1-2) ... Setting up node-html5shiv (3.7.3+dfsg-5) ... Setting up libcupti-doc (11.8.87~11.8.0-5~deb12u1) ... Setting up update-glx (1.2.2) ... Setting up libcudart11.0:amd64 (11.8.89~11.8.0-5~deb12u1) ... Setting up libnppisu11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up dkms (3.0.10-8+deb12u1) ... Setting up linux-compiler-gcc-12-x86 (6.1.115-1) ... Setting up nvidia-modprobe (535.161.07-1~deb12u1) ... Setting up libnppicc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libcupti11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Setting up libnvjpeg11:amd64 (11.9.0.86~11.8.0-5~deb12u1) ... Setting up libcublaslt11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Setting up libnvrtc-builtins11.8:amd64 (11.8.89~11.8.0-5~deb12u1) ... Setting up libnpps11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libnppim11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libcufft10:amd64 (11.1.1+~10.9.0.58~11.8.0-5~deb12u1) ... Setting up libnvidia-ptxjitcompiler1:amd64 (535.183.01-1~deb12u1) ... Setting up libnppitc11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libaccinj64-11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Setting up libnppist11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up firmware-nvidia-gsp (535.183.01-1~deb12u1) ... Setting up libglx-dev:amd64 (1.6.0-1) ... Setting up libnvvm4:amd64 (11.8.89~11.8.0-5~deb12u1) ... Setting up libvdpau-dev:amd64 (1.5-2) ... Setting up libnvtoolsext1:amd64 (11.8.86~11.8.0-5~deb12u1) ... Setting up libcub-dev (1.17.2-2) ... Setting up linux-kbuild-6.1 (6.1.115-1) ... Setting up libnppig11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libgl-dev:amd64 (1.6.0-1) ... Setting up libcurand10:amd64 (11.1.1+~10.3.0.86~11.8.0-5~deb12u1) ... Setting up libnppidei11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libthrust-dev (1.17.2-2) ... Setting up libnppial11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libnppif11:amd64 (11.8.0.86~11.8.0-5~deb12u1) ... Setting up libcufftw10:amd64 (11.1.1+~10.9.0.58~11.8.0-5~deb12u1) ... Setting up libcublas11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Setting up libcupti-dev:amd64 (11.8.87~11.8.0-5~deb12u1) ... Setting up glx-alternative-mesa (1.2.2) ... Setting up libnvblas11:amd64 (11.11.3.6~11.8.0-5~deb12u1) ... Setting up glx-diversions (1.2.2) ... Removing diverted 'libGL.so' symlink with unexpected target 'libGL.so.1'. Restoring diverted 'libGL.so' symlink. update-alternatives: using /usr/lib/mesa-diverted to provide /usr/lib/glx (glx) in auto mode Setting up libcusolver11:amd64 (11.4.1.48~11.8.0-5~deb12u1) ... Setting up libnvrtc11.2:amd64 (11.8.89~11.8.0-5~deb12u1) ... Setting up linux-headers-6.1.0-27-amd64 (6.1.115-1) ... /etc/kernel/header_postinst.d/dkms: dkms: running auto installation service for kernel 6.1.0-27-amd64. dkms: autoinstall for kernel: 6.1.0-27-amd64. Setting up libcusolvermg11:amd64 (11.4.1.48~11.8.0-5~deb12u1) ... Setting up linux-headers-amd64 (6.1.115-1) ... Processing triggers for libc-bin (2.36-9+deb12u9) ... Processing triggers for man-db (2.11.2-2) ... Processing triggers for mailcap (3.70+nmu1) ... Processing triggers for desktop-file-utils (0.26-1) ... Processing triggers for initramfs-tools (0.142+deb12u1) ... update-initramfs: Generating /boot/initrd.img-6.1.0-27-amd64 Processing triggers for gnome-menus (3.36.0-1.1) ... Processing triggers for glx-alternative-mesa (1.2.2) ... update-alternatives: updating alternative /usr/lib/mesa-diverted because link group glx has changed slave links update-alternatives: using /usr/lib/mesa-diverted to provide /usr/lib/mesa-diverted/libGL.so-master (libGL.so-master) in auto mode Setting up glx-alternative-nvidia (1.2.2) ... Processing triggers for glx-alternative-nvidia (1.2.2) ... Setting up nvidia-alternative (535.183.01-1~deb12u1) ... Processing triggers for nvidia-alternative (535.183.01-1~deb12u1) ... update-alternatives: using /usr/lib/nvidia/current to provide /usr/lib/nvidia/nvidia (nvidia) in auto mode Setting up libnvidia-cfg1:amd64 (535.183.01-1~deb12u1) ... Setting up nvidia-kernel-support (535.183.01-1~deb12u1) ... Setting up libnvidia-pkcs11-openssl3:amd64 (535.183.01-1~deb12u1) ... Setting up libnvidia-ml1:amd64 (535.183.01-1~deb12u1) ... Setting up libnvidia-ml-dev:amd64 (11.8.86~11.8.0-5~deb12u1) ... Setting up nvidia-persistenced (535.171.04-1~deb12u1) ... adduser: Warning: The home dir /var/run/nvpd/ you specified can't be accessed: No such file or directory Adding system user `nvpd' (UID 117) ... Adding new group `nvpd' (GID 128) ... Adding new user `nvpd' (UID 117) with group `nvpd' ... Not creating home directory `/var/run/nvpd/'. Created symlink /etc/systemd/system/multi-user.target.wants/nvidia-persistenced.service ‚Üí /lib/systemd/system/nvidia-persistenced.service. Could not execute systemctl: at /usr/bin/deb-systemd-invoke line 145. Setting up libcuda1:amd64 (535.183.01-1~deb12u1) ... Setting up libcuinj64-11.8:amd64 (11.8.87~11.8.0-5~deb12u1) ... Setting up nvidia-smi (535.183.01-1~deb12u1) ... Setting up libnvcuvid1:amd64 (535.183.01-1~deb12u1) ... Setting up nvidia-cuda-dev:amd64 (11.8.89~11.8.0-5~deb12u1) ... Processing triggers for nvidia-alternative (535.183.01-1~deb12u1) ... update-alternatives: updating alternative /usr/lib/nvidia/current because link group nvidia has changed slave links Setting up nvidia-kernel-dkms (535.183.01-1~deb12u1) ... Loading new nvidia-current-535.183.01 DKMS files... Building for 6.1.0-27-amd64 Building initial module for 6.1.0-27-amd64 Done. nvidia-current.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/6.1.0-27-amd64/updates/dkms/ nvidia-current-modeset.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/6.1.0-27-amd64/updates/dkms/ nvidia-current-drm.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/6.1.0-27-amd64/updates/dkms/ nvidia-current-uvm.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/6.1.0-27-amd64/updates/dkms/ nvidia-current-peermem.ko: Running module version sanity check. - Original module - No original module exists within this kernel - Installation - Installing to /lib/modules/6.1.0-27-amd64/updates/dkms/ depmod... Processing triggers for libc-bin (2.36-9+deb12u9) ... Processing triggers for initramfs-tools (0.142+deb12u1) ... update-initramfs: Generating /boot/initrd.img-6.1.0-27-amd64 Processing triggers for update-glx (1.2.2) ... Processing triggers for glx-alternative-nvidia (1.2.2) ... update-alternatives: using /usr/lib/nvidia to provide /usr/lib/glx (glx) in auto mode Processing triggers for glx-alternative-mesa (1.2.2) ... Processing triggers for libc-bin (2.36-9+deb12u9) ... Processing triggers for initramfs-tools (0.142+deb12u1) ... update-initramfs: Generating /boot/initrd.img-6.1.0-27-amd64 "},"Learn/LearnCUDA/CUDA.html":{"url":"Learn/LearnCUDA/CUDA.html","title":"CUDA","keywords":"","body":"CUDA Learn NVIDIA CUDA documentation NVIDIA cuda-education cuda-samples CUDA Programming Course ‚Äì High-Performance Computing with GPUs d_what_are_some_good_resources_to_learn_cuda What-are-some-of-the-best-resources-to-learn-CUDA-C cuda-training-series even-easier-introduction-cuda demystifying-gpu-architectures-for-deep-learning numba GPU-Puzzles CUDA ÁºñÁ®ãÂÖ•Èó®ÊûÅÁÆÄÊïôÁ®ã GPU ÁºñÁ®ã nvvm-ir-spec NVIDIA CUDA (Compute Unified Device Architecture) The NVIDIA¬Æ CUDA¬Æ Toolkit provides a comprehensive development environment for C and C++ developers building GPU-accelerated applications. With the CUDA Toolkit, you can develop, optimize, and deploy your applications on GPU-accelerated embedded systems, desktop workstations, enterprise data centers, cloud-based platforms and HPC supercomputers. The toolkit includes GPU-accelerated libraries, debugging and optimization tools, a C/C++ compiler, and a runtime library to deploy your application. NVIDIA¬Æ CUDA¬Æ Â∑•ÂÖ∑ÂåÖ‰∏∫ÊûÑÂª∫ GPU Âä†ÈÄüÂ∫îÁî®Á®ãÂ∫èÁöÑ C Âíå C++ ÂºÄÂèë‰∫∫ÂëòÊèê‰æõ‰∫Ü‰∏Ä‰∏™ÂÖ®Èù¢ÁöÑÂºÄÂèëÁéØÂ¢É„ÄÇÂÄüÂä© CUDA Â∑•ÂÖ∑ÂåÖÔºåÊÇ®ÂèØ‰ª•Âú® GPU Âä†ÈÄüÁöÑÂµåÂÖ•ÂºèÁ≥ªÁªü„ÄÅÊ°åÈù¢Â∑•‰ΩúÁ´ô„ÄÅ‰ºÅ‰∏öÊï∞ÊçÆ‰∏≠ÂøÉ„ÄÅÂü∫‰∫é‰∫ëÁöÑÂπ≥Âè∞Âíå HPC Ë∂ÖÁ∫ßËÆ°ÁÆóÊú∫‰∏äÂºÄÂèë„ÄÅ‰ºòÂåñÂíåÈÉ®ÁΩ≤ÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇËØ•Â∑•ÂÖ∑ÂåÖÂåÖÊã¨ GPU Âä†ÈÄüÂ∫ì„ÄÅË∞ÉËØïÂíå‰ºòÂåñÂ∑•ÂÖ∑„ÄÅC/C++ ÁºñËØëÂô®‰ª•ÂèäÁî®‰∫éÈÉ®ÁΩ≤Â∫îÁî®Á®ãÂ∫èÁöÑËøêË°åÊó∂Â∫ì„ÄÇ Using built-in capabilities for distributing computations across multi-GPU configurations, scientists and researchers can develop applications that scale from single GPU workstations to cloud installations with thousands of GPUs. ‰ΩøÁî®ÂÜÖÁΩÆÂäüËÉΩÂú®Â§ö GPU ÈÖçÁΩÆ‰πãÈó¥ÂàÜÈÖçËÆ°ÁÆóÔºåÁßëÂ≠¶ÂÆ∂ÂíåÁ†îÁ©∂‰∫∫ÂëòÂèØ‰ª•ÂºÄÂèë‰ªéÂçï‰∏™ GPU Â∑•‰ΩúÁ´ôÊâ©Â±ïÂà∞ÂÖ∑ÊúâÊï∞ÂçÉ‰∏™ GPU ÁöÑ‰∫ëÂÆâË£ÖÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ CUDA C++ Programming Guide v12.6 CUDA C++ Programming Guide CUDA ÁºñÁ®ãÊ®°ÂûãÁöÑÂÖ≥ÈîÆÁªÑÊàêÈÉ®ÂàÜ (GPT) CUDA ÁºñÁ®ãÊ®°Âûã‰ΩøÂºÄÂèëËÄÖËÉΩÂ§üÁºñÂÜô‰ª£Á†ÅÔºåÂÖÖÂàÜÂà©Áî® NVIDIA GPU ÁöÑÂº∫Â§ßÂπ∂Ë°åËÆ°ÁÆóËÉΩÂäõ„ÄÇÂÆÉÂü∫‰∫éÂçïÊåá‰ª§Â§öÁ∫øÁ®ãÔºàSIMTÔºâÊû∂ÊûÑÔºåÂÖ∂‰∏≠Â§ö‰∏™Á∫øÁ®ãÂêåÊó∂ÊâßË°åÁõ∏ÂêåÁöÑÊåá‰ª§Ôºå‰ΩÜÂ§ÑÁêÜ‰∏çÂêåÁöÑÊï∞ÊçÆ„ÄÇCUDA ÈÄöËøáÂàÜÂ±ÇÁöÑÁ∫øÁ®ãÁªìÊûÑÂíåÂÜÖÂ≠òÁÆ°ÁêÜÁ≥ªÁªüÔºåÈ´òÊïàÁªÑÁªáËÆ°ÁÆó‰ªªÂä°„ÄÇ Á∫øÁ®ãÂ±ÇÊ¨°ÁªìÊûÑÔºö Á∫øÁ®ãÔºàThreadÔºâÔºöÊâßË°åÁâπÂÆö‰ªªÂä°ÁöÑÊúÄÂ∞èÊâßË°åÂçïÂÖÉ„ÄÇ Á∫øÁ®ãÂùóÔºàThread BlockÔºâÔºöÁ∫øÁ®ãÁöÑÈõÜÂêàÔºåÁ∫øÁ®ãÂùó‰∏≠ÁöÑÁ∫øÁ®ãÂÖ±ÂêåÊâßË°å‰ªªÂä°„ÄÇ‰∏Ä‰∏™Á∫øÁ®ãÂùóÊúÄÂ§öÂåÖÂê´ 1024 ‰∏™Á∫øÁ®ãÔºàÂÖ∑‰ΩìÂèñÂÜ≥‰∫é GPU Êû∂ÊûÑÔºâ„ÄÇ ÁΩëÊ†ºÔºàGridÔºâÔºöÁ∫øÁ®ãÂùóÁöÑÈõÜÂêà„ÄÇÁΩëÊ†ºÂèØ‰ª•ÊòØ 1D„ÄÅ2D Êàñ 3DÔºå‰ª•‰æøÊõ¥Êñπ‰æøÂú∞Â∞ÜÁ∫øÁ®ãÊò†Â∞ÑÂà∞Êï∞ÊçÆ‰∏ä„ÄÇ ÈÄöËøáÂîØ‰∏ÄÁöÑÁ¥¢ÂºïÔºàÂ¶Ç threadIdx„ÄÅblockIdx„ÄÅblockDim Âíå gridDimÔºâÔºåÊØè‰∏™Á∫øÁ®ãÂèØ‰ª•ËÆøÈóÆÁâπÂÆöÁöÑÊï∞ÊçÆÈÉ®ÂàÜ„ÄÇ ÂÜÖÂ≠òÂ±ÇÊ¨°ÁªìÊûÑÔºö ÂÖ®Â±ÄÂÜÖÂ≠òÔºàGlobal MemoryÔºâÔºöÊâÄÊúâÁ∫øÁ®ãÈÉΩÂèØ‰ª•ËÆøÈóÆÔºå‰ΩÜËÆøÈóÆÂª∂ËøüËæÉÈ´ò„ÄÇ ÂÖ±‰∫´ÂÜÖÂ≠òÔºàShared MemoryÔºâÔºöÁ∫øÁ®ãÂùóÂÜÖÁöÑÁ∫øÁ®ãÂÖ±‰∫´ÁöÑ‰∏ÄÁßçÂø´ÈÄü„ÄÅ‰ΩéÂª∂ËøüÁöÑÂÜÖÂ≠ò„ÄÇ Â±ÄÈÉ®ÂÜÖÂ≠òÔºàLocal MemoryÔºâÔºöÊØè‰∏™Á∫øÁ®ãÁöÑÁßÅÊúâÂÜÖÂ≠òÔºå‰ΩÜÁî±‰∫é‰Ωç‰∫éÂÖ®Â±ÄÂÜÖÂ≠ò‰∏≠ÔºåËÆøÈóÆÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇ ÂØÑÂ≠òÂô®ÔºàRegistersÔºâÔºöÈÄüÂ∫¶ÊûÅÂø´Ôºå‰ΩÜÊï∞ÈáèÊúâÈôêÔºåÁî®‰∫éÂ≠òÂÇ®Á∫øÁ®ãÁöÑ‰∏¥Êó∂ÂèòÈáè„ÄÇ ÂÜÖÊ†∏ÔºàKernelÔºâÔºö CUDA ÂÜÖÊ†∏ÊòØËøêË°åÂú® GPU ‰∏äÁöÑÂáΩÊï∞Ôºå‰ΩøÁî® C/C++ ËØ≠Ë®ÄÁºñÂÜôÂπ∂Â∏¶ÊúâÁâπÊÆäÁöÑËØ≠Ê≥ïÊ†áËÆ∞„ÄÇÂÜÖÊ†∏‰ªé CPU ÂèëËµ∑ÔºåÂπ∂Áî± GPU ÁöÑÁ∫øÁ®ãÂπ∂Ë°åÊâßË°å„ÄÇ Introduction The advent of multicore CPUs and manycore GPUs means that mainstream processor chips are now parallel systems. The challenge is to develop application software that transparently scales its parallelism to leverage the increasing number of processor cores. The CUDA parallel programming model is designed to overcome this challenge while maintaing a low learning curve for programmers familiar with C. Its core is three key abstractions: a hierarchy of thread groups: Â±ÇÁ∫ßÁ∫øÁ®ãÁªÑ shared memories: ÂÖ±‰∫´ÂÜÖÂ≠ò barrier synchronization: ÈöúÁ¢çÂêåÊ≠• These abstractions provide fine-grained data parallelism and thread parallelism, nested within coarse-grained data parallelism and task parallelism. They guide the programmer to partition the problem into coarse sub-problems that can be solved independently in parallel by blocks of threads, and each sub-problem into finer pieces that can be solved cooperatively in parallel by all threads within the block. Ëøô‰∫õÊäΩË±°Êèê‰æõ‰∫ÜÁªÜÁ≤íÂ∫¶Êï∞ÊçÆÂπ∂Ë°åÊÄßÂíåÁ∫øÁ®ãÂπ∂Ë°åÊÄßÔºåÂµåÂ•óÂú®Á≤óÁ≤íÂ∫¶Êï∞ÊçÆÂπ∂Ë°åÊÄßÂíå‰ªªÂä°Âπ∂Ë°åÊÄß‰∏≠„ÄÇÂÆÉ‰ª¨ÂºïÂØºÁ®ãÂ∫èÂëòÂ∞ÜÈóÆÈ¢òÂàíÂàÜ‰∏∫ÂèØ‰ª•Áî±Á∫øÁ®ãÂùóÁã¨Á´ãÂπ∂Ë°åËß£ÂÜ≥ÁöÑÁ≤óÁï•Â≠êÈóÆÈ¢òÔºåÂπ∂Â∞ÜÊØè‰∏™Â≠êÈóÆÈ¢òÂàíÂàÜ‰∏∫ÂèØ‰ª•Áî±ÂùóÂÜÖÁöÑÊâÄÊúâÁ∫øÁ®ãÂπ∂Ë°åÂçè‰ΩúËß£ÂÜ≥ÁöÑÊõ¥Á≤æÁªÜÁöÑÈÉ®ÂàÜ„ÄÇ This decomposition preserves language expressivity by allowing threads to cooperate when solving each sub-problem, and at the same time enables automatic scalability. Indeed, each block of threads can be scheduled on any of the available multiprocessors within a GPU, in any order, concurrently or sequentially, so that a compiled CUDA program can execute on any number of multiprocessors as illustrated by Figure 3, and only the runtime system needs to know the physical multiprocessor count. ËøôÁßçÂàÜËß£ÈÄöËøáÂÖÅËÆ∏Á∫øÁ®ãÂú®Ëß£ÂÜ≥ÊØè‰∏™Â≠êÈóÆÈ¢òÊó∂ËøõË°åÂêà‰ΩúÊù•‰øùÁïôËØ≠Ë®ÄË°®ËææËÉΩÂäõÔºåÂêåÊó∂ÂÆûÁé∞Ëá™Âä®ÂèØÊâ©Â±ïÊÄß„ÄÇ‰∫ãÂÆû‰∏äÔºåÊØè‰∏™Á∫øÁ®ãÂùóÈÉΩÂèØ‰ª•‰ª•‰ªª‰ΩïÈ°∫Â∫èÔºàÂêåÊó∂ÊàñÈ°∫Â∫èÔºâË∞ÉÂ∫¶Âà∞ GPU ÂÜÖÁöÑ‰ªª‰ΩïÂèØÁî®Â§öÂ§ÑÁêÜÂô®‰∏äÔºå‰ª•‰æøÁºñËØëÂêéÁöÑ CUDA Á®ãÂ∫èÂèØ‰ª•Âú®‰ªªÊÑèÊï∞ÈáèÁöÑÂ§öÂ§ÑÁêÜÂô®‰∏äÊâßË°åÔºåÂ¶ÇÂõæ 3 ÊâÄÁ§∫ÔºåÂπ∂‰∏î‰ªÖËøêË°åÊó∂Á≥ªÁªüÈúÄË¶ÅÁü•ÈÅìÁâ©ÁêÜÂ§öÂ§ÑÁêÜÂô®Êï∞Èáè„ÄÇ A GPU is built around an array of Streaming Multiprocessors (SMs) GPU Áî±ÊµÅÂºèÂ§öÂ§ÑÁêÜÂô® (SM) ÈòµÂàóÊûÑÂª∫ Programming Model ÁºñÁ®ãÊ®°Âûã Kernels: ÂÜÖÊ†∏ÂáΩÊï∞ Thread Hierarachy: Á∫øÁ®ãÂ±ÇÊ¨°ÁªìÊûÑ Memory Hierarachy: ÂÜÖÂ≠òÂ±ÇÊ¨°ÁªìÊûÑ Heteroheneous Programming: ÂºÇÊûÑÁºñÁ®ã Asynchronous SIMT Programming Model: ÂºÇÊ≠• SIMT ÁºñÁ®ãÊ®°Âûã Compute Capability: ËÆ°ÁÆóËÉΩÂäõ Kernels: ÂÜÖÊ†∏ÂáΩÊï∞ CUDA C++ extends C++ by allowing the programmer to define C++ functions, called kernels, that, when called, are executed N times in parallel by N different CUDA threads, as opposed to only once like regular C++ functions. CUDA C++ ÈÄöËøáÂÖÅËÆ∏Á®ãÂ∫èÂëòÂÆö‰πâÁß∞‰∏∫ÂÜÖÊ†∏ÁöÑ C++ ÂáΩÊï∞Êù•Êâ©Â±ï C++ÔºåËøô‰∫õÂáΩÊï∞Âú®Ë∞ÉÁî®Êó∂Áî± N ‰∏™‰∏çÂêåÁöÑ CUDA Á∫øÁ®ãÂπ∂Ë°åÊâßË°å N Ê¨°ÔºåËÄå‰∏çÊòØÂÉèÂ∏∏ËßÑ C++ ÂáΩÊï∞ÈÇ£Ê†∑Âè™ËÉΩÊâßË°å‰∏ÄÊ¨°„ÄÇ A kernel is defined using the __global__ declaration specifier and the number of CUDA threads that execute that kernel for a given kernel call is specified using a new >> execution configuration syntax (see C++ Language Extensions). Each thread that executes the kernel is given a unique thread ID that is accessible within the kernel through built-in variables. ‰ΩøÁî® __global__ Â£∞ÊòéËØ¥ÊòéÁ¨¶ÂÆö‰πâÂÜÖÊ†∏ÔºåÂπ∂‰ΩøÁî®Êñ∞ÁöÑ >> ÊâßË°åÈÖçÁΩÆËØ≠Ê≥ïÊåáÂÆö‰∏∫ÁªôÂÆöÂÜÖÊ†∏Ë∞ÉÁî®ÊâßË°åËØ•ÂÜÖÊ†∏ÁöÑ CUDA Á∫øÁ®ãÊï∞ÔºàËØ∑ÂèÇÈòÖ C++ËØ≠Ë®ÄÊâ©Â±ïÔºâ„ÄÇÊØè‰∏™ÊâßË°åÂÜÖÊ†∏ÁöÑÁ∫øÁ®ãÈÉΩ‰ºöË¢´Ëµã‰∫à‰∏Ä‰∏™ÂîØ‰∏ÄÁöÑÁ∫øÁ®ã ID ÔºåËØ• ID ÂèØ‰ª•Âú®ÂÜÖÊ†∏‰∏≠ÈÄöËøáÂÜÖÁΩÆÂèòÈáèËøõË°åËÆøÈóÆ„ÄÇ Thread Hierarachy: Á∫øÁ®ãÂ±ÇÊ¨°ÁªìÊûÑ grids - blocks - threads ÂùóÂÜÖÁ∫øÁ®ãÈ©ªÁïôÂú®Âêå‰∏Ä‰∏™ core ‰∏äÔºåÂÖ±‰∫´ÂÜÖÂ≠ò blocks, threads Áî±‰∏âÁª¥‰∏ãÊ†áÁ¥¢Âºï threadIdx.x, .y, .z blockIdx.x, .y, .z block Â∞∫ÂØ∏: blockDim.x, .y, .z For convenience, threadIdx is a 3-component vector, so that threads can be identified using a one-dimensional, two-dimensional, or three-dimensional thread index, forming a one-dimensional, two-dimensional, or three-dimensional block of threads, called a thread block. This provides a natural way to invoke computation across the elements in a domain such as a vector, matrix, or volume. The index of a thread and its thread ID relate to each other in a straightforward way: For a one-dimensional block, they are the same; for a two-dimensional block of size (Dx, Dy), the thread ID of a thread of index (x, y) is (x + y Dx); for a three-dimensional block of size (Dx, Dy, Dz), the thread ID of a thread of index (x, y, z) is (x + y Dx + z Dx Dy). There is a limit to the number of threads per block, since all threads of a block are expected to reside on the same streaming multiprocessor core and must share the limited memory resources of that core. On current GPUs, a thread block may contain up to 1024 threads. ÊØè‰∏™ÂùóÁöÑÁ∫øÁ®ãÊï∞ÈáèÊòØÊúâÈôêÁöÑÔºåÂõ†‰∏∫ÂùóÁöÑÊâÄÊúâÁ∫øÁ®ãÈÉΩÂ∫îËØ•È©ªÁïôÂú®Âêå‰∏Ä‰∏™ÊµÅÂºèÂ§öÂ§ÑÁêÜÂô®Ê†∏ÂøÉ‰∏äÔºåÂπ∂‰∏îÂøÖÈ°ªÂÖ±‰∫´ËØ•Ê†∏ÂøÉÁöÑÊúâÈôêÂÜÖÂ≠òËµÑÊ∫ê„ÄÇÂú®ÂΩìÂâçÁöÑ GPU ‰∏äÔºå‰∏Ä‰∏™Á∫øÁ®ãÂùóÊúÄÂ§öÂèØ‰ª•ÂåÖÂê´ 1024 ‰∏™Á∫øÁ®ã„ÄÇ However, a kernel can be executed by multiple equally-shaped thread blocks, so that the total number of threads is equal to the number of threads per block times the number of blocks. ÁÑ∂ËÄåÔºå‰∏Ä‰∏™ÂÜÖÊ†∏ÂèØ‰ª•Áî±Â§ö‰∏™ÂΩ¢Áä∂Áõ∏ÂêåÁöÑÁ∫øÁ®ãÂùóÊù•ÊâßË°åÔºåÂõ†Ê≠§Á∫øÁ®ãÊÄªÊï∞Á≠â‰∫éÊØè‰∏™ÂùóÁöÑÁ∫øÁ®ãÊï∞‰πò‰ª•ÂùóÊï∞„ÄÇ Blocks are organized into a one-dimensional, two-dimensional, or three-dimensional grid of thread blocks as illustrated by Figure 4. The number of thread blocks in a grid is usually dictated by the size of the data being processed, which typically exceeds the number of processors in the system. ÂùóË¢´ÁªÑÁªáÊàê‰∏ÄÁª¥„ÄÅ‰∫åÁª¥Êàñ‰∏âÁª¥Á∫øÁ®ãÂùóÁΩëÊ†ºÔºåÂ¶ÇÂõæ 4 ÊâÄÁ§∫„ÄÇÁΩëÊ†º‰∏≠Á∫øÁ®ãÂùóÁöÑÊï∞ÈáèÈÄöÂ∏∏Áî±Ê≠£Âú®Â§ÑÁêÜÁöÑÊï∞ÊçÆÂ§ßÂ∞èÂÜ≥ÂÆöÔºåËØ•Êï∞ÊçÆÈÄöÂ∏∏Ë∂ÖËøáÁ≥ªÁªü‰∏≠Â§ÑÁêÜÂô®ÁöÑÊï∞Èáè„ÄÇ Extending the previous MatAdd() example to handle multiple blocks, the code becomes as follows. // Kernel definition __global__ void MatAdd(float A[N][N], float B[N][N], float C[N][N]) { int i = blockIdx.x * blockDim.x + threadIdx.x; int j = blockIdx.y * blockDim.y + threadIdx.y; if (i >>(A, B, C); ... } Threads within a block can cooperate by sharing data through some shared memory and by synchronizing their execution to coordinate memory accesses. More precisely, one can specify synchronization points in the kernel by calling the __syncthreads() intrinsic function; __syncthreads() acts as a barrier at which all threads in the block must wait before any is allowed to proceed. In addition to __syncthreads(), the Cooperative Groups API provides a rich set of thread-synchronization primitives. ÂùóÂÜÖÁöÑÁ∫øÁ®ãÂèØ‰ª•ÈÄöËøáÊüê‰∫õÂÖ±‰∫´ÂÜÖÂ≠òÂÖ±‰∫´Êï∞ÊçÆÂπ∂ÂêåÊ≠•ÂÖ∂ÊâßË°åÊù•ÂçèË∞ÉÂÜÖÂ≠òËÆøÈóÆÊù•ËøõË°åÂçè‰Ωú„ÄÇÊõ¥ÂáÜÁ°ÆÂú∞ËØ¥ÔºåÂèØ‰ª•ÈÄöËøáË∞ÉÁî®__syncthreads()ÂÜÖÈÉ®ÂáΩÊï∞Êù•ÊåáÂÆöÂÜÖÊ†∏‰∏≠ÁöÑÂêåÊ≠•ÁÇπÔºõ __syncthreads()ÂÖÖÂΩìÂ±èÈöúÔºåÂùó‰∏≠ÁöÑÊâÄÊúâÁ∫øÁ®ãÈÉΩÂøÖÈ°ªÁ≠âÂæÖÔºåÁÑ∂ÂêéÊâçÂÖÅËÆ∏‰ªª‰ΩïÁ∫øÁ®ãÁªßÁª≠ËøõË°å„ÄÇÈô§‰∫Ü__syncthreads()‰πãÂ§ñÔºåÂçè‰ΩúÁªÑ API ËøòÊèê‰æõ‰∫Ü‰∏ÄÁªÑ‰∏∞ÂØåÁöÑÁ∫øÁ®ãÂêåÊ≠•ÂéüËØ≠„ÄÇ For efficient cooperation, the shared memory is expected to be a low-latency memory near each processor core (much like an L1 cache) and __syncthreads() is expected to be lightweight. ‰∏∫‰∫ÜÈ´òÊïàÂêà‰ΩúÔºåÂÖ±‰∫´ÂÜÖÂ≠òÂ∫îËØ•ÊòØÊØè‰∏™Â§ÑÁêÜÂô®Ê†∏ÂøÉÈôÑËøëÁöÑ‰ΩéÂª∂ËøüÂÜÖÂ≠òÔºàÂæàÂÉè L1 ÁºìÂ≠òÔºâÔºåÂπ∂‰∏î__syncthreads()Â∫îËØ•ÊòØËΩªÈáèÁ∫ßÁöÑ„ÄÇ Memory Hierarachy: ÂÜÖÂ≠òÂ±ÇÊ¨°ÁªìÊûÑ CUDA threads may access data from multiple memory spaces during their execution as illustrated by Figure 6. Each thread has private local memory. Each thread block has shared memory visible to all threads of the block and with the same lifetime as the block. Thread blocks in a thread block cluster can perform read, write, and atomics operations on each other‚Äôs shared memory. All threads have access to the same global memory. CUDA Á∫øÁ®ãÂú®ÊâßË°åÊúüÈó¥ÂèØ‰ª•ËÆøÈóÆÂ§ö‰∏™ÂÜÖÂ≠òÁ©∫Èó¥‰∏≠ÁöÑÊï∞ÊçÆÔºåÂ¶ÇÂõæ 6 ÊâÄÁ§∫„ÄÇÊØè‰∏™Á∫øÁ®ãÈÉΩÊúâÁßÅÊúâÊú¨Âú∞ÂÜÖÂ≠ò„ÄÇÊØè‰∏™Á∫øÁ®ãÂùóÈÉΩÊúâÂØπËØ•ÂùóÁöÑÊâÄÊúâÁ∫øÁ®ãÂèØËßÅÁöÑÂÖ±‰∫´ÂÜÖÂ≠òÔºåÂπ∂‰∏î‰∏éËØ•ÂùóÂÖ∑ÊúâÁõ∏ÂêåÁöÑÁîüÂëΩÂë®Êúü„ÄÇÁ∫øÁ®ãÂùóÁ∞á‰∏≠ÁöÑÁ∫øÁ®ãÂùóÂèØ‰ª•ÂØπÂΩºÊ≠§ÁöÑÂÖ±‰∫´ÂÜÖÂ≠òÊâßË°åËØª„ÄÅÂÜôÂíåÂéüÂ≠êÊìç‰Ωú„ÄÇÊâÄÊúâÁ∫øÁ®ãÈÉΩÂèØ‰ª•ËÆøÈóÆÁõ∏ÂêåÁöÑÂÖ®Â±ÄÂÜÖÂ≠ò„ÄÇ There are also two additional read-only memory spaces accessible by all threads: the constant and texture memory spaces. The global, constant, and texture memory spaces are optimized for different memory usages (see Device Memory Accesses). Texture memory also offers different addressing modes, as well as data filtering, for some specific data formats (see Texture and Surface Memory). ËøòÊúâ‰∏§‰∏™ÂèØ‰æõÊâÄÊúâÁ∫øÁ®ãËÆøÈóÆÁöÑÈôÑÂä†Âè™ËØªÂÜÖÂ≠òÁ©∫Èó¥ÔºöÂ∏∏ÈáèÂÜÖÂ≠òÁ©∫Èó¥ÂíåÁ∫πÁêÜÂÜÖÂ≠òÁ©∫Èó¥„ÄÇÂÖ®Â±Ä„ÄÅÂ∏∏ÈáèÂíåÁ∫πÁêÜÂÜÖÂ≠òÁ©∫Èó¥ÈíàÂØπ‰∏çÂêåÁöÑÂÜÖÂ≠ò‰ΩøÁî®ËøõË°å‰∫Ü‰ºòÂåñÔºàËØ∑ÂèÇÈòÖËÆæÂ§áÂÜÖÂ≠òËÆøÈóÆÔºâ„ÄÇÁ∫πÁêÜÂÜÖÂ≠òËøò‰∏∫Êüê‰∫õÁâπÂÆöÁöÑÊï∞ÊçÆÊ†ºÂºèÊèê‰æõ‰∏çÂêåÁöÑÂØªÂùÄÊ®°Âºè‰ª•ÂèäÊï∞ÊçÆËøáÊª§ÔºàËØ∑ÂèÇÈòÖÁ∫πÁêÜÂíåË°®Èù¢ÂÜÖÂ≠òÔºâ„ÄÇ The global, constant, and texture memory spaces are persistent across kernel launches by the same application. ÂÖ®Â±Ä„ÄÅÂ∏∏ÈáèÂíåÁ∫πÁêÜÂÜÖÂ≠òÁ©∫Èó¥Âú®Âêå‰∏ÄÂ∫îÁî®Á®ãÂ∫èÁöÑÂÜÖÊ†∏ÂêØÂä®ËøáÁ®ã‰∏≠ÊòØÊåÅ‰πÖÁöÑ„ÄÇ Heteroheneous Programming: ÂºÇÊûÑÁºñÁ®ã As illustrated by Figure 7, the CUDA programming model assumes that the CUDA threads execute on a physically separate device that operates as a coprocessor to the host running the C++ program. This is the case, for example, when the kernels execute on a GPU and the rest of the C++ program executes on a CPU. Â¶ÇÂõæ 7 ÊâÄÁ§∫ÔºåCUDA ÁºñÁ®ãÊ®°ÂûãÂÅáËÆæ CUDA Á∫øÁ®ãÂú®Áâ©ÁêÜ‰∏äÁã¨Á´ãÁöÑËÆæÂ§á‰∏äÊâßË°åÔºåËØ•ËÆæÂ§á‰Ωú‰∏∫ËøêË°å C++ Á®ãÂ∫èÁöÑ‰∏ªÊú∫ÁöÑÂçèÂ§ÑÁêÜÂô®ËøêË°å„ÄÇ‰æãÂ¶ÇÔºåÂΩìÂÜÖÊ†∏Âú® GPU ‰∏äÊâßË°åËÄå C++ Á®ãÂ∫èÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜÂú® CPU ‰∏äÊâßË°åÊó∂ÔºåÂ∞±‰ºöÂá∫Áé∞ËøôÁßçÊÉÖÂÜµ„ÄÇ The CUDA programming model also assumes that both the host and the device maintain their own separate memory spaces in DRAM, referred to as host memory and device memory, respectively. Therefore, a program manages the global, constant, and texture memory spaces visible to kernels through calls to the CUDA runtime (described in Programming Interface). This includes device memory allocation and deallocation as well as data transfer between host and device memory. CUDA ÁºñÁ®ãÊ®°ÂûãËøòÂÅáËÆæ‰∏ªÊú∫ÂíåËÆæÂ§áÈÉΩÂú® DRAM ‰∏≠Áª¥Êä§Ëá™Â∑±Áã¨Á´ãÁöÑÂÜÖÂ≠òÁ©∫Èó¥ÔºåÂàÜÂà´Áß∞‰∏∫‰∏ªÊú∫ÂÜÖÂ≠òÂíåËÆæÂ§áÂÜÖÂ≠ò„ÄÇÂõ†Ê≠§ÔºåÁ®ãÂ∫èÈÄöËøáË∞ÉÁî® CUDA ËøêË°åÊó∂ÔºàÂú®ÁºñÁ®ãÊé•Âè£‰∏≠ÊèèËø∞ÔºâÊù•ÁÆ°ÁêÜÂÜÖÊ†∏ÂèØËßÅÁöÑÂÖ®Â±Ä„ÄÅÂ∏∏ÈáèÂíåÁ∫πÁêÜÂÜÖÂ≠òÁ©∫Èó¥„ÄÇËøôÂåÖÊã¨ËÆæÂ§áÂÜÖÂ≠òÂàÜÈÖçÂíåÈáäÊîæ‰ª•Âèä‰∏ªÊú∫ÂíåËÆæÂ§áÂÜÖÂ≠ò‰πãÈó¥ÁöÑÊï∞ÊçÆ‰º†Ëæì„ÄÇ Unified Memory provides managed memory to bridge the host and device memory spaces. Managed memory is accessible from all CPUs and GPUs in the system as a single, coherent memory image with a common address space. This capability enables oversubscription of device memory and can greatly simplify the task of porting applications by eliminating the need to explicitly mirror data on host and device. See Unified Memory Programming for an introduction to Unified Memory. Áªü‰∏ÄÂÜÖÂ≠òÊèê‰æõÊâòÁÆ°ÂÜÖÂ≠òÊù•Ê°•Êé•‰∏ªÊú∫ÂíåËÆæÂ§áÂÜÖÂ≠òÁ©∫Èó¥„ÄÇÊâòÁÆ°ÂÜÖÂ≠òÂèØ‰Ωú‰∏∫ÂÖ∑ÊúâÂÖ¨ÂÖ±Âú∞ÂùÄÁ©∫Èó¥ÁöÑÂçï‰∏™‰∏ÄËá¥ÂÜÖÂ≠òÊò†ÂÉè‰ªéÁ≥ªÁªü‰∏≠ÁöÑÊâÄÊúâ CPU Âíå GPU ËøõË°åËÆøÈóÆ„ÄÇÊ≠§ÂäüËÉΩÂèØÂÆûÁé∞ËÆæÂ§áÂÜÖÂ≠òÁöÑË∂ÖÈ¢ùËÆ¢ÈòÖÔºåÂπ∂‰∏îÊó†ÈúÄÂú®‰∏ªÊú∫ÂíåËÆæÂ§á‰∏äÊòæÂºèÈïúÂÉèÊï∞ÊçÆÔºå‰ªéËÄåÂ§ßÂ§ßÁÆÄÂåñÁßªÊ§çÂ∫îÁî®Á®ãÂ∫èÁöÑ‰ªªÂä°„ÄÇÊúâÂÖ≥Áªü‰∏ÄÂÜÖÂ≠òÁöÑ‰ªãÁªçÔºåËØ∑ÂèÇÈòÖÁªü‰∏ÄÂÜÖÂ≠òÁºñÁ®ã„ÄÇ Serial code executes on the host while parallel code executes on the device. ‰∏≤Ë°å‰ª£Á†ÅÂú®‰∏ªÊú∫‰∏äÊâßË°åÔºåËÄåÂπ∂Ë°å‰ª£Á†ÅÂú®ËÆæÂ§á‰∏äÊâßË°å„ÄÇ Asynchronous SIMT Programming Model: ÂºÇÊ≠• SIMT ÁºñÁ®ãÊ®°Âûã In the CUDA programming model a thread is the lowest level of abstraction for doing a computation or a memory operation. Starting with devices based on the NVIDIA Ampere GPU architecture, the CUDA programming model provides acceleration to memory operations via the asynchronous programming model. The asynchronous programming model defines the behavior of asynchronous operations with respect to CUDA threads. Âú® CUDA ÁºñÁ®ãÊ®°Âûã‰∏≠ÔºåÁ∫øÁ®ãÊòØÊâßË°åËÆ°ÁÆóÊàñÂÜÖÂ≠òÊìç‰ΩúÁöÑÊúÄ‰ΩéÊäΩË±°Á∫ßÂà´„ÄÇ‰ªéÂü∫‰∫é NVIDIA Ampere GPU Êû∂ÊûÑÁöÑËÆæÂ§áÂºÄÂßãÔºåCUDA ÁºñÁ®ãÊ®°ÂûãÈÄöËøáÂºÇÊ≠•ÁºñÁ®ãÊ®°ÂûãÊèê‰æõÂÜÖÂ≠òÊìç‰ΩúÂä†ÈÄü„ÄÇÂºÇÊ≠•ÁºñÁ®ãÊ®°ÂûãÂÆö‰πâ‰∫Ü‰∏é CUDA Á∫øÁ®ãÁõ∏ÂÖ≥ÁöÑÂºÇÊ≠•Êìç‰ΩúÁöÑË°å‰∏∫„ÄÇ The asynchronous programming model defines the behavior of Asynchronous Barrier for synchronization between CUDA threads. The model also explains and defines how cuda::memcpy_async can be used to move data asynchronously from global memory while computing in the GPU. ÂºÇÊ≠•ÁºñÁ®ãÊ®°ÂûãÂÆö‰πâ‰∫ÜÁî®‰∫é CUDA Á∫øÁ®ã‰πãÈó¥ÂêåÊ≠•ÁöÑÂºÇÊ≠•Â±èÈöúÁöÑË°å‰∏∫„ÄÇËØ•Ê®°ÂûãËøòËß£ÈáäÂπ∂ÂÆö‰πâ‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî®cuda::memcpy_asyncÂú® GPU ‰∏≠ËÆ°ÁÆóÊó∂‰ªéÂÖ®Â±ÄÂÜÖÂ≠òÂºÇÊ≠•ÁßªÂä®Êï∞ÊçÆ„ÄÇ 2.5.1. Asynchronous Operations 2.5.1.ÂºÇÊ≠•Êìç‰Ωú An asynchronous operation is defined as an operation that is initiated by a CUDA thread and is executed asynchronously as-if by another thread. In a well formed program one or more CUDA threads synchronize with the asynchronous operation. The CUDA thread that initiated the asynchronous operation is not required to be among the synchronizing threads. ÂºÇÊ≠•Êìç‰ΩúË¢´ÂÆö‰πâ‰∏∫Áî± CUDA Á∫øÁ®ãÂèëËµ∑Âπ∂ÂÉèÁî±Âè¶‰∏Ä‰∏™Á∫øÁ®ã‰∏ÄÊ†∑ÂºÇÊ≠•ÊâßË°åÁöÑÊìç‰Ωú„ÄÇÂú®Ê†ºÂºèËâØÂ•ΩÁöÑÁ®ãÂ∫è‰∏≠Ôºå‰∏Ä‰∏™ÊàñÂ§ö‰∏™ CUDA Á∫øÁ®ã‰∏éÂºÇÊ≠•Êìç‰ΩúÂêåÊ≠•„ÄÇÂêØÂä®ÂºÇÊ≠•Êìç‰ΩúÁöÑ CUDA Á∫øÁ®ã‰∏çÈúÄË¶Å‰Ωç‰∫éÂêåÊ≠•Á∫øÁ®ã‰∏≠„ÄÇ Such an asynchronous thread (an as-if thread) is always associated with the CUDA thread that initiated the asynchronous operation. An asynchronous operation uses a synchronization object to synchronize the completion of the operation. Such a synchronization object can be explicitly managed by a user (e.g., cuda::memcpy_async) or implicitly managed within a library (e.g., cooperative_groups::memcpy_async). ËøôÊ†∑ÁöÑÂºÇÊ≠•Á∫øÁ®ãÔºàas-if Á∫øÁ®ãÔºâÂßãÁªà‰∏éÂêØÂä®ÂºÇÊ≠•Êìç‰ΩúÁöÑ CUDA Á∫øÁ®ãÁõ∏ÂÖ≥ËÅî„ÄÇÂºÇÊ≠•Êìç‰Ωú‰ΩøÁî®ÂêåÊ≠•ÂØπË±°Êù•ÂêåÊ≠•Êìç‰ΩúÁöÑÂÆåÊàê„ÄÇËøôÊ†∑ÁöÑÂêåÊ≠•ÂØπË±°ÂèØ‰ª•Áî±Áî®Êà∑ÊòæÂºèÁÆ°ÁêÜÔºà‰æãÂ¶ÇÔºå cuda::memcpy_async ÔºâÊàñÂú®Â∫ì‰∏≠ÈöêÂºèÁÆ°ÁêÜÔºà‰æãÂ¶ÇÔºå cooperative_groups::memcpy_async Ôºâ„ÄÇ A synchronization object could be a cuda::barrier or a cuda::pipeline. These objects are explained in detail in Asynchronous Barrier and Asynchronous Data Copies using cuda::pipeline. These synchronization objects can be used at different thread scopes. A scope defines the set of threads that may use the synchronization object to synchronize with the asynchronous operation. The following table defines the thread scopes available in CUDA C++ and the threads that can be synchronized with each. ÂêåÊ≠•ÂØπË±°ÂèØ‰ª•ÊòØcuda::barrierÊàñcuda::pipeline „ÄÇËøô‰∫õÂØπË±°Âú®‰ΩøÁî® cuda::pipeline ÁöÑÂºÇÊ≠•Â±èÈöúÂíåÂºÇÊ≠•Êï∞ÊçÆÂâØÊú¨‰∏≠ËØ¶ÁªÜËß£Èáä„ÄÇËøô‰∫õÂêåÊ≠•ÂØπË±°ÂèØ‰ª•Âú®‰∏çÂêåÁöÑÁ∫øÁ®ãËåÉÂõ¥ÂÜÖ‰ΩøÁî®„ÄÇËåÉÂõ¥ÂÆö‰πâ‰∫ÜÂèØ‰ª•‰ΩøÁî®ÂêåÊ≠•ÂØπË±°Êù•‰∏éÂºÇÊ≠•Êìç‰ΩúÂêåÊ≠•ÁöÑÁ∫øÁ®ãÈõÜ„ÄÇ‰∏ãË°®ÂÆö‰πâ‰∫Ü CUDA C++ ‰∏≠ÂèØÁî®ÁöÑÁ∫øÁ®ãËåÉÂõ¥‰ª•ÂèäÂèØ‰ª•‰∏éÊØè‰∏™Á∫øÁ®ãÂêåÊ≠•ÁöÑÁ∫øÁ®ã„ÄÇ Compute Capability: ËÆ°ÁÆóËÉΩÂäõ Programming Interface ÁºñÁ®ãÊé•Âè£ Hardware Implementation Á°¨‰ª∂ÂÆûÁé∞ Performance Guidelines ÊÄßËÉΩÊåáÂçó PTX Parallel Thread Execution PTX: a low-level parallel thread execution virtual machine and instruction set architecture. PTX ÊòØ‰∏ÄÁßç‰ΩéÁ∫ßÂπ∂Ë°åÁ∫øÁ®ãÊâßË°åËôöÊãüÊú∫ÂíåÊåá‰ª§ÈõÜ‰ΩìÁ≥ªÁªìÊûÑ„ÄÇ PTX exposes the GPU as data-parallel computing device. Numba OverviewÔÉÅ Ê¶ÇËø∞ ÔÉÅ Numba supports CUDA GPU programming by directly compiling a restricted subset of Python code into CUDA kernels and device functions following the CUDA execution model. Kernels written in Numba appear to have direct access to NumPy arrays. NumPy arrays are transferred between the CPU and the GPU automatically. Numba ÈÄöËøáÂ∞Ü Python ‰ª£Á†ÅÁöÑÂèóÈôêÂ≠êÈõÜÁõ¥Êé•ÁºñËØë‰∏∫ÈÅµÂæ™ CUDA ÊâßË°åÊ®°ÂûãÁöÑ CUDA ÂÜÖÊ†∏ÂíåËÆæÂ§áÂáΩÊï∞Êù•ÊîØÊåÅ CUDA GPU ÁºñÁ®ã„ÄÇÁî® Numba ÁºñÂÜôÁöÑÂÜÖÊ†∏‰ºº‰πéÂèØ‰ª•Áõ¥Êé•ËÆøÈóÆ NumPy Êï∞ÁªÑ„ÄÇ NumPy Êï∞ÁªÑÂú® CPU Âíå GPU ‰πãÈó¥Ëá™Âä®‰º†Ëæì„ÄÇ Install CUDA CUDA Toolkit Archive NVIDIA CUDA Installation Guide for Linux Other Resources Programming Massively Parallel Processors: A Hands-on Approach Programming Massively Parallel Processors: A Hands-on Approach, Second Edition, teaches students how to program massively parallel processors. It offers a detailed discussion of various techniques for constructing parallel programs. Case studies are used to demonstrate the development process, which begins with computational thinking and ends with effective and efficient parallel programs. This guide shows both student and professional alike the basic concepts of parallel programming and GPU architecture. Topics of performance, floating-point format, parallel patterns, and dynamic parallelism are covered in depth. This revised edition contains more parallel programming examples, commonly-used libraries such as Thrust, and explanations of the latest tools. It also provides new coverage of CUDA 5.0, improved performance, enhanced development tools, increased hardware support, and more; increased coverage of related technology, OpenCL and new material on algorithm patterns, GPU clusters, host programming, and data parallelism; and two new case studies (on MRI reconstruction and molecular visualization) that explore the latest applications of CUDA and GPUs for scientific research and high-performance computing. This book should be a valuable resource for advanced students, software engineers, programmers, and hardware engineers. Programming Massively Parallel ProcessorsÔºö A Hands-on ApproachÔºåÁ¨¨‰∫åÁâàÔºåÊïôÊéàÂ≠¶ÁîüÂ¶Ç‰ΩïÂØπÂ§ßËßÑÊ®°Âπ∂Ë°åÂ§ÑÁêÜÂô®ËøõË°åÁºñÁ®ã„ÄÇÂÆÉËØ¶ÁªÜËÆ®ËÆ∫‰∫ÜÁî®‰∫éÊûÑÂª∫Âπ∂Ë°åÁ®ãÂ∫èÁöÑÂêÑÁßçÊäÄÊúØ„ÄÇÊ°à‰æãÁ†îÁ©∂Áî®‰∫éÊºîÁ§∫ÂºÄÂèëËøáÁ®ãÔºåËØ•ËøáÁ®ã‰ªéËÆ°ÁÆóÊÄùÁª¥ÂºÄÂßãÔºå‰ª•ÊúâÊïàÂíåÈ´òÊïàÁöÑÂπ∂Ë°åÁ®ãÂ∫èÁªìÊùü„ÄÇÊú¨ÊåáÂçóÂêëÂ≠¶ÁîüÂíå‰∏ì‰∏ö‰∫∫Â£´Â±ïÁ§∫‰∫ÜÂπ∂Ë°åÁºñÁ®ãÂíå GPU Êû∂ÊûÑÁöÑÂü∫Êú¨Ê¶ÇÂøµ„ÄÇÊ∑±ÂÖ•‰ªãÁªç‰∫ÜÊÄßËÉΩ„ÄÅÊµÆÁÇπÊ†ºÂºè„ÄÅÂπ∂Ë°åÊ®°ÂºèÂíåÂä®ÊÄÅÂπ∂Ë°åÊÄßÁ≠â‰∏ªÈ¢ò„ÄÇÊ≠§‰øÆËÆ¢ÁâàÂåÖÂê´Êõ¥Â§öÂπ∂Ë°åÁºñÁ®ãÁ§∫‰æã„ÄÅÂ∏∏Áî®Â∫ìÔºàÂ¶Ç ThrustÔºâ‰ª•ÂèäÊúÄÊñ∞Â∑•ÂÖ∑ÁöÑËß£Èáä„ÄÇÂÆÉËøòÊèê‰æõ‰∫Ü CUDA 5.0 ÁöÑÊñ∞Ë¶ÜÁõñËåÉÂõ¥„ÄÅÊîπËøõÁöÑÊÄßËÉΩ„ÄÅÂ¢ûÂº∫ÁöÑÂºÄÂèëÂ∑•ÂÖ∑„ÄÅÂ¢ûÂº∫ÁöÑÁ°¨‰ª∂ÊîØÊåÅÁ≠â;Â¢ûÂä†‰∫ÜÁõ∏ÂÖ≥ÊäÄÊúØ„ÄÅOpenCL ÂíåÊúâÂÖ≥ÁÆóÊ≥ïÊ®°Âºè„ÄÅGPU ÈõÜÁæ§„ÄÅ‰∏ªÊú∫ÁºñÁ®ãÂíåÊï∞ÊçÆÂπ∂Ë°åÊÄßÁöÑÊñ∞ÊùêÊñôÁöÑË¶ÜÁõñËåÉÂõ¥;‰ª•Âèä‰∏§‰∏™Êñ∞ÁöÑÊ°à‰æãÁ†îÁ©∂ÔºàÂÖ≥‰∫é MRI ÈáçÂª∫ÂíåÂàÜÂ≠êÂèØËßÜÂåñÔºâÔºåÊé¢Á¥¢ CUDA Âíå GPU Âú®ÁßëÂ≠¶Á†îÁ©∂ÂíåÈ´òÊÄßËÉΩËÆ°ÁÆó‰∏≠ÁöÑÊúÄÊñ∞Â∫îÁî®„ÄÇËøôÊú¨‰π¶Â∫îËØ•ÊòØÈ´òÁ∫ßÂ≠¶Áîü„ÄÅËΩØ‰ª∂Â∑•Á®ãÂ∏à„ÄÅÁ®ãÂ∫èÂëòÂíåÁ°¨‰ª∂Â∑•Á®ãÂ∏àÁöÑÂÆùË¥µËµÑÊ∫ê„ÄÇ CUDA Examples #include #include // CUDA kernel function for vector addition __global__ void vectorAdd(const float* A, const float* B, float* C, int N) { int i = blockIdx.x * blockDim.x + threadIdx.x; // Calculate global thread index if (i (i); h_B[i] = static_cast(i * 2); } // Allocate device memory float *d_A, *d_B, *d_C; cudaMalloc((void**)&d_A, size); cudaMalloc((void**)&d_B, size); cudaMalloc((void**)&d_C, size); // Copy data from host to device cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); // Launch kernel int threadsPerBlock = 256; int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock; vectorAdd>>(d_A, d_B, d_C, N); // Copy result back to host cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); // Print some results for (int i = 0; i "},"Learn/LearnCUDA/CUDA_multi.html":{"url":"Learn/LearnCUDA/CUDA_multi.html","title":"CUDA_multi","keywords":"","body":"CUDA Multi Version Installing multiple CUDA + cuDNN versions in the same machine for Tensorflow and Pytorch cuda-compatibility # add below to your env bash file. function _switch_cuda { v=$1 export PATH=$PATH:/usr/local/cuda-$v/bin export CUDADIR=/usr/local/cuda-$v export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-$v/lib64 nvcc --version } And call this function to switch to a corresponding cuda version on your bash session _switch_cuda 11.0 # change the version of your like to load bash. Multiple Version of CUDA Libraries On The Same Machine sudo sh cuda-9.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.1 Managing Multiple CUDA Versions on a Single Machine: A Comprehensive Guide export PATH=/usr/local/cuda-11.8/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH # Activate the virtual environment echo \"export PATH=/usr/local/cuda-11.8/bin:$PATH\" >> venv/my_env/bin/activate echo \"LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH\" >> venv/my_env/bin/activate "},"Learn/LearnCUDA/NCCL.html":{"url":"Learn/LearnCUDA/NCCL.html","title":"NCCL","keywords":"","body":"https://developer.nvidia.com/nccl NVIDIA Collective Communications Library (NCCL) NVIDIA NCCL Ëã±‰ºüËææ NCCL The NVIDIA Collective Communication Library (NCCL) implements multi-GPU and multi-node communication primitives optimized for NVIDIA GPUs and Networking. NCCL provides routines such as all-gather, all-reduce, broadcast, reduce, reduce-scatter as well as point-to-point send and receive that are optimized to achieve high bandwidth and low latency over PCIe and NVLink high-speed interconnects within a node and over NVIDIA Mellanox Network across nodes. NVIDIA ÈõÜ‰ΩìÈÄö‰ø°Â∫ì (NCCL) ÂÆûÁé∞‰∫ÜÈíàÂØπ NVIDIA GPU ÂíåÁΩëÁªúËøõË°å‰ºòÂåñÁöÑÂ§ö GPU ÂíåÂ§öËäÇÁÇπÈÄö‰ø°ÂéüËØ≠„ÄÇ NCCL Êèê‰æõÂÖ®Êî∂ÈõÜ„ÄÅÂÖ®ÂΩíÁ∫¶„ÄÅÂπøÊí≠„ÄÅÂΩíÁ∫¶„ÄÅÂΩíÁ∫¶ÂàÜÊï£‰ª•ÂèäÁÇπÂØπÁÇπÂèëÈÄÅÂíåÊé•Êî∂Á≠â‰æãÁ®ãÔºåËøô‰∫õ‰æãÁ®ãÁªèËøá‰ºòÂåñÔºåÂèØÂú® PCIe Âíå NVLink È´òÈÄü‰∫íËøû‰∏äÂÆûÁé∞È´òÂ∏¶ÂÆΩÂíå‰ΩéÂª∂Ëøü„ÄÇ‰∏Ä‰∏™ËäÇÁÇπ‰ª•ÂèäË∑®ËäÇÁÇπÁöÑ NVIDIA Mellanox ÁΩëÁªú„ÄÇ "},"Learn/LearnCUDA/TensorCores.html":{"url":"Learn/LearnCUDA/TensorCores.html","title":"TensorCores","keywords":"","body":"Tensor Cores CUDA Toolkit Documentation 12.2 (nvidia.com) NVIDIA Ëã±‰ºüËææ Tensor Core Âü∫Êú¨ÂéüÁêÜ(‰∏ä)„ÄêAI ËäØÁâá„ÄëGPU Êû∂ÊûÑ 04_ÂìîÂì©ÂìîÂì©_bilibili Tensor CoreÔºö ‰∏ìÈó®ÂÅöÁü©Èòµ‰πòÔºåÁü©ÈòµÂä†ÔºåÂèØ‰ª•Âú®‰∏ÄÊ≠•‰∏≠ÊâßË°åÊ∑∑ÂêàÁ≤æÂ∫¶ÁöÑÁü©Èòµ‰πòÊ≥ïÂíåÁ¥ØÁßØ„ÄÇËøôÊÑèÂë≥ÁùÄÂÆÉ‰ª¨ÂèØ‰ª•‰πò‰ª•‰∏§‰∏™Áü©ÈòµÔºåÁÑ∂ÂêéÂ∞ÜÁ¨¨‰∏â‰∏™Áü©ÈòµÊ∑ªÂä†Âà∞ÁªìÊûú‰∏≠ÔºåËøôÊòØÊ∑±Â∫¶Â≠¶‰π†‰∏≠ÁöÑÂü∫Êú¨Êìç‰ΩúÔºåÈÄüÂ∫¶ÈùûÂ∏∏Âø´„ÄÇ GEMM ÈÄöÁî®Áü©Èòµ‰πò General Matrix Multiplication FMA ‰πòÁßØÁ¥ØÂä†Êåá‰ª§ Fused Multiply‚Äìaccumulate operation CUDA Ê†∏ÂøÉÂíå Tensor Ê†∏ÂøÉ CUDA Ê†∏ÂøÉÂíå Tensor Ê†∏ÂøÉÈÉΩÊòØ NVIDIA GPU ‰∏≠ÁöÑÊû∂ÊûÑÁªÑ‰ª∂Ôºå‰ΩÜÂÆÉ‰ª¨ÊòØ‰∏∫‰∏çÂêåÁöÑÁõÆÁöÑËÆæËÆ°ÁöÑÂπ∂‰ª•‰∏çÂêåÁöÑÊñπÂºèÊìç‰Ωú„ÄÇ‰ª•‰∏ãÊòØÂÆÉ‰ª¨‰πãÈó¥ÁöÑÂ∑ÆÂºÇÔºö 1. ÁõÆÁöÑ Ôºö CUDA Ê†∏ÂøÉ ÔºöCUDA Ê†∏ÂøÉÊúâÊó∂Ë¢´Áß∞‰∏∫‚ÄúÊµÅÂºèÂ§öÂ§ÑÁêÜÂô®‚ÄùÊàñ‚ÄúÁùÄËâ≤Âô®Ê†∏ÂøÉ‚ÄùÔºåÂÆÉ‰ª¨ÊòØÈÄöÁî®ÁöÑÂπ∂‰∏îÂ§ÑÁêÜÂêÑÁßç‰ªªÂä°ÔºåÂåÖÊã¨È°∂ÁÇπÁùÄËâ≤„ÄÅÂÉèÁ¥†ÁùÄËâ≤„ÄÅÂá†‰ΩïÁùÄËâ≤ÂíåËÆ°ÁÆó‰ªªÂä°„ÄÇÂÆÉ‰ª¨ÊòØË¥üË¥£‰º†Áªü GPU ‰ªªÂä°ÁöÑ‰∏ªË¶ÅÁªÑ‰ª∂„ÄÇ Tensor Ê†∏ÂøÉ ÔºöTensor Ê†∏ÂøÉÊòØ NVIDIA Êû∂ÊûÑÁöÑËæÉÊñ∞Ê∑ªÂä†Ôºå‰∏é Volta ‰ª£‰∏ÄËµ∑ÂºïÂÖ•„ÄÇÂÆÉ‰ª¨ÊòØ‰∏ìÈó®‰∏∫Âä†ÈÄüÊ∑±Â∫¶Â≠¶‰π†Â∑•‰ΩúË¥üËΩΩËÄåËÆæËÆ°ÁöÑÁ°¨‰ª∂ÂçïÂÖÉÔºåÁâπÂà´ÊòØÂú®Á•ûÁªèÁΩëÁªúËÆ≠ÁªÉÂíåÊé®Êñ≠‰∏≠Â∏∏ËßÅÁöÑÁü©ÈòµÊìç‰Ωú„ÄÇ 2. Êìç‰Ωú Ôºö CUDA Ê†∏ÂøÉ ÔºöCUDA Ê†∏ÂøÉÂèØ‰ª•Â§ÑÁêÜÊµÆÁÇπÁÆóÊúØ„ÄÅÊï¥Êï∞ÁÆóÊúØÂíåÂÖ∂‰ªñ‰º†ÁªüÁöÑ GPU ‰ªªÂä°„ÄÇ Tensor Ê†∏ÂøÉ ÔºöTensor Ê†∏ÂøÉÂèØ‰ª•Âú®‰∏ÄÊ≠•‰∏≠ÊâßË°åÊ∑∑ÂêàÁ≤æÂ∫¶ÁöÑÁü©Èòµ‰πòÊ≥ïÂíåÁ¥ØÁßØ„ÄÇËøôÊÑèÂë≥ÁùÄÂÆÉ‰ª¨ÂèØ‰ª•‰πò‰ª•‰∏§‰∏™Áü©ÈòµÔºåÁÑ∂ÂêéÂ∞ÜÁ¨¨‰∏â‰∏™Áü©ÈòµÊ∑ªÂä†Âà∞ÁªìÊûú‰∏≠ÔºåËøôÊòØÊ∑±Â∫¶Â≠¶‰π†‰∏≠ÁöÑÂü∫Êú¨Êìç‰ΩúÔºåÈÄüÂ∫¶ÈùûÂ∏∏Âø´„ÄÇ 3. Á≤æÂ∫¶ Ôºö CUDA Ê†∏ÂøÉ ÔºöÊîØÊåÅ‰ªéÈ´òÁ≤æÂ∫¶ÔºàÂ¶Ç FP64ÔºâÂà∞ËæÉ‰ΩéÁ≤æÂ∫¶ÔºàÂ¶Ç FP32ÔºâÁöÑÂπøÊ≥õÁ≤æÂ∫¶„ÄÇ Tensor Ê†∏ÂøÉ Ôºö‰∏ªË¶ÅÈíàÂØπÊ∑∑ÂêàÁ≤æÂ∫¶ËÆ°ÁÆóËøõË°å‰∫Ü‰ºòÂåñÔºåÈÄöÂ∏∏‰ΩøÁî® FP16ÔºàÂçäÁ≤æÂ∫¶ÔºâËøõË°å‰πòÊ≥ïÂíå FP32ÔºàÂçïÁ≤æÂ∫¶ÔºâËøõË°åÁ¥ØÁßØ„ÄÇËøôÁßçÊ∑∑ÂêàÁ≤æÂ∫¶ÊñπÊ≥ïÂú®Ê∑±Â∫¶Â≠¶‰π†‰∏≠ÊòØÊúâÁõäÁöÑÔºåÂõ†‰∏∫ËÆ∏Â§öÊ®°ÂûãÂèØ‰ª•ÂÆπÂøçÈôç‰ΩéÁöÑÁ≤æÂ∫¶ÔºåËÄå‰∏ç‰ºöÂØπÂáÜÁ°ÆÊÄß‰∫ßÁîüÈáçÂ§ßÂΩ±Âìç„ÄÇ 4. Âú® GPU Êû∂ÊûÑ‰∏≠ÁöÑÂ≠òÂú® Ôºö CUDA Ê†∏ÂøÉ ÔºöËá™ 2007 Âπ¥ÂºïÂÖ• CUDA Âπ≥Âè∞‰ª•Êù•ÔºåCUDA Ê†∏ÂøÉ‰∏ÄÁõ¥ÊòØ NVIDIA GPU ÁöÑ‰∏ªË¶ÅÁªÑÊàêÈÉ®ÂàÜ„ÄÇ Tensor Ê†∏ÂøÉ ÔºöÂÆÉ‰ª¨‰ªé Volta Êû∂ÊûÑÂºÄÂßãÂºïÂÖ•Ôºà‰æãÂ¶ÇÂú® Tesla V100 ‰∏≠ÔºâÔºåÂπ∂‰∏îÂú®ÈöèÂêéÁöÑÊû∂ÊûÑ‰∏≠ÔºàÂ¶Ç Turing„ÄÅAmpere Á≠âÔºâÈÉΩÂ≠òÂú®„ÄÇ 5. ÊÄßËÉΩ Ôºö CUDA Ê†∏ÂøÉ ÔºöÈÄöÁî®ÔºåÂèØ‰ª•ÊúâÊïàÂú∞Â§ÑÁêÜÂêÑÁßç‰ªªÂä°„ÄÇ Tensor Ê†∏ÂøÉ ÔºöÂú®‰∏éÊ∑±Â∫¶Â≠¶‰π†ÊúâÂÖ≥ÁöÑÁâπÂÆöÁü©ÈòµÊìç‰ΩúÊñπÈù¢Ôºå‰∏é CUDA Ê†∏ÂøÉÁõ∏ÊØîÔºåTensor Ê†∏ÂøÉÊèê‰æõ‰∫ÜÊòéÊòæÊõ¥Âø´ÁöÑÊÄßËÉΩ„ÄÇ ÊÄª‰πãÔºåËôΩÁÑ∂ CUDA Ê†∏ÂøÉÂíå Tensor Ê†∏ÂøÉÈÉΩÊòØ NVIDIA ÁöÑ GPU Êû∂ÊûÑÁöÑÈáçË¶ÅÈÉ®ÂàÜÔºå‰ΩÜ CUDA Ê†∏ÂøÉÊòØÂ§ÑÁêÜÂêÑÁßç‰ªªÂä°ÁöÑÈÄöÁî®Ê†∏ÂøÉÔºåËÄå Tensor Ê†∏ÂøÉÊòØÈíàÂØπÊ∑±Â∫¶Â≠¶‰π†Áü©ÈòµÊìç‰Ωú‰ºòÂåñÁöÑ‰∏ìÁî®ÂçïÂÖÉ„ÄÇÂΩìË¥≠‰π∞ NVIDIA Á°¨‰ª∂Êó∂ÔºåÂ∫îÊ†πÊçÆÈ¢ÑÊúüÁöÑ‰∏ªË¶ÅÁî®ÈÄîÔºà‰æãÂ¶ÇÔºåÊ∏∏Êàè„ÄÅÂõæÂΩ¢„ÄÅÈÄöÁî®ËÆ°ÁÆó„ÄÅÊ∑±Â∫¶Â≠¶‰π†ÔºâËÄÉËôë CUDA Ê†∏ÂøÉÂíå Tensor Ê†∏ÂøÉ‰πãÈó¥ÁöÑÂπ≥Ë°°„ÄÇ "},"Learn/LearnCV/ComputerVisoin.html":{"url":"Learn/LearnCV/ComputerVisoin.html","title":"ComputerVisoin","keywords":"","body":"Computer Vision Image Classification Object Detection: bounding box Image Segmentation: pixel-wise classification, cutting edges "},"Learn/LearnCV/OpenCV/OpenCV.html":{"url":"Learn/LearnCV/OpenCV/OpenCV.html","title":"OpenCV","keywords":"","body":"opencv-python haarcascade_frontalface_default.xml: Trained XML classifiers describes some features of some object we want to detect a cascade function is trained from a lot of positive(faces) and negative(non-faces) images. Image Read an image from file (using cv::imread) Display an image in an OpenCV window (using cv::imshow) Write an image to a file (using cv::imwrite) IMREAD_COLOR loads the image in the BGR 8-bit format. This is the default that is used here. IMREAD_UNCHANGED loads the image as is (including the alpha channel if present) IMREAD_GRAYSCALE loads the image as an intensity one core section, as here are defined the basic building blocks of the library imgcodecs module, which provides functions for reading and writing highgui module, as this contains the functions to show an image in a window Video VideoCapture() VideoWriter() Drawing Learn to draw different geometric shapes with OpenCV You will learn these functions : cv.line(), cv.circle() , cv.rectangle(), cv.ellipse(), cv.putText() etc. img, color, thikness, linType Mouse Learn to handle mouse events in OpenCV You will learn these functions : cv.setMouseCallback() ['EVENT_FLAG_ALTKEY', 'EVENT_FLAG_CTRLKEY', 'EVENT_FLAG_LBUTTON', 'EVENT_FLAG_MBUTTON', 'EVENT_FLAG_RBUTTON', 'EVENT_FLAG_SHIFTKEY', 'EVENT_LBUTTONDBLCLK', 'EVENT_LBUTTONDOWN', 'EVENT_LBUTTONUP', 'EVENT_MBUTTONDBLCLK', 'EVENT_MBUTTONDOWN', 'EVENT_MBUTTONUP', 'EVENT_MOUSEHWHEEL', 'EVENT_MOUSEMOVE', 'EVENT_MOUSEWHEEL', 'EVENT_RBUTTONDBLCLK', 'EVENT_RBUTTONDOWN', 'EVENT_RBUTTONUP'] Trackbar For cv.createTrackbar() function, first argument is the trackbar name, second one is the window name to which it is attached, third argument is the default value, fourth one is the maximum value and fifth one is the callback function which is executed every time trackbar value changes. The callback function always has a default argument which is the trackbar position. In our case, function does nothing, so we simply pass. Another important application of trackbar is to use it as a button or switch. OpenCV, by default, doesn't have button functionality. So you can use trackbar to get such functionality. In our application, we have created one switch in which application works only if switch is ON, otherwise screen is always black. Operations on Images Basic Operations on Images Learn to read and edit pixel values, working with image ROI and other basic operations. Arithmetic Operations on Images Perform arithmetic operations on images Performance Measurement and Improvement Techniques Getting a solution is important. But getting it in the fastest way is more important. Learn to check the speed of your code, optimize the code etc. Image Processing Feature Detection and Description Video Analysis "},"Learn/LearnDocker/docker.html":{"url":"Learn/LearnDocker/docker.html","title":"docker","keywords":"","body":"# Add Docker's official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\ $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update # Install Docker Engine: sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin https://docs.docker.com/desktop/install/debian/ docker stop $(docker ps -a -q) docker image pull name:tag docker search image_name docker pull image_name:tag docker images # list all images docker rmi image_name:tag # remove image docker run -it image_name:tag /bin/bash # run container # start docker desktop systemctl --user start docker-desktop # start on sign in systemctl --user enable docker-desktop systemctl --user stop docker-desktop https://medium.com/@SrvZ/docker-proxy-and-my-struggles-a4fd6de21861 Docker Compose Docker ÁªÑÂêà Docker Compose is a tool for defining and running multi-container applications. It is the key to unlocking a streamlined and efficient development and deployment experience. Docker Compose ÊòØ‰∏Ä‰∏™Áî®‰∫éÂÆö‰πâÂíåËøêË°åÂ§öÂÆπÂô®Â∫îÁî®Á®ãÂ∫èÁöÑÂ∑•ÂÖ∑„ÄÇÂÆÉÊòØËß£ÈîÅÁ≤æÁÆÄÈ´òÊïàÁöÑÂºÄÂèëÂíåÈÉ®ÁΩ≤‰ΩìÈ™åÁöÑÂÖ≥ÈîÆ„ÄÇ Compose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single, comprehensible YAML configuration file. Then, with a single command, you create and start all the services from your configuration file. Compose ÁÆÄÂåñ‰∫ÜÂØπÊï¥‰∏™Â∫îÁî®Á®ãÂ∫èÂ†ÜÊ†àÁöÑÊéßÂà∂Ôºå‰ΩøÊÇ®ÂèØ‰ª•Âú®Âçï‰∏™Êòì‰∫éÁêÜËß£ÁöÑ YAML ÈÖçÁΩÆÊñá‰ª∂‰∏≠ËΩªÊùæÁÆ°ÁêÜÊúçÂä°„ÄÅÁΩëÁªúÂíåÂç∑„ÄÇÁÑ∂ÂêéÔºå‰ΩøÁî®Âçï‰∏™ÂëΩ‰ª§ÔºåÊÇ®ÂèØ‰ª•‰ªéÈÖçÁΩÆÊñá‰ª∂ÂàõÂª∫Âπ∂ÂêØÂä®ÊâÄÊúâÊúçÂä°„ÄÇ Compose works in all environments; production, staging, development, testing, as well as CI workflows. It also has commands for managing the whole lifecycle of your application: Compose ÈÄÇÁî®‰∫éÊâÄÊúâÁéØÂ¢ÉÔºõÁîü‰∫ß„ÄÅÁôªÂè∞„ÄÅÂºÄÂèë„ÄÅÊµãËØï‰ª•Âèä CI Â∑•‰ΩúÊµÅÁ®ã„ÄÇÂÆÉËøòÂÖ∑ÊúâÁî®‰∫éÁÆ°ÁêÜÂ∫îÁî®Á®ãÂ∫èÊï¥‰∏™ÁîüÂëΩÂë®ÊúüÁöÑÂëΩ‰ª§Ôºö Start, stop, and rebuild services ÂêØÂä®„ÄÅÂÅúÊ≠¢ÂíåÈáçÂª∫ÊúçÂä° View the status of running services Êü•ÁúãÊ≠£Âú®ËøêË°åÁöÑÊúçÂä°ÁöÑÁä∂ÊÄÅ Stream the log output of running services ÊµÅÂºè‰º†ËæìÊ≠£Âú®ËøêË°åÁöÑÊúçÂä°ÁöÑÊó•ÂøóËæìÂá∫ Run a one-off command on a service Âú®ÊúçÂä°‰∏äËøêË°å‰∏ÄÊ¨°ÊÄßÂëΩ‰ª§ "},"Learn/LearnGPU2CPU-by-GPT/Note.html":{"url":"Learn/LearnGPU2CPU-by-GPT/Note.html","title":"Note","keywords":"","body":"Â∑ÆÂàÜÈ´òÊñØÂÖâÊ†ÖÂåñ Differential Gaussian Rasterization = GPT => Differential Gaussian Rasterization: CPU Version with C Kernel "},"Learn/LearnGameDev/Note.html":{"url":"Learn/LearnGameDev/Note.html","title":"Note","keywords":"","body":"Learning Game Development links awesome-gamedev youtube: godot tutorials videos Learn GDScript From Zero app godotengine "},"Learn/LearnGameTheory/CoalitionalGames.html":{"url":"Learn/LearnGameTheory/CoalitionalGames.html","title":"CoalitionalGames","keywords":"","body":"Coalitional Games: ËÅîÁõüÂçöÂºà A coalitional game, also known as a cooperative game, is a game theory model where players form groups to achieve a collective goal. In a coalitional game, players form coalitions, or binding agreements, to strengthen their positions and act as a single entity. Coalitional games are different from non-cooperative games, where players cannot form alliances or agreements must be self-enforced. ËÅîÁõüÂçöÂºàÔºå‰πüÁß∞‰∏∫Âêà‰ΩúÂçöÂºàÔºåÊòØ‰∏ÄÁßçÂçöÂºàËÆ∫Ê®°ÂûãÔºåÂÖ∂‰∏≠Áé©ÂÆ∂ÁªÑÊàêÂõ¢Èòü‰ª•ÂÆûÁé∞ÈõÜ‰ΩìÁõÆÊ†á„ÄÇ Âú®ËÅîÁõüÂçöÂºà‰∏≠ÔºåÁé©ÂÆ∂ÁªÑÊàêËÅîÁõüÊàñÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÂçèËÆÆÔºå‰ª•Âä†Âº∫‰ªñ‰ª¨ÁöÑÂú∞‰ΩçÂπ∂‰Ωú‰∏∫‰∏Ä‰∏™ÂÆû‰ΩìË°åÂä®„ÄÇ ËÅîÁõüÂçöÂºà‰∏éÈùûÂêà‰ΩúÂçöÂºà‰∏çÂêåÔºåÂú®ÈùûÂêà‰ΩúÂçöÂºà‰∏≠ÔºåÁé©ÂÆ∂‰∏çËÉΩÁªìÊàêËÅîÁõüÊàñÂçèËÆÆÂøÖÈ°ªËá™Ë°åÊâßË°å„ÄÇ Here are some key concepts in coalitional games: Coalition: A group of players that form a binding agreement Coalition value: The worth of a coalition in a game, which is denoted by the symbol $v$ The core: The set of payoff allocations that ensures no group of players has an incentive to leave their coalition Shapley value: An efficient solution concept that is recommended for games with a low number of players Hedonic Game ‰∫´‰πêÂçöÂºà wiki Âú®Âêà‰ΩúÂçöÂºàËÆ∫‰∏≠Ôºå‰∫´‰πêÂçöÂºà[1][2]Ôºà‰πüÁß∞‰∏∫‰∫´‰πêËÅîÁõüÂΩ¢ÊàêÂçöÂºàÔºâÊòØ‰∏ÄÁßçÂΩìÁé©ÂÆ∂ÂØπ‰ªñ‰ª¨ÊâÄÂ±ûÁöÑÁæ§‰ΩìÊúâÂÅèÂ•ΩÊó∂ÔºåÂØπÁé©ÂÆ∂ËÅîÁõüÔºàÁªÑÔºâÂΩ¢ÊàêËøõË°åÂª∫Ê®°ÁöÑÂçöÂºà„ÄÇ‰∫´‰πêÂçöÂºàÁöÑÊåáÂÆöÊñπÂºèÊòØÁªô‰∏ÄÁªÑÊúâÈôêÁöÑÁé©ÂÆ∂ÔºåÂπ∂‰∏îÂØπ‰∫éÊØè‰∏™Áé©ÂÆ∂ÔºåÁªôÂá∫‰∏Ä‰∏™ÂØπËØ•Áé©ÂÆ∂ÊâÄÂ±ûÁöÑÊâÄÊúâÁé©ÂÆ∂ËÅîÁõüÔºàÂ≠êÈõÜÔºâÁöÑ‰ºòÂÖàÊéíÂ∫è„ÄÇ‰∫´‰πêÂçöÂºàÁöÑÁªìÊûúÂåÖÊã¨Â∞ÜÁé©ÂÆ∂ÂàíÂàÜ‰∏∫‰∏çÁõ∏‰∫§ÁöÑËÅîÁõüÔºå‰πüÂ∞±ÊòØËØ¥ÔºåÊØè‰∏™Áé©ÂÆ∂ÈÉΩË¢´ÂàÜÈÖç‰∏Ä‰∏™ÂîØ‰∏ÄÁöÑÁªÑ„ÄÇÊ≠§Á±ªÂàÜÂå∫ÈÄöÂ∏∏Áß∞‰∏∫ËÅîÁõüÁªìÊûÑ„ÄÇ Preference-Driven Hedonic Game ÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºà ÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºàÔºàPreference-Driven Hedonic GameÔºâÁöÑÂÖ®Èù¢Ëß£Êûê ‰∏Ä„ÄÅÂÆö‰πâ‰∏éÊ†∏ÂøÉÊÄùÊÉ≥ ÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºàÔºàPreference-Driven Hedonic GameÔºâÊòØÂêà‰ΩúÂçöÂºàËÆ∫ÁöÑ‰∏Ä‰∏™ÂàÜÊîØÔºåÁ†îÁ©∂Áé©ÂÆ∂Â¶Ç‰ΩïÂü∫‰∫é‰∏™‰ΩìÂÅèÂ•ΩÂΩ¢ÊàêËÅîÁõüÁªìÊûÑÔºàcoalition structureÔºâ„ÄÇÂÖ∂Ê†∏ÂøÉÁâπÂæÅÂú®‰∫éÔºåÊØè‰∏™Áé©ÂÆ∂ÂØπÂåÖÂê´Ëá™Ë∫´ÁöÑËÅîÁõüÂÖ∑ÊúâÊòéÁ°ÆÁöÑÂÅèÂ•ΩÂÖ≥Á≥ªÔºå‰∏îÂÅèÂ•ΩÁî±ÂÖ∂ÂØπÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑÂàÜÁ±ªÔºàÂ¶ÇÊúãÂèã„ÄÅÊïå‰∫∫„ÄÅ‰∏≠Á´ãÔºâÂíåÊéíÂ∫èÈ©±Âä®„ÄÇ ÂÖ≥ÈîÆÂÆö‰πâÔºö Áé©ÂÆ∂ÂàÜÁ±ªÔºöÊØè‰∏™Áé©ÂÆ∂Â∞ÜÂÖ∂‰ªñÁé©ÂÆ∂ÂàÜ‰∏∫‰∏âÁ±ªÔºöÊúãÂèãÔºàFriendsÔºâ„ÄÅÊïå‰∫∫ÔºàEnemiesÔºâ„ÄÅ‰∏≠Á´ãÔºàNeutralÔºâÔºåÂπ∂ÂØπÊúãÂèãÂíåÊïå‰∫∫ËøõË°åÊéíÂêçÔºàÂ¶ÇÊúãÂèã‰∏≠ÁöÑ‰ºòÂÖàÁ∫ßÔºâ„ÄÇ ÂÅèÂ•ΩÊâ©Â±ïÔºöÈÄöËøáÂèåÊûÅÂìçÂ∫îÂºèÊâ©Â±ïÂéüÁêÜÔºàBipolar Responsive ExtensionÔºâÔºåÂ∞ÜÁé©ÂÆ∂ÂØπ‰∏™‰ΩìÁöÑÂÅèÂ•ΩÊâ©Â±ï‰∏∫ÂØπËÅîÁõüÁöÑÂÅèÂ•Ω„ÄÇ‰æãÂ¶ÇÔºåÁé©ÂÆ∂ÂèØËÉΩÂÅèÂ•ΩÂåÖÂê´Êõ¥Â§öÈ´ò‰ºòÂÖàÁ∫ßÊúãÂèãÁöÑËÅîÁõüÔºåÊàñÊõ¥Â∞ëÊïå‰∫∫ÁöÑËÅîÁõü„ÄÇ ÈòàÂÄº‰∏éÁ®≥ÂÆöÊÄßÔºöÂºïÂÖ•ÈòàÂÄºÔºàThresholdsÔºâÂå∫ÂàÜËÅîÁõüÁöÑ‰ºòÂä£Ôºå‰æãÂ¶ÇÂà§Êñ≠Âì™‰∫õËÅîÁõü‰ºò‰∫éÂçïÁã¨Ë°åÂä®Ôºà‰∏™‰ΩìÁêÜÊÄßÈòàÂÄºÔºâÔºåÊàñÂì™‰∫õËÅîÁõüÁªìÊûÑÊª°Ë∂≥Á∫≥‰ªÄÁ®≥ÂÆöÊÄß„ÄÅÊ†∏ÂøÉÁ®≥ÂÆöÊÄßÁ≠â„ÄÇ ‰∫å„ÄÅÊèêÂá∫‰∏éÂèëÂ±ïÂéÜÁ®ã Ëµ∑Ê∫êÔºö‰∫´‰πêÂçöÂºàÁöÑÊ¶ÇÂøµÊúÄÊó©Áî± Dr√®ze Âíå GreenbergÔºà1980ÔºâÊèêÂá∫ÔºåÂêéÁî± Bogomolnaia Âíå JacksonÔºà2002ÔºâÁ≠âÂ≠¶ËÄÖÂΩ¢ÂºèÂåñ„ÄÇÊó©ÊúüÊ®°ÂûãÂÖ≥Ê≥®ËÅîÁõüÁªìÊûÑÁöÑÁ®≥ÂÆöÊÄßÔºå‰ΩÜÂÅèÂ•ΩË°®Á§∫ËæÉ‰∏∫ÁÆÄÂçï„ÄÇ ÂÅèÂ•ΩÈ©±Âä®Ê®°ÂûãÁöÑÊèêÂá∫ÔºöDimitrov Á≠âÔºà2006ÔºâÈ¶ñÊ¨°Â∞ÜÁé©ÂÆ∂ÂàÜ‰∏∫ÊúãÂèãÂíåÊïå‰∫∫ÔºåÂπ∂Âü∫‰∫éÊ≠§ÊèêÂá∫ÂÅèÂ•ΩÊâ©Â±ïÊ®°Âûã„ÄÇKerkmann Á≠âËøëÂπ¥ÊèêÂá∫ÁöÑFEN Ê®°ÂûãÔºàFriends-Enemies-NeutralÔºâËøõ‰∏ÄÊ≠•ÂÆåÂñÑ‰∫ÜËøô‰∏ÄÊ°ÜÊû∂ÔºåÂÖÅËÆ∏Áé©ÂÆ∂ÂØπÊúãÂèãÂíåÊïå‰∫∫ËøõË°åÊéíÂ∫èÔºåÂπ∂ÂºïÂÖ•ÈòàÂÄºÊú∫Âà∂„ÄÇ ËÆ°ÁÆóÂ§çÊùÇÊÄßÁ™ÅÁ†¥ÔºöÈíàÂØπÂÅèÂ•ΩË°®Á§∫ÁöÑÊåáÊï∞Á∫ßÂ§çÊùÇÂ∫¶ÈóÆÈ¢òÔºåÂ≠¶ËÄÖÊèêÂá∫Â∏ÉÂ∞î‰∫´‰πêÂçöÂºàÔºàBoolean Hedonic GamesÔºâÂíåÂåøÂêçÁºñÁ†ÅÔºàAnonymous EncodingÔºâÁ≠âÁ¥ßÂáëË°®Á§∫ÊñπÊ≥ïÔºåÂ∞ÜÂÅèÂ•ΩËΩ¨Âåñ‰∏∫ÈÄªËæëÂÖ¨ÂºèÊàñÂåøÂêçËÆ°Êï∞ÔºàÂ¶ÇÊúãÂèãÊï∞ÈáèÔºâÔºå‰ª•Èôç‰ΩéËÆ°ÁÆóÈöæÂ∫¶„ÄÇ ‰∏â„ÄÅÊ†∏ÂøÉÁ†îÁ©∂ÈóÆÈ¢ò‰∏éÁêÜËÆ∫Ê°ÜÊû∂ Á®≥ÂÆöÊÄßÊ¶ÇÂøµÔºö ‰∏™‰ΩìÁêÜÊÄßÔºöÁé©ÂÆ∂ÊòØÂê¶ÊÑøÊÑèÁïôÂú®ÂΩìÂâçËÅîÁõüËÄåÈùûÂçïÁã¨Ë°åÂä®„ÄÇ Á∫≥‰ªÄÁ®≥ÂÆöÊÄßÔºöÁé©ÂÆ∂ÊòØÂê¶Êó†Ê≥ïÈÄöËøáÂçïÊñπÈù¢ËΩ¨ÁßªÂà∞ÂÖ∂‰ªñËÅîÁõüËé∑ÂæóÊõ¥È´òÊî∂Áõä„ÄÇ Ê†∏ÂøÉÁ®≥ÂÆöÊÄßÔºöÊòØÂê¶Â≠òÂú®Áæ§‰ΩìÊÄßÂÅèÁ¶ªÔºàÂ¶ÇÂ§ö‰∏™Áé©ÂÆ∂ÂÖ±ÂêåÈáçÁªÑËÅîÁõüÔºâÁöÑÂèØËÉΩ„ÄÇ ÁÆóÊ≥ïÊåëÊàòÔºö Â§çÊùÇÂ∫¶ÔºöÁ°ÆÂÆöÁ®≥ÂÆöËÅîÁõüÁªìÊûÑÁöÑÂ≠òÂú®ÊÄßÈÄöÂ∏∏‰∏∫ NP ÈöæÈóÆÈ¢òÔºå‰æãÂ¶ÇÊ†∏ÂøÉÁ®≥ÂÆöÊÄßÁöÑÂà§ÂÆöÂú®È´òÁª¥ÂÅèÂ•Ω‰∏ã‰∏çÂèØËß£„ÄÇ ÂêØÂèëÂºèÊñπÊ≥ïÔºöÈíàÂØπ‰∫åÂÖÉÂÅèÂ•ΩÔºàDichotomous PreferencesÔºâÁ≠âÂèóÈôêÂú∫ÊôØÔºåÂ≠¶ËÄÖÊèêÂá∫Â§öÈ°πÂºèÊó∂Èó¥ÁÆóÊ≥ïÔºå‰æãÂ¶ÇÂü∫‰∫éÂëΩÈ¢òÈÄªËæëÁöÑ SAT Ê±ÇËß£Âô®‰ºòÂåñ„ÄÇ Â∑•Á®ãÂØºÂêëËßÜËßíÔºö‰∏çÂêå‰∫é‰º†ÁªüÂçöÂºàËÆ∫ÁöÑÈ¢ÑÊµãÊÄßÂàÜÊûêÔºåÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºàÂ∏∏Ë¢´Áî®‰∫éËÆæËÆ°‰∏≠Â§ÆÊùÉÂ®ÅÁöÑÂàÜÈÖçÊú∫Âà∂Ôºå‰æãÂ¶ÇÂú®Êó†Á∫øÁΩëÁªúËµÑÊ∫êÂàÜÈÖç‰∏≠ËÆ°ÁÆóÊúÄ‰ºòËÅîÁõüÁªìÊûÑ„ÄÇ Âõõ„ÄÅÂ∫îÁî®Áé∞Áä∂ Êó†Á∫øÈÄö‰ø°ÂÆâÂÖ®ÔºöÂú® Âçè‰ΩúÂπ≤Êâ∞ÔºàCooperative JammingÔºâ Âú∫ÊôØ‰∏≠ÔºåÊ∫êËäÇÁÇπ‰∏éÂπ≤Êâ∞ËäÇÁÇπÈÄöËøá‰∫´‰πêÂçöÂºàÂΩ¢ÊàêÁ®≥ÂÆöËÅîÁõüÔºåÊúÄÂ§ßÂåñ‰øùÂØÜ‰º†ËæìÈÄüÁéá„ÄÇÂåó‰∫¨ÈÇÆÁîµÂ§ßÂ≠¶ÁöÑÁ†îÁ©∂Ë°®ÊòéÔºå‰∏éÈùûÂêà‰ΩúÊú∫Âà∂Áõ∏ÊØîÔºåËØ•Ê®°ÂûãÂèØ‰ΩøÂπ≥Âùá‰øùÂØÜÈÄüÁéáÊèêÂçá 14.29%„ÄÇ Âõ¢ÈòüÂΩ¢Êàê‰∏éËµÑÊ∫êÂàÜÈÖçÔºö ÁßëÁ†îÂõ¢ÈòüÁªÑÂª∫ÔºöÊ†πÊçÆÁ†îÁ©∂‰∫∫ÂëòÁöÑÂêà‰ΩúÂÅèÂ•ΩÔºàÂ¶ÇÈ¢ÜÂüüÂåπÈÖç„ÄÅÂéÜÂè≤Âêà‰ΩúÊïàÊûúÔºâÔºåÈÄöËøá FEN Ê®°ÂûãÂàíÂàÜÈ´òÊïàÂõ¢ÈòüÔºåÈÅøÂÖçÂà©ÁõäÂÜ≤Á™Å„ÄÇ ‰∫ëËµÑÊ∫êÂàÜÈÖçÔºöÂú®‰∫ëËÆ°ÁÆó‰∏≠ÔºåÁî®Êà∑‰∏éÊúçÂä°Êèê‰æõÂïÜÁöÑÂçöÂºàÂèØÂª∫Ê®°‰∏∫‰∫´‰πêÂçöÂºàÔºåÈÄöËøáÂÆö‰ª∑Êú∫Âà∂ÂíåËÅîÁõüÁ®≥ÂÆöÊÄßÂàÜÊûêÂÆûÁé∞ËµÑÊ∫êÈ´òÊïàÂàÜÈÖç„ÄÇ Á§æ‰ºöÂú∫ÊôØ‰ºòÂåñÔºö È´òÊ†°ÂÆøËàçÂàÜÈÖçÔºöÂü∫‰∫éÂ≠¶ÁîüÁöÑÁîüÊ¥ª‰π†ÊÉØ„ÄÅÂÖ¥Ë∂£Á≠âÂÅèÂ•ΩÔºåÂà©Áî®ÂÜ≥Á≠ñÊ†ëÁÆóÊ≥ïÁîüÊàêÂíåË∞êÂ∫¶ÊúÄÈ´òÁöÑÂàÜÈÖçÊñπÊ°à„ÄÇ‰æãÂ¶ÇÔºå‰ºòÂÖàÂåπÈÖçÁù°Áú†Êó∂Èó¥Áõ∏Ëøë„ÄÅÂç´Áîü‰π†ÊÉØÁõ∏‰ººÁöÑÂ≠¶Áîü„ÄÇ ËÅîÈÇ¶Â≠¶‰π†Ê®°ÂûãÂÖ±‰∫´ÔºöÂú®ÂàÜÂ∏ÉÂºèÊú∫Âô®Â≠¶‰π†‰∏≠ÔºåÊô∫ËÉΩ‰ΩìÊ†πÊçÆÊï∞ÊçÆÂàÜÂ∏ÉÁõ∏‰ººÊÄßÈÄâÊã©Âä†ÂÖ•ÂÖ®Â±ÄÊàñÊú¨Âú∞Ê®°ÂûãËÅîÁõüÔºåÈÄöËøá‰∏™‰ΩìÁ®≥ÂÆöÊÄß‰øùËØÅÂçè‰ΩúÊïàÁéá„ÄÇ ‰∫î„ÄÅÁªèÂÖ∏ÂÆû‰æãÂàÜÊûê Êó†Á∫øÁΩëÁªúÂçè‰ΩúÂπ≤Êâ∞ËÅîÁõüÔºàÊ°à‰æãÊù•Ê∫êÔºâÔºö ËÉåÊôØÔºöÊ∫êËäÇÁÇπÈúÄ‰∏éÂπ≤Êâ∞ËäÇÁÇπÂêà‰ΩúÔºåÈÄöËøáÂèëÂ∞ÑÂô™Â£∞Âπ≤Êâ∞Á™ÉÂê¨ËÄÖÔºåÊèêÂçá‰øùÂØÜ‰º†ËæìÈÄüÁéá„ÄÇ ÂçöÂºàÂª∫Ê®°Ôºö Áé©ÂÆ∂ÔºöÊ∫êËäÇÁÇπÔºàNÔºâÂíåÂπ≤Êâ∞ËäÇÁÇπÔºàTÔºâ„ÄÇ ÂÅèÂ•ΩÂáΩÊï∞ÔºöÊ∫êËäÇÁÇπÂÅèÂ•ΩÂåÖÂê´È´òÂπ≤Êâ∞ÊïàÁéáÁöÑËÅîÁõüÔºåÂπ≤Êâ∞ËäÇÁÇπÂÅèÂ•ΩËé∑ÂæóÊõ¥È´òÊä•ÈÖ¨„ÄÇ Á®≥ÂÆöÊÄßÂáÜÂàôÔºöÈááÁî®‚Äú‰∏•ËøõÂÆΩÂá∫‚ÄùÔºàFX-AEÔºâÂÅèÂ•ΩÔºåÁ°Æ‰øùËÅîÁõüÊàêÂëòÊó†Ê≥ïÈÄöËøáÂçïÊñπÈù¢ÈÄÄÂá∫ÊàñÂä†ÂÖ•ÂÖ∂‰ªñËÅîÁõüÊèêÂçáÊïàÁî®„ÄÇ ÁªìÊûúÔºöÈÄöËøáÂàÜÂ∏ÉÂºè‰∫´‰πêÂçöÂºàÁÆóÊ≥ïÊî∂ÊïõËá≥Á®≥ÂÆöËÅîÁõüÁªìÊûÑÔºå‰øùÂØÜÈÄüÁéáÊèêÂçáÊòæËëó„ÄÇ È´òÊ†°ÂÆøËàçÊô∫ËÉΩÂàÜÈÖçÁ≥ªÁªüÔºàÊ°à‰æãÊù•Ê∫êÔºâÔºö ËÉåÊôØÔºöÂ≠¶ÁîüÂõ†ÁîüÊ¥ª‰π†ÊÉØÂ∑ÆÂºÇÊòìÂºïÂèëÂÆøËàçÁüõÁõæ„ÄÇ Ê®°ÂûãËÆæËÆ°Ôºö ÂÅèÂ•ΩÂàÜÁ±ªÔºöÂ≠¶ÁîüÂ°´ÂÜôÈóÆÂç∑ÔºåÊ†áËØÜÂØπÂÆ§ÂèãÁöÑÂÅèÂ•ΩÔºàÂ¶Ç‰ΩúÊÅØÊó∂Èó¥„ÄÅÂç´Áîü‰π†ÊÉØ„ÄÅÂÖ¥Ë∂£Á≠âÔºâ„ÄÇ ÁÆóÊ≥ïÔºöÂü∫‰∫éÂÜ≥Á≠ñÊ†ëÂàÜÁ±ªÂíåËÅöÁ±ªÁÆóÊ≥ïÔºåÊúÄÂ§ßÂåñÊï¥‰ΩìÂíåË∞êÂ∫¶„ÄÇ ÊïàÊûúÔºöÈÄöËøáÊª°ÊÑèÂ∫¶ÂèçÈ¶àÊú∫Âà∂‰ºòÂåñÂàÜÈÖçÁ≠ñÁï•ÔºåÂáèÂ∞ëÂÜ≤Á™ÅÂèëÁîüÁéá„ÄÇ ÂÖ≠„ÄÅÊú™Êù•Á†îÁ©∂ÊñπÂêë Âä®ÊÄÅÂÅèÂ•ΩÂª∫Ê®°ÔºöÁé∞ÊúâÁ†îÁ©∂Â§öÂÅáËÆæÂÅèÂ•ΩÈùôÊÄÅÔºåÊú™Êù•ÂèØÊé¢Á¥¢Âä®ÊÄÅÂÅèÂ•ΩÔºàÂ¶ÇÈöèÊó∂Èó¥ÂèòÂåñÁöÑÂèãË∞äÂÖ≥Á≥ªÔºâÂØπËÅîÁõüÁ®≥ÂÆöÊÄßÁöÑÂΩ±Âìç„ÄÇ Â§öÁõÆÊ†á‰ºòÂåñÔºöÂú®Á®≥ÂÆöÊÄß‰πãÂ§ñÂºïÂÖ•ÂÖ¨Âπ≥ÊÄß„ÄÅÁ§æ‰ºöÁ¶èÂà©Á≠âÁõÆÊ†áÔºå‰æãÂ¶ÇÂú®ËµÑÊ∫êÂàÜÈÖç‰∏≠Âπ≥Ë°°ÊïàÁéá‰∏éÂÖ¨Âπ≥„ÄÇ Ë∑®Â≠¶ÁßëÂ∫îÁî®ÔºöÂ∞ÜÊ®°ÂûãÊâ©Â±ïËá≥ÁîüÁâ©Áæ§‰ΩìË°å‰∏∫ÂàÜÊûêÔºàÂ¶ÇÂä®Áâ©Áæ§‰ΩìÂΩ¢ÊàêÔºâÊàñÊîøÊ≤ªËÅîÁõüÊûÑÂª∫ÔºàÂ¶ÇÊîøÂÖöÂêà‰ΩúÔºâ„ÄÇ ‰∏É„ÄÅÊÄªÁªì ÂÅèÂ•ΩÈ©±Âä®‰∫´‰πêÂçöÂºàÈÄöËøáÁ≤æÁªÜÂàªÁîª‰∏™‰ΩìÂÅèÂ•Ω‰∏éÁæ§‰Ωì‰∫íÂä®ÁöÑÂä®ÊÄÅÂÖ≥Á≥ªÔºå‰∏∫Ëß£ÂÜ≥ËÅîÁõüÂΩ¢Êàê‰∏≠ÁöÑÂ§çÊùÇÂÜ≥Á≠ñÈóÆÈ¢òÊèê‰æõ‰∫ÜÁêÜËÆ∫Â∑•ÂÖ∑„ÄÇÂÖ∂Âú®Â∑•Á®ã‰ºòÂåñ„ÄÅÁ§æ‰ºöÁßëÂ≠¶Á≠âÈ¢ÜÂüüÁöÑÊàêÂäüÂ∫îÁî®ÔºåÈ™åËØÅ‰∫ÜÊ®°ÂûãÁöÑÂÆûÁî®ÊÄß‰∏éÊâ©Â±ïÊΩúÂäõ„ÄÇÁÑ∂ËÄåÔºåËÆ°ÁÆóÂ§çÊùÇÊÄß‰∏éÂä®ÊÄÅÁéØÂ¢ÉÈÄÇÂ∫îÊÄß‰ªçÊòØÊú™Êù•Á†îÁ©∂ÁöÑÂÖ≥ÈîÆÊåëÊàò„ÄÇ "},"Learn/LearnGameTheory/GameTheory.html":{"url":"Learn/LearnGameTheory/GameTheory.html","title":"GameTheory","keywords":"","body":"Game Theory Coalitional Games: ËÅîÁõüÂçöÂºà ‰∫´‰πêÂçöÂºà ÂèåÂ±ÇÂçöÂºà A Course in Game Theory Contents A course in game theory by Martin J. Osborne and Ariel Rubinstein 1 Introduction 1 1.1 Game theory 1 1.2 Games and Solutions 2 1.3 Game Theory and the Theory of Competitive Equilibrium 3 1.4 Rational Behavior 4 1.5 The Steady State and Deductive Interpretations 5 1.6 Bounded Rationality 6 1.7 Terminology and Notation 6 Notes 8 I Strategic Games 9 2 Nash Equilibrium 11 2.1 Strategic Games 11 2.2 Nash Equilibrium 14 2.3 Examples 15 2.4 Existence of a Nash Equilibrium 19 2.5 Strictly Competitive Games 21 2.6 Bayesian Games: Strategic Games with Imperfect Information 24 Notes 29 3 Mixed, Correlated, and Evolutionary Equilibrium 31 3.1 Mixed Strategy Nash Equilibrium 31 3.2 Interpretations of Mixed Strategy Nash Equilibrium 37 3.3 Correlated Equilibrium 44 3.4 Evolutionary Equilibrium 48 Notes 51 4 Rationalizability and Iterated Elimination of Dominated Actions 53 4.1 Rationalizability 53 4.2 Iterated Elimination of Strictly Dominated Actions 58 4.3 Iterated Elimination of Weakly Dominated Actions 62 Notes 64 5 Knowledge and Equilibrium 67 5.1 A Model of Knowledge 67 5.2 Common Knowledge 73 5.3 Can People Agree to Disagree? 75 5.4 Knowledge and Solution Concepts 76 5.5 The Electronic Mail Game 81 Notes 84 II Extensive Games with Perfect Information 9 6 Extensive Games with Perfect Information 89 6.1 Extensive Games with Perfect Information 89 6.2 Subgame Perfect Equilibrium 97 6.3 Two Extensions of the Definition of a Game 101 6.4 The Interpretation of a Strategy 103 6.5 Two Notable Finite Horizon Games 105 6.6 Iterated Elimination of Weakly Dominated Strategies 108 Notes 114 7 Bargaining Games 117 7.1 Bargaining and Game Theory 117 7.2 A Bargaining Game of Alternating Offers 118 7.3 Subgame Perfect Equilibrium 121 7.4Variations and Extensions 127 Notes 131 8 Repeated Games 133 8.1 The Basic Idea 133 8.2 Infinitely Repeated Games vs. Finitely Repeated Games 134 8.3 Infinitely Repeated Games: Definitions 136 8.4 Strategies as Machines 140 8.5 Trigger Strategies: Nash Folk Theorems 143 8.6 Punishing for a Limited Length of Time: A Perfect Folk Theorem for the Limit of Means Criterion 146 8.7 Punishing the Punisher: A Perfect Folk Theorem for the Overtaking Criterion 149 8.2 Rewarding Players Who Punish: A Perfect Folk Theorem for the Discounting Criterion 150 8.9 The Structure of Subgame Perfect Equilibria Under the Discounting Criterion 153 8.10 Finitely Repeated Games 155 Notes 160 9 Complexity Considerations in Repeated Games 163 9.1 Introduction 163 9.2 Complexity and the Machine Game 164 9.3 The Structure of the Equilibria of a Machine Game 168 9.4 The Case of Lexicographic Preferences 172 Notes 175 10 Implementation Theory 177 10.1 Introduction 177 10.2 The Implementation Problem 178 10.3 Implementation in Dominant Strategies 180 10.4 Nash Implementation 185 10.5 Subgame Perfect Equilibrium Implementation 191 Notes 195 III Extensive Games with Imperfect Information 9 11 Extensive Games with Imperfect Information 199 11.2 Principles for the Equivalence of Extensive Games 204 11.3 Framing Effects and the Equivalence of Extensive Games 209 11.4 Mixed and Behavioral Strategies 212 11.5 Nash Equilibrium 216 Notes 217 12 Sequential Equilibrium 219 12.1 Strategies and Beliefs 219 12.2 Sequential Equilibrium 222 12.3 Games with Observable Actions: Perfect Bayesian Equilibrium 231 12.4 Refinements of Sequential Equilibrium 243 12.5 Trembling Hand Perfect Equilibrium 246 Notes 254 IV Coalitional Games 9 13 The Core 257 13.1 Coalitional Games with Transferable Payoff 257 13.2 The Core 258 13.3 Nonemptiness of the Core 262 13.4 Markets with Transferable Payoff 263 13.5 Coalitional Games without Transferable Payoff 268 13.6 Exchange Economies 269 Notes 274 14 Stable Sets, the Bargaining Set, and the Shapley Value 277 14.1 Two Approaches 277 14.1 The Stable Sets of von Neumann and Morgenstern 278 14.1 The Bargaining Set, Kernel, and Nucleolus 281 14.1 The Shapley Value 289 Notes 297 15 The Nash Solution 299 15.1 Bargaining Problems 299 15.3 The Nash Solution: Definition and Characterization 301 15.3 An Axiomatic Definition 305 15.4 The Nash Solution and the Bargaining Game of Alternating Offers 310 15.5 An Exact Implementation of the Nash Solution 311 Notes 312 List of Results 313 References 321 Index 341 Intro The models we study assume that each decision-maker is ‚Äúrational‚Äù in the sense that he is aware of his alternatives, forms expectations about any unknowns, has clear preferences, and chooses his action deliberately after some process of optimization. In the absence of uncertainty the following elements constitute a model of rational choice. A set $A$ of actions from which the decision-maker makes a choice. A set $C$ of possible consequences of these actions. A consequence function $g: A\\to C$ that associates a consequence with each action. A preference relation (a complete transitive reflexive binary relation) $\\succsim$ on the set $C$. Sometimes the decision-maker's preferences are specified by giving a utility function $U: C\\to \\mathbb{R}$, which defines a preference relation $\\succsim$by the condition $x\\succsim y$ if and only if $U(x)\\geq U(y)$. Given any set $B\\subseteq A$ of actions that are feasible in some particulan case, a $rational decision-maker chooses an action $a^$ that is feasible (belongs to $B)$ and optimal in the sense that $g(a^)\\succsim g(a)$ for all $a\\in B;$ alternatively he solves the problem $\\max _{a\\in BU}( g( a) ) $. An assumption upon which the usefulness of this model of decision-making depends is that the individual uses the same preference relation when choosing from different sets $B$. In the models we study, individuals often have to make decisions under conditions of uncertainty. The players may be uncertain about the objective parameters of the environment imperfectly informed about events that happen in the game uncertain about actions of the other players that are not deterministic uncertain about the reasoning of the other players. Temiology We denote the set of real numbers by $\\mathbb{R}$, the set of nonnegative real numbers by $\\mathbb{R}{+}$, the set of vectors of $n$ real numbers by $\\mathbb{R}^{n}$, and the set of vectors of $n$ nonnegative real numbers by $\\mathbb{R}+^n$. For $x\\in\\mathbb{R}^n$ and $y\\in\\mathbb{R}^n$ we use $x\\geq y$ to mean $x_i\\geq y_i$ for $i=1,\\ldots,n$ and $x>y$ to mean $x_i>y_i$ for $i=1,\\ldots,n$. We say that a function $f{:}\\mathbb{R}\\to\\mathbb{R}$ is increasing if $f(x)>f(y)$ whenever $x>y$ and is nondecreasing if $f(x)\\geq f(y)$ whenever $x>y$. A function $f{:}\\mathbb{R}\\to\\mathbb{R}$ is concave if $f(\\alpha x+(1-\\alpha)x^\\prime)\\geq$ $\\alpha f(x)+(1-\\alpha)f(x')$ for all $x\\in\\mathbb{R}$, all $x'\\in\\mathbb{R}$, and all $\\alpha\\in[0,1]$. Given a function $f{:}X\\to\\mathbb{R}$ we denote by arg $\\max_x\\in Xf(x)$ the set of maximizers of $f$; for any $Y\\subseteq X$ we denote by $f(Y)$ the set ${f(x):x\\in Y}$. Throughout we use $N$ to denote the set of players. We refer to a collection of values of some variable, one for each player, as a profle; we denote such a profile by $(xi){i\\in N}$, or, if the qualifer \"$i\\in N$\" is clear, simply $(x_i)$. For any profile $x=(xj){j\\in N}$ and any $i\\in N$ we let $x{-i}$ be the list $(x_j){j\\in N\\setminus{i}}$ of elements of the profile $x$ for all players except $i$. Given a list $x{-i}=(x_j){j\\in N\\setminus{i}}$ and an element $xi$ we denote by $(x{-i},xi)$ the profile $(x_i){i\\in N}$. If $Xi$ is a set for each $i\\in N$ then we denote by $X{-i}$ the set $\\times_{j\\in N\\setminus{i}}X_j$. A binary relation $\\succsim$ on a set $A$ is complete if $a\\succsim b$ or $b\\succsim a$ for every $a\\in A$ and $b\\in A$, reflexive if $a\\succsim a$ for every $a\\in A$, and transitive if $a\\succsim c$ whenever $a\\succsim b$ and $b\\succsim c$. A preference relation is a complete reflexive transitive binary relation. If $a\\succsim b$ but not $b\\succsim a$ then we write $a\\succ b$; if $a\\succsim b$ and $b\\succsim a$ then we write $a\\sim b$. A preference relation $\\succsim$ on $A$ is continuous if $a\\succsim b$ whenever there are sequences $(a^k)_k$ and $(b^k)_k$ in $A$ that converge to $a$ and $b$ respectively for which $a^k\\succsim b^k$ for all $k$. A preference relation $\\succsim$on $\\mathbb{R}^n$ is quasi-concave if for every $b\\in\\mathbb{R}^n$ the set ${a\\in\\mathbb{R}^n{:}a\\succsim b}$ is convex; it is strictly quasi-concave if every such set is strictly convex. Let $X$ be a set. We denote by $|X|$ the number of members of $X$. A partition of $X$ is a collection of disjoint subsets of $X$ whose union is $X$. Let $N$ be a finite set and let $X\\subseteq\\mathbb{R}^N$ be a set. Then $x\\in X$ is Pareto effcient if there is no $y\\in X$ for which $y_i>x_i$ for all $i\\in N$; $x\\in X$ is strongly Pareto efficient if there is no $y\\in X$ for which $y_i\\geq x_i$ for all $i\\in N$ and $y_i>x_i$ for some $i\\in N$. A probability measure $\\mu$ on a finite (or countable) set $X$ is an additive function that associates a nonnegative real number with every subset of $X$ (that is, $\\mu(B \\cup C) = \\mu(B) + \\mu(C)$ whenever $B$ and $C$ are disjoint) and satisfies $\\mu(X) = 1$. In some cases we work with probability measures over spaces that are not necessarily finite. If you are unfamiliar with such measures, little is lost by restricting attention to the finite case; for a definition of more general measures see, for example, Chung (1974, Ch. 2). 1. Êï∞Â≠¶Á¨¶Âè∑‰∏éÂÆö‰πâ ÂÆûÊï∞‰∏éÈùûË¥üÂÆûÊï∞Ôºö $\\mathbb{R}$ Ë°®Á§∫ÂÆûÊï∞ÈõÜÂêàÔºå$\\mathbb{R}_{+}$ Ë°®Á§∫ÈùûË¥üÂÆûÊï∞ÈõÜÂêà„ÄÇ $\\mathbb{R}^{n}$ Ë°®Á§∫ $n$ Áª¥ÂÆûÂêëÈáèÈõÜÂêàÔºå$\\mathbb{R}_+^n$ Ë°®Á§∫ $n$ Áª¥ÈùûË¥üÂÆûÂêëÈáèÈõÜÂêà„ÄÇ ÂêëÈáèÊØîËæÉÔºö ÂØπ‰∫é $x, y \\in \\mathbb{R}^n$Ôºå$x \\geq y$ Ë°®Á§∫ $x_i \\geq y_i$ÔºàÂØπÊâÄÊúâ $i=1,\\ldots,n$ÔºâÔºõ$x > y$ Ë°®Á§∫ $x_i > y_i$ÔºàÂØπÊâÄÊúâ $i=1,\\ldots,n$Ôºâ„ÄÇ ÂáΩÊï∞ÊÄßË¥®Ôºö ÂáΩÊï∞ $f{:}\\mathbb{R}\\to\\mathbb{R}$ ÊòØÈÄíÂ¢ûÁöÑÔºàincreasingÔºâÔºåÂ¶ÇÊûú $x > y$ Êó∂ $f(x) > f(y)$ÔºõÊòØÈùûÈÄíÂáèÁöÑÔºànondecreasingÔºâÔºåÂ¶ÇÊûú $x > y$ Êó∂ $f(x) \\geq f(y)$„ÄÇ ÂáΩÊï∞ $f{:}\\mathbb{R}\\to\\mathbb{R}$ ÊòØÂáπÂáΩÊï∞ÔºàconcaveÔºâÔºåÂ¶ÇÊûúÂØπ‰ªªÊÑè $x, x' \\in \\mathbb{R}$ Âíå $\\alpha \\in [0,1]$ÔºåÊª°Ë∂≥ $f(\\alpha x + (1-\\alpha)x') \\geq \\alpha f(x) + (1-\\alpha)f(x')$„ÄÇ ÊúÄÂ§ßÂÄº‰∏éÈõÜÂêàÊò†Â∞ÑÔºö ÂØπ‰∫éÂáΩÊï∞ $f{:}X\\to\\mathbb{R}$Ôºå$\\arg\\max_{x \\in X} f(x)$ Ë°®Á§∫ $f$ ÁöÑÊúÄÂ§ßÂÄºÁÇπÈõÜÂêà„ÄÇ ÂØπ‰∫é‰ªªÊÑè $Y \\subseteq X$Ôºå$f(Y)$ Ë°®Á§∫ÈõÜÂêà ${f(x): x \\in Y}$„ÄÇ 2. ÂçöÂºàËÆ∫‰∏≠ÁöÑÁ¨¶Âè∑‰∏éÂÆö‰πâ Áé©ÂÆ∂ÈõÜÂêàÔºö Áî® $N$ Ë°®Á§∫Áé©ÂÆ∂ÈõÜÂêà„ÄÇ Á≠ñÁï•ÁªÑÂêàÔºö Á≠ñÁï•ÁªÑÂêàÔºàprofileÔºâË°®Á§∫‰∏∫ $(xi){i\\in N}$ÔºåÂÖ∂‰∏≠ÊØè‰∏™ $x_i$ ÂØπÂ∫î‰∏Ä‰∏™Áé©ÂÆ∂ÁöÑÁ≠ñÁï•„ÄÇ ÂØπ‰∫é‰ªªÊÑèÁ≠ñÁï•ÁªÑÂêà $x = (xj){j\\in N}$ ÂíåÁé©ÂÆ∂ $i \\in N$Ôºå$x{-i}$ Ë°®Á§∫Èô§Áé©ÂÆ∂ $i$ Â§ñÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑÁ≠ñÁï•ÁªÑÂêà $(x_j){j\\in N\\setminus{i}}$„ÄÇ ÁªôÂÆö $x{-i}$ Âíå $x_i$Ôºå$(x{-i}, xi)$ Ë°®Á§∫ÂÆåÊï¥ÁöÑÁ≠ñÁï•ÁªÑÂêà $(x_i){i\\in N}$„ÄÇ Â¶ÇÊûúÊØè‰∏™Áé©ÂÆ∂ $i \\in N$ Êúâ‰∏Ä‰∏™ÈõÜÂêà $Xi$ÔºåÂàô $X{-i}$ Ë°®Á§∫ÂÖ∂‰ªñÁé©ÂÆ∂ÈõÜÂêàÁöÑÁ¨õÂç°Â∞îÁßØ $\\times_{j\\in N\\setminus{i}}X_j$„ÄÇ Â∞Ü ÂÖ∂‰ªñÁé©ÂÆ∂ÈõÜÂêàÁöÑÁ¨õÂç°Â∞îÁßØ $\\times_{j\\in N\\setminus{i}}X_j$ Â±ïÂºÄÊàêËã•Âπ≤È°πÁõ∏‰πòÁöÑÂΩ¢ÂºèÔºåÂèØ‰ª•Ë°®Á§∫‰∏∫Ôºö X‚àíi=X1√óX2√ó‚ãØ√óXi‚àí1√óXi+1√ó‚ãØ√óXn X_{-i} = X_1 \\times X_2 \\times \\cdots \\times X_{i-1} \\times X_{i+1} \\times \\cdots \\times X_n X‚àíi‚Äã=X1‚Äã√óX2‚Äã√ó‚ãØ√óXi‚àí1‚Äã√óXi+1‚Äã√ó‚ãØ√óXn‚Äã Ëß£Èáä $N$ ÊòØÁé©ÂÆ∂ÈõÜÂêàÔºå$i$ ÊòØÂΩìÂâçÁé©ÂÆ∂„ÄÇ $N \\setminus {i}$ Ë°®Á§∫Èô§Áé©ÂÆ∂ $i$ Â§ñÁöÑÂÖ∂‰ªñÊâÄÊúâÁé©ÂÆ∂„ÄÇ ÊØè‰∏™ $X_j$ ÊòØÁé©ÂÆ∂ $j$ ÁöÑÁ≠ñÁï•ÈõÜÂêà„ÄÇ Á¨õÂç°Â∞îÁßØ $\\times_{j\\in N\\setminus{i}}X_j$ Ë°®Á§∫ÊâÄÊúâÂÖ∂‰ªñÁé©ÂÆ∂Á≠ñÁï•ÈõÜÂêàÁöÑ‰πòÁßØÔºåÂç≥ÊØè‰∏™Áé©ÂÆ∂ÁöÑÁ≠ñÁï•ÁªÑÂêàÂú®‰∏ÄËµ∑ÂΩ¢ÊàêÁöÑÈõÜÂêà„ÄÇ Á§∫‰æã ÂÅáËÆæÊúâ 3 ‰∏™Áé©ÂÆ∂ $N = {1, 2, 3}$Ôºå‰∏îÂΩìÂâçÁé©ÂÆ∂ÊòØ $i = 2$ÔºåÂàôÔºö X‚àí2=X1√óX3 X_{-2} = X_1 \\times X_3 X‚àí2‚Äã=X1‚Äã√óX3‚Äã Âç≥Áé©ÂÆ∂ 1 ÂíåÁé©ÂÆ∂ 3 ÁöÑÁ≠ñÁï•ÈõÜÂêàÁöÑÁ¨õÂç°Â∞îÁßØ„ÄÇ Â¶ÇÊûúÁé©ÂÆ∂Êõ¥Â§öÔºå‰æãÂ¶Ç $N = {1, 2, 3, 4}$Ôºå‰∏îÂΩìÂâçÁé©ÂÆ∂ÊòØ $i = 3$ÔºåÂàôÔºö X‚àí3=X1√óX2√óX4 X_{-3} = X_1 \\times X_2 \\times X_4 X‚àí3‚Äã=X1‚Äã√óX2‚Äã√óX4‚Äã ËøôÁßçÂ±ïÂºÄÂΩ¢ÂºèÂú®ÂçöÂºàËÆ∫‰∏≠Â∏∏Áî®‰∫éÊèèËø∞ÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑÁ≠ñÁï•ÁªÑÂêàÂØπÂΩìÂâçÁé©ÂÆ∂Á≠ñÁï•ÁöÑÂΩ±Âìç„ÄÇ 3. ÂÅèÂ•ΩÂÖ≥Á≥ª ‰∫åÂÖÉÂÖ≥Á≥ªÔºö ÈõÜÂêà $A$ ‰∏äÁöÑ‰∫åÂÖÉÂÖ≥Á≥ª $\\succsim$ ÊòØÂÆåÂÖ®ÁöÑÔºàcompleteÔºâÔºåÂ¶ÇÊûúÂØπ‰ªªÊÑè $a, b \\in A$Ôºå$a \\succsim b$ Êàñ $b \\succsim a$ ÊàêÁ´ãÔºõ ÊòØËá™ÂèçÁöÑÔºàreflexiveÔºâÔºåÂ¶ÇÊûúÂØπ‰ªªÊÑè $a \\in A$Ôºå$a \\succsim a$ ÊàêÁ´ãÔºõ ÊòØ‰º†ÈÄíÁöÑÔºàtransitiveÔºâÔºåÂ¶ÇÊûú $a \\succsim b$ ‰∏î $b \\succsim c$ Êó∂Ôºå$a \\succsim c$ ÊàêÁ´ã„ÄÇ ÂÅèÂ•ΩÂÖ≥Á≥ªÔºö ÂÅèÂ•ΩÂÖ≥Á≥ªÊòØÂÆåÂÖ®„ÄÅËá™Âèç‰∏î‰º†ÈÄíÁöÑ‰∫åÂÖÉÂÖ≥Á≥ª„ÄÇ Â¶ÇÊûú $a \\succsim b$ ‰ΩÜ $b \\succsim a$ ‰∏çÊàêÁ´ãÔºåÂàôËÆ∞‰∏∫ $a \\succ b$Ôºõ Â¶ÇÊûú $a \\succsim b$ ‰∏î $b \\succsim a$ÔºåÂàôËÆ∞‰∏∫ $a \\sim b$„ÄÇ ËøûÁª≠ÊÄßÔºö ÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim$ ÊòØËøûÁª≠ÁöÑÔºàcontinuousÔºâÔºåÂ¶ÇÊûúÂΩìÂ∫èÂàó $(a^k)_k$ Âíå $(b^k)_k$ ÂàÜÂà´Êî∂Êïõ‰∫é $a$ Âíå $b$ ‰∏î $a^k \\succsim b^k$ ÂØπÊâÄÊúâ $k$ ÊàêÁ´ãÊó∂Ôºå$a \\succsim b$ ÊàêÁ´ã„ÄÇ ÊãüÂáπÊÄßÔºö ÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim$ Âú® $\\mathbb{R}^n$ ‰∏äÊòØÊãüÂáπÁöÑÔºàquasi-concaveÔºâÔºåÂ¶ÇÊûúÂØπ‰ªªÊÑè $b \\in \\mathbb{R}^n$ÔºåÈõÜÂêà ${a \\in \\mathbb{R}^n: a \\succsim b}$ ÊòØÂá∏ÁöÑÔºàconvexÔºâÔºõ Â¶ÇÊûúËØ•ÈõÜÂêàÊòØ‰∏•Ê†ºÂá∏ÁöÑÔºàstrictly convexÔºâÔºåÂàôÂÅèÂ•ΩÂÖ≥Á≥ªÊòØ‰∏•Ê†ºÊãüÂáπÁöÑÔºàstrictly quasi-concaveÔºâ„ÄÇ 4. Â∏ïÁ¥ØÊâòÊïàÁéá Â∏ïÁ¥ØÊâòÊïàÁéáÔºö Âú®ÈõÜÂêà $X \\subseteq \\mathbb{R}^N$ ‰∏≠Ôºå$x \\in X$ ÊòØÂ∏ïÁ¥ØÊâòÊúâÊïàÁöÑÔºàPareto efficientÔºâÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú® $y \\in X$ ‰ΩøÂæó $y_i > x_i$ ÂØπÊâÄÊúâ $i \\in N$ ÊàêÁ´ãÔºõ $x \\in X$ ÊòØÂº∫Â∏ïÁ¥ØÊâòÊúâÊïàÁöÑÔºàstrongly Pareto efficientÔºâÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú® $y \\in X$ ‰ΩøÂæó $y_i \\geq x_i$ ÂØπÊâÄÊúâ $i \\in N$ ÊàêÁ´ã‰∏î $y_i > x_i$ ÂØπÊüê‰∫õ $i \\in N$ ÊàêÁ´ã„ÄÇ 5. Ê¶ÇÁéáÊµãÂ∫¶ Ê¶ÇÁéáÊµãÂ∫¶Ôºö Âú®ÊúâÈôêÔºàÊàñÂèØÊï∞ÔºâÈõÜÂêà $X$ ‰∏äÔºåÊ¶ÇÁéáÊµãÂ∫¶ $\\mu$ ÊòØ‰∏Ä‰∏™Âä†ÊÄßÂáΩÊï∞ÔºåÂ∞ÜÊØè‰∏™Â≠êÈõÜÊò†Â∞ÑÂà∞‰∏Ä‰∏™ÈùûË¥üÂÆûÊï∞ÔºåÊª°Ë∂≥ $\\mu(B \\cup C) = \\mu(B) + \\mu(C)$ÔºàÂΩì $B$ Âíå $C$ ‰∏çÁõ∏‰∫§Êó∂ÔºâÔºå‰∏î $\\mu(X) = 1$„ÄÇ Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÊ¶ÇÁéáÊµãÂ∫¶ÂèØ‰ª•ÂÆö‰πâÂú®ÈùûÊúâÈôêÁ©∫Èó¥‰∏ä„ÄÇ ‰ª•‰∏äÂÜÖÂÆπ‰∏ªË¶ÅÂÆö‰πâ‰∫ÜÊï∞Â≠¶ÂíåÂçöÂºàËÆ∫‰∏≠Â∏∏Áî®ÁöÑÁ¨¶Âè∑‰∏éÊ¶ÇÂøµÔºåÂåÖÊã¨ÂÆûÊï∞ÈõÜÂêà„ÄÅÂêëÈáèÊØîËæÉ„ÄÅÂáΩÊï∞ÊÄßË¥®ÔºàÂ¶ÇÂáπÂáΩÊï∞„ÄÅÈÄíÂ¢ûÂáΩÊï∞Ôºâ„ÄÅÁ≠ñÁï•ÁªÑÂêà„ÄÅÂÅèÂ•ΩÂÖ≥Á≥ªÔºàÂ¶ÇÂÆåÂÖ®ÊÄß„ÄÅ‰º†ÈÄíÊÄß„ÄÅÊãüÂáπÊÄßÔºâ„ÄÅÂ∏ïÁ¥ØÊâòÊïàÁéá‰ª•ÂèäÊ¶ÇÁéáÊµãÂ∫¶„ÄÇËøô‰∫õÂÆö‰πâ‰∏∫ÂçöÂºàËÆ∫ÂíåÁªèÊµéÂ≠¶‰∏≠ÁöÑÊ®°ÂûãÊûÑÂª∫‰∏éÂàÜÊûêÊèê‰æõ‰∫ÜÂü∫Á°ÄÂ∑•ÂÖ∑„ÄÇ I Strategic Games 9 Á≠ñÁï•ÂçöÂºà Nash ÂùáË°° Ê∑∑ÂêàÊàòÁï•ÂùáË°° and Áõ∏ÂÖ≥ÂùáË°° ÔºàË°åÂä®‰∏çÂøÖÊòØÁ°ÆÂÆöÁöÑÔºâ ÂèØÁêÜÊÄßÂåñ and ÂèçÂ§çÂâîÈô§Âä£Ë°åÂä®ÔºàÂÅáÂÆö‰∫∫‰∏çÁü•ÈÅìÂùáË°°Ôºâ Áü•ËØÜÊ®°ÂûãÔºàÊ≠£ÂºèÊ£ÄÈ™åÂú®Â∑≤ÂÆö‰πâÂ•ΩÂêÑÁßçËß£‰πã‰∏ãÁöÑÁßçÁßçÂÅáËÆæÔºâ 2 Nash Equilibrium 11 2.1 Strategic Games 11 2.2 Nash Equilibrium 14 2.3 Examples 15 2.4 Existence of a Nash Equilibrium 19 2.5 Strictly Competitive Games 21 2.6 Bayesian Games: Strategic Games with Imperfect Information 24 Notes 29 Strategic Games [Definition] Strategic Games A strategic game consists of a finite set N (the set of players) for each player $i \\in N$ a nonempty set $A_i$ (the set of actions available to player i) for each player $i \\in N$ a preference relation $\\gtrsimi$ on $A = \\times{j \\in N} A_j$ (the preference relation of player i). If the set $A_i$ of actions of every player i is finite then the game is finite. In some situations the players' preferences are most naturally defined not over action profiles but over their consequences. When modeling an oligopoly, for example, we may take the set of players to be a set of firms and the set of actions of each fƒ±rm to be the set of prices; but we may wish to model the assumption that each fƒ±rm cares only about its profit not about the profile of prices that generates that proft. To do so we introduce a set $C$ of $consequences$, a function $g{:}A\\to C$ that associates consequences with action profiles, and a profile $(\\succsim_i^)$ of preference relations over $C$. Then the preference relation $\\succsim_i$ of each player $i$ in the strategic game is defined as follows: $a\\succsim_ib$ if and only if $g(a)\\succsim_i^g(b)$. Sometimes we wish to model a situation in which the consequence of an action profile is affected by an exogenous random variable whose realization is not known to the players before they take their actions. We can model such a situation as a strategic game by introducing a set $C$ of consequences, a probability space $\\Omega$, and a function $g{:}A\\times\\Omega\\to C$ with the interpretation that $g(a,\\omega)$ is the consequence when the action profile is $a\\in A$ and the realization of the random variable is $\\omega\\in\\Omega$. A profile of actions induces a lottery on $C;$ for each player $i$ a preference relation $\\succsim_i^$ must be specified over the set of all such lotteries. Player $i‚Äô$s preference relation in the strategic game is defined as follows: $a\\succsim_ib$ if and only if the lottery over $C$ induced by $g(a,\\cdot)$ is at least as good according to $\\succsim_i^$ as the lottery induced by $g(b,\\cdot)$. Under a wide range of circumstances the preference relation $\\succsimi$ of player $i$ in a strategic game can be represented by a payoff function $u_i{:}A\\to\\mathbb{R}$ also called a utility function , in the sense that $u_i( a) \\geq u_i( b)$ whenever $a\\succsim_ib$. We refer to values of such a function as payoffs (or utilities). Frequently we specify a player's preference relation by giving a payoffunction that represents it. In such a case we denote the game by $\\langle N,(A{i}),(u{i})\\rangle$ rather than $\\langle N,(A{i}),(\\succsim_{i})\\rangle$. ÊàòÁï•ÂçöÂºàÁöÑÂÆö‰πâ ÊàòÁï•ÂçöÂºàÔºàStrategic GameÔºâÁî±‰ª•‰∏ã‰∏âÈÉ®ÂàÜÁªÑÊàêÔºö Áé©ÂÆ∂ÈõÜÂêàÔºö‰∏Ä‰∏™ÊúâÈôêÁöÑÈõÜÂêà $N$ÔºåË°®Á§∫ÊâÄÊúâÁé©ÂÆ∂„ÄÇ Ë°åÂä®ÈõÜÂêàÔºöÂØπÊØè‰∏™Áé©ÂÆ∂ $i \\in N$ÔºåÂ≠òÂú®‰∏Ä‰∏™ÈùûÁ©∫ÁöÑË°åÂä®ÈõÜÂêà $A_i$ÔºåË°®Á§∫Áé©ÂÆ∂ $i$ ÂèØÈÄâÁöÑË°åÂä®„ÄÇ ÂÅèÂ•ΩÂÖ≥Á≥ªÔºöÂØπÊØè‰∏™Áé©ÂÆ∂ $i \\in N$ÔºåÂ≠òÂú®‰∏Ä‰∏™ÂÅèÂ•ΩÂÖ≥Á≥ª $\\gtrsimi$ÔºåÂÆö‰πâÂú®Ë°åÂä®ÁªÑÂêàÈõÜÂêà $A = \\times{j \\in N} A_j$ ‰∏äÔºåË°®Á§∫Áé©ÂÆ∂ $i$ ÂØπ‰∏çÂêåË°åÂä®ÁªÑÂêàÁöÑÂÅèÂ•Ω„ÄÇ ÊúâÈôêÂçöÂºàÔºöÂ¶ÇÊûúÊØè‰∏™Áé©ÂÆ∂ÁöÑË°åÂä®ÈõÜÂêà $A_i$ ÈÉΩÊòØÊúâÈôêÁöÑÔºåÂàôËØ•ÂçöÂºàÁß∞‰∏∫ÊúâÈôêÂçöÂºà„ÄÇ ÂÅèÂ•ΩÂÖ≥Á≥ªÁöÑÊâ©Â±ï Âü∫‰∫éÂêéÊûúÁöÑÂÅèÂ•ΩÔºöÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÁé©ÂÆ∂ÁöÑÂÅèÂ•Ω‰∏çÊòØÁõ¥Êé•ÂÆö‰πâÂú®Ë°åÂä®ÁªÑÂêà‰∏äÔºåËÄåÊòØÂÆö‰πâÂú®Ë°åÂä®ÁªÑÂêàÁöÑÂêéÊûúÔºàconsequencesÔºâ‰∏ä„ÄÇ‰æãÂ¶ÇÔºåÂú®ÂØ°Â§¥ÂûÑÊñ≠Ê®°Âûã‰∏≠ÔºåÁé©ÂÆ∂ÁöÑË°åÂä®ÂèØËÉΩÊòØ‰ª∑Ê†ºÔºå‰ΩÜÁé©ÂÆ∂ÁúüÊ≠£ÂÖ≥ÂøÉÁöÑÊòØÂà©Ê∂¶ÔºàÂêéÊûúÔºâ„ÄÇÊ≠§Êó∂ÔºåÂèØ‰ª•ÂºïÂÖ•Ôºö ÂêéÊûúÈõÜÂêà $C$Ôºõ Êò†Â∞ÑÂáΩÊï∞ $g{:}A \\to C$ÔºåÂ∞ÜË°åÂä®ÁªÑÂêàÊò†Â∞ÑÂà∞ÂêéÊûúÔºõ Áé©ÂÆ∂Âú®ÂêéÊûú‰∏äÁöÑÂÅèÂ•ΩÂÖ≥Á≥ª $(\\succsim_i^)$„ÄÇ ÁÑ∂ÂêéÔºåÁé©ÂÆ∂ $i$ Âú®ÊàòÁï•ÂçöÂºà‰∏≠ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ªÂÆö‰πâ‰∏∫Ôºö$a \\succsim_i b$ ÂΩì‰∏î‰ªÖÂΩì $g(a) \\succsim_i^ g(b)$„ÄÇ ÈöèÊú∫ÂèòÈáèÁöÑÂΩ±ÂìçÔºöÂ¶ÇÊûúË°åÂä®ÁªÑÂêàÁöÑÂêéÊûúÂèóÂà∞Â§ñÁîüÈöèÊú∫ÂèòÈáèÁöÑÂΩ±ÂìçÔºà‰æãÂ¶ÇÂ∏ÇÂú∫Ê≥¢Âä®ÔºâÔºåÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÂª∫Ê®°Ôºö ÂêéÊûúÈõÜÂêà $C$Ôºõ Ê¶ÇÁéáÁ©∫Èó¥ $\\Omega$ÔºåË°®Á§∫ÈöèÊú∫ÂèòÈáèÁöÑÂèØËÉΩÂèñÂÄºÔºõ Êò†Â∞ÑÂáΩÊï∞ $g{:}A \\times \\Omega \\to C$ÔºåË°®Á§∫Âú®Ë°åÂä®ÁªÑÂêà $a$ ÂíåÈöèÊú∫ÂèòÈáèÂÆûÁé∞ $\\omega$ ‰∏ãÁöÑÂêéÊûú„ÄÇ Ê≠§Êó∂ÔºåË°åÂä®ÁªÑÂêà‰ºöËØ±ÂØº‰∏Ä‰∏™ÂÖ≥‰∫éÂêéÊûúÁöÑÂΩ©Á•®ÔºàlotteryÔºâÔºåÁé©ÂÆ∂ $i$ ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim_i^$ ÂÆö‰πâÂú®ÊâÄÊúâÂèØËÉΩÁöÑÂΩ©Á•®‰∏ä„ÄÇÁé©ÂÆ∂ $i$ Âú®ÊàòÁï•ÂçöÂºà‰∏≠ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ªÂÆö‰πâ‰∏∫Ôºö$a \\succsim_i b$ ÂΩì‰∏î‰ªÖÂΩì $g(a, \\cdot)$ ËØ±ÂØºÁöÑÂΩ©Á•®Ëá≥Â∞ë‰∏é $g(b, \\cdot)$ ËØ±ÂØºÁöÑÂΩ©Á•®‰∏ÄÊ†∑Â•ΩÔºàÊ†πÊçÆ $\\succsim_i^$Ôºâ„ÄÇ ÊïàÁî®ÂáΩÊï∞Ë°®Á§∫ ÊïàÁî®ÂáΩÊï∞ÔºöÂú®ËÆ∏Â§öÊÉÖÂÜµ‰∏ãÔºåÁé©ÂÆ∂ $i$ ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim_i$ ÂèØ‰ª•Áî®‰∏Ä‰∏™ÊïàÁî®ÂáΩÊï∞ÔºàÊàñÊî∂ÁõäÂáΩÊï∞Ôºâ$u_i{:}A \\to \\mathbb{R}$ Êù•Ë°®Á§∫ÔºåÊª°Ë∂≥ $u_i(a) \\geq u_i(b)$ ÂΩì‰∏î‰ªÖÂΩì $a \\succsim_i b$„ÄÇÊïàÁî®ÂáΩÊï∞ÁöÑÂÄºÁß∞‰∏∫Êî∂ÁõäÔºàpayoffsÔºâÊàñÊïàÁî®ÔºàutilitiesÔºâ„ÄÇ ÂçöÂºàÁöÑÁÆÄÂåñË°®Á§∫ÔºöÂΩìÁî®ÊïàÁî®ÂáΩÊï∞Ë°®Á§∫ÂÅèÂ•ΩÂÖ≥Á≥ªÊó∂ÔºåÂçöÂºàÂèØ‰ª•ÁÆÄËÆ∞‰∏∫ $\\langle N, (A_i), (u_i) \\rangle$ÔºåËÄå‰∏çÊòØ $\\langle N, (A_i), (\\succsim_i) \\rangle$„ÄÇ Ë°•ÂÖÖËØ¥Êòé ÊàòÁï•ÂçöÂºàÁöÑÊ†∏ÂøÉÔºöÊàòÁï•ÂçöÂºàÁöÑÊ†∏ÂøÉÊòØÁé©ÂÆ∂Âú®ÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂Ë°åÂä®ÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄâÊã©ÊúÄ‰ºòË°åÂä®‰ª•ÂÆûÁé∞Ëá™Ë∫´ÂÅèÂ•ΩÊàñÊïàÁî®ÊúÄÂ§ßÂåñ„ÄÇ Â∫îÁî®Âú∫ÊôØÔºöÊàòÁï•ÂçöÂºàÂπøÊ≥õÂ∫îÁî®‰∫éÁªèÊµéÂ≠¶„ÄÅÊîøÊ≤ªÂ≠¶„ÄÅÁîüÁâ©Â≠¶Á≠âÈ¢ÜÂüüÔºå‰æãÂ¶ÇÂØ°Â§¥Á´û‰∫â„ÄÅÊãçÂçñÊú∫Âà∂ËÆæËÆ°„ÄÅËøõÂåñÂçöÂºàÁ≠â„ÄÇ ÈöèÊú∫ÊÄß‰∏é‰∏çÁ°ÆÂÆöÊÄßÔºöÂΩìÂºïÂÖ•ÈöèÊú∫ÂèòÈáèÊó∂ÔºåÂçöÂºàÁöÑÂêéÊûúÂÖ∑Êúâ‰∏çÁ°ÆÂÆöÊÄßÔºåÁé©ÂÆ∂ÁöÑÂÅèÂ•ΩÈúÄË¶ÅÂü∫‰∫éÊúüÊúõÊïàÁî®ÊàñÈ£éÈô©ÊÄÅÂ∫¶ËøõË°åÂàÜÊûê„ÄÇ ÂèÇ‰∏é‰∫∫Áã¨Á´ãÂÅöÂÜ≥Á≠ñ‰∏îÊâÄÊúâÂèÇ‰∏é‰∫∫Âú®ÂÅöÂÜ≥Á≠ñÂâç‰∏çÁü•ÈÅìÂÖ∂‰ªñ‰∫∫ÁöÑÈÄâÊã©„ÄÇ ÁøªËØëÊÄªÁªì ÊàòÁï•ÂçöÂºàÁî±Áé©ÂÆ∂ÈõÜÂêà„ÄÅË°åÂä®ÈõÜÂêàÂíåÂÅèÂ•ΩÂÖ≥Á≥ª‰∏âÈÉ®ÂàÜÁªÑÊàê„ÄÇÂÅèÂ•ΩÂÖ≥Á≥ªÂèØ‰ª•Áõ¥Êé•ÂÆö‰πâÂú®Ë°åÂä®ÁªÑÂêà‰∏äÔºå‰πüÂèØ‰ª•Âü∫‰∫éË°åÂä®ÁªÑÂêàÁöÑÂêéÊûúÊàñÈöèÊú∫ÂèòÈáèÁöÑÂΩ±ÂìçÊù•ÂÆö‰πâ„ÄÇÂú®ËÆ∏Â§öÊÉÖÂÜµ‰∏ãÔºåÂÅèÂ•ΩÂÖ≥Á≥ªÂèØ‰ª•Áî®ÊïàÁî®ÂáΩÊï∞Ë°®Á§∫Ôºå‰ªéËÄåÁÆÄÂåñÂçöÂºàÁöÑÊèèËø∞„ÄÇËøôÁßçÂª∫Ê®°ÊñπÊ≥ï‰∏∫ÂàÜÊûêÁ´û‰∫â„ÄÅÂêà‰ΩúÂíå‰∏çÁ°ÆÂÆöÊÄß‰∏ãÁöÑÂÜ≥Á≠ñÊèê‰æõ‰∫ÜÂº∫Â§ßÂ∑•ÂÖ∑„ÄÇ Nash Equilibrium The most commonly used solution concept in game theory is that of Nash equilibrium. This notion captures a steady state of the play of a strategic game in which each player holds the correct expectation about the other players' behavior and acts rationally. It does not attempt to examine the process by which a steady state is reached. [DEFINITION] A Nash equilibrium of a strategic game $\\langle N,(A_i)$, $(\\succsim_i)\\rangle$ is a profile $a^*\\in A$ of actions with the property that for every player $i\\in N$ we have (a‚àíi‚àó,ai‚àó)‚âøi(a‚àíi‚àó,ai)¬†for¬†all¬†ai‚ààAi (a_{-i}^*,a_i^*)\\succsim_i(a_{-i}^*,a_i)\\text{ for all }a_i\\in A_i (a‚àíi‚àó‚Äã,ai‚àó‚Äã)‚âøi‚Äã(a‚àíi‚àó‚Äã,ai‚Äã)¬†for¬†all¬†ai‚Äã‚ààAi‚Äã Thus for $a^$ to be a Nash equilibrium it must be that no player $i$ has an action yielding an outcome that he prefers to that generated when he chooses $a_i^$, given that every other player $j$ chooses his equilibrium action $a_j^*$. Bricfly, no playcr can profitably dcviatc, givcn thc actions of the other players. The following restatement of the defnition is sometimes useful. For any $a{-i}\\in A{-i}$ define $Bi(a{-i})$ to be the set of player $i$'s best actions given $a_{-i}{:}$ Bi(a‚àíi)={ai‚ààAi‚Äâ‚Å£:(a‚àíi,ai)‚™∞i(a‚àíi,ai‚Ä≤)¬†for¬†all¬†ai‚Ä≤‚ààAi} B_i(a_{-i})=\\{a_i\\in A_i\\colon(a_{-i},a_i)\\succeq_i(a_{-i},a_i')\\text{ for all }a_i'\\in A_i\\} Bi‚Äã(a‚àíi‚Äã)={ai‚Äã‚ààAi‚Äã:(a‚àíi‚Äã,ai‚Äã)‚™∞i‚Äã(a‚àíi‚Äã,ai‚Ä≤‚Äã)¬†for¬†all¬†ai‚Ä≤‚Äã‚ààAi‚Äã} We call the set-valued function $B_i$ the best-response function of player $i$. A Nash equilibrium is a profile $a^*$ of actions for which ai‚àó‚ààBi(a‚àíi‚àó)¬†for¬†all¬†i‚ààN a_i^*\\in B_i(a_{-i}^*)\\text{ for all }i\\in N ai‚àó‚Äã‚ààBi‚Äã(a‚àíi‚àó‚Äã)¬†for¬†all¬†i‚ààN This alternative formulation of the defnition points us to a (not necessarily efficient) method of fnding Nash equilibria: first calculate the best response function of each player, then find a profile $a^$ of actions for which $a_i^\\in Bi(a{-i}^)$ for all $i\\in N$. If the functions $B_i$ are singleton-valued then the second step entails solving $|N|$ equations in the $|N|$ unknowns $(a_i^)_{i\\in N}$. 1. Á∫≥‰ªÄÂùáË°°ÁöÑÂÆö‰πâ Á∫≥‰ªÄÂùáË°°ÔºàNash EquilibriumÔºâÊòØÂçöÂºàËÆ∫‰∏≠ÊúÄÂ∏∏Áî®ÁöÑËß£Ê¶ÇÂøµÔºåÊèèËø∞‰∫Ü‰∏ÄÁßçÁ®≥ÊÄÅÔºàsteady stateÔºâ„ÄÇÂú®ËøôÁßçÁä∂ÊÄÅ‰∏ãÔºö ÊØè‰∏™Áé©ÂÆ∂ÂØπÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑË°å‰∏∫ÊúâÊ≠£Á°ÆÁöÑÈ¢ÑÊúüÔºõ ÊØè‰∏™Áé©ÂÆ∂Âú®ÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂Ë°å‰∏∫ÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄâÊã©ÊúÄ‰ºòË°åÂä®ÔºàÂç≥ÁêÜÊÄßË°å‰∏∫Ôºâ„ÄÇ Á∫≥‰ªÄÂùáË°°‰∏çÂÖ≥Ê≥®Á®≥ÊÄÅÊòØÂ¶Ç‰ΩïËææÂà∞ÁöÑÔºåËÄåÊòØÂÖ≥Ê≥®Á®≥ÊÄÅÊú¨Ë∫´ÁöÑÊÄßË¥®„ÄÇ 2. Á∫≥‰ªÄÂùáË°°ÁöÑÊï∞Â≠¶ÂÆö‰πâ ÂØπ‰∫éÊàòÁï•ÂçöÂºà $\\langle N, (A_i), (\\succsim_i)\\rangle$Ôºå‰∏Ä‰∏™Ë°åÂä®ÁªÑÂêà $a^* \\in A$ ÊòØÁ∫≥‰ªÄÂùáË°°ÔºåÂ¶ÇÊûúÂØπ‰∫éÊØè‰∏™Áé©ÂÆ∂ $i \\in N$ÔºåÊª°Ë∂≥Ôºö (a‚àíi‚àó,ai‚àó)‚âøi(a‚àíi‚àó,ai)ÂØπ‰∫éÊâÄÊúâ¬†ai‚ààAi (a_{-i}^*, a_i^*) \\succsim_i (a_{-i}^*, a_i) \\quad \\text{ÂØπ‰∫éÊâÄÊúâ } a_i \\in A_i (a‚àíi‚àó‚Äã,ai‚àó‚Äã)‚âøi‚Äã(a‚àíi‚àó‚Äã,ai‚Äã)ÂØπ‰∫éÊâÄÊúâ¬†ai‚Äã‚ààAi‚Äã Ëß£ÈáäÔºö $a^ = (a_1^, a_2^, \\ldots, a_n^)$ ÊòØ‰∏Ä‰∏™Ë°åÂä®ÁªÑÂêàÔºåÂÖ∂‰∏≠ $a_i^*$ ÊòØÁé©ÂÆ∂ $i$ ÁöÑÂùáË°°Ë°åÂä®„ÄÇ $a_{-i}^*$ Ë°®Á§∫Èô§Áé©ÂÆ∂ $i$ Â§ñÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑÂùáË°°Ë°åÂä®ÁªÑÂêà„ÄÇ $(a_{-i}^, a_i^)$ Ë°®Á§∫Âú®ÂùáË°°Áä∂ÊÄÅ‰∏ãÔºåÁé©ÂÆ∂ $i$ ÈÄâÊã© $a_i^*$ Êó∂ÁöÑË°åÂä®ÁªÑÂêà„ÄÇ $(a_{-i}^*, a_i)$ Ë°®Á§∫Âú®ÂùáË°°Áä∂ÊÄÅ‰∏ãÔºåÁé©ÂÆ∂ $i$ ÈÄâÊã©ÂÖ∂‰ªñË°åÂä® $a_i$ Êó∂ÁöÑË°åÂä®ÁªÑÂêà„ÄÇ Êù°‰ª∂ $(a{-i}^, a_i^) \\succsim_i (a{-i}^, ai)$ Ë°®Á§∫ÔºåÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑÂùáË°°Ë°åÂä® $a{-i}^$ÔºåÁé©ÂÆ∂ $i$ ÈÄâÊã© $a_i^*$ ÁöÑÊïàÁî®‰∏ç‰Ωé‰∫éÈÄâÊã©‰ªª‰ΩïÂÖ∂‰ªñË°åÂä® $a_i$ ÁöÑÊïàÁî®„ÄÇ Ê†∏ÂøÉÊÄùÊÉ≥Ôºö Âú®Á∫≥‰ªÄÂùáË°°‰∏≠ÔºåÊ≤°Êúâ‰ªª‰ΩïÁé©ÂÆ∂ÂèØ‰ª•ÈÄöËøáÂçïÊñπÈù¢ÊîπÂèòËá™Â∑±ÁöÑË°åÂä®Êù•ÊèêÈ´òËá™Â∑±ÁöÑÊïàÁî®„ÄÇ Êç¢Âè•ËØùËØ¥ÔºåÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑË°åÂä®ÔºåÊØè‰∏™Áé©ÂÆ∂ÈÉΩÂ∑≤ÁªèÈÄâÊã©‰∫ÜÊúÄ‰ºòË°åÂä®„ÄÇ 3. ÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ ÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ÔºàBest-Response FunctionÔºâÔºöÂØπ‰∫é‰ªªÊÑè $a{-i} \\in A{-i}$ÔºåÁé©ÂÆ∂ $i$ ÁöÑÊúÄ‰Ω≥Ë°åÂä®ÈõÜÂêàÂÆö‰πâ‰∏∫Ôºö Bi(a‚àíi)={ai‚ààAi‚Äâ‚Å£:(a‚àíi,ai)‚™∞i(a‚àíi,ai‚Ä≤)¬†for¬†all¬†ai‚Ä≤‚ààAi} B_i(a_{-i}) = \\{a_i \\in A_i \\colon (a_{-i}, a_i) \\succeq_i (a_{-i}, a_i') \\text{ for all } a_i' \\in A_i\\} Bi‚Äã(a‚àíi‚Äã)={ai‚Äã‚ààAi‚Äã:(a‚àíi‚Äã,ai‚Äã)‚™∞i‚Äã(a‚àíi‚Äã,ai‚Ä≤‚Äã)¬†for¬†all¬†ai‚Ä≤‚Äã‚ààAi‚Äã} Ëß£ÈáäÔºö $Bi(a{-i})$ Ë°®Á§∫Âú®ÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂Ë°åÂä® $a_{-i}$ ÁöÑÊÉÖÂÜµ‰∏ãÔºåÁé©ÂÆ∂ $i$ ÁöÑÊâÄÊúâÊúÄ‰ºòË°åÂä®„ÄÇ Â¶ÇÊûú $Bi(a{-i})$ ÊòØÂçïÂÄºÁöÑÔºàÂç≥Âè™Êúâ‰∏Ä‰∏™ÊúÄ‰ºòË°åÂä®ÔºâÔºåÂàôÁß∞ÂÖ∂‰∏∫ÊúÄ‰Ω≥ÂìçÂ∫î„ÄÇ Á∫≥‰ªÄÂùáË°°ÁöÑÂè¶‰∏ÄÁßçÂÆö‰πâÔºö ‰∏Ä‰∏™Ë°åÂä®ÁªÑÂêà $a^*$ ÊòØÁ∫≥‰ªÄÂùáË°°ÔºåÂ¶ÇÊûúÂØπ‰∫éÊØè‰∏™Áé©ÂÆ∂ $i \\in N$ÔºåÊª°Ë∂≥Ôºö ai‚àó‚ààBi(a‚àíi‚àó) a_i^* \\in B_i(a_{-i}^*) ai‚àó‚Äã‚ààBi‚Äã(a‚àíi‚àó‚Äã) Ëß£ÈáäÔºö Âú®ÂùáË°°Áä∂ÊÄÅ‰∏ãÔºåÊØè‰∏™Áé©ÂÆ∂ÁöÑË°åÂä® $ai^*$ ÈÉΩÊòØÂØπÂÖ∂‰ªñÁé©ÂÆ∂ÂùáË°°Ë°åÂä® $a{-i}^*$ ÁöÑÊúÄ‰Ω≥ÂìçÂ∫î„ÄÇ 4. ÂØªÊâæÁ∫≥‰ªÄÂùáË°°ÁöÑÊñπÊ≥ï Ê≠•È™§Ôºö ËÆ°ÁÆóÊØè‰∏™Áé©ÂÆ∂ÁöÑÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ $B_i$Ôºõ ÂØªÊâæ‰∏Ä‰∏™Ë°åÂä®ÁªÑÂêà $a^$Ôºå‰ΩøÂæóÂØπ‰∫éÊâÄÊúâÁé©ÂÆ∂ $i \\in N$Ôºå$a_i^ \\in Bi(a{-i}^*)$„ÄÇ ÁâπÊÆäÊÉÖÂÜµÔºö Â¶ÇÊûúÊØè‰∏™Áé©ÂÆ∂ÁöÑÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ $B_i$ ÊòØÂçïÂÄºÁöÑÔºåÂàôÁ∫≥‰ªÄÂùáË°°ÂèØ‰ª•ÈÄöËøáÊ±ÇËß£ $|N|$ ‰∏™ÊñπÁ®ãÔºàÊØè‰∏™Áé©ÂÆ∂‰∏Ä‰∏™ÊñπÁ®ãÔºâÊù•ÊâæÂà∞„ÄÇ ÁøªËØëÊÄªÁªì Á∫≥‰ªÄÂùáË°°ÊòØÂçöÂºàËÆ∫‰∏≠ÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÔºåÊèèËø∞‰∫Ü‰∏ÄÁßçÁ®≥ÊÄÅÔºåÂÖ∂‰∏≠ÊØè‰∏™Áé©ÂÆ∂Âú®ÁªôÂÆöÂÖ∂‰ªñÁé©ÂÆ∂Ë°åÂä®ÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄâÊã©ÊúÄ‰ºòË°åÂä®„ÄÇÂÖ∂Êï∞Â≠¶ÂÆö‰πâË¶ÅÊ±ÇÊØè‰∏™Áé©ÂÆ∂ÁöÑÂùáË°°Ë°åÂä®ÊòØÂØπÂÖ∂‰ªñÁé©ÂÆ∂ÂùáË°°Ë°åÂä®ÁöÑÊúÄ‰Ω≥ÂìçÂ∫î„ÄÇÈÄöËøáÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ÔºåÂèØ‰ª•Á≥ªÁªüÂú∞ÂØªÊâæÁ∫≥‰ªÄÂùáË°°ÔºåÂ∞§ÂÖ∂ÊòØÂú®ÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞‰∏∫ÂçïÂÄºÁöÑÊÉÖÂÜµ‰∏ãÔºåÁ∫≥‰ªÄÂùáË°°ÂèØ‰ª•ÈÄöËøáÊ±ÇËß£ÊñπÁ®ãÁªÑÂæóÂà∞„ÄÇËøô‰∏ÄÊ¶ÇÂøµ‰∏∫ÂàÜÊûêÁ´û‰∫â‰∏éÂêà‰Ωú‰∏≠ÁöÑÁ®≥ÂÆöÁä∂ÊÄÅÊèê‰æõ‰∫ÜÈáçË¶ÅÂ∑•ÂÖ∑„ÄÇ 2.4 Existence of a Nash Equilibrium Not every strategic game has a Nash equilibrium, as the game Matching Pennies (Figure 17.3) shows. The conditions under which the set of Nash equilibria of a game is nonempty have been investigated extensively. We now present an existence result that is one of the simplest of the genre. (Nevertheless its mathematical level is more advanced than most of the rest of the book, which does not depend on the details.) An existence result has two purposes. First, if we have a game that satisfies the hypothesis of the result then we know that there is some hope that our efforts to find an equilibrium will meet with success. Second, and more important, the existence of an equilibrium shows that the game is consistent with a steady state solution. Further, the existence of equilibria for a family of games allows us to study properties of these equilibria (by using, for example, ‚Äúcomparative static‚Äù techniques) without finding them explicitly and without taking the risk that we are studying the empty set. To show that a game has a Nash equilibrium it suffices to show that there is a profile $a^ \\in Bi(a{-i}^)$ for all $i \\in N$ (see (15.2)). Define the set-valued function $B: A \\rightarrow A$ by $B(a) = \\times{i \\in N} B_i(a{-i})$. Then (15.2) can be written in vector form simply as $a^ \\in B(a^)$. Fixed point theorems give conditions on $B$ under which indeed exists a value of $a^$ for which $a^ \\in B(a^*)$. The fixed point theorem that we use is the following (due to Kakutani (1941)). [LEMMA] (Kakutani's fixed point theorem): Let $X$ be a compact convex subset of $\\mathbb{R}^n$ and let $f:X \\to X$ be a set-valued function for which for all $x \\in X$, the set $f(x)$ is nonempty and convex the graph of $f$ is closed (i.e., for all sequences ${x_n}$ and ${y_n}$ such that $y_n \\in f(x_n)$ for all $n$, $x_n \\to x$, and $y_n \\to y$, we have $y \\in f(x)$). Then there exists $x^ \\in X$ such that $x^ \\in f(x^*)$. Define a preference relation $\\succsimi$ over $A$ to be quasi-concave on $A_i$ if for every $a^*\\in A$ the set ${a_i\\in A_i{:}(a{-i}^,a_i)\\succsim_ia^}$ is convex. [PROPOSITION 20.3] The strategic game $\\langle N, (A_i), (\\succsim_i) \\rangle$ has a Nash equilibrium if for all $i \\in N$ the set $A_i$ of actions of player $i$ is a nonempty compact convex subset of a Euclidean space and the preference relation $\\succsim_i$ is continuous quasi-concave on $A_i$. [Proof]. Define $B{:}A\\to A$ by $B(a)=\\timesi\\in NB_i(a{-i})$ (where $Bi$ is the best response function of player $i$, defined in (15.1)). For every $i\\in N$ the set $B{i}(a_{-i})$ is nonempty since $\\succsim_i$ is continuous and $A_i$ is compact, and is convex since $\\succsim_i$ is quasi-concave on $A_i;B$ has a closed graph since each $\\succsim_i$ is continuous. Thus by Kakutani's theorem $B$ has a fixed point; as we have noted any fixed point is a Nash equilibrium of the game. $\\square$ Note that this result asserts that a strategic game satisfying certain conditions has aleast one Nash equilibrium; as we have seen, a game can have more than one equilibrium. (Results that we do not discuss identify conditions under which a game has a unique Nash equilibrium.) Note also that Proposition 20.3 does not apply to any game in which some player has finitely many actions, since such a game violates the condition that the set of actions of every player be convex. [EXERCISE]: Show that each of the following four conditions is necessary for Kakutani's theorem. $(i)X$ is compact. $(ii)X$ is convex. $( iii)$ $f( x)$ is convex for each $x\\in X$. $(iv)$ $f$ has a closed graph. [EXERCISE] Symmetric games: Consider a two-person strategic game that satisfes the conditions of Proposition 20.3. Let $N={1,2}$ and assume that the game is $symmetric:A_1=A_2$ and $(a_1,a_2)\\succsim_1(b_1,b_2)$ if and only if $(a_2,a_1)\\succsim_2(b_2,b_1)$ for all $a\\in A$ and $b\\in A$. Use Kakutani's theorem to prove that there is an action $a_1^\\in A_1$ such that $(a_1^,a_1^*)$ is a Nash equilibrium of the game. (Such an equilibrium is called a symmetric equilibrium. ) Give an example of a finite symmetric game that has only asymmetric equilibria. 1. Á∫≥‰ªÄÂùáË°°ÁöÑÂ≠òÂú®ÊÄß ËÉåÊôØÔºöÂπ∂ÈùûÊâÄÊúâÊàòÁï•ÂçöÂºàÈÉΩÂ≠òÂú®Á∫≥‰ªÄÂùáË°°Ôºà‰æãÂ¶Ç‚ÄúÂåπÈÖçÁ°¨Â∏Å‚ÄùÂçöÂºàÔºâ„ÄÇÁ†îÁ©∂Á∫≥‰ªÄÂùáË°°Â≠òÂú®ÁöÑÊù°‰ª∂ÂÖ∑ÊúâÈáçË¶ÅÊÑè‰πâÔºö ÂÆûË∑µÊÑè‰πâÔºöËã•ÂçöÂºàÊª°Ë∂≥Â≠òÂú®ÊÄßÊù°‰ª∂ÔºåÂàôÂØªÊâæÂùáË°°ÊòØÂèØË°åÁöÑÔºõ ÁêÜËÆ∫ÊÑè‰πâÔºöÂùáË°°Â≠òÂú®ÊÄßË°®ÊòéÂçöÂºàÂ≠òÂú®Á®≥ÊÄÅËß£Ôºå‰∏îÂèØÈÄöËøáÊØîËæÉÈùôÊÄÅÂàÜÊûêÁ†îÁ©∂ÂùáË°°ÊÄßË¥®ÔºåÊó†ÈúÄÊòæÂºèÊ±ÇËß£„ÄÇ Â≠òÂú®ÊÄßËØÅÊòéÊñπÊ≥ïÔºöÈÄöËøáÂÆö‰πâÈõÜÂêàÂÄºÂáΩÊï∞ $B(a) = \\times{i \\in N} B_i(a{-i})$Ôºà$B_i$ ‰∏∫Áé©ÂÆ∂ $i$ ÁöÑÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞ÔºâÔºåÁ∫≥‰ªÄÂùáË°°Âç≥‰∏∫ $B$ ÁöÑÂõ∫ÂÆöÁÇπÔºàÂç≥ $a^ \\in B(a^)$Ôºâ„ÄÇÂà©Áî® ËßíË∞∑‰∏çÂä®ÁÇπÂÆöÁêÜÔºàKakutani‚Äôs fixed point theoremÔºâÂèØËØÅÊòéÂõ∫ÂÆöÁÇπÁöÑÂ≠òÂú®ÊÄß„ÄÇ 2. ËßíË∞∑‰∏çÂä®ÁÇπÂÆöÁêÜ [ÂÆöÁêÜ]ÔºàËßíË∞∑‰∏çÂä®ÁÇπÂÆöÁêÜÔºâÔºöËÆæ $X$ ÊòØ $\\mathbb{R}^n$ ‰∏≠ÁöÑ Á¥ßÂá∏ÈõÜÔºåÈõÜÂêàÂÄºÂáΩÊï∞ $f: X \\to X$ Êª°Ë∂≥Ôºö ÈùûÁ©∫Âá∏ÂÄºÔºöÂØπ‰ªªÊÑè $x \\in X$Ôºå$f(x)$ ÈùûÁ©∫‰∏îÂá∏Ôºõ Èó≠ÂõæÂÉèÔºöËã•Â∫èÂàó ${x_n} \\to x$ Âíå ${y_n} \\to y$ Êª°Ë∂≥ $y_n \\in f(x_n)$ÔºåÂàô $y \\in f(x)$„ÄÇ ÂàôÂ≠òÂú® $x^ \\in X$ ‰ΩøÂæó $x^ \\in f(x^*)$„ÄÇ 3. Á∫≥‰ªÄÂùáË°°Â≠òÂú®ÊÄßÂÆöÁêÜ [ÂëΩÈ¢ò 20.3]ÔºöÊàòÁï•ÂçöÂºà $\\langle N, (A_i), (\\succsim_i) \\rangle$ Â≠òÂú®Á∫≥‰ªÄÂùáË°°ÔºåËã•ÂØπÊØè‰∏™Áé©ÂÆ∂ $i \\in N$Ôºö Ë°åÂä®ÈõÜÊù°‰ª∂Ôºö$A_i$ ÊòØÊ¨ßÂá†ÈáåÂæóÁ©∫Èó¥ÁöÑÈùûÁ©∫Á¥ßÂá∏ÈõÜÔºõ ÂÅèÂ•ΩÂÖ≥Á≥ªÊù°‰ª∂Ôºö$\\succsim_i$ ÊòØËøûÁª≠ÁöÑÔºå‰∏îÂú® $A_i$ ‰∏äÊòØ ÊãüÂáπÁöÑÔºàquasi-concaveÔºâ„ÄÇ ËØÅÊòéÊÄùË∑ØÔºö ÂÆö‰πâÈõÜÂêàÂÄºÂáΩÊï∞ $B(a) = \\times{i \\in N} B_i(a{-i})$ÔºåÂÖ∂‰∏≠ $Bi(a{-i})$ ÊòØÁé©ÂÆ∂ $i$ ÁöÑÊúÄ‰Ω≥ÂìçÂ∫îÈõÜÂêà„ÄÇ Áî±‰∫é $\\succsimi$ ÁöÑËøûÁª≠ÊÄßÂíåÊãüÂáπÊÄßÔºå$B_i(a{-i})$ ÈùûÁ©∫‰∏îÂá∏ÔºõÈó≠ÂõæÂÉèÊù°‰ª∂Áî±ËøûÁª≠ÊÄß‰øùËØÅ„ÄÇ Â∫îÁî®ËßíË∞∑ÂÆöÁêÜÔºå$B$ Â≠òÂú®Âõ∫ÂÆöÁÇπ $a^*$ÔºåÂç≥Á∫≥‰ªÄÂùáË°°„ÄÇ Ê≥®ÊÑèÔºö ÂëΩÈ¢ò‰ªÖ‰øùËØÅËá≥Â∞ëÂ≠òÂú®‰∏Ä‰∏™ÂùáË°°Ôºå‰ΩÜÂçöÂºàÂèØËÉΩÊúâÂ§ö‰∏™ÂùáË°°„ÄÇ Ëã•Êüê‰∫õÁé©ÂÆ∂ÁöÑË°åÂä®ÈõÜÈùûÂá∏ÔºàÂ¶ÇÊúâÈôêÈõÜÔºâÔºåÂëΩÈ¢ò‰∏çÈÄÇÁî®„ÄÇ ÁªÉ‰π†È¢òËß£Á≠î ÁªÉ‰π†È¢ò 1 Ë¶ÅÊ±ÇÔºöËØÅÊòéËßíË∞∑‰∏çÂä®ÁÇπÂÆöÁêÜÁöÑÂõõ‰∏™Êù°‰ª∂Âùá‰∏∫ÂøÖË¶Å„ÄÇ ÂàÜÊûêÔºöÈúÄÊûÑÈÄ†Âèç‰æãÔºåËØ¥ÊòéÁº∫Â∞ë‰ªª‰∏ÄÊù°‰ª∂Êó∂ÂÆöÁêÜÂèØËÉΩ‰∏çÊàêÁ´ã„ÄÇ Êù°‰ª∂ $(i)$Ôºö$X$ ÊòØÁ¥ßÈõÜ Âèç‰æãÔºöËÆæ $X = \\mathbb{R}$ÔºàÈùûÁ¥ßÔºâÔºåÂÆö‰πâ $f(x) = x + 1$„ÄÇÊòæÁÑ∂ $f$ Êó†Âõ∫ÂÆöÁÇπÔºå‰ΩÜÊª°Ë∂≥ÂÖ∂‰ªñÊù°‰ª∂„ÄÇ ÁªìËÆ∫ÔºöÁ¥ßÊÄß‰∏çÂèØÁº∫Â§±„ÄÇ Êù°‰ª∂ $(ii)$Ôºö$X$ ÊòØÂá∏ÈõÜ Âèç‰æãÔºöËÆæ $X = S^1$ÔºàÂçï‰ΩçÂúÜÂë®ÔºåÈùûÂá∏ÔºâÔºåÂÆö‰πâ $f(x)$ ‰∏∫Â∞Ü $x$ ÁªïÂéüÁÇπÊóãËΩ¨Âõ∫ÂÆöËßíÂ∫¶„ÄÇ$f$ Êó†Âõ∫ÂÆöÁÇπÔºå‰ΩÜÊª°Ë∂≥ÂÖ∂‰ªñÊù°‰ª∂„ÄÇ ÁªìËÆ∫ÔºöÂá∏ÊÄß‰∏çÂèØÁº∫Â§±„ÄÇ Êù°‰ª∂ $(iii)$Ôºö$f(x)$ ÊòØÂá∏ÈõÜ Âèç‰æãÔºöËÆæ $X = [0,1]$ÔºåÂÆö‰πâ $f(x) = {0,1}$ÔºàÈùûÂá∏ÂÄºÔºâ„ÄÇÊòæÁÑ∂ $f$ Êó†Âõ∫ÂÆöÁÇπÔºå‰ΩÜÊª°Ë∂≥ÂÖ∂‰ªñÊù°‰ª∂„ÄÇ ÁªìËÆ∫ÔºöÂá∏ÂÄºÊÄß‰∏çÂèØÁº∫Â§±„ÄÇ Êù°‰ª∂ $(iv)$Ôºö$f$ ÊúâÈó≠ÂõæÂÉè Âèç‰æãÔºöËÆæ $X = [0,1]$ÔºåÂÆö‰πâ f(x)={{1}if¬†x0.5,{0}if¬†x‚â•0.5. f(x) = \\begin{cases} \\{1\\} & \\text{if } x f(x)={{1}{0}‚Äãif¬†x0.5,if¬†x‚â•0.5.‚Äã ÂΩì $x_n \\to 0.5^-$ Êó∂ $y_n = 1 \\to 1 \\notin f(0.5) = {0}$ÔºåÈó≠ÂõæÂÉèÊù°‰ª∂‰∏çÊª°Ë∂≥„ÄÇÊ≠§Êó∂ $f$ Êó†Âõ∫ÂÆöÁÇπ„ÄÇ ÁªìËÆ∫ÔºöÈó≠ÂõæÂÉèÊù°‰ª∂‰∏çÂèØÁº∫Â§±„ÄÇ ÁªÉ‰π†È¢ò 2 Ë¶ÅÊ±ÇÔºöÂØπÁß∞ÂçöÂºà‰∏≠ËØÅÊòéÂ≠òÂú®ÂØπÁß∞Á∫≥‰ªÄÂùáË°°ÔºåÂπ∂ÊûÑÈÄ†ÊúâÈôêÂØπÁß∞ÂçöÂºà‰ªÖÊúâÈùûÂØπÁß∞ÂùáË°°ÁöÑ‰æãÂ≠ê„ÄÇ Ëß£Á≠îÔºö Â≠òÂú®ÂØπÁß∞ÂùáË°°ÁöÑËØÅÊòéÔºö ÂØπÁß∞ÂçöÂºàÂÆö‰πâÔºö$N = {1,2}$Ôºå$A_1 = A_2$Ôºå‰∏îÂÅèÂ•ΩÂÖ≥Á≥ªÊª°Ë∂≥ $(a_1, a_2) \\succsim_1 (b_1, b_2) \\iff (a_2, a_1) \\succsim_2 (b_2, b_1)$„ÄÇ ÊûÑÈÄ†Êò†Â∞ÑÔºöÂÆö‰πâÂØπÁß∞Á≠ñÁï•Á©∫Èó¥ $A_1 = A_2 = S$Ôºå‰ª§ $B: S \\times S \\to S \\times S$ ‰∏∫ÊúÄ‰Ω≥ÂìçÂ∫îÂáΩÊï∞„ÄÇÁî±ÂØπÁß∞ÊÄßÔºåËã• $(a_1^, a_2^)$ ÊòØÂùáË°°ÔºåÂàô $(a_2^, a_1^)$ ‰πüÊòØÂùáË°°„ÄÇ Â∫îÁî®ËßíË∞∑ÂÆöÁêÜÔºöËÄÉËôëÂØπÁß∞Á≠ñÁï•Â≠êÁ©∫Èó¥ $S_{\\text{sym}} = {(a, a) | a \\in S}$ÔºåÂú®Ê≠§Â≠êÁ©∫Èó¥‰∏äÂÆö‰πâ $f(a) = B_1(a) \\cap B_2(a)$„ÄÇÁî±ÂëΩÈ¢ò 20.3 Êù°‰ª∂Ôºå$f$ Â≠òÂú®Âõ∫ÂÆöÁÇπ $(a^, a^)$ÔºåÂç≥ÂØπÁß∞ÂùáË°°„ÄÇ ÊúâÈôêÂØπÁß∞ÂçöÂºà‰ªÖÊúâÈùûÂØπÁß∞ÂùáË°°ÁöÑ‰æãÂ≠êÔºö ÂçöÂºàÁü©ÈòµÔºö CDC(0,0)(2,1)D(1,2)(0,0) \\begin{array}{c|cc} & C & D \\\\ \\hline C & (0,0) & (2,1) \\\\ D & (1,2) & (0,0) \\\\ \\end{array} CD‚ÄãC(0,0)(1,2)‚ÄãD(2,1)(0,0)‚Äã‚Äã ÂØπÁß∞ÊÄßÔºö$A_1 = A_2 = {C, D}$Ôºå‰∏î $(C, D) \\succsim_1 (D, C) \\iff (D, C) \\succsim_2 (C, D)$„ÄÇ ÂùáË°°ÂàÜÊûêÔºö Á∫ØÁ≠ñÁï•ÂùáË°°Ôºö$(C, D)$ Âíå $(D, C)$ ÊòØ‰ªÖÊúâÁöÑÁ∫≥‰ªÄÂùáË°°ÔºåÂùá‰∏∫ÈùûÂØπÁß∞„ÄÇ ÂØπÁß∞Ê∑∑ÂêàÁ≠ñÁï•ÂùáË°°ÔºöËã•Â≠òÂú®ÔºåÈúÄÊª°Ë∂≥ $p = q$Ôºå‰ΩÜËÆ°ÁÆóÊòæÁ§∫Êó†Ëß£„ÄÇ ÁªìËÆ∫ÔºöËØ•ÂçöÂºàÊòØÊúâÈôêÂØπÁß∞ÁöÑÔºå‰ΩÜ‰ªÖÊúâÈùûÂØπÁß∞ÂùáË°°„ÄÇ 2.5 Strictly Competitive Games 21 We can say little about the set of Nash equilibria of an arbitrary strategic game; only in limited classes of games can we say something about the qualitative character of the equilibria. One such class of games is that in which there are two players, whose preferences are diametrically opposed. We assume for convenience in this section that the names of the players are ‚Äú1‚Äù and ‚Äú2‚Äù(i.e. $N={1,2})$. [DEFINITION 21.1] A strategic game $\\langle{1,2},(A_i),(\\succsim_i)\\rangle$ is strictly competitive if for any $a\\in A$ and $b\\in A$ we have $a\\succsim_1b$ if and only if $b\\succsim_2a$. A strictly competitive game is sometimes called zerosum because if player 1's preference relation $\\succsim_1$ is represented by the payoff function $u_1$ then player $2‚Äô$s preference relation is represented by $u_2$ with $u_1+u_2=0$. We say that player $i$ maxminimizes if he chooses an action that is best for him on the assumption that whatever he does, player $j$ will choose her action to hurt him as much as possible. We now show that for a strictly competitive game that possesses a Nash equilibrium, a pair of actions is a Nash equilibrium if and only if the action of each player is a maxminimizer. This result is striking because it provides a link between individual decision-making and the reasoning behind the notion of Nash equilibrium. In establishing the result we also prove the strong result that for strictly competitive games that possess Nash equilibria all equilibria yield the same payoffs. This property of Nash equilibria is rarely satisfied in games that are not strictly competitive. DEFINITION 21.2 Let $\\langle{1,2},(A_i),(u_i)\\rangle$ be a strictly competitive strategic game. The action $x^*\\in A_1$ is a maxminimizer for player 1 if min‚Å°y‚ààA2u1(x‚àó,y)‚â•min‚Å°y‚ààA2u1(x,y)¬†for¬†all¬†x‚ààA1. \\min_{y\\in A_2}u_1(x^*,y)\\geq\\min_{y\\in A_2}u_1(x,y)\\text{ for all }x\\in A_1. y‚ààA2‚Äãmin‚Äãu1‚Äã(x‚àó,y)‚â•y‚ààA2‚Äãmin‚Äãu1‚Äã(x,y)¬†for¬†all¬†x‚ààA1‚Äã. Similarly, the action $y^*\\in A_2$ is a maxminimizer for player 2 if min‚Å°x‚ààA1u2(x,y‚àó)‚â•min‚Å°x‚ààA1u2(x,y)¬†for¬†all¬†y‚ààA2. \\min_{x\\in A_1}u_2(x,y^*)\\geq\\min_{x\\in A_1}u_2(x,y)\\text{ for all }y\\in A_2. x‚ààA1‚Äãmin‚Äãu2‚Äã(x,y‚àó)‚â•x‚ààA1‚Äãmin‚Äãu2‚Äã(x,y)¬†for¬†all¬†y‚ààA2‚Äã. In words, a maxminimizer for player $i$ is an action that maximizes the payoff that player $i$ can $guarantee$. A maxminimizer for player 1 solves the problem $\\max_x\\min_yu_1(x,y)$ and a maxminimizer for player 2 solves the problem $\\max_y\\min_xu_2(x,y)$. In the sequel we assume for convenience that player 1's preference relation is represented by a payoff function $u_1$ and, without loss of generality, that $u_2=-u_1$. The following result shows that the maxminimization of player $2‚Äô$s payoff is equivalent to the minmaximization of player 1's payoff. [LEMMA 22.1] Let $\\langle { 1, 2} , ( A_i) , ( u_i) \\rangle$ be a strictly competitive strategic game. Then max‚Å°y‚ààA2min‚Å°x‚ààA1u2(x,y)=‚àímin‚Å°y‚ààA2max‚Å°x‚ààA1u1(x,y) \\max _{y\\in A_2}\\min _{x\\in A_1}u_2( x, y) = - \\min _{y\\in A_2}\\max _{x\\in A_1}u_1( x, y) y‚ààA2‚Äãmax‚Äãx‚ààA1‚Äãmin‚Äãu2‚Äã(x,y)=‚àíy‚ààA2‚Äãmin‚Äãx‚ààA1‚Äãmax‚Äãu1‚Äã(x,y) Further, $y \\in A2$ solves the problem $\\max {y\\in A2}$ $\\min {x\\in A1}$ $u_2( x, y)$ if and only if it solves the problem $\\min {y\\in A2}\\max {x\\in A_1}u_1( x, y) $. [Proof]. For any function $f$ we have min$z(-f(z))=-\\max_zf(z)$ and $\\arg \\min {z}( - f( z) )$ = $\\arg \\max {z}f( z) $. It follows that for every $y$ $\\in$ $A_2$ we have$-\\min_x\\in A_1u_2(x,y)=\\max{x\\in A1}(-u_2(x,y))=\\max{x\\in A1}u_1(x,y)$. $\\begin{array}{rcl}\\text{Hence }\\max{y\\in A2}\\min{x\\in A1}u_2(x,y)&=&-\\min{y\\in A2}[-\\min{x\\in A1}u_2(x,y)]\\end{array}=$ $-\\min{y\\in A2}\\max{x\\in A1}u_1(x,y);$ in addition $y\\in A_2$ is a solution of the $\\mathrm{problem~max}{y\\in A2}\\min{x\\in A1}u_2(x,y)$ if and only if it is a solution of the $\\mathop{\\text{problem }}\\operatorname*{min}{y\\in A2}\\operatorname*{max}{x\\in A_1}u_1(x,y)$. The following result gives the connection between the Nash equilibria of a strictly competitive game and the set of pairs of maxminimizers. [PROPOSITION 22.2] $Let G= \\langle { 1, 2} , ( A_i) , ( u_i) \\rangle be a strictly competitive$ strategic $game.$ If $( x^ , y^)$ is a Nash equilibrium of G then $x^$ is a maxminimizer for player 1 and $y$ is a maxminimizer for player 2. If $(x^,y^)$ is a Nash equilibrium of G then $max_x\\min_yu_1(x,y)=\\min_y\\max_xu_1(x,y)=u_1(x^,y^)$ and thus all Nash equilibria of G. yield the same payoff. If $\\max_x\\min_yu_1(x,y)=\\min_y\\max_xu_1(x,y)$ and thus, in particular, if $G$ has $a$ Nash equilibrium(see part b), $x^$ is a maxminimizer for player 1, and $y^{ }$ is a maxminimizer for player 2, then $( x^{ }, y^{ })$ is a Nash equilibrium of $G$. [Proof]. We frst prove parts (a) and (b). Let $(x^{},y^{})$ be a Nash equilibrium of $G.$ Then $u_2(x^,y^)\\geq u_2(x^,y)$ for all $y\\in A_2$ or, since $u_2= - u_1$, $u_1( x^ , y^ )$ $\\leq$ $u_1( x^ , y)$ for all $y\\in A_2.$ Hence $u_1( x^ , y^ )$ = $\\min _yu_1( x^ , y)$ $\\leq \\max _x\\min _yu_1( x, y) .$ Similarly, $u_1( x^ , y^ )$ $\\geq u_1( x, y^ )$ 2.6 Bayesian Games: Strategic Games with Imperfect Information 24 We frequently wish to model situations in which some of the parties are not certain of the characteristics of some of the other parties. The model of a Bayesian game, which is closely related to that of a strategic game, is designed for this purpose. As for a strategic game, two primitives of a Bayesian game are a set $N$ of players and a profile $(Ai)$ of sets of actions. We model the players' uncertainty about each other by introducing a set $\\Omega$ of possible ‚Äústates of nature‚Äù, each of which is a description of all the players relevant characteristics. For convenience we assume that $\\Omega$ is finite Each player $i$ has a prior belief about the state of nature given by a probability measure $p_i$ on $\\Omega.$ In any given play of the game some state of nature $\\omega\\in\\Omega$ is realized. We model the players' information about the state of nature by introducing a profile $(\\tau_i)$ of signal functions, $\\tau _i( \\omega )$ being the signal that player $i$ observes, before choosing his action, when the state of nature is $\\omega.$ Let $T_i$ be the set of all possible values of $\\tau_i;$we refer to $T_i$ as the set of types of player $i.$ We assume that $p_i(\\tau_i^{-1}(t_i))>0$ for all $t_i\\in T_i$ (player $i$ assigns positive prior probability to every member of$T_i).$ If player $i$ receives the signal $t_i\\in T_i$ then he deduces that the state is in the set $\\tau_i^{-1}(t_i);$ his posterior belief about the state that has been realized assigns to each state $\\omega\\in\\Omega$ the probability $p_i(\\omega)/p_i(\\tau_i^{-1}(t_i))$ if $\\omega\\in\\tau_i^{-1}(t_i)$ and the probability zero otherwise (i.e. the probability of $\\omega$ conditional on $\\tau_i^{-1}(t_i)).$ As an example, if $\\tau_i(\\omega)=\\omega$ for all $\\omega\\in\\Omega$ then player $i$ has full information about the state of nature. Alternatively, if $\\Omega=\\times{i\\in N}T_{i}$ and for each player $i$ the probability measure $p_i$ is a product measure on $\\Omega$ and $\\tau_i(\\omega)=\\omega_i$ then the players' signals are independent and player $i$ does not learn from his signal anything about the other players‚Äô information. As in a strategic game, each player cares about the action profile; in addition he may care about the state of nature. Now, even if he knows the action taken by every other player in every state of nature, a player may be uncertain about the pair $(a,\\omega)$ that will be realized given any action that he takes, since he has imperfect information about the state of nature. Therefore we include in the model a profile $(\\succsim_i)$ of preference relations over lotteries on $A\\times\\Omega$ (where, as before, $A=\\times_j\\in NA_j$). To summarize, we make the following definition. [DEFINITION 25.1] A Bayesian game consists of a finite set $N$ (the set of players) a finite set $\\Omega$ (the set of states) and for each player $i \\in N$ a set $A_i$ (the set of actions available to player $i$) a finite set $T_i$ (the set of signals that may be observed by player $i$) and a function $\\tau_i: \\Omega \\rightarrow T_i$ (the signal function) of player $i$) a probability measure $p_i$ on $\\Omega$ (the prior belief) of player $i$) for which $p_i(\\tau_i^{-1}(t_i)) > 0$ for all $t_i \\in T_i$ a preference relation $\\simi$ on the set of probability measures over $A \\times \\Omega$ (the preference relation) of player $i$), where $A = \\times{j \\in N} A_j$. Note that this defnition allows the players to have different prior beliefs. These beliefs may be related; commonly they are identical, coincident with an‚Äúobjective‚Äùmeasure. Frequently the model is used in situations in which a state of nature is a profile of parameters of the players' preferences (for example, profiles of their valuations of an object). However, the model is much more general; in Section 2.6.3 we consider its use to capture situations in which each player is uncertain about what the others know. Note also that sometimes a Bayesian game is described not in terms of an underlying state space $\\Omega$, but as a‚Äúreduced form\" in which the basic primitive that relates to the players' information is the profile of the sets of possible types. We now turn to a definition of equilibrium for a Bayesian game. In any given play of a game each player knows his type and does not need to plan what to do in the hypothetical event that he is of some other type. Consequently, one might think that an equilibrium should be defined for each state of nature in isolation. However, in any given state a player who wishes to determine his best action may need to hold a belief about what the other players would do in other states, since he may be imperfectly informed about the state. Further, the formation of such a belief may depend on the action that the player himself would choose in other states, since the other players may also be imperfectly informed. Thus we are led to define a Nash equilibrium of a Bayesian game $\\langle N,\\Omega$, $(Ai),(T_i),(\\tau_i),(p_i),(\\succsim_i)\\rangle$ to be a Nash equilibrium of the strategic game $G^$ in which for each $i\\in N$ and each possible signal $t_i\\in T_i$ there is a player, whom we refer to as $(i,t_i)$ (‚Äútype $t_i$ of player $i$‚Äù). The set of actions of each such player $(i,t_i)$ is $A_i;$ thus the set of action profiles in $G^$ is $\\times{j\\in N}(\\times{t_j\\in T_j}A_j).$ The preferences of each player $(i,t_i)$ are defined as follows. The posterior belief of player $i$,together with an action profile $a^$ $\\operatorname{in}G^$, generates a lottery $L_i(a^,t_i)$ over $A\\times\\Omega{:\\text{ the probability assigned}}$ by $L_i(a^,t_i)$ to $((a^*(j,\\tau_j(\\omega))){j\\in N},\\omega)$ is player $i$'s posterior belief that the state is $\\omega$ when he receives the signal $t_i$ $(a^(j,\\tau_j(\\omega))$ being the action of player $(j,\\tau_j(\\omega))$ in the profile $a^).$ Player $(i,t_i)$ in $G^$ prefers the action profile $a^$ to the action profile $b^$ if and only if player $i$ in the Bayesian game prefers the lottery $L_i(a^,t_i)$ to the lottery $L_i(b^*,t_i).$ To summarize, we have the following. [DEFINITION 26.1] A Nash equilibrium of a Bayesian game $\\langle N,$ $\\Omega, (A{i}), (T{i}), (\\tau{i}), (p{i}), (\\succsim_{i})\\rangle$ is a Nash equilibrium of the strategic game defined as follows. The set of players is the set of all pairs $(i,t{i})$ for $i \\in N$ and $t{i} \\in T_{i}$. The set of actions of each player $(i,t{i})$ is $A{i}$. The preference ordering $\\succsim^{*}{(i,t{i})}$ of each player $(i,t_{i})$ is defined by $a^{} \\succsim^{}{(i,t{i})} b^{}$ if and only if $L_{i}(a^{}, t{i}) \\succsim{i} L{i}(b^{*}, t{i})$, where $L{i}(a^{*}, t{i})$ is the lottery over $A \\times \\Omega$ that assigns probability $p{i}(\\omega)/p{i}(\\tau^{-1}{i}(t{i}))$ to $((a^{*}(j,\\tau{j}(\\omega))){j \\in N}, \\omega)$ if $\\omega \\in \\tau^{-1}{i}(t{i})$, zero otherwise. In brief, in a Nash equilibrium of a Bayesian game each player chooses the best action available to him given the signal that he receives and his belief about the state and the other players' actions that he deduces from this signal. Note that to determine whether an action profile is a Nash equilibrium of a Bayesian game we need to know only how each player in the Bayesian game compares lotteries over $A\\times\\Omega$ in which the distribution over $\\Omega$ is the same: a player never needs to compare lotteries in which this distribution is different. Thus from the point of view of Nash equilibrium the specification of the players' preferences in a Bayesian game contains more information than is necessary. (This redundancy) has an analog in a strategic game: to define a Nash equilibrium of a strategic game we need to know only how any player $i$ compares any outcome $(a-i,a_i)$ with any other outcome $(a-i,b_i)$. 1. Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑËÉåÊôØ ÁõÆÁöÑÔºöË¥ùÂè∂ÊñØÂçöÂºàÔºàBayesian GameÔºâÁî®‰∫éÂª∫Ê®°Êüê‰∫õÂèÇ‰∏é‰∫∫ÂØπÂÖ∂‰ªñÂèÇ‰∏é‰∫∫ÁâπÂæÅ‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂÜµ„ÄÇÂÆÉ‰∏éÊàòÁï•ÂçöÂºàÂØÜÂàáÁõ∏ÂÖ≥Ôºå‰ΩÜÂ¢ûÂä†‰∫ÜÂØπ‰ø°ÊÅØ‰∏çÂØπÁß∞ÁöÑÂ§ÑÁêÜ„ÄÇ Ê†∏ÂøÉË¶ÅÁ¥†Ôºö ÂèÇ‰∏é‰∫∫ÈõÜÂêà $N$ ÂíåË°åÂä®ÈõÜÂêà $(A_i)$Ôºõ Áä∂ÊÄÅÁ©∫Èó¥ $\\Omega$ÔºöÊèèËø∞ÊâÄÊúâÂèÇ‰∏é‰∫∫Áõ∏ÂÖ≥ÁâπÂæÅÁöÑÈõÜÂêàÔºõ ÂÖàÈ™å‰ø°Âøµ $p_i$ÔºöÂèÇ‰∏é‰∫∫ $i$ ÂØπÁä∂ÊÄÅÁ©∫Èó¥ $\\Omega$ ÁöÑÊ¶ÇÁéáÂàÜÂ∏ÉÔºõ ‰ø°Âè∑ÂáΩÊï∞ $\\tau_i$ÔºöÂèÇ‰∏é‰∫∫ $i$ Âú®Áä∂ÊÄÅ $\\omega$ ‰∏ãËßÇÂØüÂà∞ÁöÑ‰ø°Âè∑Ôºõ Á±ªÂûãÈõÜÂêà $T_i$ÔºöÂèÇ‰∏é‰∫∫ $i$ ÂèØËÉΩËßÇÂØüÂà∞ÁöÑ‰ø°Âè∑ÂÄºÈõÜÂêà„ÄÇ 2. Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÂÆö‰πâ [ÂÆö‰πâ 25.1] Ë¥ùÂè∂ÊñØÂçöÂºàÁî±‰ª•‰∏ãË¶ÅÁ¥†ÁªÑÊàêÔºö ÂèÇ‰∏é‰∫∫ÈõÜÂêàÔºöÊúâÈôêÁöÑÈõÜÂêà $N$Ôºõ Áä∂ÊÄÅÁ©∫Èó¥ÔºöÊúâÈôêÁöÑÈõÜÂêà $\\Omega$Ôºõ ÊØè‰∏™ÂèÇ‰∏é‰∫∫ $i \\in N$ ÁöÑË¶ÅÁ¥†Ôºö Ë°åÂä®ÈõÜÂêà $A_i$Ôºõ ‰ø°Âè∑ÈõÜÂêà $T_i$ Âíå‰ø°Âè∑ÂáΩÊï∞ $\\tau_i: \\Omega \\rightarrow T_i$Ôºõ ÂÖàÈ™å‰ø°Âøµ $p_i$ÔºöÊª°Ë∂≥ $p_i(\\tau_i^{-1}(t_i)) > 0$ ÂØπÊâÄÊúâ $t_i \\in T_i$Ôºõ ÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim_i$ÔºöÂÆö‰πâÂú® $A \\times \\Omega$ ‰∏äÁöÑÊ¶ÇÁéáÂàÜÂ∏ÉÁöÑÂÅèÂ•ΩÂÖ≥Á≥ª„ÄÇ Ê≥®ÊÑèÔºö ÂèÇ‰∏é‰∫∫ÂèØËÉΩÊúâ‰∏çÂêåÁöÑÂÖàÈ™å‰ø°ÂøµÔºåÈÄöÂ∏∏ÂÅáËÆæËøô‰∫õ‰ø°ÂøµÊòØÁõ∏ÂêåÁöÑÊàñÂü∫‰∫é‚ÄúÂÆ¢ËßÇ‚ÄùÊ¶ÇÁéá„ÄÇ Áä∂ÊÄÅÁ©∫Èó¥ $\\Omega$ ÂèØ‰ª•Ë°®Á§∫ÂèÇ‰∏é‰∫∫ÂÅèÂ•ΩÁöÑÂèÇÊï∞Ôºà‰æãÂ¶ÇÂØπÊüêÁâ©ÂìÅÁöÑ‰º∞ÂÄºÔºâÔºå‰ΩÜÊ®°ÂûãÊõ¥ÂÖ∑‰∏ÄËà¨ÊÄß„ÄÇ 3. Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÂùáË°° ÂùáË°°ÂÆö‰πâÔºöË¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÊòØÊàòÁï•ÂçöÂºà $G^*$ ÁöÑÁ∫≥‰ªÄÂùáË°°ÔºåÂÖ∂‰∏≠Ôºö ÂèÇ‰∏é‰∫∫ÔºöÊâÄÊúâ $(i, t_i)$ÔºàÂèÇ‰∏é‰∫∫ $i$ ÁöÑÁ±ªÂûã $t_i$ÔºâÔºõ Ë°åÂä®ÈõÜÂêàÔºöÊØè‰∏™ $(i, t_i)$ ÁöÑË°åÂä®ÈõÜÂêà‰∏∫ $A_i$Ôºõ ÂÅèÂ•ΩÂÖ≥Á≥ªÔºö$(i, t_i)$ ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ªÁî±ÂèÇ‰∏é‰∫∫ $i$ ÁöÑÂêéÈ™å‰ø°ÂøµÂíåË°åÂä®ÁªÑÂêàÁîüÊàêÁöÑÂΩ©Á•®ÂÜ≥ÂÆö„ÄÇ [ÂÆö‰πâ 26.1] Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÊòØÊàòÁï•ÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÔºåÂÖ∂‰∏≠Ôºö ÂèÇ‰∏é‰∫∫ÈõÜÂêàÔºöÊâÄÊúâ $(i, t_i)$Ôºà$i \\in N$Ôºå$t_i \\in T_i$ÔºâÔºõ Ë°åÂä®ÈõÜÂêàÔºöÊØè‰∏™ $(i, t_i)$ ÁöÑË°åÂä®ÈõÜÂêà‰∏∫ $A_i$Ôºõ ÂÅèÂ•ΩÂÖ≥Á≥ªÔºö$(i, t_i)$ ÁöÑÂÅèÂ•ΩÂÖ≥Á≥ªÂÆö‰πâ‰∏∫Ôºö a‚àó‚âø(i,ti)‚àób‚àó‚ÄÖ‚Ää‚ü∫‚ÄÖ‚ÄäLi(a‚àó,ti)‚âøiLi(b‚àó,ti), a^* \\succsim^*_{(i,t_i)} b^* \\iff L_i(a^*, t_i) \\succsim_i L_i(b^*, t_i), a‚àó‚âø(i,ti‚Äã)‚àó‚Äãb‚àó‚ü∫Li‚Äã(a‚àó,ti‚Äã)‚âøi‚ÄãLi‚Äã(b‚àó,ti‚Äã), ÂÖ∂‰∏≠ $L_i(a^*, t_i)$ ÊòØÁî±ÂêéÈ™å‰ø°ÂøµÂíåË°åÂä®ÁªÑÂêàÁîüÊàêÁöÑÂΩ©Á•®„ÄÇ Ê†∏ÂøÉÊÄùÊÉ≥Ôºö Âú®Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°‰∏≠ÔºåÊØè‰∏™ÂèÇ‰∏é‰∫∫Ê†πÊçÆÂÖ∂Êé•Êî∂Âà∞ÁöÑ‰ø°Âè∑ÂíåÁî±Ê≠§Êé®Êñ≠ÁöÑÁä∂ÊÄÅÂèäÂÖ∂‰ªñÂèÇ‰∏é‰∫∫Ë°åÂä®ÔºåÈÄâÊã©ÊúÄ‰ºòË°åÂä®„ÄÇ Á°ÆÂÆöÂùáË°°Êó∂ÔºåÂè™ÈúÄÁü•ÈÅìÂèÇ‰∏é‰∫∫Â¶Ç‰ΩïÊØîËæÉÂú®Áõ∏ÂêåÁä∂ÊÄÅÂàÜÂ∏É‰∏ãÁöÑÂΩ©Á•®„ÄÇ Ë¥ùÂè∂ÊñØÂçöÂºàÁî®‰∫éÂª∫Ê®°‰ø°ÊÅØ‰∏çÂØπÁß∞ÁöÑÊÉÖÂÜµÔºåÂÖ∂Ê†∏ÂøÉË¶ÅÁ¥†ÂåÖÊã¨ÂèÇ‰∏é‰∫∫ÈõÜÂêà„ÄÅÁä∂ÊÄÅÁ©∫Èó¥„ÄÅ‰ø°Âè∑ÂáΩÊï∞ÂíåÂÖàÈ™å‰ø°Âøµ„ÄÇË¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÊòØÊàòÁï•ÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÔºåÂÖ∂‰∏≠ÊØè‰∏™ÂèÇ‰∏é‰∫∫Ê†πÊçÆÂÖ∂Á±ªÂûãÔºà‰ø°Âè∑ÔºâÈÄâÊã©ÊúÄ‰ºòË°åÂä®„ÄÇÂùáË°°ÁöÑÂÆö‰πâ‰æùËµñ‰∫éÂèÇ‰∏é‰∫∫ÁöÑÂêéÈ™å‰ø°ÂøµÂíåË°åÂä®ÁªÑÂêàÁîüÊàêÁöÑÂΩ©Á•®„ÄÇËøô‰∏ÄÊ®°Âûã‰∏∫ÂàÜÊûê‰∏çÂÆåÂÖ®‰ø°ÊÅØ‰∏ãÁöÑÁ≠ñÁï•‰∫íÂä®Êèê‰æõ‰∫ÜÈáçË¶ÅÂ∑•ÂÖ∑„ÄÇ ÁÆÄËÄåË®Ä‰πãÔºåÂú®Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°‰∏≠ÔºåÊØè‰∏™ÂèÇ‰∏é‰∫∫‰ºöÊ†πÊçÆÂÖ∂Êé•Êî∂Âà∞ÁöÑ‰ø°Âè∑‰ª•Âèä‰ªéËØ•‰ø°Âè∑‰∏≠Êé®Êñ≠Âá∫ÁöÑÁä∂ÊÄÅÂíåÂÖ∂‰ªñÂèÇ‰∏é‰∫∫ÁöÑË°åÂä®ÔºåÈÄâÊã©ÂØπËá™Â∑±ÊúÄÊúâÂà©ÁöÑË°åÂä®„ÄÇÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÂà§Êñ≠‰∏Ä‰∏™Ë°åÂä®ÁªÑÂêàÊòØÂê¶ÊòØË¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÔºåÊàë‰ª¨Âè™ÈúÄÁü•ÈÅìÊØè‰∏™ÂèÇ‰∏é‰∫∫Â¶Ç‰ΩïÊØîËæÉÂú® $\\Omega$ ‰∏äÂàÜÂ∏ÉÁõ∏ÂêåÁöÑ $A \\times \\Omega$ ‰∏äÁöÑÂΩ©Á•®ÔºöÂèÇ‰∏é‰∫∫Êó†ÈúÄÊØîËæÉÂú® $\\Omega$ ‰∏äÂàÜÂ∏É‰∏çÂêåÁöÑÂΩ©Á•®„ÄÇÂõ†Ê≠§Ôºå‰ªéÁ∫≥‰ªÄÂùáË°°ÁöÑËßíÂ∫¶Êù•ÁúãÔºåË¥ùÂè∂ÊñØÂçöÂºà‰∏≠ÂØπÂèÇ‰∏é‰∫∫ÂÅèÂ•ΩÁöÑÊèèËø∞ÂåÖÂê´‰∫Ü‰∏Ä‰∫õ‰∏çÂøÖË¶ÅÁöÑ‰ø°ÊÅØ„ÄÇÔºàËøôÁßçÂÜó‰ΩôÊÄßÔºâÂú®ÊàòÁï•ÂçöÂºà‰∏≠‰πüÊúâÁ±ª‰ººÁöÑÊÉÖÂÜµÔºöÂÆö‰πâÊàòÁï•ÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°Êó∂ÔºåÊàë‰ª¨Âè™ÈúÄÁü•ÈÅì‰ªª‰ΩïÂèÇ‰∏é‰∫∫ $i$ Â¶Ç‰ΩïÊØîËæÉÁªìÊûú $(a{-i}, a_i)$ ‰∏éÁªìÊûú $(a{-i}, b_i)$„ÄÇ Ë°•ÂÖÖËØ¥Êòé Ê†∏ÂøÉÊÄùÊÉ≥ÔºöË¥ùÂè∂ÊñØÂçöÂºàÁöÑÁ∫≥‰ªÄÂùáË°°ÂÖ≥Ê≥®ÁöÑÊòØÂèÇ‰∏é‰∫∫Âú®ÁªôÂÆö‰ø°Âè∑Âíå‰ø°Âøµ‰∏ãÁöÑÊúÄ‰ºòË°åÂä®ÈÄâÊã©ÔºåËÄå‰∏çÈúÄË¶ÅÊØîËæÉ‰∏çÂêåÁä∂ÊÄÅÂàÜÂ∏É‰∏ãÁöÑÂΩ©Á•®„ÄÇ ÂÜó‰ΩôÊÄßÔºöË¥ùÂè∂ÊñØÂçöÂºà‰∏≠ÂØπÂÅèÂ•ΩÁöÑÊèèËø∞ÂèØËÉΩÂåÖÂê´Ë∂ÖÂá∫Á∫≥‰ªÄÂùáË°°ÈúÄÊ±ÇÁöÑ‰ø°ÊÅØÔºåËøô‰∏éÊàòÁï•ÂçöÂºà‰∏≠‰ªÖÈúÄÊØîËæÉÈÉ®ÂàÜÁªìÊûúÁöÑÊÉÖÂÜµÁ±ª‰ºº„ÄÇ Comments on the Model of a Bayesian Game The idea that a situation in which the players are unsure about each other‚Äôs characteristics can be modeled as a Bayesian game, in which the players‚Äô uncertainty is captured by a probability measure over some set of ‚Äústates‚Äù, is due to Harsanyi (1967/68). Harsanyi assumes that the prior belief of every player is the same, arguing that all differences in the players‚Äô knowledge should be derived from an objective mechanism that assigns information to each player, not from differences in the players' initial beliefs. In Section 5.3 we show that the assumption of a common prior belief has strong implications for the relationship between the players‚Äô posterior beliefs. (For example, after a pair of players receive their signals it cannot be ‚Äúcommon knowledge‚Äù between them that player 1 believes the probability that the state of nature is in some given set to be $\\alpha$ and that player 2 believes this probability to be $\\beta\\neq\\alpha$, though it $is$ possible that player 1 believes the probability to be $\\alpha$, player 2 believes it to be $\\beta$, and one of them is unsure about the other's belief.) A Bayesian game can be used to model not only situations in which each player is uncertain about the other players' payoffs, as in Example 27.1,but also situations in which each player is uncertain about the other players' $knowledge.$ Consider, for example, a Bayesian game in which the set of players is $N={1,2}$, the set of states is $\\Omega={\\omega1,\\omega_2,\\omega_3}$, the prior belief of each player assigns probability $\\frac13$ to each state, the signal functions are defined by $\\tau_1(\\omega_1)=\\tau_1(\\omega_2)=t_1^{\\prime},\\tau_1(\\omega_3)=t_1^{\\prime\\prime}$, and $\\tau_2(\\omega_1)=t_2^{\\prime}$, $\\tau_2(\\omega_2)=\\tau_2(\\omega_3)=t_2^{\\prime\\prime}$, and player 1's preferences satisfy $(b,\\omega_j)\\succ_1(c,\\omega_j)$ for $j=1,2$ and $(c,\\omega_3)\\succ_1(b,\\omega_3)$ for some action profiles $b$ and $c$,while player 2 is indifferent between all pairs $(a,\\omega).$ In state $\\omega_1$ in such a game player 2 knows that player 1 prefers $b$ to $c$,while in state $\\omega_2$ he does not know whether player 1 prefers $b$ to $c$ or $c$ to $b.$ Since in state $\\omega_1$ player 1 does not know whether the state is $\\omega_1$ or $\\omega_2$,she does not know in this case whether $(i)$ player 2 knows that she prefers $b$ to $c$,or $(ii)$ player 2 is not sure whether she prefers $b$ to $c$ or $c$ to $b.$ Can every situation in which the players are uncertain about each other's knowledge be modeled as a Bayesian game? Assume that the players' payoffs depend only on a parameter $\\theta\\in\\Theta.$ Denote the set of possible beliefs of each player $i$ by $X_i.$ Then a belief of any player $j$ is a probability distribution over $\\Theta\\times X-j.$ That is, the set of beliefs of any player has to be defined in terms of the sets of beliefs of all the other players. Thus the answer to the question we posed is not trivial and is equivalent to the question of whether we can find a collection ${Xj}{j\\in N}$ of sets with the property that for all $i\\in N$ the set $Xi$ is isomorphic to the set of probability distributions over $\\Theta\\times X-i.$ If so, we can let $\\Omega=\\Theta\\times(\\times_{i\\in N}X_i)$ be the state space and use the model of a Bayesian game to capture any situation in which players are uncertain not only about each other's payoffs but also about each other's beliefs. A positive answer is given to the question by Mertens and Zamir (1985); we omit the argument. ÁøªËØë ÂÖ≥‰∫éË¥ùÂè∂ÊñØÂçöÂºàÊ®°ÂûãÁöÑËØÑËÆ∫ Â∞ÜÁé©ÂÆ∂ÂØπÂΩºÊ≠§ÁâπÂæÅ‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂ¢ÉÂª∫Ê®°‰∏∫Ë¥ùÂè∂ÊñØÂçöÂºàÁöÑÊÉ≥Ê≥ïÊ∫ê‰∫é HarsanyiÔºà1967/68Ôºâ„ÄÇÂú®ËøôÁßçÊ®°Âûã‰∏≠ÔºåÁé©ÂÆ∂ÁöÑ‰∏çÁ°ÆÂÆöÊÄßÈÄöËøáÊüê‰∏™‚ÄúÁä∂ÊÄÅ‚ÄùÈõÜÂêà‰∏äÁöÑÊ¶ÇÁéáÊµãÂ∫¶Êù•ÂàªÁîª„ÄÇHarsanyi ÂÅáËÆæÊâÄÊúâÁé©ÂÆ∂ÁöÑÂÖàÈ™å‰ø°ÂøµÊòØÁõ∏ÂêåÁöÑÔºåÂπ∂ËÆ§‰∏∫Áé©ÂÆ∂‰πãÈó¥Áü•ËØÜÁöÑÂ∑ÆÂºÇÂ∫îÊ∫ê‰∫éÊüêÁßçÂÆ¢ËßÇÊú∫Âà∂ÂàÜÈÖç‰ø°ÊÅØÁªôÊØè‰∏™Áé©ÂÆ∂ÔºåËÄå‰∏çÊòØÊ∫ê‰∫éÁé©ÂÆ∂ÂàùÂßã‰ø°ÂøµÁöÑÂ∑ÆÂºÇ„ÄÇÂú®Á¨¨ 5.3 ËäÇ‰∏≠ÔºåÊàë‰ª¨Â∞ÜÂ±ïÁ§∫ÂÖ±ÂêåÂÖàÈ™å‰ø°ÂøµÂÅáËÆæÂØπÁé©ÂÆ∂ÂêéÈ™å‰ø°Âøµ‰πãÈó¥ÂÖ≥Á≥ªÁöÑÂº∫Á∫¶ÊùüÊÄß„ÄÇÔºà‰æãÂ¶ÇÔºåÂΩì‰∏ÄÂØπÁé©ÂÆ∂Êé•Êî∂Âà∞‰ªñ‰ª¨ÁöÑ‰ø°Âè∑ÂêéÔºåÁé©ÂÆ∂ 1 ËÆ§‰∏∫Ëá™ÁÑ∂Áä∂ÊÄÅÂ±û‰∫éÊüê‰∏™ÁªôÂÆöÈõÜÂêàÁöÑÊ¶ÇÁéá‰∏∫$\\alpha$ÔºåËÄåÁé©ÂÆ∂ 2 ËÆ§‰∏∫ËØ•Ê¶ÇÁéá‰∏∫$\\beta\\neq\\alpha$ÔºåËøôÁßçÊÉÖÂÜµ‰∏çËÉΩÊàê‰∏∫‰ªñ‰ª¨‰πãÈó¥ÁöÑ‚ÄúÂÖ±ÂêåÁü•ËØÜ‚Äù„ÄÇ‰∏çËøáÔºåÁé©ÂÆ∂ 1 ËÆ§‰∏∫Ê¶ÇÁéá‰∏∫$\\alpha$ÔºåÁé©ÂÆ∂ 2 ËÆ§‰∏∫Ê¶ÇÁéá‰∏∫$\\beta$Ôºå‰∏îÂÖ∂‰∏≠‰∏ÄÊñπ‰∏çÁ°ÆÂÆöÂè¶‰∏ÄÊñπÁöÑ‰ø°ÂøµÔºåËøôÁßçÊÉÖÂÜµÊòØÂèØËÉΩÁöÑ„ÄÇÔºâ Ë¥ùÂè∂ÊñØÂçöÂºà‰∏ç‰ªÖÂèØ‰ª•Áî®‰∫éÂª∫Ê®°ÊØè‰∏™Áé©ÂÆ∂ÂØπÂÖ∂‰ªñÁé©ÂÆ∂Êî∂Áõä‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂ¢ÉÔºàÂ¶Ç‰æã 27.1ÔºâÔºåËøòÂèØ‰ª•Áî®‰∫éÂª∫Ê®°ÊØè‰∏™Áé©ÂÆ∂ÂØπÂÖ∂‰ªñÁé©ÂÆ∂Áü•ËØÜ‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂ¢É„ÄÇ ‰æãÂ¶ÇÔºåËÄÉËôë‰∏Ä‰∏™Ë¥ùÂè∂ÊñØÂçöÂºàÔºåÂÖ∂‰∏≠Áé©ÂÆ∂ÈõÜÂêà‰∏∫$N={1,2}$ÔºåÁä∂ÊÄÅÈõÜÂêà‰∏∫$\\Omega={\\omega_1,\\omega_2,\\omega_3}$ÔºåÊØè‰∏™Áé©ÂÆ∂ÁöÑÂÖàÈ™å‰ø°Âøµ‰∏∫ÊØè‰∏™Áä∂ÊÄÅÂàÜÈÖçÊ¶ÇÁéá$\\frac13$Ôºå‰ø°Âè∑ÂáΩÊï∞ÂÆö‰πâ‰∏∫$\\tau_1(\\omega_1)=\\tau_1(\\omega_2)=t_1^{\\prime}$Ôºå$\\tau_1(\\omega_3)=t_1^{\\prime\\prime}$Ôºå‰ª•Âèä$\\tau_2(\\omega_1)=t_2^{\\prime}$Ôºå$\\tau_2(\\omega_2)=\\tau_2(\\omega_3)=t_2^{\\prime\\prime}$„ÄÇÁé©ÂÆ∂ 1 ÁöÑÂÅèÂ•ΩÊª°Ë∂≥ÂØπÊüê‰∫õË°åÂä®ÁªÑÂêà$b$Âíå$c$Ôºå$(b,\\omega_j)\\succ_1(c,\\omega_j)$Ôºà$j=1,2$Ôºâ‰∏î$(c,\\omega_3)\\succ_1(b,\\omega_3)$ÔºåËÄåÁé©ÂÆ∂ 2 ÂØπÊâÄÊúâ$(a,\\omega)$Êó†Â∑ÆÂºÇ„ÄÇÂú®ËøôÁßçÂçöÂºàÁöÑÁä∂ÊÄÅ$\\omega_1$‰∏≠ÔºåÁé©ÂÆ∂ 2 Áü•ÈÅìÁé©ÂÆ∂ 1 ÂÅèÂ•Ω$b$ËÉúËøá$c$ÔºõËÄåÂú®Áä∂ÊÄÅ$\\omega_2$‰∏≠ÔºåÁé©ÂÆ∂ 2 ‰∏çÁü•ÈÅìÁé©ÂÆ∂ 1 ÊòØÂÅèÂ•Ω$b$ËÉúËøá$c$ËøòÊòØÁõ∏Âèç„ÄÇÁî±‰∫éÂú®Áä∂ÊÄÅ$\\omega_1$‰∏≠ÔºåÁé©ÂÆ∂ 1 ‰∏çÁü•ÈÅìÁä∂ÊÄÅÊòØ$\\omega_1$ËøòÊòØ$\\omega_2$ÔºåÂõ†Ê≠§Â•πÂú®ËøôÁßçÊÉÖÂÜµ‰∏ã‰∏çÁü•ÈÅìÔºö$(i)$ Áé©ÂÆ∂ 2 ÊòØÂê¶Áü•ÈÅìÂ•πÂÅèÂ•Ω$b$ËÉúËøá$c$ÔºåÊàñËÄÖ$(ii)$ Áé©ÂÆ∂ 2 ÊòØÂê¶‰∏çÁ°ÆÂÆöÂ•πÂÅèÂ•Ω$b$ËÉúËøá$c$ËøòÊòØÁõ∏Âèç„ÄÇ ÊòØÂê¶ÊâÄÊúâÁé©ÂÆ∂ÂØπÂΩºÊ≠§Áü•ËØÜ‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂ¢ÉÈÉΩÂèØ‰ª•Âª∫Ê®°‰∏∫Ë¥ùÂè∂ÊñØÂçöÂºàÔºüÂÅáËÆæÁé©ÂÆ∂ÁöÑÊî∂Áõä‰ªÖ‰æùËµñ‰∫éÊüê‰∏™ÂèÇÊï∞$\\theta\\in\\Theta$„ÄÇÁî®$Xi$Ë°®Á§∫ÊØè‰∏™Áé©ÂÆ∂$i$ÁöÑÂèØËÉΩ‰ø°ÂøµÈõÜÂêà„ÄÇÈÇ£‰πàÔºå‰ªª‰ΩïÁé©ÂÆ∂$j$ÁöÑ‰ø°ÂøµÊòØ$\\Theta\\times X{-j}$‰∏äÁöÑÊ¶ÇÁéáÂàÜÂ∏É„ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºå‰ªª‰ΩïÁé©ÂÆ∂ÁöÑ‰ø°ÂøµÈõÜÂêàÂøÖÈ°ªÊ†πÊçÆÊâÄÊúâÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑ‰ø°ÂøµÈõÜÂêàÊù•ÂÆö‰πâ„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÊèêÂá∫ÁöÑÈóÆÈ¢òÁöÑÁ≠îÊ°àÂπ∂‰∏çÁÆÄÂçïÔºåÂÆÉÁ≠â‰ª∑‰∫éÊòØÂê¶ËÉΩÊâæÂà∞‰∏ÄÁªÑÈõÜÂêà${Xj}{j\\in N}$Ôºå‰ΩøÂæóÂØπ‰∫éÊâÄÊúâ$i\\in N$Ôºå$Xi$‰∏é$\\Theta\\times X{-i}$‰∏äÁöÑÊ¶ÇÁéáÂàÜÂ∏ÉÈõÜÂêàÂêåÊûÑ„ÄÇÂ¶ÇÊûúÂèØ‰ª•ÔºåÊàë‰ª¨ÂèØ‰ª•‰ª§$\\Omega=\\Theta\\times(\\times_{i\\in N}X_i)$‰∏∫Áä∂ÊÄÅÁ©∫Èó¥ÔºåÂπ∂‰ΩøÁî®Ë¥ùÂè∂ÊñØÂçöÂºàÊ®°ÂûãÊù•ÂàªÁîªÁé©ÂÆ∂‰∏ç‰ªÖÂØπÂÖ∂‰ªñÁé©ÂÆ∂Êî∂Áõä‰∏çÁ°ÆÂÆöÔºåËøòÂØπÂÖ∂‰ø°Âøµ‰∏çÁ°ÆÂÆöÁöÑ‰ªª‰ΩïÊÉÖÂ¢É„ÄÇMertens Âíå ZamirÔºà1985ÔºâÁªôÂá∫‰∫ÜËÇØÂÆöÁöÑÁ≠îÊ°àÔºõÊàë‰ª¨Âú®Ê≠§ÁúÅÁï•ÂÖ∂ËÆ∫ËØÅ„ÄÇ Ë°•ÂÖÖËØ¥Êòé Ê†∏ÂøÉÊÄùÊÉ≥ÔºöË¥ùÂè∂ÊñØÂçöÂºàÊ®°ÂûãÈÄöËøáÁä∂ÊÄÅÁ©∫Èó¥ÂíåÊ¶ÇÁéáÊµãÂ∫¶ÂàªÁîªÁé©ÂÆ∂‰πãÈó¥ÁöÑ‰∏çÁ°ÆÂÆöÊÄßÔºåÈÄÇÁî®‰∫éÁé©ÂÆ∂ÂØπÂΩºÊ≠§Êî∂ÁõäÊàñÁü•ËØÜ‰∏çÁ°ÆÂÆöÁöÑÊÉÖÂ¢É„ÄÇ ÂÖ±ÂêåÂÖàÈ™å‰ø°ÂøµÔºöHarsanyi ÁöÑÂÅáËÆæÁÆÄÂåñ‰∫ÜÊ®°ÂûãÔºå‰ΩÜÂØπÁé©ÂÆ∂ÂêéÈ™å‰ø°ÂøµÁöÑÂÖ≥Á≥ªÊúâÂº∫Á∫¶Êùü„ÄÇ Áü•ËØÜ‰∏çÁ°ÆÂÆöÊÄßÔºöË¥ùÂè∂ÊñØÂçöÂºàÂèØ‰ª•Ëøõ‰∏ÄÊ≠•Êâ©Â±ïÔºåÁî®‰∫éÂª∫Ê®°Áé©ÂÆ∂ÂØπÂÖ∂‰ªñÁé©ÂÆ∂‰ø°ÂøµÁöÑ‰∏çÁ°ÆÂÆöÊÄßÔºå‰ΩÜËøôÈúÄË¶ÅÂ§çÊùÇÁöÑÊï∞Â≠¶ÊûÑÈÄ†„ÄÇ 3 Mixed, Correlated, and Evolutionary Equilibrium 31 3.1 Mixed Strategy Nash Equilibrium 31 3.2 Interpretations of Mixed Strategy Nash Equilibrium 37 3.3 Correlated Equilibrium 44 3.4 Evolutionary Equilibrium 48 Notes 51 4 Rationalizability and Iterated Elimination of Dominated Actions 53 4.1 Rationalizability 53 4.2 Iterated Elimination of Strictly Dominated Actions 58 4.3 Iterated Elimination of Weakly Dominated Actions 62 Notes 64 5 Knowledge and Equilibrium 67 5.1 A Model of Knowledge 67 5.2 Common Knowledge 73 5.3 Can People Agree to Disagree? 75 5.4 Knowledge and Solution Concepts 76 5.5 The Electronic Mail Game 81 Notes 84 IV Coalitional Games 9 The primitives of the models we study in Parts I, II, and III (often referred to as‚Äúnoncooperative‚Äù games) are the players' sets of possible actions and their preferences over the possible outcomes, where an outcome is a profile of actions; each action is taken by a single playen autonomously. In this part we study the model of a coalitional game. One primitive of this model is the collection of sets of joint actions that each group of players (coalition) can take independently of the remaining players. An outcome of a coalitional game is a specification of the coalition that forms and the joint action it takes. (More general models, in which many coalitions may form simultaneously, are discussed in the literature.) The other primitive of the model of a coalitional game is the profile of the players' preferences over the set of all possible outcomes. Thus although actions are taken by coalitions, the theory is based (as are the theories in the other parts of the book) on the individuals preferences. A solution concept for coalitional games assigns to each game a set of outcomes. As before, each solution concept we study captures the consequences of a natural line of reasoning for the participants in a game; it defines a set of arrangements that are stable in some sense. In general the stability requirement is that the outcome be immune to deviations of a certain sort by groups of players; by contrast, most (though not all) solutions for noncooperative games require immunity to deviations by individual players. Many variants of the solution concepts we study are analyzed in the literature; we consider a sample designed to illustrate the main ideas. A coalitional model is distinguished from a noncooperative model primarily by its focus on what groups of players can achieve rather than on what individual players can do and by the fact that it does not consider the details of how groups of players function internally. If we wish to model the possibility of coalition formation in a noncooperative game then we must specify how coalitions form and how their members choose joint actions. These details are absent from a coalitional game, so that the outcome of such a game does not depend on them. To illustrate the differences between the two modeling approaches, consider the following situation. Each of a group of individuals owns a bundle of inputs and has access to a technology for producing a valuable single output. Each individual's inputs are unproductive in his own technology but productive in some other individual's technology. A noncooperative model of this situation specifies precisely the set of actions that is available to each individual: perhaps each individual can announce a price vector at which he is willing to trade inputs, or perhaps he can propose a distribution of inputs for the whole of the society. A coalitional model, by contrast, starts from the sets of payoff vectors that each group of individuals can jointly achieve. A coalition may use contracts, threats, or promises to achieve a high level of production; these institutions are not modeled explicitly in a coalitional game. We do not view either of the two approaches as superior or more basic. Each of them reflects different kinds of strategic considerations and contributes to our understanding of strategic reasoning. The study of the interconnections between noncooperative and cooperative models can also be illuminating. Âú®Á¨¨‰∏Ä„ÄÅ‰∫å„ÄÅ‰∏âÈÉ®ÂàÜ‰∏≠ÔºåÊàë‰ª¨Á†îÁ©∂ÁöÑÊ®°ÂûãÔºàÈÄöÂ∏∏Áß∞‰∏∫‚ÄúÈùûÂêà‰Ωú‚ÄùÂçöÂºàÔºâÁöÑÂü∫Êú¨Ë¶ÅÁ¥†ÊòØÁé©ÂÆ∂ÁöÑÂèØËÉΩË°åÂä®ÈõÜÂèäÂÖ∂ÂØπÂèØËÉΩÁªìÊûúÁöÑÂÅèÂ•ΩÔºåÂÖ∂‰∏≠ÁªìÊûúÊòØË°åÂä®ÁöÑÂâñÈù¢ÔºõÊØè‰∏™Ë°åÂä®Áî±Âçï‰∏™Áé©ÂÆ∂Ëá™‰∏ªÈááÂèñ„ÄÇÂú®Ëøô‰∏ÄÈÉ®ÂàÜÔºåÊàë‰ª¨Â∞ÜÁ†îÁ©∂ËÅîÁõüÂçöÂºàÁöÑÊ®°Âûã„ÄÇËØ•Ê®°ÂûãÁöÑ‰∏Ä‰∏™Âü∫Êú¨Ë¶ÅÁ¥†ÊòØÊØè‰∏™Áé©ÂÆ∂Áæ§‰ΩìÔºàËÅîÁõüÔºâÂèØ‰ª•Áã¨Á´ã‰∫éÂÖ∂‰ªñÁé©ÂÆ∂ÈááÂèñÁöÑÂÖ±ÂêåË°åÂä®ÈõÜ„ÄÇËÅîÁõüÂçöÂºàÁöÑÁªìÊûúÊòØÂΩ¢ÊàêÁöÑËÅîÁõüÂèäÂÖ∂ÈááÂèñÁöÑÂÖ±ÂêåË°åÂä®ÁöÑËØ¥Êòé„ÄÇÔºàÊõ¥‰∏ÄËà¨ÁöÑÊ®°ÂûãÔºåÂÖ∂‰∏≠Â§ö‰∏™ËÅîÁõüÂèØËÉΩÂêåÊó∂ÂΩ¢ÊàêÔºåÂú®ÊñáÁåÆ‰∏≠ÊúâËÆ®ËÆ∫„ÄÇÔºâËÅîÁõüÂçöÂºàÊ®°ÂûãÁöÑÂè¶‰∏Ä‰∏™Âü∫Êú¨Ë¶ÅÁ¥†ÊòØÁé©ÂÆ∂ÂØπÊâÄÊúâÂèØËÉΩÁªìÊûúÈõÜÁöÑÂÅèÂ•ΩÂâñÈù¢„ÄÇÂõ†Ê≠§ÔºåÂ∞ΩÁÆ°Ë°åÂä®ÊòØÁî±ËÅîÁõüÈááÂèñÁöÑÔºå‰ΩÜËØ•ÁêÜËÆ∫ÔºàÂ¶Ç‰π¶‰∏≠ÂÖ∂‰ªñÈÉ®ÂàÜÁöÑÁêÜËÆ∫‰∏ÄÊ†∑ÔºâÂü∫‰∫é‰∏™‰∫∫ÁöÑÂÅèÂ•Ω„ÄÇ ËÅîÁõüÂçöÂºàÁöÑËß£Ê¶ÇÂøµ‰∏∫ÊØè‰∏™ÂçöÂºàÂàÜÈÖç‰∏ÄÁªÑÁªìÊûú„ÄÇ‰∏é‰πãÂâç‰∏ÄÊ†∑ÔºåÊàë‰ª¨Á†îÁ©∂ÁöÑÊØè‰∏™Ëß£Ê¶ÇÂøµÈÉΩÊçïÊçâ‰∫ÜÂçöÂºàÂèÇ‰∏éËÄÖËá™ÁÑ∂Êé®ÁêÜÁöÑÂêéÊûúÔºõÂÆÉÂÆö‰πâ‰∫Ü‰∏ÄÁªÑÂú®ÊüêÁßçÊÑè‰πâ‰∏äÊòØÁ®≥ÂÆöÁöÑÂÆâÊéí„ÄÇ‰∏ÄËà¨Êù•ËØ¥ÔºåÁ®≥ÂÆöÊÄßË¶ÅÊ±ÇÊòØÁªìÊûúÂØπÊüêÁßçÁ±ªÂûãÁöÑÁé©ÂÆ∂Áæ§‰ΩìÂÅèÁ¶ªÂÖ∑ÊúâÂÖçÁñ´ÂäõÔºõÁõ∏ÊØî‰πã‰∏ãÔºåÂ§ßÂ§öÊï∞ÔºàÂ∞ΩÁÆ°‰∏çÊòØÂÖ®ÈÉ®ÔºâÈùûÂêà‰ΩúÂçöÂºàÁöÑËß£Ë¶ÅÊ±ÇÂØπÂçï‰∏™Áé©ÂÆ∂ÁöÑÂÅèÁ¶ªÂÖ∑ÊúâÂÖçÁñ´Âäõ„ÄÇÊñáÁåÆ‰∏≠ÂàÜÊûê‰∫ÜÊàë‰ª¨Á†îÁ©∂ÁöÑËß£Ê¶ÇÂøµÁöÑËÆ∏Â§öÂèò‰ΩìÔºõÊàë‰ª¨ËÄÉËôë‰∫Ü‰∏Ä‰∫õÊó®Âú®ËØ¥Êòé‰∏ªË¶ÅÊÄùÊÉ≥ÁöÑÊ†∑Êú¨„ÄÇ ËÅîÁõüÊ®°Âûã‰∏éÈùûÂêà‰ΩúÊ®°ÂûãÁöÑ‰∏ªË¶ÅÂå∫Âà´Âú®‰∫éÔºåÂÆÉÂÖ≥Ê≥®ÁöÑÊòØÁé©ÂÆ∂Áæ§‰ΩìÂèØ‰ª•ÂÆûÁé∞ÁöÑÁõÆÊ†áÔºåËÄå‰∏çÊòØÂçï‰∏™Áé©ÂÆ∂ÂèØ‰ª•ÂÅö‰ªÄ‰πàÔºåÂπ∂‰∏îÂÆÉ‰∏çËÄÉËôëÁé©ÂÆ∂Áæ§‰ΩìÂÜÖÈÉ®Â¶Ç‰ΩïËøê‰ΩúÁöÑÁªÜËäÇ„ÄÇÂ¶ÇÊûúÊàë‰ª¨Â∏åÊúõÂú®ÈùûÂêà‰ΩúÂçöÂºà‰∏≠Âª∫Ê®°ËÅîÁõüÂΩ¢ÊàêÁöÑÂèØËÉΩÊÄßÔºåÈÇ£‰πàÊàë‰ª¨ÂøÖÈ°ªÊåáÂÆöËÅîÁõüÂ¶Ç‰ΩïÂΩ¢Êàê‰ª•ÂèäÂÖ∂ÊàêÂëòÂ¶Ç‰ΩïÈÄâÊã©ÂÖ±ÂêåË°åÂä®„ÄÇËøô‰∫õÁªÜËäÇÂú®ËÅîÁõüÂçöÂºà‰∏≠ÊòØ‰∏çÂ≠òÂú®ÁöÑÔºåÂõ†Ê≠§ËøôÁßçÂçöÂºàÁöÑÁªìÊûú‰∏ç‰æùËµñ‰∫éÂÆÉ‰ª¨„ÄÇ ‰∏∫‰∫ÜËØ¥ÊòéËøô‰∏§ÁßçÂª∫Ê®°ÊñπÊ≥ïÁöÑÂå∫Âà´ÔºåËÄÉËôë‰ª•‰∏ãÊÉÖÂÜµ„ÄÇ‰∏ÄÁªÑ‰∏™‰ΩìÂêÑËá™Êã•Êúâ‰∏ÄÁªÑÊäïÂÖ•ÔºåÂπ∂‰∏îÂèØ‰ª•‰ΩøÁî®‰∏ÄÁßçÊäÄÊúØÊù•Áîü‰∫ß‰∏ÄÁßçÊúâ‰ª∑ÂÄºÁöÑ‰∫ßÂìÅ„ÄÇÊØè‰∏™‰∏™‰ΩìÁöÑÊäïÂÖ•Âú®Ëá™Â∑±ÁöÑÊäÄÊúØ‰∏≠ÊòØÊó†Áîü‰∫ßÂäõÁöÑÔºå‰ΩÜÂú®ÂÖ∂‰ªñ‰∏™‰ΩìÁöÑÊäÄÊúØ‰∏≠ÊòØÊúâÁîü‰∫ßÂäõÁöÑ„ÄÇËøôÁßçÊÉÖÂÜµÁöÑÈùûÂêà‰ΩúÊ®°ÂûãÁ≤æÁ°ÆÊåáÂÆö‰∫ÜÊØè‰∏™‰∏™‰ΩìÂèØÁî®ÁöÑË°åÂä®ÈõÜÔºö‰πüËÆ∏ÊØè‰∏™‰∏™‰ΩìÂèØ‰ª•ÂÆ£Â∏É‰ªñÊÑøÊÑè‰∫§ÊòìÊäïÂÖ•ÁöÑ‰ª∑Ê†ºÂêëÈáèÔºåÊàñËÄÖ‰ªñÂèØ‰ª•ÊèêÂá∫Êï¥‰∏™Á§æ‰ºöÁöÑÊäïÂÖ•ÂàÜÈÖç„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåËÅîÁõüÊ®°Âûã‰ªéÊØè‰∏™‰∏™‰ΩìÁæ§‰ΩìÂèØ‰ª•ÂÖ±ÂêåÂÆûÁé∞ÁöÑÊîØ‰ªòÂêëÈáèÈõÜÂºÄÂßã„ÄÇËÅîÁõüÂèØ‰ª•‰ΩøÁî®ÂêàÂêå„ÄÅÂ®ÅËÉÅÊàñÊâøËØ∫Êù•ÂÆûÁé∞È´òÊ∞¥Âπ≥ÁöÑÁîü‰∫ßÔºõËøô‰∫õÂà∂Â∫¶Âú®ËÅîÁõüÂçöÂºà‰∏≠Ê≤°ÊúâÊòéÁ°ÆÂª∫Ê®°„ÄÇ Êàë‰ª¨Âπ∂‰∏çËÆ§‰∏∫Ëøô‰∏§ÁßçÊñπÊ≥ï‰∏≠ÁöÑ‰ªª‰Ωï‰∏ÄÁßçÊõ¥‰ºòË∂äÊàñÊõ¥Âü∫Êú¨„ÄÇÂÆÉ‰ª¨ÂêÑËá™ÂèçÊò†‰∫Ü‰∏çÂêåÁ±ªÂûãÁöÑÊàòÁï•ËÄÉËôëÔºåÂπ∂ÊúâÂä©‰∫éÊàë‰ª¨ÂØπÊàòÁï•Êé®ÁêÜÁöÑÁêÜËß£„ÄÇÈùûÂêà‰ΩúÊ®°ÂûãÂíåÂêà‰ΩúÊ®°Âûã‰πãÈó¥Áõ∏‰∫íÂÖ≥Á≥ªÁöÑÁ†îÁ©∂‰πüÂèØËÉΩÂÖ∑ÊúâÂêØÂèëÊÄß„ÄÇ 13 The Core 257 13.1 Coalitional Games with Transferable Payoff 257 13.2 The Core 258 13.3 Nonemptiness of the Core 262 13.4 Markets with Transferable Payoff 263 13.5 Coalitional Games without Transferable Payoff 268 13.6 Exchange Economies 269 Notes 274 ÂèØËΩ¨ÁßªÊîØ‰ªòËÅîÁõüÂçöÂºà Ê†∏ ÂèØËΩ¨ÁßªÊîØ‰ªòÂ∏ÇÂú∫ Êó†ÂèØËΩ¨ÁßªËÅîÁõüÂçöÂºà ‰∫§Êç¢ÁªèÊµé The core is a solution concept for coalitional games that requires that no set of players be able to break away and take a joint action that makes all of them better off. After defning the concept and giving conditions for its nonemptiness, we explore its connection with the concept of a competitive equilibrium in a model of a market. 13.1 Coalitional Games with Transferable Payoff We begin with a simple version of a coalitional game in which each group of players is associated with a single number, interpreted as the payoff that is available to the group; there are no restrictions on how this payoff may be divided among the members of the group. DEFINITION 257.1 A coalitional game with transferable payoff cnsists of a finite set $N$ (the set of players) a function $v$ that associates with every nonempty subset $S$ of $N$ (acoalition) a real number $v(S)$ (the worth of $S$). For each coalition $S$ the number $v(S)$ is the total payoff that is available for division among the members of $S.$ That is, the set of joint actions that the coalition $S$ can take consists of all possible divisions of $v(S)$ among the members of $S.$ (Later, in Section 13.5, we define a more general notion of a coalitional game in which each coalition is associated with a set of payoff vectors that is not necessarily the set of all possible divisions of some fixed amount.) In many situations the payoff that a coalition can achieve depends on the actions taken by the other players. However, the interpretation of a coalitional game that best fts our discussion is that it models a situation in which the actions of the players who are not part of $S$ do not influence $v(S).$ In the literature other interpretations are given to a coalitional game; for example, $v(S)$ is sometimes interpreted to be the most payoff that the coalition $S$ can guarantee independently of the behavior of the coalition $N\\setminus S.$ These other interpretations alter the interpretation of the solutions concepts defined; we do not discuss them here. Throughout this chapter and the next we assume that the coalitional games with transferable payoff that we study have the property that the worth of the coalition $N$ of all players is at least as large as the sum of the worths of the members of any partition of $N.$ This assumption ensures that it is optimal that the coalition $N$ of all players form, as is required by our interpretations of the solution concepts we study (though the formal analysis is meaningful without the assumption). DEFINITION 258.1 A coalitional game $\\langle N,v\\rangle$ with transferable payoff is cohesive if v(N)‚â•‚àëk=1Kv(Sk)for¬†every¬†partition¬†{S1,‚Ä¶,SK}of¬†N.v(N)\\geq\\sum_{k=1}^Kv(S_k)\\quad\\text{for every partition }\\{S_1,\\ldots,S_K\\}\\text{of }N.v(N)‚â•‚àëk=1K‚Äãv(Sk‚Äã)for¬†every¬†partition¬†{S1‚Äã,‚Ä¶,SK‚Äã}of¬†N. (This is a special case of the condition of $superadditivity$, which requires that $v(S\\cup T)\\geq v(S)+v(T)$ for all coalitions $S$ and $T$ with $S\\cap T=\\varnothing$.) 13.2 The Core The idea behind the core is analogous to that behind a Nash equilibrium of a noncooperative game: an outcome is stable if no deviation is profitable. In the case of the core, an outcome is stable if no coalition can deviate and obtain an outcome better for all its members. For a coalitional game with transferable payoff the stability condition is that no coalition can obtain a payoff that exceeds the sum of its members'current payoffs. Given our assumption that the game is cohesive we confine ourselves to outcomes in which the coalition $N$ of all players forms. Let $\\langle N,v\\rangle$ be a coalitional game with transferable payoff. For any profile $(xi){i\\in N}$ of real numbers and any coalition $S$ we let $x(S)=\\sumi\\in Sx_i.$ A vector $(x_i){i\\in S}$ of real numbers is an $S$- feasible payoff vector if $x( S)$ = $v(S)$. We refer to an $N$-feasible payoff vector as a feasible payoff profile. DEFINITION 258.2 The core of the coalitional game with transferable payoff $\\langle N,v\\rangle$ is the set of feasible payoff profiles $(xi)_i\\in N$ for which there is no coalition $S$ and $S$-feasible payoff vector $(y{i}){i\\in S}$ for which $y{i}>x_{i}$ for all $i\\in S.$ A definition that is obviously equivalent is that the core is the set of feasible payoff profiles $(xi){i\\in N}$ for which $v(S)\\leq x(S)$ for every coalition $S.$ Thus the core is the set of payoff profiles satisfying a system of weak linear inequalities and hence is closed and convex. The following examples indicate the wide range of situations that may be modeled as coalitional games and illustrate the notion of the core. EXAMPLE 259. 1 (A three-player majority game) Suppose that three players can obtain one unit of payoff, any two of them can obtain $\\alpha\\in[0,1]$ independently of the actions of the third, and each player alone can obtain nothing, independently of the actions of the remaining two players. We can model this situation as the coalitional game $\\langle N,v\\rangle$ in which $N={1,2,3},v(N)=1,v(S)=\\alpha$ whenever $|S|=2$, and $v({i})=0$ for all $i\\in N.$ The core of this game is the set of all nonnegative payoff profles $(x_1,x_2,x_3)$ for which $x(N)=1$ and $x(S)\\geq\\alpha$ for every two-player coalition $S.$ Hence the core is nonempty if and only if $\\alpha\\leq2/3.$ EXAMPLE 259.2 An expedition of $n$ people has discovered treasure in the mountains; each pair of them can carry out one piece. A coalitional game that models this situation is $\\langle N,v\\rangle$, where v(S)={‚à£S‚à£/2if¬†‚à£S‚à£¬†is¬†even(‚à£S‚à£‚àí1)/2if¬†‚à£S‚à£¬†is¬†odd. \\left.v(S)=\\left\\{\\begin{array}{ll}|S|/2&\\text{if }|S|\\text{ is even}\\\\(|S|-1)/2&\\text{if }|S|\\text{ is odd.}\\end{array}\\right.\\right. v(S)={‚à£S‚à£/2(‚à£S‚à£‚àí1)/2‚Äãif¬†‚à£S‚à£¬†is¬†evenif¬†‚à£S‚à£¬†is¬†odd.‚Äã If $| N| \\geq 4$ is even then the core consists of the single payoff profile $( \\frac 12, \\ldots , \\frac 12) .$ If $| N| \\geq 3$ is odd then the core is empty. 13 Ê†∏ÂøÉ 257 Ê†∏ÂøÉÊòØËÅîÁõüÂçöÂºàÁöÑ‰∏Ä‰∏™Ëß£Ê¶ÇÂøµÔºåË¶ÅÊ±ÇÊ≤°Êúâ‰ªª‰ΩïÁé©ÂÆ∂Áæ§‰ΩìËÉΩÂ§üËÑ±Á¶ªÂπ∂ÈááÂèñ‰∏Ä‰∏™‰Ωø‰ªñ‰ª¨ÈÉΩÊõ¥Â•ΩÁöÑÂÖ±ÂêåË°åÂä®„ÄÇÂú®ÂÆö‰πâ‰∫ÜËøô‰∏ÄÊ¶ÇÂøµÂπ∂ÁªôÂá∫‰∫ÜÂÖ∂ÈùûÁ©∫ÊÄßÁöÑÊù°‰ª∂ÂêéÔºåÊàë‰ª¨Êé¢ËÆ®‰∫ÜÂÖ∂‰∏éÂ∏ÇÂú∫Ê®°Âûã‰∏≠Á´û‰∫âÂùáË°°Ê¶ÇÂøµÁöÑËÅîÁ≥ª„ÄÇ 13.1 ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà Coalitional Games with Transferable Payof Êàë‰ª¨‰ªé‰∏Ä‰∏™ÁÆÄÂçïÁöÑËÅîÁõüÂçöÂºàÁâàÊú¨ÂºÄÂßãÔºåÂÖ∂‰∏≠ÊØè‰∏™Áé©ÂÆ∂Áæ§‰Ωì‰∏é‰∏Ä‰∏™Âçï‰∏ÄÊï∞Â≠óÁõ∏ÂÖ≥ËÅîÔºåËß£Èáä‰∏∫ËØ•Áæ§‰ΩìÂèØÁî®ÁöÑÊîØ‰ªòÔºõÂØπ‰∫éÂ¶Ç‰ΩïÂú®Áæ§‰ΩìÊàêÂëò‰πãÈó¥ÂàÜÈÖçËøô‰∏ÄÊîØ‰ªòÊ≤°Êúâ‰ªª‰ΩïÈôêÂà∂„ÄÇ ÂÆö‰πâ 257.1 ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÂåÖÊã¨Ôºö ‰∏Ä‰∏™ÊúâÈôêÈõÜ $N$ÔºàÁé©ÂÆ∂ÈõÜÔºâ ‰∏Ä‰∏™ÂáΩÊï∞ $v$ÔºåÂÆÉÂ∞ÜÊØè‰∏™ÈùûÁ©∫Â≠êÈõÜ $S$ÔºàËÅîÁõüÔºâ‰∏é‰∏Ä‰∏™ÂÆûÊï∞ $v(S)$Ôºà$S$ ÁöÑ‰ª∑ÂÄºÔºâÁõ∏ÂÖ≥ËÅî„ÄÇ ÂØπ‰∫éÊØè‰∏™ËÅîÁõü $S$ÔºåÊï∞Â≠ó $v(S)$ ÊòØÂèØÁî®‰∫éÂú® $S$ ÊàêÂëò‰πãÈó¥ÂàÜÈÖçÁöÑÊÄªÊîØ‰ªò„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåËÅîÁõü $S$ ÂèØ‰ª•ÈááÂèñÁöÑÂÖ±ÂêåË°åÂä®ÈõÜÂåÖÊã¨ $v(S)$ Âú® $S$ ÊàêÂëò‰πãÈó¥ÁöÑÊâÄÊúâÂèØËÉΩÂàÜÈÖç„ÄÇÔºàÁ®çÂêéÔºåÂú®Á¨¨ 13.5 ËäÇ‰∏≠ÔºåÊàë‰ª¨ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Êõ¥‰∏ÄËà¨ÁöÑËÅîÁõüÂçöÂºàÊ¶ÇÂøµÔºåÂÖ∂‰∏≠ÊØè‰∏™ËÅîÁõü‰∏é‰∏ÄÁªÑÊîØ‰ªòÂêëÈáèÁõ∏ÂÖ≥ËÅîÔºåËøôÁªÑÊîØ‰ªòÂêëÈáè‰∏ç‰∏ÄÂÆöÊòØÊüê‰∏™Âõ∫ÂÆöÈáëÈ¢ùÁöÑÊâÄÊúâÂèØËÉΩÂàÜÈÖç„ÄÇÔºâ Âú®ËÆ∏Â§öÊÉÖÂÜµ‰∏ãÔºåËÅîÁõüÂèØ‰ª•ÂÆûÁé∞ÁöÑÊîØ‰ªòÂèñÂÜ≥‰∫éÂÖ∂‰ªñÁé©ÂÆ∂ÈááÂèñÁöÑË°åÂä®„ÄÇÁÑ∂ËÄåÔºåÊúÄÈÄÇÂêàÊàë‰ª¨ËÆ®ËÆ∫ÁöÑËÅîÁõüÂçöÂºàËß£ÈáäÊòØÔºåÂÆÉÊ®°Êãü‰∫ÜÈÇ£‰∫õ‰∏çÂ±û‰∫é $S$ ÁöÑÁé©ÂÆ∂ÁöÑË°åÂä®‰∏çÂΩ±Âìç $v(S)$ ÁöÑÊÉÖÂÜµ„ÄÇÂú®ÊñáÁåÆ‰∏≠ÔºåËÅîÁõüÂçöÂºàËøòÊúâÂÖ∂‰ªñËß£ÈáäÔºõ‰æãÂ¶ÇÔºå$v(S)$ ÊúâÊó∂Ë¢´Ëß£Èáä‰∏∫ËÅîÁõü $S$ ÂèØ‰ª•Áã¨Á´ã‰∫éËÅîÁõü $N\\setminus S$ ÁöÑË°å‰∏∫‰øùËØÅÁöÑÊúÄÂ§ßÊîØ‰ªò„ÄÇËøô‰∫õÂÖ∂‰ªñËß£ÈáäÊîπÂèò‰∫ÜËß£Ê¶ÇÂøµÁöÑÂÆö‰πâËß£ÈáäÔºõÊàë‰ª¨Âú®Ê≠§‰∏çËÆ®ËÆ∫ÂÆÉ‰ª¨„ÄÇ Âú®Êú¨Á´†Âíå‰∏ã‰∏ÄÁ´†‰∏≠ÔºåÊàë‰ª¨ÂÅáËÆæÊàë‰ª¨Á†îÁ©∂ÁöÑÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÂÖ∑Êúâ‰ª•‰∏ãÊÄßË¥®ÔºöÊâÄÊúâÁé©ÂÆ∂ÁöÑËÅîÁõü $N$ ÁöÑ‰ª∑ÂÄºËá≥Â∞ë‰∏é $N$ ÁöÑ‰ªª‰ΩïÂàÜÂå∫ÁöÑÊàêÂëò‰ª∑ÂÄº‰πãÂíå‰∏ÄÊ†∑Â§ß„ÄÇËøô‰∏ÄÂÅáËÆæÁ°Æ‰øù‰∫ÜÊâÄÊúâÁé©ÂÆ∂ÁöÑËÅîÁõü $N$ ÂΩ¢ÊàêÊòØÊúÄ‰ºòÁöÑÔºåÊ≠£Â¶ÇÊàë‰ª¨ÂØπÊâÄÁ†îÁ©∂Ëß£Ê¶ÇÂøµÁöÑËß£ÈáäÊâÄË¶ÅÊ±ÇÁöÑÈÇ£Ê†∑ÔºàÂ∞ΩÁÆ°Âú®Ê≤°ÊúâËøô‰∏ÄÂÅáËÆæÁöÑÊÉÖÂÜµ‰∏ãÔºåÊ≠£ÂºèÂàÜÊûê‰πüÊòØÊúâÊÑè‰πâÁöÑÔºâ„ÄÇ ÂÆö‰πâ 258.1 ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà $\\langle N,v\\rangle$ ÊòØÂáùËÅöÁöÑ (cohesive)ÔºåÂ¶ÇÊûú v(N)‚â•‚àëk=1Kv(Sk)ÂØπ‰∫é¬†N¬†ÁöÑÊØè‰∏™ÂàÜÂå∫¬†{S1,‚Ä¶,SK}.v(N)\\geq\\sum_{k=1}^Kv(S_k)\\quad\\text{ÂØπ‰∫é }N\\text{ ÁöÑÊØè‰∏™ÂàÜÂå∫ }\\{S_1,\\ldots,S_K\\}.v(N)‚â•‚àëk=1K‚Äãv(Sk‚Äã)ÂØπ‰∫é¬†N¬†ÁöÑÊØè‰∏™ÂàÜÂå∫¬†{S1‚Äã,‚Ä¶,SK‚Äã}. ÔºàËøôÊòØ Ë∂ÖÂä†ÊÄß (superadditivity) Êù°‰ª∂ÁöÑ‰∏Ä‰∏™Áâπ‰æãÔºåË∂ÖÂä†ÊÄßË¶ÅÊ±ÇÂØπ‰∫éÊâÄÊúâ‰∏çÁõ∏‰∫§ÁöÑËÅîÁõü $S$ Âíå $T$Ôºå$v(S\\cup T)\\geq v(S)+v(T)$„ÄÇÔºâ 13.2 Ê†∏ÂøÉ Ê†∏ÂøÉËÉåÂêéÁöÑÊÄùÊÉ≥‰∏éÈùûÂêà‰ΩúÂçöÂºà‰∏≠ÁöÑÁ∫≥‰ªÄÂùáË°°Á±ª‰ººÔºöÂ¶ÇÊûúÊ≤°ÊúâÂÅèÁ¶ªÊòØÊúâÂà©ÂèØÂõæÁöÑÔºåÈÇ£‰πàÁªìÊûúÊòØÁ®≥ÂÆöÁöÑ„ÄÇÂú®Ê†∏ÂøÉÁöÑÊÉÖÂÜµ‰∏ãÔºåÂ¶ÇÊûúÊ≤°ÊúâËÅîÁõüÂèØ‰ª•ÂÅèÁ¶ªÂπ∂Ëé∑ÂæóÂØπÂÖ∂ÊâÄÊúâÊàêÂëòÊõ¥Â•ΩÁöÑÁªìÊûúÔºåÈÇ£‰πàÁªìÊûúÊòØÁ®≥ÂÆöÁöÑ„ÄÇÂØπ‰∫éÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÔºåÁ®≥ÂÆöÊÄßÊù°‰ª∂ÊòØÊ≤°Êúâ‰ªª‰ΩïËÅîÁõüÂèØ‰ª•Ëé∑ÂæóË∂ÖËøáÂÖ∂ÊàêÂëòÂΩìÂâçÊîØ‰ªòÊÄªÂíåÁöÑÊîØ‰ªò„ÄÇÈâ¥‰∫éÊàë‰ª¨ÂÅáËÆæÂçöÂºàÊòØÂáùËÅöÁöÑÔºåÊàë‰ª¨Â∞ÜËá™Â∑±ÈôêÂà∂Âú®ÊâÄÊúâÁé©ÂÆ∂ÁöÑËÅîÁõü $N$ ÂΩ¢ÊàêÁöÑÁªìÊûú‰∏≠„ÄÇ ËÆæ $\\langle N,v\\rangle$ ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà„ÄÇÂØπ‰∫é‰ªª‰Ωï ÂÆûÊï∞ÂâñÈù¢ (profile of real numbers) $(xi){i\\in N}$ Âíå‰ªª‰ΩïËÅîÁõü $S$ÔºåÊàë‰ª¨‰ª§ $x(S)=\\sum{i\\in S}x_i$„ÄÇ‰∏Ä‰∏™ÂÆûÊï∞ÂêëÈáè $(x_i){i\\in S}$ ÊòØ‰∏Ä‰∏™ $S$-ÂèØË°åÊîØ‰ªòÂêëÈáè (S-feasible payoff vector)ÔºåÂ¶ÇÊûú $x(S) = v(S)$„ÄÇÊàë‰ª¨Â∞Ü $N$-ÂèØË°åÊîØ‰ªòÂêëÈáèÁß∞‰∏∫ÂèØË°åÊîØ‰ªòÂâñÈù¢ (feasible payoff profile)„ÄÇ ÂÆö‰πâ 258.2 ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà $\\langle N,v\\rangle$ ÁöÑ Ê†∏ÂøÉ(Core) ÊòØÂèØË°åÊîØ‰ªòÂâñÈù¢ $(xi){i\\in N}$ ÁöÑÈõÜÂêàÔºåÂØπ‰∫éËøô‰∫õÂâñÈù¢Ôºå‰∏çÂ≠òÂú®ËÅîÁõü $S$ Âíå $S$-ÂèØË°åÊîØ‰ªòÂêëÈáè $(y{i}){i\\in S}$Ôºå‰ΩøÂæóÂØπ‰∫éÊâÄÊúâ $i\\in S$Ôºå$y{i}>x{i}$„ÄÇ ‰∏Ä‰∏™ÊòæÁÑ∂Á≠â‰ª∑ÁöÑÂÆö‰πâÊòØÔºåÊ†∏ÂøÉÊòØÂèØË°åÊîØ‰ªòÂâñÈù¢ $(xi){i\\in N}$ ÁöÑÈõÜÂêàÔºåÂØπ‰∫éËøô‰∫õÂâñÈù¢Ôºå$v(S)\\leq x(S)$ ÂØπ‰∫éÊØè‰∏™ËÅîÁõü $S$„ÄÇÂõ†Ê≠§ÔºåÊ†∏ÂøÉÊòØÊª°Ë∂≥‰∏ÄÁªÑÂº±Á∫øÊÄß‰∏çÁ≠âÂºèÁöÑÊîØ‰ªòÂâñÈù¢ÁöÑÈõÜÂêàÔºåÂõ†Ê≠§ÊòØÂ∞ÅÈó≠‰∏îÂá∏ÁöÑ„ÄÇ ‰ª•‰∏ãÁ§∫‰æãËØ¥Êòé‰∫ÜÂèØ‰ª•Âª∫Ê®°‰∏∫ËÅîÁõüÂçöÂºàÁöÑÂêÑÁßçÊÉÖÂÜµÔºåÂπ∂ËØ¥Êòé‰∫ÜÊ†∏ÂøÉÁöÑÊ¶ÇÂøµ„ÄÇ Á§∫‰æã 259.1 Ôºà‰∏Ä‰∏™‰∏â‰∫∫Â§öÊï∞ÂçöÂºàÔºâÂÅáËÆæ‰∏â‰∏™Áé©ÂÆ∂ÂèØ‰ª•Ëé∑Âæó‰∏Ä‰∏™Âçï‰ΩçÁöÑÊîØ‰ªòÔºå‰ªª‰Ωï‰∏§‰∏™Áé©ÂÆ∂ÂèØ‰ª•Áã¨Á´ã‰∫éÁ¨¨‰∏â‰∏™Áé©ÂÆ∂ÁöÑË°åÂä®Ëé∑Âæó $\\alpha\\in[0,1]$ÔºåËÄåÊØè‰∏™Áé©ÂÆ∂ÂçïÁã¨Êó†Ê≥ïËé∑Âæó‰ªª‰ΩïÊîØ‰ªòÔºåÁã¨Á´ã‰∫éÂÖ∂‰ªñ‰∏§‰∏™Áé©ÂÆ∂ÁöÑË°åÂä®„ÄÇÊàë‰ª¨ÂèØ‰ª•Â∞ÜËøôÁßçÊÉÖÂÜµÂª∫Ê®°‰∏∫ËÅîÁõüÂçöÂºà $\\langle N,v\\rangle$ÔºåÂÖ∂‰∏≠ $N={1,2,3},v(N)=1,v(S)=\\alpha$ ÂΩì $|S|=2$ Êó∂Ôºå$v({i})=0$ ÂØπ‰∫éÊâÄÊúâ $i\\in N$„ÄÇËøô‰∏™ÂçöÂºàÁöÑÊ†∏ÂøÉÊòØÊâÄÊúâÈùûË¥üÊîØ‰ªòÂâñÈù¢ $(x_1,x_2,x_3)$ ÁöÑÈõÜÂêàÔºåÂØπ‰∫éËøô‰∫õÂâñÈù¢Ôºå$x(N)=1$ ‰∏î $x(S)\\geq\\alpha$ ÂØπ‰∫éÊØè‰∏™‰∏§‰∫∫ËÅîÁõü $S$„ÄÇÂõ†Ê≠§ÔºåÊ†∏ÂøÉÈùûÁ©∫ÂΩì‰∏î‰ªÖÂΩì $\\alpha\\leq2/3$„ÄÇ Á§∫‰æã 259.2 ‰∏ÄÊîØÁî± $n$ ‰∫∫ÁªÑÊàêÁöÑÊé¢Èô©ÈòüÂú®Â±±Âå∫ÂèëÁé∞‰∫ÜÂÆùËóèÔºõÊØè‰∏§‰∏™‰∫∫ÂèØ‰ª•Êê∫Â∏¶‰∏Ä‰ª∂ÂÆùÁâ©„ÄÇ‰∏Ä‰∏™ËÅîÁõüÂçöÂºà $\\langle N,v\\rangle$ ÂèØ‰ª•Ê®°ÊãüËøôÁßçÊÉÖÂÜµÔºåÂÖ∂‰∏≠ v(S)={‚à£S‚à£/2Â¶ÇÊûú¬†‚à£S‚à£¬†ÊòØÂÅ∂Êï∞(‚à£S‚à£‚àí1)/2Â¶ÇÊûú¬†‚à£S‚à£¬†ÊòØÂ•áÊï∞„ÄÇ \\left.v(S)=\\left\\{\\begin{array}{ll}|S|/2&\\text{Â¶ÇÊûú }|S|\\text{ ÊòØÂÅ∂Êï∞}\\\\(|S|-1)/2&\\text{Â¶ÇÊûú }|S|\\text{ ÊòØÂ•áÊï∞„ÄÇ}\\end{array}\\right.\\right. v(S)={‚à£S‚à£/2(‚à£S‚à£‚àí1)/2‚ÄãÂ¶ÇÊûú¬†‚à£S‚à£¬†ÊòØÂÅ∂Êï∞Â¶ÇÊûú¬†‚à£S‚à£¬†ÊòØÂ•áÊï∞„ÄÇ‚Äã Â¶ÇÊûú $| N| \\geq 4$ ÊòØÂÅ∂Êï∞ÔºåÂàôÊ†∏ÂøÉÁî±Âçï‰∏ÄÊîØ‰ªòÂâñÈù¢ $( \\frac 12, \\ldots , \\frac 12)$ ÁªÑÊàê„ÄÇÂ¶ÇÊûú $| N| \\geq 3$ ÊòØÂ•áÊï∞ÔºåÂàôÊ†∏ÂøÉ‰∏∫Á©∫„ÄÇ ÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÔºöÊèèËø∞Áé©ÂÆ∂Â¶Ç‰ΩïÈÄöËøáÂêà‰ΩúÂàÜÈÖçÊÄªÊî∂ÁõäÁöÑÊ®°Âûã„ÄÇ Ê†∏ÂøÉÔºö‰∏ÄÁßçÁ®≥ÂÆöÁöÑÊî∂ÁõäÂàÜÈÖçÊñπÊ°àÔºåÊ≤°Êúâ‰ªª‰ΩïÁé©ÂÆ∂Áæ§‰ΩìÊúâÂä®ÂäõÂéªÁ†¥ÂùèÁé∞ÊúâÁöÑÂêà‰Ωú„ÄÇ ÂÆûÊï∞ÂâñÈù¢ÔºöË°®Á§∫ÊØè‰∏™Áé©ÂÆ∂Âú®ÂàÜÈÖçÊñπÊ°à‰∏≠Ëé∑ÂæóÁöÑÊî∂ÁõäÁöÑ‰∏ÄÁªÑÂÆûÊï∞„ÄÇ 13.3 Nonemptiness of the Core We now derive a condition under which the core of a coalitional game is nonempty. Since the core is defined by a system of linear inequalities such a condition could be derived from the conditions for the existence of a solution to a general system of inequalities. However, since the system of inequalities that defines the core has a special structure we are able to derive a more specific condition. Denote by $\\mathcal{C}$ the set of all coalitions, for any coalition $S$ denote by $\\mathbb{R}^S$ the $|S|$-dimensional Euclidian space in which the dimensions are indexed by the members of $S$, and denote by $1_S\\in\\mathbb{R}^N$ the characteristic vector of $S$ given by (1S)i={1if¬†i‚ààS0otherwise.(1_S)_i=\\left\\{\\begin{matrix}1&\\text{if }i\\in S\\\\0&\\text{otherwise.}\\end{matrix}\\right.(1S‚Äã)i‚Äã={10‚Äãif¬†i‚ààSotherwise.‚Äã A collection $(\\lambdaS){S\\in\\mathcal{C}}$ of numbers in [0,1] is a balanced collection of weights if for every player $i$ the sum of $\\lambdaS$ over all the coalitions that contain $i$ is $1:\\sum{S\\in\\mathcal{C}}\\lambdaS1_S=1_N.$ As an example, let $|N|=3.$ Then the collection $(\\lambda_S)$ in which $\\lambda_S=\\frac12$ if $|S|=2$ and $\\lambda_S=0$ otherwise is a balanced collection of weights; so too is the collection $(\\lambda_S)$ in which $\\lambda{S}=1$ if $|S|=1$ and $\\lambdaS=0$ otherwise. A game $\\langle N,v\\rangle$ is balanced if $\\sum{S\\in\\mathcal{C}}\\lambda_Sv(S)\\leq v(N)$ for every balanced collection of weights. One interpretation of the notion of a balanced game is the following. Each player has one unit of time, which he must distribute among all the coalitions of which he is a member. In order for a coalition $S$ to be active for the fraction of time $\\lambda_S$, all its members must be active in $S$ for this fraction of time, in which case the coalition yields the payoff $\\lambda_Sv(S).$ In this interpretation the condition that the collection of weights be balanced is a feasibility condition on the players' allocation of time, and a game is balanced if there is no feasible allocation of time that yields the players more than $v(N).$ The following result is referred to as the Bondareva-Shapley theorem. PROPOSITION $262. 1 A coalitional game with transferable payoff has a nonempty core if and only if it is balanced. Proof. Let $\\langle N,v\\rangle$ be a coalitional game with transferable payoff. First let $x$ be a payoff profile in the core of $\\langle N,v\\rangle$ and let $(\\lambda_S)_S\\in\\mathcal{C}$ be a balanced collection of weights. Then ‚àëS‚ààCŒªSv(S)‚â§‚àëS‚ààCŒªSx(S)=‚àëi‚ààNxi‚àëS‚àãiŒªS=‚àëi‚ààNxi=v(N),\\sum_{S\\in\\mathcal{C}}\\lambda_Sv(S)\\leq\\sum_{S\\in\\mathcal{C}}\\lambda_Sx(S)=\\sum_{i\\in N}x_i\\sum_{S\\ni i}\\lambda_S=\\sum_{i\\in N}x_i=v(N),‚àëS‚ààC‚ÄãŒªS‚Äãv(S)‚â§‚àëS‚ààC‚ÄãŒªS‚Äãx(S)=‚àëi‚ààN‚Äãxi‚Äã‚àëS‚àãi‚ÄãŒªS‚Äã=‚àëi‚ààN‚Äãxi‚Äã=v(N), so that $\\langle N,v\\rangle$ is balanced. Now assume that $\\langle N,v\\rangle$ is balanced. Then there is no balanced collection $(\\lambdaS){S\\in\\mathcal{C}}$ of weights for which$\\sum_S\\in\\mathcal{C}\\lambda_Sv(S)>v(N).$ Therefore the convex set ${(1_N,v(N)+\\epsilon)\\in\\mathbb{R}^{|N|+1}{:}\\epsilon>0}$ is disjoint from the convex cone {y‚ààR‚à£N‚à£+1‚Äâ‚Å£:y=‚àëS‚ààCŒªS(1S,v(S))¬†where¬†ŒªS‚â•0¬†for¬†all¬†S‚ààC},\\{y\\in\\mathbb{R}^{|N|+1}\\colon y=\\sum_{S\\in\\mathcal{C}}\\lambda_S(1_S,v(S))\\text{ where }\\lambda_S\\geq0\\text{ for all }S\\in\\mathcal{C}\\},{y‚ààR‚à£N‚à£+1:y=‚àëS‚ààC‚ÄãŒªS‚Äã(1S‚Äã,v(S))¬†where¬†ŒªS‚Äã‚â•0¬†for¬†all¬†S‚ààC}, since if not then $1N=\\underline{\\sum}{S\\in\\mathcal{C}}\\lambdaS1_S$, so that $(\\lambda_S){S\\in\\mathcal{C}}$ is a balanced collection of weights and $\\sum_{S\\in\\mathcal{C}}\\lambda_Sv(S)>v(N).$ Thus by the separating hyperplane theorem (see, for example, Rockafeller (1970,Theorem 11.3)) there is a nonzero vector $(\\alpha_N,\\alpha)\\in\\mathbb{R}^|N|\\times\\mathbb{R}$ such that (Œ±N,Œ±)‚ãÖy‚â•0>(Œ±N,Œ±)‚ãÖ(1N,v(N)+œµ)(\\alpha_N,\\alpha)\\cdot y\\geq0>(\\alpha_N,\\alpha)\\cdot(1_N,v(N)+\\epsilon)(Œ±N‚Äã,Œ±)‚ãÖy‚â•0>(Œ±N‚Äã,Œ±)‚ãÖ(1N‚Äã,v(N)+œµ) for all $y$ in the cone and all $\\epsilon>0.$ Since $(1_N,v(N))$ is in the cone, we have $\\alpha Now let $x=\\alpha_N/(-\\alpha).$ Since $(1_S,v(S))$ is in the cone for all $S\\in\\mathcal{C}$, we have $x(S)=x\\cdot1_S\\geq v(S)$ for all $S\\in\\mathcal{C}$ by the left-hand inequality in (263.1), and $v(N)\\geq1_Nx=x(N)$ from the right-hand inequality. Thus $v(N)=x(N)$, so that the payoff profile $x$ is in the core of $\\langle N, v\\rangle$. 13.3 Ê†∏ÂøÉÁöÑÈùûÁ©∫ÊÄß Êàë‰ª¨Áé∞Âú®Êé®ÂØºÂá∫‰∏Ä‰∏™Êù°‰ª∂Ôºå‰ΩøÂæóËÅîÁõüÂçöÂºàÁöÑÊ†∏ÂøÉÈùûÁ©∫„ÄÇÁî±‰∫éÊ†∏ÂøÉÊòØÁî±‰∏ÄÁªÑÁ∫øÊÄß‰∏çÁ≠âÂºèÂÆö‰πâÁöÑÔºåÂõ†Ê≠§ÂèØ‰ª•‰ªé‰∏ÄËà¨‰∏çÁ≠âÂºèÁ≥ªÁªüÂ≠òÂú®Ëß£ÁöÑÊù°‰ª∂‰∏≠Êé®ÂØºÂá∫Ëøô‰∏ÄÊù°‰ª∂„ÄÇÁÑ∂ËÄåÔºåÁî±‰∫éÂÆö‰πâÊ†∏ÂøÉÁöÑ‰∏çÁ≠âÂºèÁ≥ªÁªüÂÖ∑ÊúâÁâπÊÆäÁªìÊûÑÔºåÊàë‰ª¨ËÉΩÂ§üÊé®ÂØºÂá∫‰∏Ä‰∏™Êõ¥ÂÖ∑‰ΩìÁöÑÊù°‰ª∂„ÄÇ Áî® $\\mathcal{C}$ Ë°®Á§∫ÊâÄÊúâËÅîÁõüÁöÑÈõÜÂêàÔºåÂØπ‰∫é‰ªª‰ΩïËÅîÁõü $S$ÔºåÁî® $\\mathbb{R}^S$ Ë°®Á§∫ $|S|$ Áª¥Ê¨ßÂá†ÈáåÂæóÁ©∫Èó¥ÔºåÂÖ∂‰∏≠Áª¥Â∫¶Áî± $S$ ÁöÑÊàêÂëòÁ¥¢ÂºïÔºåÂπ∂Áî® $1_S\\in\\mathbb{R}^N$ Ë°®Á§∫ $S$ ÁöÑÁâπÂæÅÂêëÈáèÔºåÂÆö‰πâ‰∏∫Ôºö (1S)i={1Â¶ÇÊûú¬†i‚ààS0Âê¶Âàô„ÄÇ(1_S)_i=\\left\\{\\begin{matrix}1&\\text{Â¶ÇÊûú }i\\in S\\\\0&\\text{Âê¶Âàô„ÄÇ}\\end{matrix}\\right.(1S‚Äã)i‚Äã={10‚ÄãÂ¶ÇÊûú¬†i‚ààSÂê¶Âàô„ÄÇ‚Äã Â¶ÇÊûúÂØπ‰∫éÊØè‰∏™Áé©ÂÆ∂ $i$ÔºåÂåÖÂê´ $i$ ÁöÑÊâÄÊúâËÅîÁõüÁöÑ $\\lambdaS$ ‰πãÂíå‰∏∫ $1$ÔºåÂç≥ $\\sum{S\\in\\mathcal{C}}\\lambdaS1_S=1_N$ÔºåÂàô $(\\lambda_S){S\\in\\mathcal{C}}$ ÊòØ‰∏Ä‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêà„ÄÇ‰æãÂ¶ÇÔºåËÆæ $|N|=3$ÔºåÂàôÂΩì $|S|=2$ Êó∂ $\\lambdaS=\\frac12$ÔºåÂê¶Âàô $\\lambda_S=0$ ÁöÑÈõÜÂêà $(\\lambda_S)$ ÊòØ‰∏Ä‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêàÔºõÂêåÊ†∑ÔºåÂΩì $|S|=1$ Êó∂ $\\lambda{S}=1$ÔºåÂê¶Âàô $\\lambdaS=0$ ÁöÑÈõÜÂêà $(\\lambda_S)$ ‰πüÊòØ‰∏Ä‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêà„ÄÇÂ¶ÇÊûúÂØπ‰∫éÊØè‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêàÔºå$\\sum{S\\in\\mathcal{C}}\\lambda_Sv(S)\\leq v(N)$ÔºåÂàôÂçöÂºà $\\langle N,v\\rangle$ ÊòØÂπ≥Ë°°ÁöÑ„ÄÇ Âπ≥Ë°°ÂçöÂºàÁöÑÊ¶ÇÂøµÂèØ‰ª•Ëß£Èáä‰∏∫ÔºöÊØè‰∏™Áé©ÂÆ∂Êúâ‰∏ÄÂçï‰ΩçÁöÑÊó∂Èó¥Ôºå‰ªñÂøÖÈ°ªÂ∞ÜÂÖ∂ÂàÜÈÖçÁªô‰ªñÊâÄÂ±ûÁöÑÊâÄÊúâËÅîÁõü„ÄÇ‰∏∫‰∫Ü‰ΩøËÅîÁõü $S$ Âú®Êó∂Èó¥ÊØî‰æã $\\lambda_S$ ÂÜÖÊ¥ªË∑ÉÔºåÂÖ∂ÊâÄÊúâÊàêÂëòÂøÖÈ°ªÂú®ËøôÊÆµÊó∂Èó¥ÂÜÖÊ¥ªË∑É‰∫é $S$ÔºåÊ≠§Êó∂ËÅîÁõü‰∫ßÁîüÊîØ‰ªò $\\lambda_Sv(S)$„ÄÇÂú®ËøôÁßçËß£Èáä‰∏≠ÔºåÊùÉÈáçÈõÜÂêàÁöÑÂπ≥Ë°°Êù°‰ª∂ÊòØÁé©ÂÆ∂Êó∂Èó¥ÂàÜÈÖçÁöÑÂèØË°åÊÄßÊù°‰ª∂ÔºåËÄåÂçöÂºàÊòØÂπ≥Ë°°ÁöÑÔºåÂ¶ÇÊûúÊ≤°ÊúâÂèØË°åÁöÑÊó∂Èó¥ÂàÜÈÖçËÉΩÂ§ü‰ΩøÁé©ÂÆ∂Ëé∑ÂæóË∂ÖËøá $v(N)$ ÁöÑÊîØ‰ªò„ÄÇ ‰ª•‰∏ãÁªìÊûúË¢´Áß∞‰∏∫ÈÇ¶ËææÂàóÂ®É-Ê≤ôÊôÆÂà©ÂÆöÁêÜ„ÄÇ ÂëΩÈ¢ò 262.1 ‰∏Ä‰∏™ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÂÖ∑ÊúâÈùûÁ©∫Ê†∏ÂøÉÔºåÂΩì‰∏î‰ªÖÂΩìÂÆÉÊòØÂπ≥Ë°°ÁöÑ„ÄÇ ËØÅÊòéÔºöËÆæ $\\langle N,v\\rangle$ ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà„ÄÇÈ¶ñÂÖàÔºåËÆæ $x$ ÊòØ $\\langle N,v\\rangle$ Ê†∏ÂøÉ‰∏≠ÁöÑ‰∏Ä‰∏™ÊîØ‰ªòÂâñÈù¢Ôºå$(\\lambda_S)_S\\in\\mathcal{C}$ ÊòØ‰∏Ä‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêà„ÄÇÈÇ£‰πà ‚àëS‚ààCŒªSv(S)‚â§‚àëS‚ààCŒªSx(S)=‚àëi‚ààNxi‚àëS‚àãiŒªS=‚àëi‚ààNxi=v(N),\\sum_{S\\in\\mathcal{C}}\\lambda_Sv(S)\\leq\\sum_{S\\in\\mathcal{C}}\\lambda_Sx(S)=\\sum_{i\\in N}x_i\\sum_{S\\ni i}\\lambda_S=\\sum_{i\\in N}x_i=v(N),‚àëS‚ààC‚ÄãŒªS‚Äãv(S)‚â§‚àëS‚ààC‚ÄãŒªS‚Äãx(S)=‚àëi‚ààN‚Äãxi‚Äã‚àëS‚àãi‚ÄãŒªS‚Äã=‚àëi‚ààN‚Äãxi‚Äã=v(N), Âõ†Ê≠§ $\\langle N,v\\rangle$ ÊòØÂπ≥Ë°°ÁöÑ„ÄÇ Áé∞Âú®ÂÅáËÆæ $\\langle N,v\\rangle$ ÊòØÂπ≥Ë°°ÁöÑ„ÄÇÈÇ£‰πà‰∏çÂ≠òÂú®‰ªª‰ΩïÂπ≥Ë°°ÊùÉÈáçÈõÜÂêà $(\\lambdaS){S\\in\\mathcal{C}}$ ‰ΩøÂæó $\\sum_S\\in\\mathcal{C}\\lambda_Sv(S)>v(N)$„ÄÇÂõ†Ê≠§ÔºåÂá∏ÈõÜ ${(1_N,v(N)+\\epsilon)\\in\\mathbb{R}^{|N|+1}{:}\\epsilon>0}$ ‰∏éÂá∏Èî• {y‚ààR‚à£N‚à£+1‚Äâ‚Å£:y=‚àëS‚ààCŒªS(1S,v(S))¬†ÂÖ∂‰∏≠¬†ŒªS‚â•0¬†ÂØπÊâÄÊúâ¬†S‚ààC}\\{y\\in\\mathbb{R}^{|N|+1}\\colon y=\\sum_{S\\in\\mathcal{C}}\\lambda_S(1_S,v(S))\\text{ ÂÖ∂‰∏≠ }\\lambda_S\\geq0\\text{ ÂØπÊâÄÊúâ }S\\in\\mathcal{C}\\}{y‚ààR‚à£N‚à£+1:y=‚àëS‚ààC‚ÄãŒªS‚Äã(1S‚Äã,v(S))¬†ÂÖ∂‰∏≠¬†ŒªS‚Äã‚â•0¬†ÂØπÊâÄÊúâ¬†S‚ààC} ‰∏çÁõ∏‰∫§ÔºåÂõ†‰∏∫Â¶ÇÊûú‰∏çÁõ∏‰∫§ÔºåÂàô $1N=\\underline{\\sum}{S\\in\\mathcal{C}}\\lambdaS1_S$ÔºåÂõ†Ê≠§ $(\\lambda_S){S\\in\\mathcal{C}}$ ÊòØ‰∏Ä‰∏™Âπ≥Ë°°ÊùÉÈáçÈõÜÂêàÔºå‰∏î $\\sum_{S\\in\\mathcal{C}}\\lambda_Sv(S)>v(N)$„ÄÇÂõ†Ê≠§ÔºåÊ†πÊçÆÂàÜÁ¶ªË∂ÖÂπ≥Èù¢ÂÆöÁêÜÔºà‰æãÂ¶ÇÔºåÂèÇËßÅ Rockafeller (1970, Theorem 11.3)ÔºâÔºåÂ≠òÂú®‰∏Ä‰∏™ÈùûÈõ∂ÂêëÈáè $(\\alpha_N,\\alpha)\\in\\mathbb{R}^|N|\\times\\mathbb{R}$Ôºå‰ΩøÂæó (Œ±N,Œ±)‚ãÖy‚â•0>(Œ±N,Œ±)‚ãÖ(1N,v(N)+œµ)(\\alpha_N,\\alpha)\\cdot y\\geq0>(\\alpha_N,\\alpha)\\cdot(1_N,v(N)+\\epsilon)(Œ±N‚Äã,Œ±)‚ãÖy‚â•0>(Œ±N‚Äã,Œ±)‚ãÖ(1N‚Äã,v(N)+œµ) ÂØπ‰∫éÈî•‰∏≠ÁöÑÊâÄÊúâ $y$ ÂíåÊâÄÊúâ $\\epsilon>0$„ÄÇÁî±‰∫é $(1_N,v(N))$ Âú®Èî•‰∏≠ÔºåÊàë‰ª¨Êúâ $\\alpha Áé∞Âú®ËÆæ $x=\\alpha_N/(-\\alpha)$„ÄÇÁî±‰∫é $(1_S,v(S))$ ÂØπÊâÄÊúâ $S\\in\\mathcal{C}$ ÈÉΩÂú®Èî•‰∏≠ÔºåÊ†πÊçÆ (263.1) Â∑¶‰æß‰∏çÁ≠âÂºèÔºåÊàë‰ª¨Êúâ $x(S)=x\\cdot1_S\\geq v(S)$ ÂØπÊâÄÊúâ $S\\in\\mathcal{C}$ÔºåÂπ∂‰∏îÊ†πÊçÆÂè≥‰æß‰∏çÁ≠âÂºèÔºå$v(N)\\geq1_Nx=x(N)$„ÄÇÂõ†Ê≠§ $v(N)=x(N)$ÔºåÊâÄ‰ª•ÊîØ‰ªòÂâñÈù¢ $x$ Âú® $\\langle N, v\\rangle$ ÁöÑÊ†∏ÂøÉ‰∏≠„ÄÇ 13.5 Coalitional Games without Transferable Payoff In a coalitional game with transferable payoff each coalition $S$ is characterized by a single number $v(S)$, with the interpretation that $v(S)$ is a payoff that may be distributed in any way among the members of $S.$ We now study a more general concept, in which each coalition cannot necessarily achieve all distributions of some fƒ±xed payoff; rather, each coalition $S$ is characterized by an arbitrary set $V(S)$ of consequences. DEFINITION 268.2 A coalitional game (without transferable payoff) consists of a finite set $N$ (the set of players) a set $X$ (the set of consequences) a function $V$ that assigns to every nonempty subset $S$ of $N$ a coalition a set $V( S) \\subseteq X$. for each player $i\\in N$ a preference relation $\\succsim_i$ on $X.$ Any coalitional game with transferable payoff $\\langle N,v\\rangle$ (Definition 257.1) can be associated with a general coalitional game $\\langle N,X,V,(\\succsimi){i\\in N}\\rangle$ as follows: $X=\\mathbb{R}^N,V(S)={x\\in\\mathbb{R}^N:\\sum_{i\\in S}x_i=v(S)$ and $x_j=0$ if $j\\in$ $N\\setminus S}$ for each coalition $S$, and $x\\succsim_iy$ if and only if $x_i\\geq y_i.$ Under this association the set of coalitional games with transferable payoff is a subset of the set of all coalitional games. The definition of the core of a general coalitional game is a natural extension of our definition for the core of a game with transferable payoff (Definition 258.2). DEFINITION 268.3 The core of the coalitional game $\\langle N,V,X$, $(\\succsim{i}){i\\in N}\\rangle$ is the set of all $x\\in V(N)$ for which there is no coalition $S$ and $y\\in V(S)$ for which $y\\succ_ix$ for all $i\\in S.$ Under conditions like that of balancedness for a coalitional game with transferable payoff (see Section 13.3) the core of a general coalitional game is nonempty (see Scarf (1967), Billera (1970), and Shapley (1973)). We do not discuss these conditions here. 13.5 Êó†ËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà Âú®ÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà‰∏≠ÔºåÊØè‰∏™ËÅîÁõü $S$ Áî±‰∏Ä‰∏™Âçï‰∏ÄÊï∞Â≠ó $v(S)$ Êù•Ë°®ÂæÅÔºåÂÖ∂Âê´‰πâÊòØ $v(S)$ ÊòØ‰∏ÄÁßçÂèØ‰ª•Âú® $S$ ÊàêÂëò‰πãÈó¥‰ª•‰ªªÊÑèÊñπÂºèÂàÜÈÖçÁöÑÊîØ‰ªò„ÄÇÊàë‰ª¨Áé∞Âú®Á†îÁ©∂‰∏Ä‰∏™Êõ¥‰∏ÄËà¨ÁöÑÊ¶ÇÂøµÔºåÂÖ∂‰∏≠ÊØè‰∏™ËÅîÁõü‰∏ç‰∏ÄÂÆöËÉΩÂ§üÂÆûÁé∞ÊüêÁßçÂõ∫ÂÆöÊîØ‰ªòÁöÑÊâÄÊúâÂàÜÈÖçÔºõÁõ∏ÂèçÔºåÊØè‰∏™ËÅîÁõü $S$ Áî±‰∏Ä‰∏™‰ªªÊÑèÁöÑÁªìÊûúÈõÜ $V(S)$ Êù•Ë°®ÂæÅ„ÄÇ ÂÆö‰πâ 268.2 ‰∏Ä‰∏™ÔºàÊó†ËΩ¨ÁßªÊîØ‰ªòÁöÑÔºâËÅîÁõüÂçöÂºàÂåÖÊã¨Ôºö ‰∏Ä‰∏™ÊúâÈôêÈõÜ $N$ÔºàÁé©ÂÆ∂ÈõÜÔºâ ‰∏Ä‰∏™ÈõÜÂêà $X$ÔºàÁªìÊûúÈõÜÔºâ ‰∏Ä‰∏™ÂáΩÊï∞ $V$ÔºåÂÆÉ‰∏∫ $N$ ÁöÑÊØè‰∏™ÈùûÁ©∫Â≠êÈõÜ $S$ÔºàËÅîÁõüÔºâÂàÜÈÖç‰∏Ä‰∏™ÈõÜÂêà $V(S) \\subseteq X$„ÄÇ ÂØπ‰∫éÊØè‰∏™Áé©ÂÆ∂ $i\\in N$Ôºå$X$ ‰∏äÁöÑ‰∏Ä‰∏™ÂÅèÂ•ΩÂÖ≥Á≥ª $\\succsim_i$„ÄÇ ‰ªª‰ΩïÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºà $\\langle N,v\\rangle$ÔºàÂÆö‰πâ 257.1ÔºâÈÉΩÂèØ‰ª•‰∏é‰∏Ä‰∏™‰∏ÄËà¨ËÅîÁõüÂçöÂºà $\\langle N,X,V,(\\succsimi){i\\in N}\\rangle$ ÂÖ≥ËÅîÂ¶Ç‰∏ãÔºö$X=\\mathbb{R}^N$Ôºå$V(S)={x\\in\\mathbb{R}^N:\\sum_{i\\in S}x_i=v(S)$ ‰∏îÂ¶ÇÊûú $j\\in N\\setminus S$ Âàô $x_j=0}$ ÂØπ‰∫éÊØè‰∏™ËÅîÁõü $S$ÔºåÂπ∂‰∏î $x\\succsim_iy$ ÂΩì‰∏î‰ªÖÂΩì $x_i\\geq y_i$„ÄÇÂú®ËøôÁßçÂÖ≥ËÅî‰∏ãÔºåÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÈõÜÊòØÊâÄÊúâËÅîÁõüÂçöÂºàÈõÜÁöÑ‰∏Ä‰∏™Â≠êÈõÜ„ÄÇ ‰∏ÄËà¨ËÅîÁõüÂçöÂºàÁöÑÊ†∏ÂøÉÂÆö‰πâÊòØÂØπÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑÂçöÂºàÊ†∏ÂøÉÂÆö‰πâÔºàÂÆö‰πâ 258.2ÔºâÁöÑËá™ÁÑ∂Êâ©Â±ï„ÄÇ ÂÆö‰πâ 268.3 ËÅîÁõüÂçöÂºà $\\langle N,V,X,(\\succsim{i}){i\\in N}\\rangle$ ÁöÑÊ†∏ÂøÉÊòØÊâÄÊúâ $x\\in V(N)$ ÁöÑÈõÜÂêàÔºåÂÖ∂‰∏≠‰∏çÂ≠òÂú®‰ªª‰ΩïËÅîÁõü $S$ Âíå $y\\in V(S)$Ôºå‰ΩøÂæóÂØπ‰∫éÊâÄÊúâ $i\\in S$Ôºå$y\\succ_ix$„ÄÇ Âú®Á±ª‰ºº‰∫éÂÖ∑ÊúâÂèØËΩ¨ÁßªÊîØ‰ªòÁöÑËÅîÁõüÂçöÂºàÁöÑÂπ≥Ë°°ÊÄßÊù°‰ª∂‰∏ãÔºàÂèÇËßÅÁ¨¨ 13.3 ËäÇÔºâÔºå‰∏ÄËà¨ËÅîÁõüÂçöÂºàÁöÑÊ†∏ÂøÉÊòØÈùûÁ©∫ÁöÑÔºàÂèÇËßÅ Scarf (1967)„ÄÅBillera (1970) Âíå Shapley (1973)Ôºâ„ÄÇ Êàë‰ª¨Âú®Ê≠§‰∏çËÆ®ËÆ∫Ëøô‰∫õÊù°‰ª∂„ÄÇ 14 Stable Sets, the Bargaining Set, and the Shapley Value 277 14.1 Two Approaches 277 14.2 The Stable Sets of von Neumann and Morgenstern 278 14.3 The Bargaining Set, Kernel, and Nucleolus 281 14.4 The Shapley Value 289 Notes 297 14.1 Two Approaches 277 14.2 The Stable Sets of von Neumann and Morgenstern 278 14.3 The Bargaining Set, Kernel, and Nucleolus 281 14.4 The Shapley Value 289 15 The Nash Solution 299 15.1 Bargaining Problems 299 15.3 The Nash Solution: Definition and Characterization 301 15.3 An Axiomatic Definition 305 15.4 The Nash Solution and the Bargaining Game of Alternating Offers 310 15.5 An Exact Implementation of the Nash Solution 311 Notes 312 "},"Learn/LearnJinJia2/Jinjia2.html":{"url":"Learn/LearnJinJia2/Jinjia2.html","title":"Jinjia2","keywords":"","body":"Jinjia2 from jinja2 import Template # ÂÆö‰πâÊ®°Êùø template = Template(open(\"test.jinja2\").read()) # Ê∏≤ÊüìÊ®°Êùø output = template.render(target=\"RISCV\") # ÊâìÂç∞ÁîüÊàêÁöÑ HTML print(output) "},"Learn/LearnLalrpop/Lalrpop.html":{"url":"Learn/LearnLalrpop/Lalrpop.html","title":"Lalrpop","keywords":"","body":"Lalrpop LR(1) parser generator for Rust. LALRPOP ÊãâÂ∞îÊ≥¢ÊôÆ LALRPOP is a parser generator, similar in principle to YACC, ANTLR, Menhir, and other such programs. In general, it has the grand ambition of being the most usable parser generator ever. This ambition is most certainly not fully realized: right now, it's fairly standard, maybe even a bit subpar in some areas. But hey, it's young. For the most part, this README is intended to describe the current behavior of LALRPOP, but in some places it includes notes for planned future changes. LALRPOP ÊòØ‰∏Ä‰∏™Ëß£ÊûêÂô®ÁîüÊàêÂô®ÔºåÂéüÁêÜÁ±ª‰ºº‰∫é YACC„ÄÅANTLR„ÄÅMenhir ÂíåÂÖ∂‰ªñÊ≠§Á±ªÁ®ãÂ∫è„ÄÇÊÄªÁöÑÊù•ËØ¥ÔºåÂÆÉÊúâ‰∏Ä‰∏™ÂÆè‰ºüÁöÑÈõÑÂøÉÂ£ÆÂøóÔºåÈÇ£Â∞±ÊòØÊàê‰∏∫ÊúâÂè≤‰ª•Êù•ÊúÄÊúâÁî®ÁöÑËß£ÊûêÂô®ÁîüÊàêÂô®„ÄÇËøô‰∏™ÈõÑÂøÉÂ£ÆÂøóËÇØÂÆöÊ≤°ÊúâÂÆåÂÖ®ÂÆûÁé∞ÔºöÁé∞Âú®ÔºåÂÆÉÁõ∏ÂΩìÊ†áÂáÜÔºåÁîöËá≥Âú®Êüê‰∫õÈ¢ÜÂüüÂèØËÉΩÊúâÁÇπ‰Ωé‰∫éÊ†áÂáÜ„ÄÇ‰ΩÜÊòØÔºåÂòøÔºåÂÆÉÂæàÂπ¥ËΩª„ÄÇÂú®Â§ßÂ§öÊï∞ÊÉÖÂÜµ‰∏ãÔºåÊú¨ README Êó®Âú®ÊèèËø∞ LALRPOP ÁöÑÂΩìÂâçË°å‰∏∫Ôºå‰ΩÜÂú®Êüê‰∫õÂú∞ÊñπÔºåÂÆÉÂåÖÊã¨ËÆ°ÂàíÁöÑÊú™Êù•Êõ¥ÊîπÁöÑËØ¥Êòé„ÄÇ add lalrpop to rust project define grammar in lalrpop file define asts, build ast use macros use errors and error recovery pass param to parser Tutorial : means extract the value of the expression inside the angle brackets, here is ... Macros four built-in macros: ?: Expr? get Option> *: Expr* get Vec>, minimum 0 +: Expr+ get Vec>, minimum 1 (...): short for creating an nonterminal, ( \",\")?, mean an \"optionally parse an Expr followed by a comma\" Note the angle brackets (<>) around Expr: these ensures that the value of the ( \",\")is the value of the expression, and not a tuple of the expression and the comma. get type Option> Grammar Example // Term: Num | '(' Term ')' pub Term: i32 = { => n, \"(\" \")\" => t, } // Num: r\"[0-9]+\" Num: i32 = => i32::from_str(&s).unwrap(); Precedence and associativity can be specified using attributes: pub Expr: i32 = { #[precedence(level=\"0\")] // Highest precedence Term, #[precedence(level=\"1\")] #[assoc(side=\"left\")] \"*\" => l * r, \"/\" => l / r, #[precedence(level=\"2\")] #[assoc(side=\"left\")] \"+\" => l + r, \"-\" => l - r, }; Use AST to represent the parsed tree: // ast.rs use std::fmt::{Debug, Error, Formatter}; pub enum Expr { Number(i32), Op(Box, Opcode, Box), Error, } pub enum ExprSymbol { NumSymbol(&'input str), Op(Box>, Opcode, Box>), Error, } #[derive(Copy, Clone)] pub enum Opcode { Mul, Div, Add, Sub, } impl Debug for Expr { fn fmt(&self, fmt: &mut Formatter) -> Result { use self::Expr::*; match *self { Number(n) => write!(fmt, \"{:?}\", n), Op(ref l, op, ref r) => write!(fmt, \"({:?} {:?} {:?})\", l, op, r), Error => write!(fmt, \"error\"), } } } impl Debug for ExprSymbol { fn fmt(&self, fmt: &mut Formatter) -> Result { use self::ExprSymbol::*; match *self { NumSymbol(n) => write!(fmt, \"{:?}\", n), Op(ref l, op, ref r) => write!(fmt, \"({:?} {:?} {:?})\", l, op, r), Error => write!(fmt, \"error\"), } } } impl Debug for Opcode { fn fmt(&self, fmt: &mut Formatter) -> Result { use self::Opcode::*; match *self { Mul => write!(fmt, \"*\"), Div => write!(fmt, \"/\"), Add => write!(fmt, \"+\"), Sub => write!(fmt, \"-\"), } } } // grammar.lalrpop use std::str::FromStr; use crate::ast::{Expr, Opcode}; grammar; pub Expr: Box = { // (1) Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2) Factor, }; ExprOp: Opcode = { // (3) \"+\" => Opcode::Add, \"-\" => Opcode::Sub, }; Factor: Box = { Factor FactorOp Term => Box::new(Expr::Op(<>)), Term, }; FactorOp: Opcode = { \"*\" => Opcode::Mul, \"/\" => Opcode::Div, }; Term: Box = { Num => Box::new(Expr::Number(<>)), \"(\" \")\" }; Num: i32 = { r\"[0-9]+\" => i32::from_str(<>).unwrap() }; Lexer Num: i32 = r\"[0-9]+\" => i32::from_str(<>).unwrap(); // ~~~ ~~~ ~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~ // | | | Action code // | | Symbol(s) that should match // | Return type // Name of nonterminal +-------------------+ +---------------------+ Text -> | Lexer | -> | Parser | | | | | | Applies regex to | | Consumes terminals, | | produce terminals | | executes your code | +-------------------+ | as it recognizes | | nonterminals | +---------------------+ ËØçÊ≥ïÂàÜÊûê‰ºòÂÖàÁ∫ßÈóÆÈ¢òÔºö‰ΩøÁî® match ÊòæÂºèÊåáÂÆö‰ºòÂÖàÁ∫ß„ÄÇ Simple match declarations ÁÆÄÂçï match Â£∞Êòé A match declaration lets you explicitly give the precedence between terminals. In its simplest form, it consists of just ordering regular expressions and string literals into groups, with the higher precedence items coming first. So, for example, we could resolve our conflict above by giving r\"[0-9]+\" precedence over r\"\\w+\", thus saying that if something can be lexed as a number, we'll do that, and otherwise consider it to be an identifier. match Â£∞ÊòéÂÖÅËÆ∏ÊÇ®ÊòæÂºèÊåáÂÆöÁªàÁ´Ø‰πãÈó¥ÁöÑ‰ºòÂÖàÁ∫ß„ÄÇÂú®ÊúÄÁÆÄÂçïÁöÑÂΩ¢Âºè‰∏≠ÔºåÂÆÉÂè™ÂåÖÊã¨Â∞ÜÊ≠£ÂàôË°®ËææÂºèÂíåÂ≠óÁ¨¶‰∏≤ÊñáÊú¨ÊéíÂ∫èÂà∞ÁªÑ‰∏≠Ôºå‰ºòÂÖàÁ∫ßËæÉÈ´òÁöÑÈ°πÊéíÂú®ÊúÄÂâçÈù¢„ÄÇÂõ†Ê≠§Ôºå‰æãÂ¶ÇÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáËµã‰∫à r‚Äú[0-9]+‚Äú‰ºòÂÖà‰∫é r‚Äù\\w+‚Äú Êù•Ëß£ÂÜ≥‰∏äÈù¢ÁöÑÂÜ≤Á™ÅÔºå‰ªéËÄåË°®Á§∫Â¶ÇÊûúÊüê‰∏™‰∏úË•øÂèØ‰ª•Ë¢´Ëß£Èáä‰∏∫‰∏Ä‰∏™Êï∞Â≠óÔºåÊàë‰ª¨Â∞±‰ºöËøôÊ†∑ÂÅöÔºåÂê¶ÂàôÂ∞±Â∞ÜÂÖ∂ËßÜ‰∏∫Ê†áËØÜÁ¨¶„ÄÇ match { r\"[0-9]+\" } else { r\"\\w+\", _ } The final _ indicates that other string literals and regular expressions that appear elsewhere in the grammar (e.g., \"(\" or \"22\") should be added into that final level of precedence (without an _, it is illegal to use a terminal that does not appear in the match declaration). ÁªìÂ∞æÁöÑ _ Ë°®Á§∫Âá∫Áé∞Âú®ËØ≠Ê≥ï‰∏≠ÂÖ∂‰ªñ‰ΩçÁΩÆÁöÑÂ≠óÁ¨¶‰∏≤ÊñáÂ≠óÂíåÊ≠£ÂàôË°®ËææÂºèÔºà‰æãÂ¶ÇÔºå‚ÄúÔºà‚Äù Êàñ ‚Äú22‚ÄùÔºâÂ∫îËØ•Ê∑ªÂä†Âà∞ÊúÄÁªàÁöÑ‰ºòÂÖàÁ∫ß‰∏≠ÔºàÂ¶ÇÊûúÊ≤°Êúâ _Ôºå‰ΩøÁî®Êú™Âá∫Áé∞Âú® match Â£∞Êòé‰∏≠ÁöÑÁªàÁªìÁ¨¶ÊòØÈùûÊ≥ïÁöÑÔºâ„ÄÇ // fixed literals get precedence over regular expressions match { r\"[0-9]+\", \"22\" } else { r\"\\w+\", _ } ‰ΩøÁî® match Â£∞Êòé‰∏∫Ê≠£ÂàôË°®ËææÂºèÂëΩÂêçÔºåËøôÊ†∑Êàë‰ª¨Â∞±‰∏çÂøÖÁõ¥Êé•Âú®ËØ≠Ê≥ï‰∏≠ËæìÂÖ•ÂÆÉ‰ª¨„ÄÇ match { r\"[0-9]+\", \"22\" } else { r\"\\w+\" => ID, // pub Term = { Num, \"(\" \")\", \"22\" => \"Twenty-two!\".to_string(), ID => format!(\"Id({})\", <>), // Customizing skipping between tokens Ëá™ÂÆö‰πâÂú®Ê†áËÆ∞‰πãÈó¥Ë∑≥ËøáÔºàÁî®‰∫éË∑≥ËøáÊ≥®ÈáäÂÜÖÂÆπÔºâ match { r\"\\s*\" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified r\"//[^\\n\\r]*[\\n\\r]*\" => { }, // Skip `// comments` r\"/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/\" => { }, // Skip `/* comments */` } "},"Learn/LearnMLIR/CodegenDialectOverview.html":{"url":"Learn/LearnMLIR/CodegenDialectOverview.html","title":"CodegenDialectOverview","keywords":"","body":"Codegen Dialect Overview Codegen Dialect Overview Classification ÂàÜÁ±ª The multiple code generation-related dialects in MLIR can be roughly organized along two axes: tensor/buffer and payload/structure .MLIR ‰∏≠ÁöÑÂ§ö‰∏™‰ª£Á†ÅÁîüÊàêÁõ∏ÂÖ≥ÊñπË®ÄÂèØ‰ª•Â§ßËá¥Ê≤øÁùÄ‰∏§‰∏™ËΩ¥ÁªÑÁªáÔºöÂº†Èáè/ÁºìÂÜ≤Âå∫ÂíåÊúâÊïàËΩΩËç∑/ÁªìÊûÑ„ÄÇ A dialect‚Äôs position on the tensor/buffer axis indicates whether its main data abstraction is a tensor as found in ML frameworks or a memory buffer as expected by conventional lower-level compilers. Tensors are treated as immutable values that are not necessarily associated with memory, that is, operations on tensors usually don‚Äôt have side effects. Data flow between such operations can be expressed using use-definition chains in traditional static single assignment (SSA) form. This is one of the aspects that makes MLIR a powerful transformation vehicle for ML programs, enabling simple rewriting of tensor operations. On the other hand, buffers are mutable and may be subject to aliasing, i.e. several objects may be pointing to the same underlying memory. Data flow can only be extracted through additional dependency and aliasing analyses. The transition between the tensor abstraction and buffer abstraction is performed by the bufferization procedure that progressively associates, and ultimately replaces, tensors with buffers. Several dialects, such as Linalg and Standard, contain operations on both tensors and buffers. Some Linalg operations can even operate on both at the same time. ÊñπË®ÄÂú®Âº†Èáè/ÁºìÂÜ≤Âå∫ËΩ¥‰∏äÁöÑ‰ΩçÁΩÆË°®Á§∫ÂÖ∂‰∏ªË¶ÅÊï∞ÊçÆÊäΩË±°ÊòØÊú∫Âô®Â≠¶‰π†Ê°ÜÊû∂‰∏≠ÊâæÂà∞ÁöÑÂº†ÈáèÔºåËøòÊòØ‰º†Áªü‰ΩéÁ∫ßÁºñËØëÂô®ÊúüÊúõÁöÑÂÜÖÂ≠òÁºìÂÜ≤Âå∫„ÄÇÂº†ÈáèË¢´ËßÜ‰∏∫‰∏çÂèØÂèòÂÄºÔºå‰∏ç‰∏ÄÂÆö‰∏éÂÜÖÂ≠òÁõ∏ÂÖ≥ËÅîÔºåÂç≥Âº†Èáè‰∏äÁöÑÊìç‰ΩúÈÄöÂ∏∏Ê≤°ÊúâÂâØ‰ΩúÁî®„ÄÇËøô‰∫õÊìç‰Ωú‰πãÈó¥ÁöÑÊï∞ÊçÆÊµÅÂèØ‰ª•‰ΩøÁî®‰º†ÁªüÁöÑÈùôÊÄÅÂçïËµãÂÄºÔºàSSAÔºâÂΩ¢Âºè‰∏≠ÁöÑ‰ΩøÁî®-ÂÆö‰πâÈìæÊù•Ë°®Á§∫„ÄÇËøôÊòØ‰Ωø MLIR Êàê‰∏∫Êú∫Âô®Â≠¶‰π†Á®ãÂ∫èÂº∫Â§ßËΩ¨Êç¢Â∑•ÂÖ∑ÁöÑÊñπÈù¢‰πã‰∏ÄÔºåÂÆÉ‰ΩøÂº†ÈáèÊìç‰ΩúÁöÑÁÆÄÂçïÈáçÂÜôÊàê‰∏∫ÂèØËÉΩ„ÄÇÂè¶‰∏ÄÊñπÈù¢ÔºåÁºìÂÜ≤Âå∫ÊòØÂèØÂèòÁöÑÔºåÂèØËÉΩÂèóÂà∞Âà´ÂêçÁöÑÂΩ±ÂìçÔºåÂç≥Â§ö‰∏™ÂØπË±°ÂèØËÉΩÊåáÂêëÁõ∏ÂêåÁöÑÂ∫ïÂ±ÇÂÜÖÂ≠ò„ÄÇÊï∞ÊçÆÊµÅÂè™ËÉΩÈÄöËøáÈ¢ùÂ§ñÁöÑ‰æùËµñÂíåÂà´ÂêçÂàÜÊûêÊù•ÊèêÂèñ„ÄÇÂº†ÈáèÊäΩË±°ÂíåÁºìÂÜ≤Âå∫ÊäΩË±°‰πãÈó¥ÁöÑËΩ¨Êç¢ÊòØÈÄöËøáÁºìÂÜ≤ÂåñËøáÁ®ãÊâßË°åÁöÑÔºåËØ•ËøáÁ®ãÈÄêÊ≠•ÂÖ≥ËÅîÔºåÊúÄÁªàÁî®ÁºìÂÜ≤Âå∫ÊõøÊç¢Âº†Èáè„ÄÇ‰∏Ä‰∫õÊñπË®ÄÔºåÂ¶Ç Linalg Âíå StandardÔºåÂåÖÂê´ÂØπÂº†ÈáèÂíåÁºìÂÜ≤Âå∫ÁöÑÊìç‰Ωú„ÄÇ‰∏Ä‰∫õ Linalg Êìç‰ΩúÁîöËá≥ÂèØ‰ª•ÂêåÊó∂Êìç‰Ωú‰∏§ËÄÖ„ÄÇ A dialect‚Äôs position on the payload/structure axis indicates whether it describes what computation should be performed (payload) or how it should be performed (structure). For example, most mathematical operations in the Standard dialect specify the computation to be performed, e.g., the arctangent, without further detail. On the other hand, the SCF dialect defines how the contained computation is performed, e.g., repeated until some runtime condition is met, without restricting what the condition is and what computations are performed. Similarly, the Async dialect denotes the general execution model applicable at various levels of payload granularity. ÊñπË®ÄÂú®Ë¥üËΩΩ/ÁªìÊûÑËΩ¥‰∏äÁöÑ‰ΩçÁΩÆË°®Á§∫ÂÆÉÊèèËø∞ÁöÑÊòØÂ∫îËØ•ÊâßË°å‰ªÄ‰πàËÆ°ÁÆóÔºàË¥üËΩΩÔºâËøòÊòØÂ¶Ç‰ΩïÊâßË°åÔºàÁªìÊûÑÔºâ„ÄÇ‰æãÂ¶ÇÔºåÊ†áÂáÜÊñπË®Ä‰∏≠ÁöÑÂ§ßÂ§öÊï∞Êï∞Â≠¶ËøêÁÆóÊåáÂÆöË¶ÅÊâßË°åÁöÑËÆ°ÁÆóÔºå‰æãÂ¶ÇÂèçÊ≠£ÂàáÔºåËÄå‰∏çÊèê‰æõÊõ¥Â§öÁªÜËäÇ„ÄÇÂè¶‰∏ÄÊñπÈù¢ÔºåSCF ÊñπË®ÄÂÆö‰πâ‰∫ÜÂåÖÂê´ÁöÑËÆ°ÁÆóÂ¶Ç‰ΩïÊâßË°åÔºå‰æãÂ¶ÇÈáçÂ§çÊâßË°åÁõ¥Âà∞Êª°Ë∂≥Êüê‰∫õËøêË°åÊó∂Êù°‰ª∂ÔºåËÄå‰∏çÈôêÂà∂Êù°‰ª∂ÊòØ‰ªÄ‰πà‰ª•ÂèäÊâßË°å‰∫ÜÂì™‰∫õËÆ°ÁÆó„ÄÇÂêåÊ†∑ÔºåAsync ÊñπË®ÄË°®Á§∫ÈÄÇÁî®‰∫éË¥üËΩΩÁ≤íÂ∫¶‰∏çÂêåÁ∫ßÂà´ÁöÑÈÄöÁî®ÊâßË°åÊ®°Âûã„ÄÇ This position on this axis is non-binary, especially at higher level of abstraction. Many operations at least partially specify the structure. For example, vector dialect operations imply SIMD execution model. During the compilation process, the instructions of ‚Äúhow‚Äù tend to become more detailed and low-level. Simultaneously, lower levels of the abstraction stack tend to separate the structure operations from the payload operations for the sake of transforming only the former while keeping only an abstract understanding of the payload, e.g., the accessed data or the estimated cost. Ê≠§ËΩ¥‰∏äÁöÑ‰ΩçÁΩÆÊòØÈùû‰∫åÂÖÉÁöÑÔºåÂ∞§ÂÖ∂ÊòØÂú®Êõ¥È´òÂ±ÇÊ¨°ÁöÑÊäΩË±°‰∏≠„ÄÇËÆ∏Â§öÊìç‰ΩúËá≥Â∞ëÈÉ®ÂàÜÂú∞ÊåáÂÆö‰∫ÜÁªìÊûÑ„ÄÇ‰æãÂ¶ÇÔºåÂêëÈáèÊñπË®ÄÊìç‰ΩúÊöóÁ§∫‰∫Ü SIMD ÊâßË°åÊ®°Âûã„ÄÇÂú®ÁºñËØëËøáÁ®ã‰∏≠ÔºåÂÖ≥‰∫é‚ÄúÂ¶Ç‰Ωï‚ÄùÁöÑÊåá‰ª§ÂæÄÂæÄÂèòÂæóÊõ¥Âä†ËØ¶ÁªÜÂíåÂ∫ïÂ±Ç„ÄÇÂêåÊó∂ÔºåÊäΩË±°Â†ÜÊ†àÁöÑËæÉ‰ΩéÁ∫ßÂà´ÂÄæÂêë‰∫éÂ∞ÜÁªìÊûÑÊìç‰Ωú‰∏éÊúâÊïàË¥üËΩΩÊìç‰ΩúÂàÜÂºÄÔºå‰ª•‰æø‰ªÖËΩ¨Êç¢ÂâçËÄÖÔºåÂêåÊó∂Âè™‰øùÁïôÂØπÊúâÊïàË¥üËΩΩÁöÑÊäΩË±°ÁêÜËß£Ôºå‰æãÂ¶ÇËÆøÈóÆÁöÑÊï∞ÊçÆÊàñ‰º∞ËÆ°ÁöÑÊàêÊú¨„ÄÇ Dialects of Interest ÊÑüÂÖ¥Ë∂£ÁöÑËØ≠Ë®ÄÊñπË®Ä An MLIR code generation pipeline goes through a sequence of intermediate steps, which are characterized by the most recently introduced dialect. Dialects can be roughly organized into a stack based on the level of abstraction they feature. Converting the representation from a higher-level abstraction to a lower-level abstraction, i.e. lowering, is usually straightforward whereas the inverse process may not be. MLIR ‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁªèËøá‰∏ÄÁ≥ªÂàó‰∏≠Èó¥Ê≠•È™§ÔºåËøô‰∫õÊ≠•È™§Áî±ÊúÄËøëÂºïÂÖ•ÁöÑÊñπË®ÄÁâπÂæÅ„ÄÇÊñπË®ÄÂèØ‰ª•Ê†πÊçÆÂÆÉ‰ª¨ÊâÄÂÖ∑ÊúâÁöÑÊäΩË±°Á∫ßÂà´Â§ßËá¥ÁªÑÁªáÊàêÂ†ÜÊ†à„ÄÇÂ∞ÜË°®Á§∫‰ªéÈ´òÁ∫ßÊäΩË±°ËΩ¨Êç¢‰∏∫‰ΩéÁ∫ßÊäΩË±°ÔºåÂç≥ÈôçÁ∫ßÔºåÈÄöÂ∏∏ÊòØÁõ¥Êé•ÁöÑÔºåËÄåÈÄÜËøáÁ®ãÂèØËÉΩ‰∏çÊòØ„ÄÇ Most pipelines enter the in-tree dialect infrastructure through the Linalg dialect, which features a versatile representation of structured computation on structured data. The dialect is specifically designed to support various transformations with minimal analysis. Operations in this dialect support both tensor and buffer operands and the bufferization process can happen without changing the operations themselves. Furthermore, Linalg provides ‚Äúnamed‚Äù operations with specific payload, such as matrix multiplication and convolution, and ‚Äúgeneric‚Äù operations that only define the structure. Conversions are available between the two forms. The inherent iterative structure of Linalg dialect operations allows them to be converted into vector operations as well as (affine) loops around vector or scalar operations. Â§ßÂ§öÊï∞ÁÆ°ÈÅìÈÄöËøá Linalg ÊñπË®ÄËøõÂÖ•Ê†ëÂÜÖÊñπË®ÄÂü∫Á°ÄËÆæÊñΩÔºåËØ•ÊñπË®ÄÂÖ∑ÊúâÂØπÁªìÊûÑÂåñÊï∞ÊçÆ‰∏äÁªìÊûÑÂåñËÆ°ÁÆóÁöÑÁÅµÊ¥ªË°®Á§∫„ÄÇËØ•ÊñπË®Ä‰∏ìÈó®ËÆæËÆ°Áî®‰∫éÊîØÊåÅÂêÑÁßçÂèòÊç¢ÔºåÂàÜÊûêÊúÄÂ∞ë„ÄÇËØ•ÊñπË®Ä‰∏≠ÁöÑÊìç‰ΩúÊîØÊåÅÂº†ÈáèÂíåÁºìÂÜ≤Âå∫Êìç‰ΩúÊï∞ÔºåÁºìÂÜ≤Âå∫ÂåñËøáÁ®ãÂèØ‰ª•Âú®‰∏çÊîπÂèòÊìç‰ΩúÊú¨Ë∫´ÁöÑÊÉÖÂÜµ‰∏ãÂèëÁîü„ÄÇÊ≠§Â§ñÔºåLinalg Êèê‰æõ‰∫ÜÂÖ∑ÊúâÁâπÂÆöÊúâÊïàËΩΩËç∑ÁöÑ‚ÄúÂëΩÂêç‚ÄùÊìç‰ΩúÔºå‰æãÂ¶ÇÁü©Èòµ‰πòÊ≥ïÂíåÂç∑ÁßØÔºå‰ª•Âèä‰ªÖÂÆö‰πâÁªìÊûÑÁöÑ‚ÄúÈÄöÁî®‚ÄùÊìç‰Ωú„ÄÇ‰∏§ÁßçÂΩ¢Âºè‰πãÈó¥ÂèØ‰ª•ËøõË°åËΩ¨Êç¢„ÄÇLinalg ÊñπË®ÄÊìç‰ΩúÁöÑÂÜÖÁ¶ÄËø≠‰ª£ÁªìÊûÑÂÖÅËÆ∏ÂÆÉ‰ª¨Ë¢´ËΩ¨Êç¢‰∏∫ÂêëÈáèÊìç‰Ωú‰ª•ÂèäÂõ¥ÁªïÂêëÈáèÊàñÊ†áÈáèÊìç‰ΩúÁöÑÔºà‰ªøÂ∞ÑÔºâÂæ™ÁéØ„ÄÇ The Async dialect captures a general asynchronous programming model and may appear at different levels: at a higher level where it is used to[organize large chunks of computation across and within devices, and at a lower level where it can wrap sequences of primitive instructions. ÂºÇÊ≠•ÊñπË®ÄÊçïËé∑‰∫Ü‰∏ÄËà¨ÁöÑÂºÇÊ≠•ÁºñÁ®ãÊ®°ÂûãÔºåÂèØËÉΩÂá∫Áé∞Âú®‰∏çÂêåÁöÑÁ∫ßÂà´ÔºöÂú®ËæÉÈ´òÁ∫ßÂà´ÔºåÂÆÉÁî®‰∫é[ÁªÑÁªáÂíåË∑®ËÆæÂ§á‰ª•ÂèäËÆæÂ§áÂÜÖÈÉ®ÁöÑÂ§ßÂùóËÆ°ÁÆóÔºå‰ª•ÂèäÂú®ËæÉ‰ΩéÁ∫ßÂà´ÔºåÂÆÉÂèØ‰ª•ÂåÖË£ÖÂéüÂßãÊåá‰ª§ÁöÑÂ∫èÂàó]„ÄÇ The Vector dialect (Note that the vector type belongs to the built-in dialect and can be used outside of the Vector dialect.) is a mid-level abstraction for SIMD and, potentially, SIMT execution models. It leverages MLIR‚Äôs multidimensional vector type to target different platforms through dedicated lower-level dialects. An ongoing work investigates the use of vector abstraction to target GPU devices (SIMT) through explicit representation of threads. ÂêëÈáèÊñπË®ÄÔºàËØ∑Ê≥®ÊÑèÔºåÂêëÈáèÁ±ªÂûãÂ±û‰∫éÂÜÖÁΩÆÊñπË®ÄÔºåÂèØ‰ª•Âú®ÂêëÈáèÊñπË®Ä‰πãÂ§ñ‰ΩøÁî®„ÄÇÔºâÊòØ SIMD ÂíåÊΩúÂú® SIMT ÊâßË°åÊ®°ÂûãÁöÑ‰∏≠Èó¥Â±ÇÊäΩË±°„ÄÇÂÆÉÂà©Áî® MLIR ÁöÑÂ§öÁª¥ÂêëÈáèÁ±ªÂûãÔºåÈÄöËøá‰∏ìÈó®ÁöÑ‰ΩéÁ∫ßÊñπË®ÄÈíàÂØπ‰∏çÂêåÁöÑÂπ≥Âè∞„ÄÇÊ≠£Âú®ËøõË°åÁöÑÂ∑•‰ΩúÊ≠£Âú®Á†îÁ©∂‰ΩøÁî®ÂêëÈáèÊäΩË±°ÈÄöËøáÊòæÂºèË°®Á§∫Á∫øÁ®ãÊù•ÈíàÂØπ GPU ËÆæÂ§áÔºàSIMTÔºâ„ÄÇ The Affine dialect is MLIR‚Äôs take on polyhedral compilation. It encapsulates the restrictions of the related programming model and defines the corresponding operations, namely control flow structures such as affine loops and conditionals and affine counterparts of memory operations. Its primary goal is to enable polyhedral transformations, such as auto-parallelization, loop fusion and tiling for locality improvement, and loop vectorization in MLIR. ‰ªøÂ∞ÑÊñπË®ÄÊòØ MLIR ÂØπÂ§öÈù¢‰ΩìÁºñËØëÁöÑËßÅËß£„ÄÇÂÆÉÂ∞ÅË£Ö‰∫ÜÁõ∏ÂÖ≥ÁºñÁ®ãÊ®°ÂûãÁöÑÈôêÂà∂Âπ∂ÂÆö‰πâ‰∫ÜÁõ∏Â∫îÁöÑÊìç‰ΩúÔºåÂç≥ÊéßÂà∂ÊµÅÁªìÊûÑÔºåÂ¶Ç‰ªøÂ∞ÑÂæ™ÁéØÂíåÊù°‰ª∂‰ª•ÂèäÂÜÖÂ≠òÊìç‰ΩúÁöÑ‰ªøÂ∞ÑÂØπÂ∫îÁâ©„ÄÇÂÖ∂‰∏ªË¶ÅÁõÆÊ†áÊòØÂÆûÁé∞Â§öÈù¢‰ΩìÂèòÊç¢ÔºåÂ¶ÇËá™Âä®Âπ∂Ë°åÂåñ„ÄÅÂæ™ÁéØËûçÂêàÂíå‰∏∫‰∫ÜÂ±ÄÈÉ®ÊÄßÊîπËøõÁöÑÂæ™ÁéØÂ°´ÂÖÖÔºå‰ª•ÂèäÂú® MLIR ‰∏≠ÁöÑÂæ™ÁéØÂêëÈáèÂåñ„ÄÇ The SCF (Structured Control Flow) dialect contains the common control flow concepts expressed at a higher level than branches in a control flow graph (CFG), e.g., (parallel) ‚Äúfor‚Äù and ‚Äúwhile‚Äù loops as well as conditionals. This dialect is used to represent, and sometimes transform, the structure of the computation without affecting the payload. It is a common lowering target from Affine and Linalg, which may also be used as an entry point to the MLIR code generation infrastructure from lower-level representations such as C. SCFÔºàÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºâÊñπË®ÄÂåÖÂê´Âú®ÊéßÂà∂ÊµÅÂõæÔºàCFGÔºâÂàÜÊîØ‰ª•‰∏äÁöÑÈ´òÁ∫ßÊéßÂà∂ÊµÅÊ¶ÇÂøµÔºå‰æãÂ¶ÇÔºàÂπ∂Ë°åÔºâ‚Äúfor‚ÄùÂíå‚Äúwhile‚ÄùÂæ™ÁéØ‰ª•ÂèäÊù°‰ª∂ËØ≠Âè•„ÄÇÊ≠§ÊñπË®ÄÁî®‰∫éË°®Á§∫ÔºåÊúâÊó∂‰πüÁî®‰∫éËΩ¨Êç¢ÔºåËÆ°ÁÆóÁªìÊûÑËÄå‰∏çÂΩ±ÂìçÊúâÊïàËΩΩËç∑„ÄÇÂÆÉÊòØ‰ªé Affine Âíå Linalg ÁöÑÂ∏∏ËßÅÈôç‰ΩéÁõÆÊ†áÔºå‰πüÂèØ‰ª•Áî®‰Ωú‰ªé C Á≠âÂ∫ïÂ±ÇË°®Á§∫ÁöÑ MLIR ‰ª£Á†ÅÁîüÊàêÂü∫Á°ÄËÆæÊñΩÁöÑÂÖ•Âè£ÁÇπ„ÄÇ Various programming models, namely GPU/SIMT, Async, OpenMP and OpenACC can be obtained from the SCF dialect. Each of these models is represented by a corresponding dialect, the operations in which are rarely subject to further optimizing transformations. However, these representations are an opportunity to implement transformations specific to the programming model, e.g., ones currently explored for the Async dialect. ÂêÑÁßçÁºñÁ®ãÊ®°ÂûãÔºåÂç≥ GPU/SIMT„ÄÅÂºÇÊ≠•„ÄÅOpenMP Âíå OpenACCÔºåÂèØ‰ª•‰ªé SCF ÊñπË®Ä‰∏≠Ëé∑Âèñ„ÄÇÊØè‰∏™Ê®°ÂûãÈÉΩÁî±Áõ∏Â∫îÁöÑÊñπË®ÄË°®Á§∫ÔºåÂÖ∂‰∏≠ÁöÑÊìç‰ΩúÂæàÂ∞ëÂèóÂà∞Ëøõ‰∏ÄÊ≠•‰ºòÂåñËΩ¨Êç¢ÁöÑÂΩ±Âìç„ÄÇÁÑ∂ËÄåÔºåËøô‰∫õË°®Á§∫ÊòØÂÆûÁé∞ÁâπÂÆö‰∫éÁºñÁ®ãÊ®°ÂûãÁöÑËΩ¨Êç¢ÁöÑÊú∫‰ºöÔºå‰æãÂ¶ÇÁõÆÂâç‰∏∫ÂºÇÊ≠•ÊñπË®ÄÊé¢Á¥¢ÁöÑËΩ¨Êç¢„ÄÇ SCF can also be converted to the ‚Äústandard‚Äù CFG representation by replacing structured control flow with branches between blocks. The branch operations are currently contained in the Standard dialect, together with numerous other operations at various abstraction levels. For example, the Standard dialect also contains pointwise operations on tensors and vectors, conversions between buffers and tensors, trigonometric operations on scalars, etc. Therefore, the Standard dialect is in the process of being split into multiple well-defined dialects. SCF ‰πüÂèØ‰ª•ÈÄöËøáÁî®Âùó‰πãÈó¥ÁöÑÂàÜÊîØÊõøÊç¢ÁªìÊûÑÂåñÊéßÂà∂ÊµÅÊù•ËΩ¨Êç¢‰∏∫‚ÄúÊ†áÂáÜ‚ÄùCFG Ë°®Á§∫„ÄÇÂàÜÊîØÊìç‰ΩúÁõÆÂâçÂåÖÂê´Âú®Ê†áÂáÜÊñπË®Ä‰∏≠Ôºå‰ª•ÂèäÂêÑÁßçÊäΩË±°Á∫ßÂà´‰∏äÁöÑËÆ∏Â§öÂÖ∂‰ªñÊìç‰Ωú„ÄÇ‰æãÂ¶ÇÔºåÊ†áÂáÜÊñπË®ÄËøòÂåÖÂê´Âº†ÈáèÂíåÂêëÈáèÁöÑÈÄêÁÇπÊìç‰Ωú„ÄÅÁºìÂÜ≤Âå∫ÂíåÂº†Èáè‰πãÈó¥ÁöÑËΩ¨Êç¢„ÄÅÊ†áÈáèÁöÑ‰∏âËßíËøêÁÆóÁ≠â„ÄÇÂõ†Ê≠§ÔºåÊ†áÂáÜÊñπË®ÄÊ≠£Âú®Ë¢´ÊãÜÂàÜ‰∏∫Â§ö‰∏™ÂÆö‰πâËâØÂ•ΩÁöÑÊñπË®Ä„ÄÇ Ultimately, parts of the Standard dialect (operations on scalars and vectors, and branches) are converted into target-specific dialects that mostly serve as exit points from the MLIR code generation infrastructure. These include the LLVM, NVVM, ROCDL, AVX, Neon, SVE and SPIR-V dialects, all of which correspond to an external format, IR or instruction set. These dialects are not subject to transformation except for canonicalization. ÊúÄÁªàÔºåÊ†áÂáÜÊñπË®ÄÔºàÊ†áÈáè‰∏éÂêëÈáèÁöÑÊìç‰Ωú‰ª•ÂèäÂàÜÊîØÔºâË¢´ËΩ¨Êç¢‰∏∫ÁâπÂÆöÁõÆÊ†áÁöÑÊñπË®ÄÔºåËøô‰∫õÊñπË®Ä‰∏ªË¶Å‰Ωú‰∏∫‰ªé MLIR ‰ª£Á†ÅÁîüÊàêÂü∫Á°ÄËÆæÊñΩÁöÑÂá∫Âè£ÁÇπ„ÄÇËøôÂåÖÊã¨ LLVM„ÄÅNVVM„ÄÅROCDL„ÄÅAVX„ÄÅNeon„ÄÅSVE Âíå SPIR-V ÊñπË®ÄÔºåÊâÄÊúâËøô‰∫õÈÉΩÂØπÂ∫î‰∫éÂ§ñÈÉ®Ê†ºÂºè„ÄÅIR ÊàñÊåá‰ª§ÈõÜ„ÄÇËøô‰∫õÊñπË®ÄÈô§‰∫ÜËßÑËåÉÂåñÂ§ñÔºå‰∏çÂèóËΩ¨Êç¢ÁöÑÂΩ±Âìç„ÄÇ Finally, the Shape dialect is used to describe shapes of data independently of the payload or (mostly) structure. It appears at the entry level of the code generation pipeline and is typically lowered into address arithmetic or canonicalized away. ÊúÄÂêéÔºåShape ÊñπË®ÄÁî®‰∫éÁã¨Á´ã‰∫éÊúâÊïàËΩΩËç∑ÊàñÔºà‰∏ªË¶ÅÊòØÔºâÁªìÊûÑÊù•ÊèèËø∞Êï∞ÊçÆÂΩ¢Áä∂„ÄÇÂÆÉÂú®‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁöÑÂÖ•Âè£Á∫ßÂà´Âá∫Áé∞ÔºåÈÄöÂ∏∏Ë¢´Èôç‰Ωé‰∏∫Âú∞ÂùÄÁÆóÊúØÊàñËßÑËåÉÂåñ„ÄÇ PDL (Pattern Description Language) and PDLInterp dialects are used by the next-generation pattern-rewriting infrastructure for MLIR to specify transformations. As such, they never appear in the code generation pipeline, but may be necessary to describe its operation. PDLÔºàÊ®°ÂºèÊèèËø∞ËØ≠Ë®ÄÔºâÂíå PDLInterp ÊñπË®ÄË¢´‰∏ã‰∏Ä‰ª£Ê®°ÂºèÈáçÂÜôÂü∫Á°ÄËÆæÊñΩ MLIR Áî®‰∫éÊåáÂÆöËΩ¨Êç¢„ÄÇÂõ†Ê≠§ÔºåÂÆÉ‰ª¨‰ªéÊú™Âá∫Áé∞Âú®‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅì‰∏≠Ôºå‰ΩÜÂèØËÉΩÊòØÊèèËø∞ÂÖ∂Êìç‰ΩúÊâÄÂøÖÈúÄÁöÑ„ÄÇ Some Existing Pipelines ‰∏Ä‰∫õÁé∞ÊúâÁÆ°ÈÅì TensorFlow Kernel Generator TensorFlow ÂÜÖÊ†∏ÁîüÊàêÂô® codegen 4 Kernel generator pipeline‰ª£Á†ÅÁîüÊàêÂô® 4 ÂÜÖÊ†∏ÁîüÊàêÂô®ÁÆ°ÈÅì1170√ó954 120 KB The Tensorflow Kernel Generator project, starting at the TensorFlow (TF) dialect, has recently switched to targeting Linalg-on-tensors from MHLO (Meta HLO, more suitable for compilation thanks to, e.g., removal of implicit broadcasting, and with support for dynamic shapes; where HLO is High-Level Optimizer representation, derived from XLA) instead of LMHLO (Late MHLO, same as MHLO but on buffers rather than tensors) and performs fusion at that level before calling bufferization on Linalg. Further loop transformations such as tiling happen at the SCF level, which is then converted into target-specific GPU dialect while the payload operations are converted to the LLVM dialect with Standard as intermediary. Now-retired prototypes have experimented with using LMHLO dialect targeting Linalg-on-Buffers and performing all transformations on SCF, where it may be more complex than on tensor abstraction. Tensorflow ÂÜÖÊ†∏ÁîüÊàêÂô®È°πÁõÆÔºå‰ªé TensorFlowÔºàTFÔºâÊñπË®ÄÂºÄÂßãÔºåÊúÄËøëÂ∑≤ÂàáÊç¢Âà∞ÈíàÂØπ Linalg-on-tensors ‰ªé MHLOÔºàÂÖÉ HLOÔºåÁî±‰∫é‰æãÂ¶ÇÂéªÈô§ÈöêÂºèÂπøÊí≠Á≠âÔºåÊõ¥ÈÄÇÂêàÁºñËØëÔºåÂπ∂ÊîØÊåÅÂä®ÊÄÅÂΩ¢Áä∂ÔºõÂÖ∂‰∏≠ HLO ÊòØÈ´òÁ∫ß‰ºòÂåñË°®Á§∫ÔºåÊ∫êËá™ XLAÔºâËÄå‰∏çÊòØ LMHLOÔºàÂª∂Ëøü MHLOÔºå‰∏é MHLO Áõ∏ÂêåÔºå‰ΩÜÈíàÂØπÁºìÂÜ≤Âå∫ËÄå‰∏çÊòØÂº†ÈáèÔºâÁöÑÁõÆÊ†áÔºåÂπ∂Âú®ËØ•Á∫ßÂà´ËøõË°åËûçÂêàÔºåÁÑ∂ÂêéÂú®Ë∞ÉÁî® Linalg ÁöÑÁºìÂÜ≤Âå∫‰∏äËøõË°åÁºìÂÜ≤Âåñ„ÄÇËøõ‰∏ÄÊ≠•ÁöÑÂæ™ÁéØËΩ¨Êç¢ÔºåÂ¶Ç tilingÔºåÂèëÁîüÂú® SCF Á∫ßÂà´ÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ÁâπÂÆö‰∫éÁõÆÊ†á GPU ÊñπË®ÄÔºåËÄåÊúâÊïàË¥üËΩΩÊìç‰ΩúÂàôËΩ¨Êç¢‰∏∫ LLVM ÊñπË®ÄÔºå‰ª•Ê†áÂáÜ‰Ωú‰∏∫‰∏≠‰ªã„ÄÇÁé∞Âú®Â∑≤ÈÄÄÂΩπÁöÑÂéüÂûãÂ∑≤Â∞ùËØï‰ΩøÁî®ÈíàÂØπ Linalg-on-Buffers ÁöÑ LMHLO ÊñπË®ÄÔºåÂπ∂Âú® SCF ‰∏äÊâßË°åÊâÄÊúâËΩ¨Êç¢ÔºåËøôÂèØËÉΩÊØîÂú®Âº†ÈáèÊäΩË±°‰∏äÊõ¥Â§çÊùÇ„ÄÇ When producing several kernels, TensorFlow-related flows are expected to use the Async dialect to orchestrate computation. ÂΩìÁîüÊàêÂ§ö‰∏™ÂÜÖÊ†∏Êó∂ÔºåTensorFlow Áõ∏ÂÖ≥ÁöÑÊµÅÁ®ãÂ∫î‰ΩøÁî®ÂºÇÊ≠•ÊñπË®ÄÊù•ÁºñÊéíËÆ°ÁÆó„ÄÇ Analysis ÂàÜÊûê Crossing Dialects Ë∑®Ë∂äÊñπË®Ä In hindsight, it appears that the dialects that cross axis boundaries in this classification (GPU, Linalg and Vector) have required the most discussion and iteration before being accepted as part of the core ecosystem. Even now, users of MLIR infrastructure reported that it was challenging to understand the positioning of some dialects. For example, IREE uses parts of the GPU dialect related to on-device execution, but not the parts related to managing data and kernels from the host, which are closer related to the structure than to the payload. Similarly, the discussion on bridging the tensor and memref abstraction with corresponding operations required significant effort to converge. ÂõûÈ°æËµ∑Êù•ÔºåÂú®Ëøô‰∏™ÂàÜÁ±ªÔºàGPU„ÄÅLinalg Âíå VectorÔºâ‰∏≠Ë∑®Ë∂äËΩ¥ËæπÁïåÁöÑÂú∞ÊñπÔºåÊñπË®ÄÈúÄË¶ÅÊúÄÂ§öÁöÑËÆ®ËÆ∫ÂíåËø≠‰ª£ÊâçËÉΩË¢´Êé•Âèó‰∏∫Ê†∏ÂøÉÁîüÊÄÅÁ≥ªÁªüÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇÂç≥‰æøÁé∞Âú®ÔºåMLIR Âü∫Á°ÄËÆæÊñΩÁöÑÁî®Êà∑Êä•ÂëäÁß∞ÔºåÁêÜËß£Êüê‰∫õÊñπË®ÄÁöÑ‰ΩçÁΩÆ‰ªçÁÑ∂ÂÖ∑ÊúâÊåëÊàòÊÄß„ÄÇ‰æãÂ¶ÇÔºåIREE ‰ΩøÁî®‰∫Ü‰∏éËÆæÂ§á‰∏äÊâßË°åÁõ∏ÂÖ≥ÁöÑ GPU ÊñπË®ÄÁöÑ‰∏ÄÈÉ®ÂàÜÔºå‰ΩÜÊ≤°Êúâ‰ΩøÁî®‰∏é‰ªé‰∏ªÊú∫ÁÆ°ÁêÜÊï∞ÊçÆÂíåÂÜÖÊ†∏Áõ∏ÂÖ≥ÁöÑÈÉ®ÂàÜÔºåËøô‰∫õÈÉ®ÂàÜ‰∏éÁªìÊûÑÊØî‰∏éÊúâÊïàËΩΩËç∑Êõ¥Áõ∏ÂÖ≥„ÄÇÂêåÊ†∑ÔºåÂÖ≥‰∫éÂ∞ÜÂº†ÈáèÂíå memref ÊäΩË±°‰∏éÁõ∏Â∫îÁöÑÊìç‰ΩúÊ°•Êé•ÁöÑËÆ®ËÆ∫‰πüËÄóË¥π‰∫ÜÂ§ßÈáèÁ≤æÂäõ‰ª•ËææÊàêÂÖ±ËØÜ„ÄÇ This suggests that new dialects, or smaller IR concepts, can be easier to discuss and reach consensus if they are clearly positioned with respect to other dialects and the design space. When it is necessary to cross the gap between abstractions, it may be preferable to discuss it separately and aim for generalization between dialects (e.g., bufferization process). ËøôË°®ÊòéÔºåÂ¶ÇÊûúÊñ∞ÊñπË®ÄÊàñËæÉÂ∞èÁöÑ IR Ê¶ÇÂøµÂú®‰∏éÂÖ∂‰ªñÊñπË®ÄÂíåËÆæËÆ°Á©∫Èó¥ÁöÑÂÖ≥Á≥ª‰∏≠ÊòéÁ°ÆÂÆö‰ΩçÔºåÂÆÉ‰ª¨ÂèØËÉΩÊõ¥ÂÆπÊòìËÆ®ËÆ∫ÂíåËææÊàêÂÖ±ËØÜ„ÄÇÂΩìÈúÄË¶ÅË∑®Ë∂äÊäΩË±°‰πãÈó¥ÁöÑÂ∑ÆË∑ùÊó∂ÔºåÊúÄÂ•ΩÂçïÁã¨ËÆ®ËÆ∫ÔºåÂπ∂Êó®Âú®ÊñπË®Ä‰πãÈó¥ÂÆûÁé∞Ê≥õÂåñÔºà‰æãÂ¶ÇÔºåÁºìÂÜ≤ËøáÁ®ãÔºâ„ÄÇ Linalg at the Center Á∫øÊÄß‰ª£Êï∞Âú®‰∏≠ÂøÉ The Linalg dialect is one of the main entry points to the MLIR code generation pipelines. Its most recent evolution makes it operate on both tensors and buffers, making bufferization an intra-dialect transformation. It has sufficiently high-level information about the operations to perform transformations without expensive analyses, especially when operating on tensors as values. Some transformations like fusion of element-wise operations and tiling, and combination thereof to generate imperfectly nested computations capture a sufficient amount of transformations needed to target a broad range of architectures. Furthermore, the concept of named operations enables payload-carrying operations that build on the computational patterns of Linalg. Linalg ÊñπË®ÄÊòØ MLIR ‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁöÑ‰∏ªË¶ÅÂÖ•Âè£‰πã‰∏Ä„ÄÇÂÖ∂ÊúÄÊñ∞ÁöÑÊºîÂèò‰ΩøÂÖ∂ËÉΩÂ§üÂú®Âº†ÈáèÂíåÁºìÂÜ≤Âå∫‰∏äËøêË°åÔºå‰ΩøÁºìÂÜ≤Âå∫Âåñ‰∏∫ÊñπË®ÄÂÜÖÈÉ®ÁöÑËΩ¨Êç¢„ÄÇÂÆÉÂØπË¶ÅÊâßË°åÁöÑÊìç‰ΩúÂÖ∑ÊúâË∂≥Â§üÁöÑÈ´òÁ∫ß‰ø°ÊÅØÔºåÂèØ‰ª•Âú®‰∏çËøõË°åÊòÇË¥µÂàÜÊûêÁöÑÊÉÖÂÜµ‰∏ãËøõË°åËΩ¨Êç¢ÔºåÂ∞§ÂÖ∂ÊòØÂú®Â∞ÜÂº†Èáè‰Ωú‰∏∫ÂÄºÊìç‰ΩúÊó∂„ÄÇ‰∏Ä‰∫õËΩ¨Êç¢ÔºåÂ¶ÇÈÄêÂÖÉÁ¥†Êìç‰ΩúÁöÑËûçÂêàÂíåÂàÜÂùóÔºå‰ª•ÂèäÂ∞ÜÂÆÉ‰ª¨ÁªÑÂêàËµ∑Êù•ÁîüÊàê‰∏çÂÆåÁæéÂµåÂ•óÁöÑËÆ°ÁÆóÔºåÊçïËé∑‰∫ÜÈíàÂØπÂπøÊ≥õÊû∂ÊûÑÊâÄÈúÄÁöÑÂ§ßÈáèËΩ¨Êç¢„ÄÇÊ≠§Â§ñÔºåÂëΩÂêçÊìç‰ΩúÁöÑÊ¶ÇÂøµ‰ΩøÂæóÂü∫‰∫é Linalg ËÆ°ÁÆóÊ®°ÂºèÁöÑÊê∫Â∏¶ÊúâÊïàËΩΩËç∑ÁöÑÊìç‰ΩúÊàê‰∏∫ÂèØËÉΩ„ÄÇ Being exercised in virtually all compilation pipelines adds maintenance pressure and stability requirements on Linalg as production users start to rely on it. The fact that it works across buffers and tensors, and may capture both the payload and the structure of the computation makes understanding Linalg to some extent a requirement for understanding any MLIR code generation pipeline. While there are benefits in having one well-defined and maintained entry point, extra care must be taken to ensure that Linalg remains composable with other dialects and that transformation algorithms are not over-designed for it. Âú®Âá†‰πéÊâÄÊúâÁºñËØëÁÆ°ÈÅì‰∏≠ÈÉΩË¢´‰ΩøÁî®ÔºåÁªô Linalg Â∏¶Êù•‰∫ÜÁª¥Êä§ÂéãÂäõÂíåÁ®≥ÂÆöÊÄßË¶ÅÊ±ÇÔºåÈöèÁùÄÁîü‰∫ßÁî®Êà∑ÂºÄÂßã‰æùËµñÂÆÉ„ÄÇÂÆÉËÉΩÂ§üÂú®ÁºìÂÜ≤Âå∫ÂíåÂº†Èáè‰πãÈó¥Â∑•‰ΩúÔºåÂπ∂ÂèØËÉΩÊçïËé∑ËÆ°ÁÆóÁöÑÊúâÊïàËΩΩËç∑ÂíåÁªìÊûÑÔºåËøôÂú®‰∏ÄÂÆöÁ®ãÂ∫¶‰∏ä‰ΩøÂæóÁêÜËß£ Linalg Êàê‰∏∫ÁêÜËß£‰ªª‰Ωï MLIR ‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁöÑÂøÖË¶ÅÊù°‰ª∂„ÄÇËôΩÁÑ∂Êúâ‰∏Ä‰∏™ÂÆö‰πâËâØÂ•Ω‰∏îÁª¥Êä§ËâØÂ•ΩÁöÑÂÖ•Âè£ÁÇπÊúâÂÖ∂Â•ΩÂ§ÑÔºå‰ΩÜÂøÖÈ°ªÊ†ºÂ§ñÂ∞èÂøÉÔºå‰ª•Á°Æ‰øù Linalg ‰∏éÂÖ∂‰ªñÊñπË®Ä‰øùÊåÅÂèØÁªÑÂêàÊÄßÔºåÂπ∂‰∏îÂèòÊç¢ÁÆóÊ≥ï‰∏çË¶ÅËøáÂ∫¶ËÆæËÆ°„ÄÇ Pipeline Differences to Complementary TransformationsÁÆ°ÈÅìÂ∑ÆÂºÇ‰∏é‰∫íË°•ÂèòÊç¢ Several parallel compilation pipelines appear to emerge in the ecosystem. The case of targeting GPUs is particularly illustrative: optimizing transformations, parallelism detection and device mapping decisions can happen in various dialects (Linalg, Affine, SCF), which may end up partially reimplementing each other‚Äôs functionality; device mapping can derive SIMT threads from explicit loops or from vectors, using the SCF or the Vector dialect. Finally, GPU libraries have support for higher-level operations such as contractions and convolutions, that could be directly targeted from the entry point of the code generation pipeline. Âá†‰∏™Âπ∂Ë°åÁºñËØëÁÆ°ÈÅì‰ºº‰πéÂú®ÁîüÊÄÅÁ≥ªÁªü‰∏≠Âá∫Áé∞„ÄÇÈíàÂØπ GPU ÁöÑÊÉÖÂÜµÂ∞§ÂÖ∂ÂÖ∑ÊúâËØ¥ÊòéÊÄßÔºö‰ºòÂåñËΩ¨Êç¢„ÄÅÂπ∂Ë°åÊÄßÊ£ÄÊµãÂíåËÆæÂ§áÊò†Â∞ÑÂÜ≥Á≠ñÂèØ‰ª•Âú®ÂêÑÁßçÊñπË®ÄÔºàLinalg„ÄÅAffine„ÄÅSCFÔºâ‰∏≠ÂèëÁîüÔºåËøôÂèØËÉΩÂØºËá¥ÈÉ®ÂàÜÈáçÊñ∞ÂÆûÁé∞ÂΩºÊ≠§ÁöÑÂäüËÉΩÔºõËÆæÂ§áÊò†Â∞ÑÂèØ‰ª•‰ªéÊòæÂºèÂæ™ÁéØÊàñÂêëÈáè‰∏≠Êé®ÂØºÂá∫ SIMT Á∫øÁ®ãÔºå‰ΩøÁî® SCF Êàñ Vector ÊñπË®Ä„ÄÇÊúÄÂêéÔºåGPU Â∫ìÊîØÊåÅÊõ¥È´òÂ±ÇÊ¨°ÁöÑËøêÁÆóÔºåÂ¶ÇÊî∂Áº©ÂíåÂç∑ÁßØÔºåËøô‰∫õËøêÁÆóÂèØ‰ª•Áõ¥Êé•‰ªé‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁöÑÂÖ•Âè£ÁÇπËøõË°åÂÆö‰Ωç„ÄÇ It is more important than ever to make sure representations and transformations compose and complement each other to deliver on MLIR‚Äôs promise to unify the compilation infrastructure, as opposed to building independent parallel flows. It does not necessarily mean immediately reusing all components, but avoid poorly composable patterns as much as possible. The utility of domain- and target-specific compilers is undeniable, but the project may need to invest into cross-cutting representations, using the generic mechanisms of attributes and interfaces. Circling back to targeting GPUs as an example, a device mapping strategy expressed as attributes that can be attached to different operations (e.g., Linalg generics or parallel SCF loops) that can be transformed through interfaces without needing to know the details of a specific operation. Á°Æ‰øùË°®Á§∫ÂíåÂèòÊç¢Áõ∏‰∫íÁªÑÂêàÂíåË°•ÂÖÖÔºå‰ª•ÂÆûÁé∞ MLIR Áªü‰∏ÄÁºñËØëÂü∫Á°ÄËÆæÊñΩÁöÑÊâøËØ∫ÔºåÊØî‰ª•ÂæÄ‰ªª‰ΩïÊó∂ÂÄôÈÉΩÊõ¥Âä†ÈáçË¶ÅÔºåËÄå‰∏çÊòØÊûÑÂª∫Áã¨Á´ãÁöÑÂπ∂Ë°åÊµÅÁ®ã„ÄÇËøôÂπ∂‰∏çÊÑèÂë≥ÁùÄÁ´ãÂç≥ÈáçÁî®ÊâÄÊúâÁªÑ‰ª∂Ôºå‰ΩÜÂ∫îÂ∞ΩÂèØËÉΩÈÅøÂÖç‰∏çËâØÁöÑÂèØÁªÑÂêàÊ®°Âºè„ÄÇÈ¢ÜÂüüÂíåÁõÆÊ†áÁâπÂÆöÁºñËØëÂô®ÁöÑÊïàÁî®Êó†ÂèØÂê¶ËÆ§Ôºå‰ΩÜÈ°πÁõÆÂèØËÉΩÈúÄË¶ÅÊäïËµÑ‰∫éË∑®È¢ÜÂüüÁöÑË°®Á§∫Ôºå‰ΩøÁî®Â±ûÊÄßÂíåÊé•Âè£ÁöÑÈÄöÁî®Êú∫Âà∂„ÄÇ‰ª•ÈíàÂØπ GPU ‰∏∫‰æãÔºå‰∏ÄÁßçËÆæÂ§áÊò†Â∞ÑÁ≠ñÁï•ÂèØ‰ª•Ë°®Á§∫‰∏∫ÂèØ‰ª•ÈôÑÂä†Âà∞‰∏çÂêåÊìç‰ΩúÔºà‰æãÂ¶ÇÔºåLinalg Ê≥õÂûãÊàñÂπ∂Ë°å SCF Âæ™ÁéØÔºâÁöÑÂ±ûÊÄßÔºåËøô‰∫õÊìç‰ΩúÂèØ‰ª•ÈÄöËøáÊé•Âè£ËøõË°åËΩ¨Êç¢ÔºåËÄåÊó†ÈúÄ‰∫ÜËß£ÁâπÂÆöÊìç‰ΩúÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ Build Small Reusable AbstractionsÊûÑÂª∫Â∞èÂûãÂèØÈáçÁî®ÊäΩË±° One can observe an unsurprising tendency of performing most transformations in the higher levels of the code generation pipeline: the necessary validity information is readily available or easily extractable at these levels without the need for complex analyses. Yet, higher levels of abstraction often have more stringent restrictions of what is representable. When pursuing benefits of such abstractions, it is important to keep in mind the expressivity and the ability to perform at least some transformations at lower levels as means to quickly increase expressivity without reimplementing the top-level abstraction (dynamic shapes in HLO are a good example). ‰∏Ä‰∏™‰∫∫ÂèØ‰ª•ËßÇÂØüÂà∞Âú®‰ª£Á†ÅÁîüÊàêÁÆ°ÈÅìÁöÑÈ´òÂ±ÇËøõË°åÂ§ßÂ§öÊï∞ËΩ¨Êç¢ÁöÑ‰ª§‰∫∫ÊÉäËÆ∂ÁöÑË∂ãÂäøÔºöÂøÖË¶ÅÁöÑÊúâÊïàÊÄß‰ø°ÊÅØÂú®Ëøô‰∫õÂ±ÇÈù¢‰∏äÊòì‰∫éËé∑ÂèñÊàñÊèêÂèñÔºåÊó†ÈúÄÂ§çÊùÇÁöÑÂàÜÊûê„ÄÇÁÑ∂ËÄåÔºåÊäΩË±°Â±ÇÊ¨°Ë∂äÈ´òÔºåÂØπÂèØË°®Á§∫ÂÜÖÂÆπÁöÑÈôêÂà∂ÈÄöÂ∏∏Ë∂ä‰∏•Ê†º„ÄÇÂú®ËøΩÊ±ÇËøôÁßçÊäΩË±°ÁöÑÂ•ΩÂ§ÑÊó∂ÔºåÈáçË¶ÅÁöÑÊòØË¶ÅËÆ∞‰ΩèË°®ËææÊÄßÂíåÂú®ËæÉ‰ΩéÂ±ÇÊ¨°‰∏äÊâßË°åËá≥Â∞ë‰∏Ä‰∫õËΩ¨Êç¢ÁöÑËÉΩÂäõÔºå‰Ωú‰∏∫Âø´ÈÄüÊèêÈ´òË°®ËææÊÄßÁöÑÊâãÊÆµÔºåËÄå‰∏çÈúÄË¶ÅÈáçÊñ∞ÂÆûÁé∞È°∂Â±ÇÊäΩË±°ÔºàHLO ‰∏≠ÁöÑÂä®ÊÄÅÂΩ¢Áä∂ÊòØ‰∏Ä‰∏™ÂæàÂ•ΩÁöÑ‰æãÂ≠êÔºâ„ÄÇ Need for More Structure ÈúÄË¶ÅÊõ¥Â§öÁªìÊûÑ Another emerging tendency is larger dialects and progressive lowering performed without leaving the dialect boundaries. Some examples include Linalg operations on tensors that get transformed into using buffers, GPU dialect block reductions that get decomposed into shuffles, and math operations in Standard that can be expanded into smaller operations or approximated using other Standard operations. We are reaching a point where a dialect contains several loosely connected subsets of operations. This has led to the proposal of splitting the Standard dialect into multiple components. However, the splitting may not always be desirable or even feasible: the same Linalg operations accept tensors and buffers so it is challenging to have separate TLinalg and BLinalg without lots of duplication. This calls for additional ways of structuring the operations within a dialect in a way that is understandable programmatically. Âè¶‰∏ÄÁßçÊñ∞ÂÖ¥Ë∂ãÂäøÊòØÊõ¥Â§ßÊñπË®ÄÂíåÊ∏êËøõÂºèÈôç‰ΩéÔºåËÄåÊó†ÈúÄË∑®Ë∂äÊñπË®ÄËæπÁïå„ÄÇ‰∏Ä‰∫õ‰æãÂ≠êÂåÖÊã¨Â∞ÜÂº†ÈáèÊìç‰ΩúËΩ¨Êç¢‰∏∫‰ΩøÁî®ÁºìÂÜ≤Âå∫ÔºåÂ∞Ü GPU ÊñπË®ÄÂùóÂáèÂ∞ëÂàÜËß£‰∏∫Ê¥óÁâåÔºå‰ª•ÂèäÂèØ‰ª•Âú®Ê†áÂáÜ‰∏≠Êâ©Â±ï‰∏∫ËæÉÂ∞èÊìç‰ΩúÊàñ‰ΩøÁî®ÂÖ∂‰ªñÊ†áÂáÜÊìç‰ΩúËøõË°åËøë‰ººÁöÑÊ†áÂáÜÊï∞Â≠¶Êìç‰Ωú„ÄÇÊàë‰ª¨Ê≠£ËææÂà∞‰∏Ä‰∏™ÁÇπÔºåÂÖ∂‰∏≠ÊñπË®ÄÂåÖÂê´Âá†‰∏™ÊùæÊï£ËøûÊé•ÁöÑÊìç‰ΩúÂ≠êÈõÜ„ÄÇËøôÂØºËá¥‰∫ÜÂ∞ÜÊ†áÂáÜÊñπË®ÄÊãÜÂàÜ‰∏∫Â§ö‰∏™ÁªÑ‰ª∂ÁöÑÊèêËÆÆ„ÄÇÁÑ∂ËÄåÔºåÊãÜÂàÜÂèØËÉΩÂπ∂‰∏çÊÄªÊòØÂèØÂèñÊàñÁîöËá≥ÂèØË°åÔºöÁõ∏ÂêåÁöÑ Linalg Êìç‰ΩúÊé•ÂèóÂº†ÈáèÂíåÁºìÂÜ≤Âå∫ÔºåÂõ†Ê≠§Âú®Ê≤°ÊúâÂ§ßÈáèÈáçÂ§çÁöÑÊÉÖÂÜµ‰∏ãÔºåË¶ÅÂàÜÂà´Êúâ TLinalg Âíå BLinalg ÊòØÂÖ∑ÊúâÊåëÊàòÊÄßÁöÑ„ÄÇËøôÈúÄË¶Å‰ª•ÂèØÁºñÁ®ãÊñπÂºèÁêÜËß£ÁöÑÊñπÂºèÂú®ÊñπË®ÄÂÜÖÂØπÊìç‰ΩúËøõË°åÁªìÊûÑÂåñ„ÄÇ Host/Device Or Program/Kernel As Additional Axis‰∏ªÊú∫/ËÆæÂ§áÊàñÁ®ãÂ∫è/ÂÜÖÊ†∏‰Ωú‰∏∫ÈôÑÂä†ËΩ¥ Finally, uses of MLIR in the scope of larger, mostly ML-related, flows prompt for cleaner separation between the aspects that pertain to the overall organization of computations (e.g., operations that reflect the mapping of a model on a distributed system and interaction with the framework that embeds MLIR, typically on a ‚Äúhost‚Äù) and organization of individual computations (e.g., operations that correspond to internals of a ‚Äúkernel‚Äù or another large unit of computation, potentially offloaded to a ‚Äúdevice‚Äù). For ‚Äúhost‚Äù parts, code generation may also be necessary and often requires different transformations than for ‚Äúkernel‚Äù parts. ÊúÄÁªàÔºåÂú®Êõ¥Â§ß„ÄÅ‰∏ªË¶Å‰∏éÊú∫Âô®Â≠¶‰π†Áõ∏ÂÖ≥ÁöÑÊµÅÁ®ã‰∏≠‰ΩøÁî® MLIRÔºå‰øÉ‰ΩøËÆ°ÁÆóÊï¥‰ΩìÁªÑÁªáÊñπÈù¢ÁöÑÊñπÈù¢Ôºà‰æãÂ¶ÇÔºåÂèçÊò†Ê®°ÂûãÂú®ÂàÜÂ∏ÉÂºèÁ≥ªÁªü‰∏äÁöÑÊò†Â∞Ñ‰ª•Âèä‰∏éÂµåÂÖ• MLIR ÁöÑÊ°ÜÊû∂‰∫§‰∫íÁöÑÊìç‰ΩúÔºåÈÄöÂ∏∏Âú®‚Äú‰∏ªÊú∫‚Äù‰∏äÔºâ‰∏éÂçï‰∏™ËÆ°ÁÆóÁªÑÁªáÔºà‰æãÂ¶ÇÔºåÂØπÂ∫î‚ÄúÂÜÖÊ†∏‚ÄùÊàñÂÖ∂‰ªñÂ§ßÂûãËÆ°ÁÆóÂçïÂÖÉÂÜÖÈÉ®ÁöÑÊìç‰ΩúÔºåÂèØËÉΩÂç∏ËΩΩÂà∞‚ÄúËÆæÂ§á‚Äù‰∏äÔºâ‰πãÈó¥ÁöÑÂàÜÁ¶ªÊõ¥Âä†Ê∏ÖÊô∞„ÄÇÂØπ‰∫é‚Äú‰∏ªÊú∫‚ÄùÈÉ®ÂàÜÔºå‰ª£Á†ÅÁîüÊàêÂèØËÉΩ‰πüÊòØÂøÖË¶ÅÁöÑÔºåÂπ∂‰∏îÈÄöÂ∏∏ÈúÄË¶Å‰∏é‚ÄúÂÜÖÊ†∏‚ÄùÈÉ®ÂàÜ‰∏çÂêåÁöÑËΩ¨Êç¢„ÄÇ Specific examples of this separation include the GPU dialect that contains operations for both controlling the execution from host and operations executed on the GPU proper, which may benefit from separation into independent dialects, and the Async dialect that is being used on two levels: organizing the execution of independent ‚Äúkernels‚Äù and parallelizing execution within a ‚Äúkernel‚Äù by targeting LLVM coroutines. ÂÖ∑‰ΩìÁ§∫‰æãÂåÖÊã¨ÂåÖÂê´ÊéßÂà∂‰∏ªÊú∫ÊâßË°åÂíå GPU ‰∏äÊâßË°åÊìç‰ΩúÁöÑ GPU ÊñπË®ÄÔºåËøôÂèØËÉΩ‰ªéÂàÜÁ¶ªÊàêÁã¨Á´ãÁöÑÊñπË®Ä‰∏≠ÂèóÁõäÔºå‰ª•ÂèäÊ≠£Âú®‰∏§‰∏™Á∫ßÂà´‰∏ä‰ΩøÁî®ÁöÑ Async ÊñπË®ÄÔºöÈÄöËøáÈíàÂØπ LLVM ÂçèÁ®ãÁªÑÁªáÁã¨Á´ã‚ÄúÂÜÖÊ†∏‚ÄùÁöÑÊâßË°åÂíåÈÄöËøáÈíàÂØπ‚ÄúÂÜÖÊ†∏‚ÄùÂÜÖÁöÑÂπ∂Ë°åÊâßË°å„ÄÇ "},"Learn/LearnMLIR/Dialects.html":{"url":"Learn/LearnMLIR/Dialects.html","title":"Dialects","keywords":"","body":"MLIR ÊñπË®ÄÔºöÊ¶ÇËø∞ MLIR ÊñπË®ÄÊòØ MLIR ÁîüÊÄÅÁ≥ªÁªü‰∏≠ÁöÑ‰∏ì‰∏öÂ≠êÈõÜÔºåÂÆö‰πâ‰∫ÜÁâπÂÆöÈ¢ÜÂüüÁöÑÊìç‰Ωú„ÄÅÁ±ªÂûãÂíåËΩ¨Êç¢„ÄÇÊØè‰∏™ÊñπË®ÄÈÉΩÈíàÂØπÁâπÂÆöÈ¢ÜÂüüÊàñÊäΩË±°Á∫ßÂà´ÁöÑËÆ°ÁÆóËøõË°åË°®Á§∫Âíå‰ºòÂåñ„ÄÇËøôÁßçÊ®°ÂùóÂåñÂÖÅËÆ∏ÂºÄÂèë‰∫∫ÂëòÈÄöËøáÁªÑÂêàÂíåËΩ¨Êç¢Ëøô‰∫õÊñπË®ÄÊù•ÊûÑÂª∫Ëá™ÂÆö‰πâÁºñËØëÁÆ°ÈÅì„ÄÇ ‰ª•‰∏ãÊòØÂØπÂÖ≥ÈîÆ MLIR ÊñπË®ÄÁöÑ‰ªãÁªçÔºåÂ¶Ç Math„ÄÅLinalg„ÄÅSCF Âíå AffineÔºåÂÆÉ‰ª¨Âú®È´òÊÄßËÉΩÂíåÈ¢ÜÂüüÁâπÂÆöËÆ°ÁÆó‰∏≠ÂèëÊå•ÁùÄÂÖ≥ÈîÆ‰ΩúÁî®„ÄÇ 1. Math ÊñπË®Ä ÁõÆÁöÑÔºö Math ÊñπË®ÄÊèê‰æõ‰∫Ü‰∏ÄÁªÑÂú®ËÆ°ÁÆó‰ªªÂä°‰∏≠Â∏∏Áî®ÁöÑÊï∞Â≠¶Êìç‰ΩúÔºåÂ¶Ç‰∏âËßíÂáΩÊï∞„ÄÅÊåáÊï∞ÂáΩÊï∞„ÄÅÂØπÊï∞ÂáΩÊï∞ÂíåÁÆóÊúØÊìç‰Ωú„ÄÇÂÆÉ‰Ωú‰∏∫È´òÁ∫ßÊäΩË±°‰∏é‰ΩéÁ∫ßÊï∞ÂÄºËÆ°ÁÆó‰πãÈó¥ÁöÑÊ°•Ê¢Å„ÄÇ ÁâπÊÄßÔºö ÂåÖÊã¨Âü∫Êú¨ÁöÑÊï∞Â≠¶ÂáΩÊï∞ÔºåÂ¶Ç sin„ÄÅcos„ÄÅexp„ÄÅlog Âíå sqrt„ÄÇ ÈÄöËøáÊäΩË±°Â∏∏Áî®Êï∞Â≠¶‰æãÁ®ãÁÆÄÂåñËÆ°ÁÆó„ÄÇ ÊîØÊåÅÈíàÂØπÊï∞Â≠¶Êìç‰ΩúÁöÑ‰ºòÂåñÔºåÂ¶ÇÂ∏∏ÈáèÊäòÂè†ÊàñÂü∫‰∫éÂ∫ìÁöÑÊõøÊç¢„ÄÇ Â∫îÁî®Ôºö Â∏∏Áî®‰∫éÊú∫Âô®Â≠¶‰π†„ÄÅÁßëÂ≠¶ËÆ°ÁÆó‰ª•ÂèäÈúÄË¶ÅÂ§ßÈáèÊï∞ÂÄºËÆ°ÁÆóÁöÑÈ¢ÜÂüü„ÄÇ ‰∏∫ËΩ¨Êç¢‰∏∫Á°¨‰ª∂‰ºòÂåñÁöÑÊï∞Â≠¶Â∫ìÊèê‰æõ‰∫ÜÂü∫Á°Ä„ÄÇ 2. Linalg ÊñπË®Ä ÁõÆÁöÑÔºö Linalg ÊñπË®ÄÊó®Âú®Ë°®Á§∫ÁªìÊûÑÂåñÁöÑÁ∫øÊÄß‰ª£Êï∞ËÆ°ÁÆóÔºåÂ¶ÇÁü©Èòµ‰πòÊ≥ï„ÄÅÂç∑ÁßØÂíåÂΩíÁ∫¶„ÄÇÂÆÉÊèê‰æõ‰∫Ü‰∏éÂº†ÈáèÂíåÁ∫øÊÄß‰ª£Êï∞Êìç‰ΩúÁ¥ßÂØÜÂØπÈΩêÁöÑÊäΩË±°„ÄÇ ÁâπÊÄßÔºö Êìç‰ΩúÂåÖÊã¨Ôºö linalg.matmulÔºöÁü©Èòµ-Áü©Èòµ‰πòÊ≥ï„ÄÇ linalg.convÔºöÁî®‰∫éÂõæÂÉèÂ§ÑÁêÜÊàñÁ•ûÁªèÁΩëÁªúÁöÑÂç∑ÁßØ„ÄÇ linalg.genericÔºöÁî®‰∫éÁî®Êà∑ÂÆö‰πâÁ∫øÊÄß‰ª£Êï∞Ê®°ÂºèÁöÑÈÄöÁî®Âæ™ÁéØ„ÄÇ ÁªÑÂêàÊÄßÔºö Linalg Êìç‰ΩúÂèØ‰ª•ÁªÑÂêàÂíåÂµåÂ•ó‰ª•ÂΩ¢ÊàêÂ§çÊùÇÁöÑËÆ°ÁÆó„ÄÇ ÊòæÂºèÂª∫Ê®°Ëø≠‰ª£ÂíåÂÜÖÂ≠òËÆøÈóÆÊ®°Âºè„ÄÇ ‰ºòÂåñÔºö È´òÁ∫ßËΩ¨Êç¢ÔºàÂ¶ÇÂàÜÂùó„ÄÅËûçÂêàÔºâ„ÄÇ ‰∏é‰ΩéÁ∫ßÊñπË®ÄÔºàÂ¶Ç AffineÔºâÈõÜÊàêÔºå‰ª•ËøõË°åËØ¶ÁªÜÁöÑÁ°¨‰ª∂Êò†Â∞Ñ„ÄÇ Â∫îÁî®Ôºö Êú∫Âô®Â≠¶‰π†Ê°ÜÊû∂‰∏≠ÁöÑÂº†ÈáèÊìç‰Ωú„ÄÇ Ê∂âÂèäÂØÜÈõÜÂíåÁ®ÄÁñèÁ∫øÊÄß‰ª£Êï∞ÁöÑÈ´òÊÄßËÉΩËÆ°ÁÆóÂ∑•‰ΩúË¥üËΩΩ„ÄÇ 3. SCF ÊñπË®ÄÔºàÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºâ ÁõÆÁöÑÔºö SCF ÊñπË®ÄÊèê‰æõ‰∫ÜÂü∫Êú¨ÁöÑÊéßÂà∂ÊµÅÁªìÊûÑÔºåÂ¶ÇÂæ™ÁéØÂíåÊù°‰ª∂ËØ≠Âè•„ÄÇËøô‰∫õÁªìÊûÑÊòØÈÄöÁî®ÁöÑÔºåÂèØ‰ª•‰Ωú‰∏∫È´òÁ∫ßÊéßÂà∂ÊµÅÂíåËø≠‰ª£Âª∫Ê®°ÁöÑÊûÑÂª∫Âùó„ÄÇ ÁâπÊÄßÔºö Êìç‰ΩúÔºö scf.forÔºöË°®Á§∫Â∏¶ÊúâËµ∑ÂßãÂÄº„ÄÅÁªìÊùüÂÄºÂíåÊ≠•ÈïøÁöÑÊ†áÂáÜ for Âæ™ÁéØ„ÄÇ scf.ifÔºöÁî®‰∫éÊéßÂà∂ÊµÅÁöÑÊù°‰ª∂ÂàÜÊîØ„ÄÇ scf.parallelÔºöÁî®‰∫éÂ§öÁ∫øÁ®ãÊàñ SIMD È£éÊ†ºÊâßË°åÁöÑÂπ∂Ë°åÂæ™ÁéØ„ÄÇ È´òÁ∫ßÊéßÂà∂ÊµÅÊäΩË±°ÁÆÄÂåñ‰∫ÜÂêéÁª≠ÁöÑ‰ºòÂåñÂíåËΩ¨Êç¢„ÄÇ Â∫îÁî®Ôºö Áî®‰ΩúÂ∞ÜÈ´òÁ∫ßÂæ™ÁéØËΩ¨Êç¢‰∏∫‰ΩéÁ∫ßÁªìÊûÑÁöÑ‰∏≠Èó¥Ë°®Á§∫„ÄÇ ‰Ωú‰∏∫ÈõÜÊàêÂæ™ÁéØ‰ºòÂåñÔºàÂ¶ÇÂæ™ÁéØÂ±ïÂºÄÊàñÂêëÈáèÂåñÔºâÁöÑË∑≥Êùø„ÄÇ 4. Affine ÊñπË®Ä ÁõÆÁöÑÔºö Affine ÊñπË®ÄÊèê‰æõ‰∫ÜÁî®‰∫éÂª∫Ê®°ÈùôÊÄÅÊéßÂà∂ÊµÅ„ÄÅÂÜÖÂ≠òËÆøÈóÆÊ®°ÂºèÂíåÂæ™ÁéØÂµåÂ•óÁöÑÁ≤æÁ°Æ‰∏îÂèØÂàÜÊûêÁöÑÁªìÊûÑ„ÄÇÂÆÉÁâπÂà´ÈÄÇÁî®‰∫é‰ºòÂåñÊÄßËÉΩÂÖ≥ÈîÆÁöÑËÆ°ÁÆó„ÄÇ ÁâπÊÄßÔºö Affine Ë°®ËææÂºèÔºö ‰ΩøÁî®Â∏¶ÊúâÊï¥Êï∞Á≥ªÊï∞ÁöÑÁ∫øÊÄßË°®ËææÂºèÊù•Ë°®Á§∫Âæ™ÁéØËæπÁïåÂíåÂÜÖÂ≠òËÆøÈóÆ„ÄÇ Á§∫‰æãÔºöaffine.for %i = 0 to 100 step 2„ÄÇ Affine Êò†Â∞ÑÔºö ÊäΩË±°Âú∞Ë°®Á§∫Á¥¢ÂºïÂíåÂÜÖÂ≠òÂú∞ÂùÄ‰πãÈó¥ÁöÑÊò†Â∞Ñ„ÄÇ ÈÄÇÁî®‰∫éÂæ™ÁéØÂàÜÂùóÊàñÊï∞ÁªÑÈáçÁ¥¢ÂºïÁ≠âËΩ¨Êç¢„ÄÇ ‰ºòÂåñÔºö ÊîØÊåÅÂæ™ÁéØËûçÂêà„ÄÅ‰∫§Êç¢ÂíåÂàÜÂùóÁ≠âËΩ¨Êç¢„ÄÇ ÂÖÅËÆ∏‰æùËµñÊÄßÂàÜÊûê‰ª•ËøõË°åÂπ∂Ë°åÊâßË°å„ÄÇ Â∫îÁî®Ôºö ÈúÄË¶ÅÊòæÂºèÊéßÂà∂Âæ™ÁéØÂíåÂÜÖÂ≠òÁöÑÈ´òÊÄßËÉΩËÆ°ÁÆó„ÄÇ ‰Ωú‰∏∫Èôç‰ΩéÂà∞Á°¨‰ª∂ÁâπÂÆöË°®Á§∫ÔºàÂ¶Ç LLVM IRÔºâÁöÑÂü∫Á°ÄÂ±Ç„ÄÇ ÊñπË®Ä‰πãÈó¥ÁöÑ‰∫§‰∫í MLIR ÊñπË®ÄËÆæËÆ°‰∏∫Êó†Áºù‰∫íÊìç‰Ωú„ÄÇ‰æãÂ¶ÇÔºö Linalg ÊñπË®Ä‰∏≠ÁöÑÈ´òÁ∫ßÊìç‰ΩúÂèØ‰ª•Èôç‰Ωé‰∏∫ SCF ÊñπË®Ä‰∏≠ÁöÑÂæ™ÁéØÔºåÊàñÈôç‰Ωé‰∏∫ Affine ÊñπË®Ä‰∏≠ÁöÑÈùôÊÄÅÂæ™ÁéØ‰ª•ËøõË°åËøõ‰∏ÄÊ≠•‰ºòÂåñ„ÄÇ Math ÊñπË®Ä‰∏≠ÁöÑÊï∞Â≠¶Êìç‰ΩúÂèØ‰ª•ÂµåÂÖ•Âà∞ Linalg Êàñ Affine Êìç‰Ωú‰∏≠ËøõË°åÊï∞ÂÄºËÆ°ÁÆó„ÄÇ SCF Âíå Affine ÊñπË®ÄÊèê‰æõ‰∫Ü‰∫íË°•ÁöÑÊéßÂà∂ÊµÅÊäΩË±°ÔºöSCF Áî®‰∫éÈÄöÁî®Âæ™ÁéØÔºåAffine Áî®‰∫éÈùôÊÄÅ„ÄÅÂèØÂàÜÊûêÁöÑÊ®°Âºè„ÄÇ ‰ΩøÁî® MLIR ÊñπË®ÄÁöÑ‰ºòÂäø Ê®°ÂùóÂåñÔºöÂºÄÂèë‰∫∫ÂëòÂèØ‰ª•ÈÄâÊã©ÊàñÂÆö‰πâÈÄÇÂêàÂÖ∂È¢ÜÂüüÁöÑÊñπË®ÄÔºå‰øÉËøõÈáçÁî®Âíå‰∏ì‰∏öÂåñ„ÄÇ ÂèØÊâ©Â±ïÊÄßÔºöÂèØ‰ª•Âú®‰∏çÊîπÂèòÊ†∏ÂøÉÂü∫Á°ÄËÆæÊñΩÁöÑÊÉÖÂÜµ‰∏ãÂºïÂÖ•Êñ∞ÊñπË®Ä„ÄÇ ‰ºòÂåñÁÆ°ÈÅìÔºöÊñπË®ÄÊîØÊåÅ‰ªéÈ´òÁ∫ßÊäΩË±°Âà∞‰ΩéÁ∫ßÁ°¨‰ª∂ÁâπÂÆöÊåá‰ª§ÁöÑÂàÜÈò∂ÊÆµÈôç‰ΩéÂíå‰ºòÂåñ„ÄÇ È¢ÜÂüüÁâπÂÆöÊïàÁéáÔºöÈ¢ÑÂÆö‰πâÁöÑÊìç‰ΩúÂíåÊ®°ÂºèÊª°Ë∂≥Êú∫Âô®Â≠¶‰π†ÂíåÁßëÂ≠¶ËÆ°ÁÆóÁ≠âÁâπÂÆöÈ¢ÜÂüüÁöÑÈúÄÊ±Ç„ÄÇ MLIR ÁöÑÊñπË®ÄÊñπÊ≥ï‰∏∫ÂºÄÂèë‰ºòÂåñÁöÑ„ÄÅÂèØÁßªÊ§ç‰∏îÂèØÁª¥Êä§ÁöÑÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÊ°ÜÊû∂„ÄÇ "},"Learn/LearnMLIR/Linalg.html":{"url":"Learn/LearnMLIR/Linalg.html","title":"Linalg","keywords":"","body":"Linalg Linalg is designed to solve the High-level Hierarchical Optimization (HHO box) in MLIR and to interoperate nicely within a Mixture Of Expert Compilers environment (i.e. the CGSel box).Linalg Êó®Âú®Ëß£ÂÜ≥ MLIR ‰∏≠ÁöÑÈ´òÁ∫ßÂàÜÂ±Ç‰ºòÂåñÔºàHHO Ê°ÜÔºâÈóÆÈ¢òÔºåÂπ∂Âú®Ê∑∑Âêà‰∏ìÂÆ∂ÁºñËØëÂô®ÁéØÂ¢É‰∏≠ËâØÂ•ΩÂú∞‰∫§‰∫íÔºàÂç≥ CGSel Ê°ÜÔºâ„ÄÇ Set of Key Transformations‰∏ÄÁªÑÂÖ≥ÈîÆÂèòÊç¢ The following key transformations have been central to driving the design of Linalg. They are all implemented in terms of the properties of the linalg.generic OpInterface and avoid the pitfall of relying on hardcoded one-off op knowledge.‰ª•‰∏ãÂÖ≥ÈîÆËΩ¨Êç¢ÊòØÊé®Âä® Linalg ËÆæËÆ°ÁöÑÂÖ≥ÈîÆ„ÄÇÂÆÉ‰ª¨ÈÉΩÂü∫‰∫é linalg.generic OpInterface ÁöÑÊÄßË¥®ÂÆûÁé∞ÔºåÈÅøÂÖç‰∫Ü‰æùËµñ‰∫éÁ°¨ÁºñÁ†ÅÁöÑÂçïÊ¨°Êìç‰ΩúÁü•ËØÜÁöÑÈô∑Èò±„ÄÇ The textual form description of these transformations is left for future work. Still, it is useful to list the key transformations that are performed on the Linalg IR and that have influenced its design:Ëøô‰∫õÂèòÊç¢ÁöÑÊñáÊú¨ÂΩ¢ÂºèÊèèËø∞ÁïôÂæÖ‰ª•ÂêéÁöÑÂ∑•‰Ωú„ÄÇÂ∞ΩÁÆ°Â¶ÇÊ≠§ÔºåÂàóÂá∫Âú® Linalg IR ‰∏äÊâßË°åÁöÑÂÖ≥ÈîÆÂèòÊç¢‰ª•ÂèäÂØπÂÖ∂ËÆæËÆ°‰∫ßÁîüÂΩ±ÂìçÁöÑÂèòÊç¢ÊòØÊúâÁî®ÁöÑÔºö Progressive Buffer Allocation.Ê∏êËøõÂºèÁºìÂÜ≤Âå∫ÂàÜÈÖç„ÄÇ Parametric Tiling. ÂèÇÊï∞Èì∫Á†ñ„ÄÇ Promotion to Temporary Buffer in Fast Memory.ÊèêÂçáËá≥Âø´ÈÄüÂÜÖÂ≠ò‰∏≠ÁöÑ‰∏¥Êó∂ÁºìÂÜ≤Âå∫„ÄÇ Tiled Producer-Consumer Fusion with Parametric Tile-And-Fuse.Âü∫‰∫éÂèÇÊï∞ÂåñÂàÜÂùóËûçÂêàÁöÑÈï∂ÂµåÂºèÁîü‰∫ßËÄÖ-Ê∂àË¥πËÄÖËûçÂêà Map to Parallel and Reduction Loops and Hardware.Âπ∂Ë°åÂíåÂΩíÁ∫¶Âæ™ÁéØÂèäÁ°¨‰ª∂ÁöÑÊò†Â∞Ñ Vectorization: Rewrite in Vector Form.ÂêëÈáèÂåñÔºö‰ª•ÂêëÈáèÂΩ¢ÂºèÈáçÂÜô„ÄÇ Lower to Loops (Affine, Generic, and Parallel).‰∏ãÂà∞Âæ™ÁéØÔºà‰ªøÂ∞Ñ„ÄÅÈÄöÁî®ÂíåÂπ∂Ë°åÔºâ„ÄÇ Lower to Library Calls or Special Instructions, Intrinsics or ISA.‰∏ãËá≥Â∫ìÂáΩÊï∞Ë∞ÉÁî®ÊàñÁâπÊÆäÊåá‰ª§ÔºåÂÜÖÂª∫ÂáΩÊï∞ÊàñÊåá‰ª§ÈõÜÊû∂ÊûÑ„ÄÇ Partially Lower to Iterations Over a Finer-Grained Linalg Op.ÈÉ®ÂàÜÈôç‰ΩéÂà∞Êõ¥ÁªÜÁ≤íÂ∫¶ÁöÑ Linalg Êìç‰ΩúËø≠‰ª£„ÄÇ "},"Learn/LearnMLIR/MLIR-LanRef.html":{"url":"Learn/LearnMLIR/MLIR-LanRef.html","title":"MLIR-LanRef","keywords":"","body":"MLIR Language Reference text text text MLIR Âü∫Êú¨‰∏äÊòØÂü∫‰∫é‰∏ÄÁßçÁ±ªÂõæÁöÑÊï∞ÊçÆÁªìÊûÑÔºåËøôÁßçÁªìÊûÑÁî±Áß∞‰∏∫Êìç‰Ωú (Operations) ÁöÑËäÇÁÇπÂíåÁß∞‰∏∫ÂÄº (Values) ÁöÑËæπÁªÑÊàê„ÄÇÊØè‰∏™ÂÄºÈÉΩÊòØÁî±‰∏Ä‰∏™Êìç‰ΩúÊàñÂùóÂèÇÊï∞ (Block Argument) ‰∫ßÁîüÁöÑÔºåÂπ∂‰∏îÂÖ∑ÊúâÁî±Á±ªÂûãÁ≥ªÁªüÂÆö‰πâÁöÑÂÄºÁ±ªÂûã„ÄÇÊìç‰ΩúÂåÖÂê´Âú®Âùó (Blocks) ‰∏≠ÔºåÂùóÂåÖÂê´Âú®Âå∫Âüü (Regions) ‰∏≠„ÄÇÊìç‰ΩúÂú®ÂÖ∂ÊâÄÂ±ûÁöÑÂùó‰∏≠ÊòØÊúâÈ°∫Â∫èÁöÑÔºåÂùóÂú®ÂÖ∂ÊâÄÂ±ûÁöÑÂå∫Âüü‰∏≠‰πüÊòØÊúâÈ°∫Â∫èÁöÑÔºåÂ∞ΩÁÆ°ËøôÁßçÈ°∫Â∫èÂú®Êüê‰∫õÁ±ªÂûãÁöÑÂå∫Âüü‰∏≠ÂèØËÉΩÂÖ∑ÊúâÊàñ‰∏çÂÖ∑ÊúâËØ≠‰πâÊÑè‰πâ„ÄÇÊìç‰ΩúËøòÂèØ‰ª•ÂåÖÂê´Âå∫ÂüüÔºå‰ªéËÄåËÉΩÂ§üË°®Á§∫Â±ÇÊ¨°ÁªìÊûÑ„ÄÇ Êìç‰ΩúÂèØ‰ª•Ë°®Á§∫ËÆ∏Â§ö‰∏çÂêåÁöÑÊ¶ÇÂøµÔºå‰ªéÈ´òÂ±ÇÊ¶ÇÂøµÔºàÂ¶ÇÂáΩÊï∞ÂÆö‰πâ„ÄÅÂáΩÊï∞Ë∞ÉÁî®„ÄÅÁºìÂÜ≤Âå∫ÂàÜÈÖç„ÄÅÁºìÂÜ≤Âå∫ÁöÑËßÜÂõæÊàñÂàáÁâá‰ª•ÂèäËøõÁ®ãÂàõÂª∫ÔºâÂà∞‰ΩéÂ±ÇÊ¶ÇÂøµÔºàÂ¶Ç‰∏éÁõÆÊ†áÊó†ÂÖ≥ÁöÑÁÆóÊúØ„ÄÅ‰∏éÁõÆÊ†áÁõ∏ÂÖ≥ÁöÑÊåá‰ª§„ÄÅÈÖçÁΩÆÂØÑÂ≠òÂô®ÂíåÈÄªËæëÈó®Ôºâ„ÄÇËøô‰∫õ‰∏çÂêåÁöÑÊ¶ÇÂøµÁî± MLIR ‰∏≠ÁöÑ‰∏çÂêåÊìç‰ΩúË°®Á§∫ÔºåÂπ∂‰∏î MLIR ‰∏≠ÂèØÁî®ÁöÑÊìç‰ΩúÈõÜÂèØ‰ª•‰ªªÊÑèÊâ©Â±ï„ÄÇ MLIR ËøòÊèê‰æõ‰∫Ü‰∏Ä‰∏™ÂèØÊâ©Â±ïÁöÑÊ°ÜÊû∂ÔºåÁî®‰∫éÂØπÊìç‰ΩúËøõË°åËΩ¨Êç¢Ôºå‰ΩøÁî®‰∫ÜÁºñËØëÂô® Passes ÁöÑÂ∏∏ËßÅÊ¶ÇÂøµ„ÄÇÂØπ‰ªªÊÑèÊìç‰ΩúÈõÜÂêØÁî®‰ªªÊÑèËΩ¨Êç¢ÈõÜ‰ºöÂ∏¶Êù•ÊòæËëóÁöÑÊâ©Â±ïÊåëÊàòÔºåÂõ†‰∏∫ÊØè‰∏™ËΩ¨Êç¢ÈÉΩÂøÖÈ°ªÂèØËÉΩËÄÉËôëÂà∞‰ªª‰ΩïÊìç‰ΩúÁöÑËØ≠‰πâ„ÄÇMLIR ÈÄöËøáÂÖÅËÆ∏Êìç‰ΩúËØ≠‰πâ‰ΩøÁî®ÁâπÊÄß (Traits) ÂíåÊé•Âè£ (Interfaces) ËøõË°åÊäΩË±°ÊèèËø∞ÔºåËß£ÂÜ≥‰∫ÜËøô‰∏ÄÂ§çÊùÇÊÄßÔºå‰ªéËÄå‰ΩøËΩ¨Êç¢ËÉΩÂ§üÊõ¥ÈÄöÁî®Âú∞Êìç‰ΩúËøô‰∫õÊìç‰Ωú„ÄÇÁâπÊÄßÈÄöÂ∏∏ÊèèËø∞‰∫ÜÂØπÊúâÊïà‰∏≠Èó¥Ë°®Á§∫ (IR) ÁöÑÈ™åËØÅÁ∫¶ÊùüÔºå‰ªéËÄåËÉΩÂ§üÊçïËé∑Âπ∂Ê£ÄÊü•Â§çÊùÇÁöÑ‰∏çÂèòÈáè„ÄÇÔºàÂèÇËßÅ Op vs OperationÔºâ MLIR ÁöÑ‰∏Ä‰∏™ÊòéÊòæÂ∫îÁî®ÊòØË°®Á§∫Âü∫‰∫éÈùôÊÄÅÂçïËµãÂÄºÂΩ¢Âºè (SSA) ÁöÑ‰∏≠Èó¥Ë°®Á§∫ (IR)ÔºåÂ¶Ç LLVM Ê†∏ÂøÉ IRÔºå‰ΩøÁî®ÈÄÇÂΩìÁöÑÊìç‰ΩúÁ±ªÂûãÊù•ÂÆö‰πâÊ®°Âùó„ÄÅÂáΩÊï∞„ÄÅÂàÜÊîØ„ÄÅÂÜÖÂ≠òÂàÜÈÖçÂíåÈ™åËØÅÁ∫¶ÊùüÔºå‰ª•Á°Æ‰øù SSA ‰∏ªÂØºÊÄß (Dominance) Â±ûÊÄß„ÄÇMLIR ÂåÖÂê´‰∫Ü‰∏ÄÁªÑÂÆö‰πâ‰∫ÜËøô‰∫õÁªìÊûÑÁöÑÊñπË®Ä (Dialects)„ÄÇÁÑ∂ËÄåÔºåMLIR ÁöÑËÆæËÆ°Ë∂≥Â§üÈÄöÁî®Ôºå‰πüÂèØ‰ª•Ë°®Á§∫ÂÖ∂‰ªñÁ±ª‰ººÁºñËØëÂô®ÁöÑÊï∞ÊçÆÁªìÊûÑÔºå‰æãÂ¶ÇËØ≠Ë®ÄÂâçÁ´Ø‰∏≠ÁöÑÊäΩË±°ËØ≠Ê≥ïÊ†ë„ÄÅÁõÆÊ†áÁâπÂÆöÂêéÁ´Ø‰∏≠ÁîüÊàêÁöÑÊåá‰ª§ÊàñÈ´òÁ∫ßÁªºÂêàÂ∑•ÂÖ∑‰∏≠ÁöÑÁîµË∑Ø„ÄÇ text ÂÖ≥‰∫éMLIRÂü∫Êú¨Ê®°ÂùóÂ≠¶‰π†ËøáÁ®ãÂ¶Ç‰∏ãÔºö Dialect, Attribute, Type, OperationÔºõÊÉ≥Ë±°Â¶ÇÊûúËá™Â∑±ÂéªÂÆûÁé∞ÔºåËØ•ÊÄé‰πàËÆæËÆ°Á±ªÔºõ DialectConversionÔºõÊÉ≥Ë±°Âú®Ëá™Â∑±ÂÆûÁé∞ÁöÑÂâçÂõõ‰∏™Ê®°Âùó‰∏äÔºåÂ¶Ç‰ΩïÂÆûÁé∞DialectConversionÔºõ Interface, Constraint, TraitÔºõÂêåÊ†∑ÔºåÊÉ≥Ë±°Ëá™Â∑±‰ºöÊÄé‰πàÂ¢ûÂä†Ëøô‰∫õÂäüËÉΩÔºõ Transformation, ConcalizationÔºõ Region, BlockÔºöÂü∫‰∫é1. ËÆæËÆ°ÁöÑOperationÔºå‰ª•Âèä4. Â¢ûÂä†ÁöÑTransformationÔºåÊÉ≥Ë±°Â¶Ç‰ΩïÂØπOperationËøõË°åÊäΩË±°ÔºåÊèêÂèñÂá∫RegionÂíåBlockÁöÑÊ¶ÇÂøµÔºõ PassÔºõ ÊúÄÂêéÊâçÊòØODSÂíåDRR„ÄÇ MLIR‰∏≠DialectsÂàÜÁ±ªÂèäÂÖ≥ËÅî OpenXLA openxla An open ecosystem of performant, portable, and extensible machine learning (ML) infrastructure components that simplify ML development by defragmenting the tools between frontend frameworks and hardware backends. Built by industry leaders in AI modeling, software, and hardware. ‰∏Ä‰∏™Áî±È´òÊÄßËÉΩ„ÄÅÂèØÁßªÊ§çÂíåÂèØÊâ©Â±ïÁöÑÊú∫Âô®Â≠¶‰π† (ML) Âü∫Á°ÄËÆæÊñΩÁªÑ‰ª∂ÁªÑÊàêÁöÑÂºÄÊîæÁîüÊÄÅÁ≥ªÁªüÔºåÂèØÈÄöËøáÂØπÂâçÁ´ØÊ°ÜÊû∂ÂíåÁ°¨‰ª∂ÂêéÁ´Ø‰πãÈó¥ÁöÑÂ∑•ÂÖ∑ËøõË°åÁ¢éÁâáÊï¥ÁêÜÊù•ÁÆÄÂåñ ML ÂºÄÂèë„ÄÇÁî± AI Âª∫Ê®°„ÄÅËΩØ‰ª∂ÂíåÁ°¨‰ª∂È¢ÜÂüüÁöÑË°å‰∏öÈ¢ÜÂØºËÄÖÊûÑÂª∫„ÄÇ XLA XLA (Accelerated Linear Algebra) is an open source compiler for machine learning. The XLA compiler takes models from popular frameworks such as PyTorch, TensorFlow, and JAX, and optimizes the models for high-performance execution across different hardware platforms including GPUs, CPUs, and ML accelerators. XLAÔºàÂä†ÈÄüÁ∫øÊÄß‰ª£Êï∞ÔºâÊòØ‰∏Ä‰∏™Áî®‰∫éÊú∫Âô®Â≠¶‰π†ÁöÑÂºÄÊ∫êÁºñËØëÂô®„ÄÇ XLA ÁºñËØëÂô®ÈááÁî®Êù•Ëá™ PyTorch„ÄÅTensorFlow Âíå JAX Á≠âÊµÅË°åÊ°ÜÊû∂ÁöÑÊ®°ÂûãÔºåÂπ∂‰ºòÂåñÊ®°ÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåÁöÑÁ°¨‰ª∂Âπ≥Âè∞ÔºàÂåÖÊã¨ GPU„ÄÅCPU Âíå ML Âä†ÈÄüÂô®Ôºâ‰∏äÂÆûÁé∞È´òÊÄßËÉΩÊâßË°å„ÄÇ Key benefits ‰∏ªË¶Å‰ºòÁÇπ Build anywhere : XLA is already integrated into leading ML frameworks such as TensorFlow, PyTorch, and JAX. ÈöèÂ§ÑÊûÑÂª∫ÔºöXLA Â∑≤ÈõÜÊàêÂà∞È¢ÜÂÖàÁöÑ ML Ê°ÜÊû∂‰∏≠Ôºå‰æãÂ¶Ç TensorFlow„ÄÅPyTorch Âíå JAX„ÄÇ Run anywhere : It supports various backends including GPUs, CPUs, and ML accelerators, and includes a pluggable infrastructure to add support for more. ÈöèÂ§ÑËøêË°åÔºöÂÆÉÊîØÊåÅÂêÑÁßçÂêéÁ´ØÔºåÂåÖÊã¨ GPU„ÄÅCPU Âíå ML Âä†ÈÄüÂô®ÔºåÂπ∂ÂåÖÂê´ÂèØÊèíÊãîÂü∫Á°ÄËÆæÊñΩ‰ª•Â¢ûÂä†ÂØπÊõ¥Â§öÂêéÁ´ØÁöÑÊîØÊåÅ„ÄÇ Maximize and scale performance : It optimizes a model's performance with production-tested optimization passes and automated partitioning for model parallelism. ÊúÄÂ§ßÂåñÂíåÊâ©Â±ïÊÄßËÉΩÔºöÂÆÉÈÄöËøáÁªèËøáÁîü‰∫ßÊµãËØïÁöÑ‰ºòÂåñËøáÁ®ãÂíåÊ®°ÂûãÂπ∂Ë°åÊÄßÁöÑËá™Âä®ÂàÜÂå∫Êù•‰ºòÂåñÊ®°ÂûãÁöÑÊÄßËÉΩ„ÄÇ Eliminate complexity : It leverages the power of MLIR to bring the best capabilities into a single compiler toolchain, so you don't have to manage a range of domain-specific compilers. Ê∂àÈô§Â§çÊùÇÊÄßÔºöÂÆÉÂà©Áî®‰∫Ü MLIRÂ∞ÜÊúÄ‰Ω≥ÂäüËÉΩÂºïÂÖ•Âçï‰∏™ÁºñËØëÂô®Â∑•ÂÖ∑ÈìæÔºåÂõ†Ê≠§ÊÇ®Êó†ÈúÄÁÆ°ÁêÜ‰∏ÄÁ≥ªÂàóÁâπÂÆö‰∫éÂüüÁöÑÁºñËØëÂô®„ÄÇ Future ready : As an open source project, built through a collaboration of leading ML hardware and software vendors, XLA is designed to operate at the cutting-edge of the ML industry. Èù¢ÂêëÊú™Êù•Ôºö‰Ωú‰∏∫‰∏Ä‰∏™ÂºÄÊ∫êÈ°πÁõÆÔºåÈÄöËøáÈ¢ÜÂÖàÁöÑ ML Á°¨‰ª∂ÂíåËΩØ‰ª∂‰æõÂ∫îÂïÜÁöÑÂêà‰ΩúÊûÑÂª∫ÔºåXLA Êó®Âú®Âú® ML Ë°å‰∏öÁöÑÂâçÊ≤øËøêË°å„ÄÇ StableHLO StableHLO is an operation set for high-level operations (HLO) in machine learning (ML) models. Essentially, it's a portability layer between different ML frameworks and ML compilers: ML frameworks that produce StableHLO programs are compatible with ML compilers that consume StableHLO programs. StableHLO ÊòØÊú∫Âô®Â≠¶‰π† (ML) Ê®°Âûã‰∏≠È´òÁ∫ßÊìç‰Ωú (HLO) ÁöÑÊìç‰ΩúÈõÜ„ÄÇÊú¨Ë¥®‰∏äÔºåÂÆÉÊòØ‰∏çÂêå ML Ê°ÜÊû∂Âíå ML ÁºñËØëÂô®‰πãÈó¥ÁöÑÂèØÁßªÊ§çÂ±ÇÔºöÁîüÊàê StableHLO Á®ãÂ∫èÁöÑ ML Ê°ÜÊû∂‰∏é‰ΩøÁî® StableHLO Á®ãÂ∫èÁöÑ ML ÁºñËØëÂô®ÂÖºÂÆπ„ÄÇ Shardy Shardy is an MLIR-based tensor partitioning system for all dialects. Built from the collaboration of both the GSPMD and PartIR teams, it incorporates the best of both systems, and the shared experience of both teams and users. Shardy ÊòØ‰∏Ä‰∏™Âü∫‰∫é MLIR ÁöÑÂº†ÈáèÂàíÂàÜÁ≥ªÁªüÔºåÈÄÇÁî®‰∫éÊâÄÊúâÊñπË®Ä„ÄÇÂÆÉÁî± GSPMD Âíå PartIR Âõ¢ÈòüÂêà‰ΩúÊûÑÂª∫ÔºåËûçÂêà‰∫Ü‰∏§‰∏™Á≥ªÁªüÁöÑ‰ºòÁÇπ‰ª•ÂèäÂõ¢ÈòüÂíåÁî®Êà∑ÁöÑÂÖ±‰∫´‰ΩìÈ™å„ÄÇ PJRT PJRT is a hardware and framework independent interface for ML compilers and runtimes. It is currently included with the XLA distribution. See the XLA GitHub and documentation for more information on how to use and integrate PJRT. PJRT ÊòØÁî®‰∫é ML ÁºñËØëÂô®ÂíåËøêË°åÊó∂ÁöÑÁã¨Á´ã‰∫éÁ°¨‰ª∂ÂíåÊ°ÜÊû∂ÁöÑÊé•Âè£„ÄÇÁõÆÂâçÂÆÉÂåÖÂê´Âú® XLA ÂèëË°åÁâà‰∏≠„ÄÇÊúâÂÖ≥Â¶Ç‰Ωï‰ΩøÁî®ÂíåÈõÜÊàê PJRT ÁöÑÊõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇÈòÖ XLA GitHub ÂíåÊñáÊ°£„ÄÇ TF(TensorFlow) Dialect This dialect maps to TensorFlow operations. ËØ•ÊñπË®ÄÊò†Â∞ÑÂà∞ TensorFlow Êìç‰Ωú„ÄÇ Invariants: ‰∏çÂèòÈáèÔºö All values are of Tensor type (in particular, scalars are represented using zero-dimensional tensors); ÊâÄÊúâÂÄºÈÉΩÊòØ Tensor Á±ªÂûãÔºàÁâπÂà´ÊòØÊ†áÈáè‰ΩøÁî®Èõ∂Áª¥Âº†ÈáèË°®Á§∫ÔºâÔºõ TODO: Make invariants more structured so that we can reference them in ops.TODOÔºö ‰Ωø‰∏çÂèòÈáèÊõ¥Âä†ÁªìÊûÑÂåñÔºå‰ª•‰æøÊàë‰ª¨ÂèØ‰ª•Âú®Êìç‰Ωú‰∏≠ÂºïÁî®ÂÆÉ‰ª¨„ÄÇ "},"Learn/LearnMLIR/PIR.html":{"url":"Learn/LearnMLIR/PIR.html","title":"PIR","keywords":"","body":"PIR PIR Âü∫Êú¨Ê¶ÇÂøµÂíåÂºÄÂèë¬∂ Âú® 3.0 ÁâàÊú¨‰∏ãÔºåÈ£ûÊ°®Á†îÂèë‰∫ÜÂü∫‰∫é MLIR ËåÉÂºèÁöÑÊñ∞‰∏Ä‰ª£‰∏≠Èó¥Ë°®Á§∫ÊäÄÊúØÔºåÂç≥ Paddle IRÔºà‰∏ãÁÆÄÁß∞ PIRÔºâ„ÄÇËøôÈ°πÊäÄÊúØÂØπÂ∫ïÂ±ÇÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÂ¶Ç Operation„ÄÅAttribute Á≠âËøõË°å‰∫ÜÁ≥ªÁªüÊÄßÁöÑÊäΩË±°Ôºå‰∏∫ÂºÄÂèëËÄÖÊèê‰æõ‰∫ÜÁÅµÊ¥ªÁöÑÂü∫Á°ÄÁªÑ‰ª∂ÔºõÂêåÊó∂ÔºåÈÄöËøáÂºïÂÖ• Dialect Ëøô‰∏ÄÊ¶ÇÂøµÔºåÈ£ûÊ°®ËÉΩÂ§üÂÖ®Èù¢„ÄÅÂàÜÂ±ÇÊ¨°ÁÆ°ÁêÜÊ°ÜÊû∂ÂêÑÊ®°ÂùóÂØπ‰∏≠Èó¥Ë°®Á§∫ÁöÑÈúÄÊ±ÇÔºåÂπ∂ÊîØÊåÅÂºÄÂèëËÄÖÊ†πÊçÆÈúÄÊ±ÇÂÆöÂà∂ÂåñÊâ©Â±ï DialectÔºåÊòæËëóÊèêÂçá‰∫ÜÊ°ÜÊû∂ÁöÑÊâ©Â±ïÊÄß„ÄÇPIR ÈÅµÂæ™ SSAÔºàÂç≥ Static Single AssignmentÔºâÂéüÂàôÔºåÁªü‰∏Ä‰∫ÜÈ°∂Â±ÇÁªìÊûÑÔºåÂÆûÁé∞‚ÄúÁÆóÂ≠êÈ°∫Â∫èÊÄß‚ÄùÂíå‚ÄúËÆ°ÁÆóÂõæËØ≠‰πâ‚ÄùÁöÑÂÖºÂÆπË°®Á§∫„ÄÇÊ≠§Â§ñÔºåPIR ËøòÊèê‰æõ‰∫ÜÊõ¥Âä†ÁÆÄÊ¥Å„ÄÅ‰ΩéÊàêÊú¨ÁöÑ Pass ÂºÄÂèë‰ΩìÁ≥ªÔºåÂπ∂ÂÜÖÁΩÆ‰∫Ü‰∏ÄÁ≥ªÂàó‰∏∞ÂØå‰∏îÂäüËÉΩÂÆåÂ§áÁöÑ Pass ‰ºòÂåñÁ≠ñÁï•Ôºå‰∏∫Â§ßÊ®°ÂûãÁöÑÊûÅËá¥ÊÄßËÉΩ‰ºòÂåñÊèê‰æõ‰∫ÜÂº∫ÊúâÂäõÊîØÊíë„ÄÇ Âú®Ê∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂ IR Ê¶ÇÂøµ‰∏≠Ôºå„ÄåÈ°∫Â∫èÊÄß„ÄçÂíå„ÄåÂõæËØ≠‰πâ„ÄçÊòØ‰∏§‰∏™ÈùûÂ∏∏È´òÈ¢ëÂ∏∏Áî®ÁöÑÊ¶ÇÂøµ„ÄÇÊóßÁöÑ‰∏≠Èó¥Ë°®Á§∫‰ΩìÁ≥ªÁî±„ÄåÈ°∫Â∫èÊÄß„ÄçProgramDesc Âíå„ÄåÂõæËØ≠‰πâ„ÄçGraph ‰∏§‰∏™Ê†∏ÂøÉÁ±ªÂÖ±ÂêåÊâøËΩΩ„ÄÇÁî®Êà∑Âú®ÈùôÊÄÅÂõæ API ÊàñËÄÖÂä®ËΩ¨ÈùôÊ®°Âùó‰∏ãÔºå‰∫ßÁîüÁöÑ‰∏≠Èó¥Ë°®Á§∫ÊòØ Op-by-Op ÁöÑ ProgramÔºåÂ¶ÇÊûúË¶ÅÂ∫îÁî®Êõ¥È´òÂ±ÇÈù¢ÁöÑ‰ºòÂåñÁ≠ñÁï•ÔºàÊØîÂ¶ÇÁÆóÂ≠êËûçÂêà„ÄÅinplace Á≠ñÁï•„ÄÅÂâ™ÊûùÁ≠âÔºâÔºåÊ°ÜÊû∂‰ºöÂ∞ÜÁî± Program ÊûÑÈÄ†Âá∫ GraphÔºåÂÖ∂Áî±Êï∞ÊçÆËäÇÁÇπ„ÄÅÁÆóÂ≠êËäÇÁÇπÂíåÂΩºÊ≠§ÂÖ≥ËÅîÁöÑËæπÊûÑÊàê„ÄÇ Âú®Êñ∞ÁöÑ Paddle IR ‰∏≠ÔºåÈ£ûÊ°®Âú®Â∫ïÂ±ÇÊäΩË±°‰∫Ü‰∏ÄÂ•óÈ´òÂ∫¶ÂèØÊâ©Â±ïÁöÑÂü∫Á°ÄÁªÑ‰ª∂ÔºåÂåÖÊã¨ Type„ÄÅAttrbute„ÄÅOp„ÄÅTrait Âíå InterfaceÔºåÂπ∂ÂºïÂÖ•‰∫Ü Dialect ÁöÑÊ¶ÇÂøµÔºåÊîØÊåÅÂºÄÂèëËÄÖÁÅµÊ¥ªÊâ©Â±ï„ÄÅËá™Áî±ÂÆöÂà∂ÔºåÊèê‰æõ‰∫ÜÂÆåÂ§áÈ≤ÅÈÇ¶ÁöÑËØ≠‰πâË°®ËææËÉΩÂäõÔºõÂú®Ê®°ÂûãË°®Á§∫Â±ÇÔºåÈÄöËøáÂ§ö Dialect Ê®°ÂùóÂåñÁÆ°ÁêÜÔºåÁªü‰∏ÄÂ§öÁ´ØË°®Á§∫ÔºåÂÆûÁé∞‰∫ÜËÆ≠Êé®‰∏Ä‰ΩìÁöÑÂÖ®Êû∂ÊûÑÁªü‰∏ÄË°®Á§∫ÔºåÊó†ÁºùË°îÊé•ÁªÑÂêàÁÆóÂ≠êÂíåÁºñËØëÂô®ÔºåÊîØÊåÅËá™Âä®‰ºòÂåñÂíåÂ§öÁ°¨‰ª∂ÈÄÇÈÖçÔºõÂú®ÂõæÂèòÊç¢Â±ÇÔºåÈÄöËøáÁªü‰∏ÄÂ∫ïÂ±ÇÊ®°ÂùóÔºåÁÆÄÂåñÂü∫Á°ÄÊ¶ÇÂøµÔºåÂêëÁî®Êà∑Êèê‰æõ‰∫Ü‰ΩéÊàêÊú¨ÂºÄÂèë„ÄÅÊòìÁî®È´òÊÄßËÉΩ„ÄÅ‰∏∞ÂØåÂèØÊèíÊãîÁöÑ Pass ‰ºòÂåñÊú∫Âà∂„ÄÇ È£ûÊ°®ÁöÑÊñ∞‰∏Ä‰ª£ÁöÑ IR Ë°®Á§∫ÂùöÊåÅ SSAÔºàÈùôÊÄÅÂçïËµãÂÄºÔºâÂéüÂàôÔºåÊ®°ÂûãÁ≠â‰ª∑‰∫é‰∏Ä‰∏™ÊúâÂêëÊó†ÁéØÂõæ„ÄÇÂπ∂‰ª• Value„ÄÅOperation ÂØπËÆ°ÁÆóÂõæËøõË°åÊäΩË±°Ôºå Operation ‰∏∫ËäÇÁÇπÔºåValue ‰∏∫Ëæπ„ÄÇ Operation Ë°®Á§∫ËÆ°ÁÆóÂõæ‰∏≠ÁöÑËäÇÁÇπÔºö‰∏Ä‰∏™ Operation Ë°®Á§∫‰∏Ä‰∏™ÁÆóÂ≠êÔºåÂÆÉÈáåÈù¢ÂåÖÂê´‰∫ÜÈõ∂‰∏™ÊàñÂ§ö‰∏™ RegionÔºõRegion Ë°®Á§∫‰∏Ä‰∏™Èó≠ÂåÖÔºåÂÆÉÈáåÈù¢ÂåÖÂê´‰∫ÜÈõ∂‰∏™ÊàñÂ§ö‰∏™ BlockÔºõBlock Ë°®Á§∫‰∏Ä‰∏™Á¨¶Âêà SSA ÁöÑÂü∫Êú¨ÂùóÔºåÈáåÈù¢ÂåÖÂê´‰∫ÜÈõ∂‰∏™ÊàñÂ§ö‰∏™ OperationÔºõ‰∏âËÄÖÂæ™ÁéØÂµåÂ•óÔºåÂèØ‰ª•ÂÆûÁé∞‰ªªÊÑèÂ§çÊùÇÁöÑËØ≠Ê≥ïÁªìÊûÑ Value Ë°®Á§∫ËÆ°ÁÆóÂõæ‰∏≠ÁöÑÊúâÂêëËæπÔºöÁî®Êù•Â∞Ü‰∏§‰∏™ Operaton ÂÖ≥ËÅîËµ∑Êù•ÔºåÊèèËø∞‰∫ÜÁ®ãÂ∫è‰∏≠ÁöÑ UD ÈìæÔºàÂç≥ Use-Define ÈìæÔºâÔºõOpResult Ë°®Á§∫ÂÆö‰πâÁ´ØÔºåÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ ValueÔºåOpOperand Ë°®Á§∫‰ΩøÁî®Á´ØÔºåÊèèËø∞‰∫ÜÂØπ‰∏Ä‰∏™ Value ÁöÑ‰ΩøÁî®„ÄÇ ‰∫å„ÄÅËÆæËÆ°ÂàùË°∑¬∂ ËÆ°ÁÆóÂõæ‰∏≠Èó¥Ë°®Á§∫ÔºàIntermediate RepresentationÔºåÂç≥ IRÔºâÊòØÊ∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂ÊÄßËÉΩ‰ºòÂåñ„ÄÅÊé®ÁêÜÈÉ®ÁΩ≤„ÄÅÁºñËØëÂô®Á≠âÊñπÂêëÁöÑÈáçË¶ÅÂü∫Áü≥„ÄÇËøë‰∫õÂπ¥Êù•ÔºåË∂äÊù•Ë∂äÂ§öÁöÑÊ°ÜÊû∂ÂíåÁ†îÁ©∂ËÄÖÂ∞ÜÁºñËØëÂô®ÊäÄÊúØÂºïÂÖ•Âà∞Ê∑±Â∫¶Â≠¶‰π†ÁöÑÁ•ûÁªèÁΩëÁªúÊ®°Âûã‰ºòÂåñ‰∏≠ÔºåÂπ∂Âú®Ê≠§Âü∫Á°Ä‰∏äÂÄüÂä©ÁºñËØëÂô®ÁöÑÁêÜÂøµ„ÄÅÊäÄÊúØÂíåÂ∑•ÂÖ∑ÂØπÁ•ûÁªèÁΩëÁªúËøõË°åËá™Âä®‰ºòÂåñÂíå‰ª£Á†ÅÁîüÊàê„ÄÇÈ£ûÊ°®ÂéÜÂè≤‰∏äÂú®Êû∂ÊûÑÂ±ÇÈù¢Âπ∂Â≠òÁùÄÂ§öÂ•ó‰∏çÂêåÁöÑ‰∏≠Èó¥Ë°®Á§∫‰ΩìÁ≥ªÔºåÂÖ∂Ë°®ËææËÉΩÂäõÂêÑ‰∏çÁõ∏Âêå„ÄÅPass ÂºÄÂèëÁª¥Êä§ÊàêÊú¨ËæÉÈ´òÔºå‰ª£Á†ÅÂ§çÁî®ÊÄßËæÉÂ∑ÆÔºåÁº∫‰πèÁªü‰∏ÄËßÑËåÉÔºåÂ≠òÂú®‰∏•ÈáçÁöÑÊ°ÜÊû∂Á®≥ÂÆöÊÄßÈóÆÈ¢ò„ÄÇ "},"Learn/LearnMocCUDA/CUDA-Wrap.html":{"url":"Learn/LearnMocCUDA/CUDA-Wrap.html","title":"CUDA-Wrap","keywords":"","body":"Kimi Ëøô‰∏§‰∏™CÊñá‰ª∂Ôºàpassthrough.h.txt Âíå passthrough.c.txtÔºâÊûÑÊàê‰∫Ü‰∏Ä‰∏™Âêç‰∏∫ cudawrap ÁöÑÂ∫ìÔºåÂÆÉÁöÑ‰ΩúÁî®ÊòØÊèê‰æõ‰∏Ä‰∏™Â∞ÅË£ÖÂ±ÇÔºåÁî®‰∫éÂä†ËΩΩÂíåËÆøÈóÆ CUDA Áõ∏ÂÖ≥ÁöÑÂ∫ìÔºàÂ¶Ç CUDA Runtime„ÄÅcuDNN Âíå cuBLASÔºâ‰∏≠ÁöÑÂáΩÊï∞„ÄÇËøô‰∏™Â∞ÅË£ÖÂ±ÇÂÖÅËÆ∏Á®ãÂ∫èÂú®ËøêË°åÊó∂Âä®ÊÄÅÂú∞Âä†ËΩΩËøô‰∫õÂ∫ìÔºåÂπ∂Êèê‰æõ‰∫Ü‰∏ÄÁßçÊú∫Âà∂Êù•Ë∞ÉÁî®Ëøô‰∫õÂ∫ì‰∏≠ÁöÑÂáΩÊï∞„ÄÇ‰ª•‰∏ãÊòØÂØπËøô‰∏§‰∏™Êñá‰ª∂ÁöÑËØ¶ÁªÜÂàÜÊûêÔºö passthrough.h Êñá‰ª∂ Ëøô‰∏™Â§¥Êñá‰ª∂ÂÆö‰πâ‰∫Ü cudawrap Â∫ìÁöÑÊï∞ÊçÆÁªìÊûÑÂíåÂÆèÔºåÁî®‰∫éÂ∞ÅË£ÖÂØπ CUDA Áõ∏ÂÖ≥Â∫ìÁöÑË∞ÉÁî®„ÄÇ Êï∞ÊçÆÁªìÊûÑÂÆö‰πâÔºö entry_tÔºö‰∏Ä‰∏™ÁªìÊûÑ‰ΩìÔºåÂåÖÂê´‰∏Ä‰∏™ÂáΩÊï∞ÊåáÈíà fn_ptr Âíå‰∏Ä‰∏™ÂáΩÊï∞Âêç nameÔºåÁî®‰∫éÂ≠òÂÇ®Â∫ì‰∏≠ÂáΩÊï∞ÁöÑÂú∞ÂùÄÂíåÂêçÁß∞„ÄÇ ÂÆèÂÆö‰πâÔºö ENTER Âíå LEAVEÔºöÁî®‰∫éË∞ÉËØïÁõÆÁöÑÔºåËÆ∞ÂΩïÂáΩÊï∞ÁöÑËøõÂÖ•ÂíåÁ¶ªÂºÄÊó∂Èó¥Ôºå‰ª•ÂèäËÆ°ÁÆóÂáΩÊï∞ÊâßË°åÊó∂Èó¥„ÄÇ TIME_GEMM_START Âíå TIME_GEMM_STOPÔºöÁî®‰∫éÊÄßËÉΩÂàÜÊûêÔºåËÆ∞ÂΩïÂíåËÆ°ÁÆó GEMMÔºàGeneral Matrix MultiplyÔºâÊìç‰ΩúÁöÑÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥„ÄÇ CUDART_ENTRY_ENUM„ÄÅCUDNN_ENTRY_ENUM Âíå CUBLAS_ENTRY_ENUMÔºöÂÆèÔºåÁî®‰∫éÁîüÊàêÊûö‰∏æÂÄºÔºå‰ª£Ë°®‰∏çÂêåÁöÑÂ∫ìÂáΩÊï∞„ÄÇ CUDART_FIND_ENTRY„ÄÅCUDNN_FIND_ENTRY Âíå CUBLAS_FIND_ENTRYÔºöÂÆèÔºåÁî®‰∫éÊü•ÊâæÁâπÂÆöÂáΩÊï∞ÁöÑÂÖ•Âè£„ÄÇ REAL_CUDA_RT_API_CALL„ÄÅREAL_CUDNN_CALL Âíå REAL_CUBLAS_CALLÔºöÂÆèÔºåÁî®‰∫éÂÆûÈôÖË∞ÉÁî®Â∫ì‰∏≠ÁöÑÂáΩÊï∞„ÄÇ Êûö‰∏æÂÆö‰πâÔºö cudart_entry_enum_t„ÄÅcudnn_entry_enum_t Âíå cublas_entry_enum_tÔºöÊûö‰∏æÁ±ªÂûãÔºåÂàóÂá∫‰∫ÜÊâÄÊúâÈúÄË¶ÅÂ∞ÅË£ÖÁöÑ CUDA Runtime„ÄÅcuDNN Âíå cuBLAS ÂáΩÊï∞„ÄÇ passthrough.c Êñá‰ª∂ Ëøô‰∏™Ê∫êÊñá‰ª∂ÂÆûÁé∞‰∫Ü passthrough.h ‰∏≠ÂÆö‰πâÁöÑÊï∞ÊçÆÁªìÊûÑÂíåÂáΩÊï∞„ÄÇ ÂÖ®Â±ÄÂèòÈáèÂàùÂßãÂåñÔºö _cudart_inited_„ÄÅ_cudnn_inited_ Âíå _cublas_inited_ÔºöÁî®‰∫éÊ†áËÆ∞ÂØπÂ∫îÁöÑÂ∫ìÊòØÂê¶Â∑≤ÁªèÂàùÂßãÂåñ„ÄÇ Â∫ìÂáΩÊï∞ÂÖ•Âè£Êï∞ÁªÑÔºö cudart_lib_entry„ÄÅcudnn_lib_entry Âíå cublas_lib_entryÔºöÊï∞ÁªÑÔºåÂ≠òÂÇ®‰∫ÜÂØπÂ∫îÂ∫ìÁöÑÊâÄÊúâÂáΩÊï∞ÂÖ•Âè£„ÄÇ Âä†ËΩΩÂ∫ìÂáΩÊï∞Ôºö load_cudart_lib„ÄÅload_cudnn_lib Âíå load_cublas_libÔºöÂáΩÊï∞ÔºåÁî®‰∫éÂä®ÊÄÅÂä†ËΩΩ CUDA Runtime„ÄÅcuDNN Âíå cuBLAS Â∫ìÔºåÂπ∂Êü•ÊâæÊâÄÈúÄÁöÑÂáΩÊï∞Âú∞ÂùÄ„ÄÇ ÂàùÂßãÂåñÊ£ÄÊü•ÂáΩÊï∞Ôºö cudart_lib_inited„ÄÅcudnn_lib_inited Âíå cublas_lib_initedÔºöÂáΩÊï∞ÔºåÁî®‰∫éÊ£ÄÊü•ÂØπÂ∫îÁöÑÂ∫ìÊòØÂê¶Â∑≤ÁªèÂàùÂßãÂåñ„ÄÇ ÊÄªÁªì cudawrap Â∫ìÁöÑ‰∏ªË¶Å‰ΩúÁî®ÊòØÊèê‰æõ‰∏Ä‰∏™‰∏≠Èó¥Â±ÇÔºå‰ΩøÂæóÂ∫îÁî®Á®ãÂ∫èÂèØ‰ª•Êõ¥Âä†ÁÅµÊ¥ªÂú∞‰ΩøÁî® CUDA Áõ∏ÂÖ≥ÁöÑÂ∫ì„ÄÇÈÄöËøáÂä®ÊÄÅÂä†ËΩΩÂíåÊü•ÊâæÂáΩÊï∞ÔºåÂÆÉÂÖÅËÆ∏Â∫îÁî®Á®ãÂ∫èÂú®‰∏çÂêåÁöÑÁéØÂ¢ÉÔºàÂ¶Ç‰∏çÂêåÁöÑ CUDA ÁâàÊú¨ÊàñÈÖçÁΩÆÔºâ‰∏ãËøêË°åÔºåËÄåÊó†ÈúÄÈáçÊñ∞ÁºñËØë„ÄÇÊ≠§Â§ñÔºåÂÆÉËøòÊèê‰æõ‰∫ÜÊÄßËÉΩÂàÜÊûêÂíåË∞ÉËØïÊîØÊåÅÔºåÂ∏ÆÂä©ÂºÄÂèëËÄÖ‰ºòÂåñÂíåË∞ÉËØï CUDA Áõ∏ÂÖ≥ÁöÑ‰ª£Á†Å„ÄÇ ‰ΩøÁî®ÊñπÊ≥ï Ë¶Å‰ΩøÁî® cudawrap Â∫ìÔºå‰Ω†ÈúÄË¶ÅÊåâÁÖß‰ª•‰∏ãÊ≠•È™§Êìç‰ΩúÔºö ÂåÖÂê´Â§¥Êñá‰ª∂ÔºöÂú®‰Ω†ÁöÑ C Êàñ C++ Ê∫êÊñá‰ª∂‰∏≠ÂåÖÂê´ passthrough.h Â§¥Êñá‰ª∂„ÄÇ ÈìæÊé•Â∫ìÊñá‰ª∂ÔºöÂú®ÁºñËØë‰Ω†ÁöÑÁ®ãÂ∫èÊó∂ÔºåÁ°Æ‰øùÈìæÊé•‰∫Ü cudawrap Â∫ì‰ª•ÂèäÂÆÉ‰æùËµñÁöÑ CUDA Áõ∏ÂÖ≥Â∫ìÔºàÂ¶Ç libcudart.so, libcudnn.so, libcublas.soÔºâ„ÄÇ ÂàùÂßãÂåñÂ∫ìÔºöÂú®Á®ãÂ∫è‰∏≠Ë∞ÉÁî® load_cudart_lib(), load_cudnn_lib(), Âíå load_cublas_lib() ÂáΩÊï∞Êù•Âä†ËΩΩÂØπÂ∫îÁöÑ CUDA Â∫ìÔºåÂπ∂ÂàùÂßãÂåñ cudawrap Â∫ì„ÄÇ Ë∞ÉÁî®Â∞ÅË£ÖÂáΩÊï∞Ôºö‰ΩøÁî® cudawrap Êèê‰æõÁöÑÂÆèÊù•Ë∞ÉÁî® CUDA Â∫ì‰∏≠ÁöÑÂáΩÊï∞„ÄÇ ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑ‰æãÂ≠êÔºåÂ±ïÁ§∫‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî® cudawrap Â∫ìÊù•Ë∞ÉÁî® CUDA Runtime API ‰∏≠ÁöÑ cudaMalloc Âíå cudaFree ÂáΩÊï∞Ôºö #include \"passthrough.h\" int main() { // ÂàùÂßãÂåñ CUDA ËøêË°åÊó∂Â∫ì if (load_cudart_lib() != 0) { fprintf(stderr, \"Failed to load CUDA runtime library.\\n\"); return -1; } // ÂàÜÈÖç CUDA ËÆæÂ§áÂÜÖÂ≠ò void *devPtr; size_t size = 1024 * 1024; // ÂàÜÈÖç 1MB ÂÜÖÂ≠ò REAL_CUDA_RT_API_CALL(cudart_lib_entry, , cudaMalloc, (void**)&devPtr, size); if (devPtr == NULL) { fprintf(stderr, \"Failed to allocate device memory.\\n\"); // ËøôÈáåÂ∫îËØ•ËøõË°åÊ∏ÖÁêÜÂ∑•‰Ωú return -1; } // ... Âú®ËøôÈáåËøõË°åÂÖ∂‰ªñ CUDA Êìç‰Ωú ... // ÈáäÊîæ CUDA ËÆæÂ§áÂÜÖÂ≠ò REAL_CUDA_RT_API_CALL(cudart_lib_entry, , cudaFree, (devPtr)); // Ê∏ÖÁêÜÂ∑•‰ΩúÔºåÂÖ≥Èó≠Á®ãÂ∫è return 0; } Âú®Ëøô‰∏™‰æãÂ≠ê‰∏≠ÔºåÊàë‰ª¨È¶ñÂÖàË∞ÉÁî® load_cudart_lib() Êù•Âä†ËΩΩ CUDA ËøêË°åÊó∂Â∫ìÂπ∂ÂàùÂßãÂåñ cudawrap Â∫ì„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨‰ΩøÁî® REAL_CUDA_RT_API_CALL ÂÆèÊù•Â∞ÅË£ÖÂØπ cudaMalloc Âíå cudaFree ÂáΩÊï∞ÁöÑË∞ÉÁî®„ÄÇËøô‰∏™ÂÆè‰ºöÊü•ÊâæÂØπÂ∫îÁöÑÂáΩÊï∞ÂÖ•Âè£ÔºåÂπ∂ÊâßË°åÂáΩÊï∞Ë∞ÉÁî®„ÄÇ ËØ∑Ê≥®ÊÑèÔºåËøô‰∏™‰æãÂ≠êÂÅáËÆæ cudawrap Â∫ìÂ∑≤ÁªèË¢´Ê≠£Á°ÆÁºñËØëÂπ∂ÈìæÊé•Âà∞‰Ω†ÁöÑÁ®ãÂ∫è‰∏≠„ÄÇÂú®ÂÆûÈôÖ‰ΩøÁî®‰∏≠Ôºå‰Ω†ÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆ‰Ω†ÁöÑÁéØÂ¢ÉÂíåÁºñËØëÂô®Êù•Ë∞ÉÊï¥ÁºñËØëÂíåÈìæÊé•ÈÄâÈ°π„ÄÇÊ≠§Â§ñÔºåÈîôËØØÂ§ÑÁêÜÂíåËµÑÊ∫êÁÆ°ÁêÜÔºàÂ¶ÇÂÜÖÂ≠òÊ≥ÑÊºèÔºâ‰πüÊòØÂÆûÈôÖÁºñÁ®ã‰∏≠ÈúÄË¶ÅËÄÉËôëÁöÑÈáçË¶ÅÊñπÈù¢„ÄÇ Hijack CUBLAS hijack_cublas ÊòØ‰∏Ä‰∏™Â∫ìÔºåÂÆÉÊèê‰æõ‰∫ÜÂØπ cuBLAS Â∫ìÂáΩÊï∞ÁöÑÂ∞ÅË£ÖÂíåÂèØËÉΩÁöÑÊõø‰ª£ÂÆûÁé∞„ÄÇËøô‰∏™Â∫ìÁöÑÁõÆÁöÑÊòØÂú®‰∏çÂêåÁöÑÁéØÂ¢É‰∏ãÔºåÂ¶ÇÊ®°Êãü CUDA ÁéØÂ¢ÉÊàñÂú®‰∏çÊîØÊåÅ CUDA ÁöÑÁ≥ªÁªü‰∏äÔºåÊèê‰æõ cuBLAS ÂáΩÊï∞ÁöÑÊé•Âè£„ÄÇ‰ª•‰∏ãÊòØÂØπ hijack_cublas ÁöÑËøõ‰∏ÄÊ≠•ÂàÜÊûêÔºö hijack_cublas.h Êñá‰ª∂ Ëøô‰∏™Â§¥Êñá‰ª∂ÂÆö‰πâ‰∫Ü hijack_cublas Â∫ìÁöÑ‰∏ªË¶ÅÁªìÊûÑÂíåÊûö‰∏æÁ±ªÂûãÔºå‰ª•ÂèäÂáΩÊï∞ÂéüÂûã„ÄÇ Êûö‰∏æÁ±ªÂûãÔºö cublasStatus_tÔºöÂÆö‰πâ‰∫Ü cuBLAS API ÂèØËÉΩËøîÂõûÁöÑÁä∂ÊÄÅÁ†Å„ÄÇ cublasOperation_tÔºöÂÆö‰πâ‰∫ÜÁü©ÈòµÊìç‰ΩúÁ±ªÂûãÔºåÂ¶Ç CUBLAS_OP_NÔºàÊó†ËΩ¨ÁΩÆÔºâ„ÄÅCUBLAS_OP_TÔºàËΩ¨ÁΩÆÔºâÂíå CUBLAS_OP_CÔºàÂÖ±ËΩ≠ËΩ¨ÁΩÆÔºâ„ÄÇ ÁªìÊûÑ‰ΩìÂÆö‰πâÔºö cublasContextÔºöÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÁªìÊûÑ‰ΩìÔºåÂåÖÂê´‰∏Ä‰∏™ÂàùÂßãÂåñÊ†áÂøóÂíå‰∏Ä‰∏™ CUDA ÊµÅ„ÄÇ cublasHandle_tÔºöcublasContext ÁªìÊûÑ‰ΩìÁöÑÊåáÈíàÁ±ªÂûãÔºåÁî®‰∫é‰Ωú‰∏∫ cuBLAS Â∫ìÂáΩÊï∞ÁöÑ‰∏ä‰∏ãÊñáÂè•ÊüÑ„ÄÇ Â§ñÈÉ®ÂèòÈáèÂ£∞ÊòéÔºö cublas_entry[]ÔºöÂ£∞Êòé‰∫Ü‰∏Ä‰∏™ entry_t Á±ªÂûãÁöÑÊï∞ÁªÑÔºåÁî®‰∫éÂ≠òÂÇ® cuBLAS Â∫ìÂáΩÊï∞ÁöÑÂÖ•Âè£„ÄÇ ÂáΩÊï∞Á±ªÂûãÂÆö‰πâÔºö cublas_sym_tÔºöÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞ÊåáÈíàÁ±ªÂûãÔºåÊåáÂêë‰∏Ä‰∏™ËøîÂõû cublasStatus_t ÁöÑÂáΩÊï∞„ÄÇ hijack_cublas.c Êñá‰ª∂ Ëøô‰∏™Ê∫êÊñá‰ª∂ÂÆûÁé∞‰∫Ü hijack_cublas.h ‰∏≠Â£∞ÊòéÁöÑÂáΩÊï∞ÔºåÊèê‰æõ‰∫Ü cuBLAS ÂáΩÊï∞ÁöÑÂÖ∑‰ΩìÂÆûÁé∞„ÄÇ cuBLAS ÂáΩÊï∞ÂÆûÁé∞Ôºö cublasCreate_v2ÔºöÂàõÂª∫‰∏Ä‰∏™ cuBLAS ‰∏ä‰∏ãÊñáÔºàÂè•ÊüÑÔºâ„ÄÇ cublasDestroy_v2ÔºöÈîÄÊØÅ‰∏Ä‰∏™ cuBLAS ‰∏ä‰∏ãÊñáÔºàÂè•ÊüÑÔºâ„ÄÇ cublasSetStream_v2ÔºöËÆæÁΩÆ cuBLAS ‰∏ä‰∏ãÊñáÁöÑ CUDA ÊµÅ„ÄÇ ÂºÇÊ≠• GEMM ÂÆûÁé∞Ôºö cublasSgemm_async_fnÔºö‰∏Ä‰∏™ÂºÇÊ≠•ÊâßË°å SGEMM Êìç‰ΩúÁöÑÂáΩÊï∞ÔºåÂÆÉ‰ΩøÁî® OpenMP ËøõË°åÂ§öÁ∫øÁ®ãËÆ°ÁÆó„ÄÇ SGEMM ÂáΩÊï∞ÂÆûÁé∞Ôºö cublasSgemm_v2ÔºöÊâßË°åÁü©Èòµ‰πòÊ≥ïÊìç‰ΩúÔºàSGEMMÔºâ„ÄÇËøô‰∏™ÂáΩÊï∞Ê†πÊçÆÁºñËØëÊó∂ÂÆö‰πâÁöÑÊù°‰ª∂ÔºàÂ¶Ç USE_MocCUDA Âíå USE_GCDÔºâÊù•ÂÜ≥ÂÆöÊòØË∞ÉÁî®ÁúüÂÆûÁöÑ cuBLAS ÂáΩÊï∞ËøòÊòØÊ®°ÊãüÁöÑÂÆûÁé∞„ÄÇ Êù°‰ª∂ÁºñËØëÔºö Ê†πÊçÆÂÆö‰πâÁöÑÂÆèÔºàÂ¶Ç USE_MocCUDA„ÄÅUSE_GCD Á≠âÔºâÔºåhijack_cublas ÂèØ‰ª•ÈÄâÊã©‰ΩøÁî®‰∏çÂêåÁöÑÂÆûÁé∞Á≠ñÁï•„ÄÇ‰æãÂ¶ÇÔºåÂ¶ÇÊûúÂÆö‰πâ‰∫Ü USE_MocCUDAÔºåÂàô‰ºö‰ΩøÁî®Ê®°ÊãüÁöÑ cuBLAS ÂÆûÁé∞ÔºåËÄå‰∏çÊòØË∞ÉÁî®ÁúüÂÆûÁöÑ CUDA ÂáΩÊï∞„ÄÇ Ë∞ÉËØïÂíåÊÄßËÉΩÂàÜÊûêÔºö Êñá‰ª∂‰∏≠ÂåÖÂê´‰∫Ü ENTER Âíå LEAVE ÂÆèÔºåÁî®‰∫éË∞ÉËØïÂíåÊÄßËÉΩÂàÜÊûêÔºåËÆ∞ÂΩïÂáΩÊï∞ÁöÑËøõÂÖ•ÂíåÁ¶ªÂºÄÊó∂Èó¥„ÄÇ ÊÄªÁªì hijack_cublas Â∫ìÁöÑ‰ΩúÁî®ÊòØÂú®‰∏çÂÖ∑Â§áÂÆåÊï¥ CUDA ÊîØÊåÅÁöÑÁéØÂ¢É‰∏ãÔºåÊèê‰æõ cuBLAS Â∫ìÁöÑÊé•Âè£ÂíåÂèØËÉΩÁöÑÊ®°ÊãüÂÆûÁé∞„ÄÇÂÆÉÂÖÅËÆ∏ÂºÄÂèëËÄÖÂú®ÁºñÂÜô‰ª£Á†ÅÊó∂Ôºå‰∏çÈúÄË¶ÅÂÖ≥ÂøÉÂêéÁ´ØÊòØÁúüÂÆûÁöÑ CUDA ÁéØÂ¢ÉËøòÊòØÊ®°ÊãüÁéØÂ¢ÉÔºå‰ªéËÄåÊèêÈ´ò‰∫Ü‰ª£Á†ÅÁöÑÂèØÁßªÊ§çÊÄß„ÄÇÊ≠§Â§ñÔºåÂÆÉËøòÊèê‰æõ‰∫ÜÂºÇÊ≠•ÊâßË°åÂíåÂ§öÁ∫øÁ®ãÊîØÊåÅÔºå‰ª•‰ºòÂåñÊÄßËÉΩ„ÄÇÈÄöËøáÊù°‰ª∂ÁºñËØëÔºåhijack_cublas ÂèØ‰ª•ÁÅµÊ¥ªÂú∞ÈÄÇÂ∫î‰∏çÂêåÁöÑ‰ΩøÁî®Âú∫ÊôØÂíåÈúÄÊ±Ç„ÄÇ ChatGPT The provided C and header files implement a dynamic loader for CUDA libraries (libcudart, cudnn, and cublas) and a wrapper for their functionality. Here's a detailed breakdown: Purpose The main role of these files is to dynamically load CUDA libraries at runtime instead of linking them statically. This approach: Enables the use of CUDA functionalities without requiring the application to depend on specific versions of CUDA libraries during compilation. Provides a mechanism for runtime flexibility, allowing switching between different library versions. Facilitates debugging, logging, and performance tracking of library function calls. passthrough.c Analysis Key Features Dynamic Library Loading: Functions like dlopen() and dlsym() dynamically load the CUDA libraries and resolve symbols (function pointers). If the library or a specific function is not found, it emits errors and gracefully exits. Function Resolution: Arrays (cudart_lib_entry, cudnn_lib_entry, and cublas_lib_entry) store the function names and their resolved function pointers (fn_ptr). Functions like load_cudart_lib(), load_cudnn_lib(), and load_cublas_lib() populate these arrays. Initialization Flags: Static variables like _cudart_inited_, _cudnn_inited_, and _cublas_inited_ prevent redundant re-initialization. Error Handling: Robust error checking for missing libraries and functions. CUDA Libraries libcudart: Basic CUDA Runtime functionalities (e.g., cudaMalloc, cudaMemcpy). cudnn: Deep Neural Network primitives. cublas: Basic Linear Algebra operations. passthrough.h Analysis Structure Definitions entry_t: A structure for maintaining a function pointer (fn_ptr) and the corresponding function name (name). Wrapper Macros Function Wrapping: REAL_CUDA_RT_API_CALL, REAL_CUDNN_CALL, and REAL_CUBLAS_CALL resolve symbols and execute them. Example: A call to cudaMalloc() gets resolved dynamically using the corresponding function pointer. Logging and Debugging: ENTER and LEAVE macros log function entry and exit with execution timings, but only if compiled with DEBUG or FUNC_TIMINGS flags. TIME_GEMM_START and TIME_GEMM_STOP specifically measure performance of GEMM (General Matrix Multiplication) operations, crucial for BLAS and deep learning workloads. Enumerations Enumerates all supported library functions (CUDART_ENTRY_ENUM, CUDNN_ENTRY_ENUM, and CUBLAS_ENTRY_ENUM) for easy indexing in the arrays. Initialization Functions load_cudart_lib(), load_cudnn_lib(), and load_cublas_lib() are declared for library loading at runtime. Typical Workflow Initialization: A CUDA library (e.g., libcudart) is dynamically loaded when a function is called for the first time. Initialization flags ensure one-time setup. Function Execution: For example, a wrapped call to cudaMalloc() would: Resolve the function pointer via dlsym(). Execute the function through the resolved pointer. Debugging and Logging (Optional): Execution times and other statistics are logged if debugging macros are enabled. Role in CUDAWRAP These files act as the core implementation for a dynamic wrapper around CUDA libraries, suitable for environments where: Runtime Flexibility: The application can dynamically switch between different versions of CUDA libraries by setting paths via environment variables (SWITCHCUDART, SWITCHCUDNN, SWITCHCUBLAS). Debugging Support: Tracks performance and function calls without recompiling the CUDA libraries. Ease of Integration: Reduces compilation dependencies, making applications portable across systems with varying CUDA versions. Would you like to explore specific sections or use cases in more detail? How to use To use the CUDAWRAP library defined in the provided files, follow these steps. Here's a detailed explanation with an example of how to integrate it into a project and use its features. 1. Setting Up the Environment The CUDAWRAP library uses environment variables to dynamically load CUDA libraries. You need to set these variables to point to the correct library paths. For example: export SWITCHCUDART=/usr/local/cuda/lib64/libcudart.so export SWITCHCUDNN=/usr/local/cuda/lib64/libcudnn.so export SWITCHCUBLAS=/usr/local/cuda/lib64/libcublas.so If the environment variables are not set, the library defaults to paths like PATHTOCUDA_ROOT/lib64/libcudart.so. 2. Compilation You need to compile the passthrough.c and link it into your project. Use the following steps: Compile the passthrough.c: gcc -fPIC -c passthrough.c -o passthrough.o -ldl -fPIC: Generates position-independent code (necessary for shared libraries). -ldl: Links the dynamic loader library (dlopen, dlsym). Link the compiled object into your application: gcc main.c passthrough.o -o myapp -ldl 3. Example Code main.c ‚Äì Using CUDAWRAP to call CUDA functions. #include #include \"passthrough.h\" // Include the header int main() { // Step 1: Load the CUDA Runtime Library (libcudart) if (load_cudart_lib() != 0) { fprintf(stderr, \"Failed to load libcudart library!\\n\"); return 1; } // Step 2: Initialize CUDA int deviceCount = 0; // Dynamically call the cudaGetDeviceCount function typedef cudaError_t (*cudaGetDeviceCount_t)(int *); cudaGetDeviceCount_t cudaGetDeviceCount = (cudaGetDeviceCount_t)CUDART_FIND_ENTRY(cudart_lib_entry, cudaGetDeviceCount); if (cudaGetDeviceCount == NULL) { fprintf(stderr, \"Function cudaGetDeviceCount not found!\\n\"); return 1; } cudaError_t err = cudaGetDeviceCount(&deviceCount); if (err != cudaSuccess) { fprintf(stderr, \"CUDA Error: %s\\n\", cudaGetErrorString(err)); return 1; } printf(\"Number of CUDA devices: %d\\n\", deviceCount); // Step 3: Use another CUDA function void *devPtr; size_t size = 1024; typedef cudaError_t (*cudaMalloc_t)(void **, size_t); cudaMalloc_t cudaMalloc = (cudaMalloc_t)CUDART_FIND_ENTRY(cudart_lib_entry, cudaMalloc); if (cudaMalloc == NULL) { fprintf(stderr, \"Function cudaMalloc not found!\\n\"); return 1; } err = cudaMalloc(&devPtr, size); if (err != cudaSuccess) { fprintf(stderr, \"cudaMalloc failed: %s\\n\", cudaGetErrorString(err)); return 1; } printf(\"Successfully allocated %zu bytes on the device\\n\", size); // Cleanup (if necessary) typedef cudaError_t (*cudaFree_t)(void *); cudaFree_t cudaFree = (cudaFree_t)CUDART_FIND_ENTRY(cudart_lib_entry, cudaFree); if (cudaFree != NULL) { cudaFree(devPtr); } return 0; } 4. Explanation of Example Loading the Library: The load_cudart_lib() function dynamically loads the CUDA runtime library and populates cudart_lib_entry with function pointers. Finding a Function: Use CUDART_FIND_ENTRY macro to retrieve the pointer for the desired function (e.g., cudaGetDeviceCount, cudaMalloc). Calling the Function: Cast the function pointer to the appropriate type and call it like a regular function. Handling Errors: Check for NULL function pointers and handle errors using CUDA's error functions (cudaGetErrorString). 5. Logging and Debugging Enable logging and performance tracking by compiling with the DEBUG or FUNC_TIMINGS flags. For example: gcc -DDEBUG main.c passthrough.o -o myapp -ldl This will log entry and exit times for CUDA functions, which is helpful for debugging and profiling. 6. Benefits of Using CUDAWRAP Runtime Flexibility: Swap between CUDA library versions without recompilation. Debugging: Trace function calls and measure performance. Compatibility: Avoid hard-coding library paths, making your application portable across systems with different CUDA installations. Would you like further clarification on any part or help setting up a specific CUDA example? Hijack CUBLAS The hijack_cublas.h file builds upon the passthrough dynamic loading mechanism to provide wrappers for the cuBLAS library. Here‚Äôs how you can understand and use this extension effectively. Purpose of hijack_cublas.h This header file: Extends the CUDAWRAP framework to specifically work with the cuBLAS library. Introduces cuBLAS-specific types and enumerations (e.g., cublasStatus_t, cublasOperation_t). Implements mechanisms to hijack cuBLAS calls for logging, debugging, or dynamically replacing the cuBLAS library. Key Components 1. Enums for cuBLAS Status and Operations cublasStatus_t: Represents return statuses for cuBLAS functions (e.g., success, allocation failure, or execution errors). cublasOperation_t: Represents matrix operations (CUBLAS_OP_N for normal, CUBLAS_OP_T for transpose, etc.). 2. cublasContext Placeholder structure that mimics a cuBLAS handle (cublasHandle_t). Contains: __inited__: Indicates if the handle has been initialized. stream: CUDA stream associated with the handle. Note: This is a stub and may require proper initialization in a real-world scenario. 3. Function Wrapping cublas_sym_t: A generic type for function pointers to cuBLAS functions. cublas_entry[]: Similar to cudart_lib_entry in passthrough.h, it stores cuBLAS function names and pointers, allowing dynamic resolution. Integration into a Project To use hijack_cublas.h for cuBLAS calls: 1. Include Headers #include \"passthrough.h\" #include \"hijack_cublas.h\" 2. Initialize cuBLAS Library Call load_cublas_lib() to dynamically load the cuBLAS library and initialize the cublas_entry table: if (load_cublas_lib() != 0) { fprintf(stderr, \"Failed to load cuBLAS library!\\n\"); return -1; } 3. Use cuBLAS Functions Dynamically Retrieve and execute cuBLAS functions via CUBLAS_FIND_ENTRY macro: // Example: cublasCreate_v2 typedef cublasStatus_t (*cublasCreate_t)(cublasHandle_t *); cublasCreate_t cublasCreate = (cublasCreate_t)CUBLAS_FIND_ENTRY(cublas_lib_entry, cublasCreate_v2); cublasHandle_t handle; cublasStatus_t status = cublasCreate(&handle); if (status != CUBLAS_STATUS_SUCCESS) { fprintf(stderr, \"cublasCreate failed: %d\\n\", status); return -1; } Example Application Here‚Äôs a full example demonstrating how to use hijack_cublas.h with matrix multiplication (cublasSgemm_v2). #include #include \"hijack_cublas.h\" // Example: Matrix multiplication using cuBLAS int main() { // Step 1: Load cuBLAS library if (load_cublas_lib() != 0) { fprintf(stderr, \"Failed to load cuBLAS library!\\n\"); return -1; } // Step 2: Create cuBLAS handle typedef cublasStatus_t (*cublasCreate_t)(cublasHandle_t *); cublasCreate_t cublasCreate = (cublasCreate_t)CUBLAS_FIND_ENTRY(cublas_lib_entry, cublasCreate_v2); cublasHandle_t handle; if (cublasCreate(&handle) != CUBLAS_STATUS_SUCCESS) { fprintf(stderr, \"Failed to create cuBLAS handle!\\n\"); return -1; } // Step 3: Perform SGEMM (Single-precision General Matrix Multiply) float alpha = 1.0f, beta = 0.0f; int m = 3, n = 3, k = 3; float A[m * k] = {1, 2, 3, 4, 5, 6, 7, 8, 9}; float B[k * n] = {9, 8, 7, 6, 5, 4, 3, 2, 1}; float C[m * n] = {0}; typedef cublasStatus_t (*cublasSgemm_t)(cublasHandle_t, cublasOperation_t, cublasOperation_t, int, int, int, const float *, const float *, int, const float *, const float *, int, float *); cublasSgemm_t cublasSgemm = (cublasSgemm_t)CUBLAS_FIND_ENTRY(cublas_lib_entry, cublasSgemm_v2); if (cublasSgemm == NULL) { fprintf(stderr, \"Function cublasSgemm_v2 not found!\\n\"); return -1; } cublasStatus_t status = cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_N, m, n, k, &alpha, A, m, B, k, &beta, C, m); if (status != CUBLAS_STATUS_SUCCESS) { fprintf(stderr, \"cublasSgemm failed: %d\\n\", status); return -1; } // Print result printf(\"Matrix C:\\n\"); for (int i = 0; i Key Steps in Example Loading: load_cublas_lib initializes the function pointer table. Retrieving Function Pointers: Use CUBLAS_FIND_ENTRY to locate specific cuBLAS functions. Calling Functions: Use resolved function pointers like normal cuBLAS functions. Matrix Multiplication: Performs single-precision GEMM (cublasSgemm_v2). Cleanup: Destroy cuBLAS handle using cublasDestroy_v2. Would you like a deeper dive into any specific cuBLAS function or other areas of this framework? "},"Learn/LearnMocCUDA/LibBlocksRuntime.html":{"url":"Learn/LearnMocCUDA/LibBlocksRuntime.html","title":"LibBlocksRuntime","keywords":"","body":"This script builds and installs the libblocksruntime library, a dependency for the libdispatch (also known as Grand Central Dispatch). Here‚Äôs a detailed breakdown: 1. Navigate to the Source Directory cd ${WDIR}/blocks-runtime/ Changes the working directory to ${WDIR}/blocks-runtime/. ${WDIR} is likely a variable defined earlier in the environment, pointing to the base working directory. 2. Initialize Build Tools libtoolize ; aclocal ; autoheader ; autoconf ; automake --add-missing This sequence prepares the build environment for the libblocksruntime library: libtoolize: Prepares the source tree for libtool, which helps manage the creation of shared and static libraries. aclocal: Generates aclocal.m4 by gathering macro definitions, setting up the environment for autoconf. autoheader: Creates a template for config.h, used for platform-specific configuration. autoconf: Generates the configure script from configure.ac, which customizes the build process. automake --add-missing: Generates Makefile.in and adds any missing auxiliary files (like install-sh or missing). These steps ensure the project is ready for a standard ./configure && make build process. 3. Prepare the Build Directory rm -rf build ; mkdir -p build ; cd build rm -rf build: Deletes any existing build directory, ensuring a clean slate. mkdir -p build: Creates a new build directory if it doesn‚Äôt already exist. cd build: Changes into the build directory where the actual compilation will take place. 4. Configure the Build CC=\"${MocCC} ${MocCFLAGS} -fcommon\" CXX=\"${MocCXX} ${MocCXXFLAGS} -fcommon\" \\ ../configure --prefix=\"${WDIR}/install/libblocksruntime\" \\ --disable-shared --enable-static --with-pic Sets the C and C++ compiler flags: CC and CXX are set to ${MocCC} and ${MocCXX} respectively, along with their corresponding flags (${MocCFLAGS} and ${MocCXXFLAGS}), plus the -fcommon flag. -fcommon ensures variables in multiple translation units are treated as common, improving compatibility with older codebases. Runs the ../configure script with the following options: --prefix: Specifies the installation directory as ${WDIR}/install/libblocksruntime. --disable-shared: Disables building shared libraries. --enable-static: Enables building static libraries. --with-pic: Ensures position-independent code is generated, which is often required for static libraries used in shared contexts. This step customizes the build for the specific environment. 5. Build and Install make -j$(nproc) install V=1 make -j$(nproc): Compiles the source code using as many parallel jobs as there are available CPU cores ($(nproc)). install: Installs the compiled library to the directory specified by the --prefix option in the configure script. V=1: Ensures verbose output during the make process, which shows detailed compilation commands. Key Outputs The static version of the libblocksruntime library is built and installed to ${WDIR}/install/libblocksruntime. Shared libraries are explicitly disabled to focus on creating static libraries for linking. Purpose This script is part of setting up a dependency for a larger project, ensuring that libblocksruntime is built in a controlled and predictable way, customized for the environment. "},"Learn/LearnMocCUDA/LibDispatch.html":{"url":"Learn/LearnMocCUDA/LibDispatch.html","title":"LibDispatch","keywords":"","body":"https://en.wikipedia.org/wiki/Grand_Central_Dispatch text libdispatch, also known as Grand Central Dispatch (GCD), is a library designed to provide efficient, system-level support for concurrent and parallel programming. It was first introduced by Apple as part of macOS and iOS but has since been made open-source and ported to other platforms like Linux. What is libdispatch For? 1. Concurrency and Parallelism libdispatch helps developers write concurrent programs more easily by managing threads and work queues internally. Instead of explicitly creating and managing threads, libdispatch allows you to schedule tasks (blocks of code) to execute asynchronously or synchronously. 2. Efficient Resource Utilization It uses a pool of threads and intelligently distributes tasks to available system resources, optimizing CPU and memory usage. Balances workloads across cores to maximize performance. 3. Thread Safety Simplifies thread-safe programming by encapsulating tasks in dispatch queues, avoiding race conditions and the need for extensive locks. 4. Event Handling Allows for event-driven programming by integrating tasks with file descriptors, timers, or other signals. Key Features of libdispatch Dispatch Queues A queue where tasks are scheduled to execute. Types: Serial Queue: Tasks are executed one at a time in order. Concurrent Queue: Tasks are executed in parallel, as resources allow. Main Queue: A special serial queue for tasks that must run on the main thread, typically UI updates. Work Items Blocks of code that you enqueue for execution. Can be written in C, Objective-C, or Swift. Dispatch Sources Event sources that trigger the execution of tasks, such as timers, file descriptors, or custom triggers. Group Management Dispatch groups allow you to group tasks and wait for their collective completion. Timers Built-in support for creating and managing timers in a queue-based system. When to Use libdispatch Asynchronous Tasks When tasks can be performed independently of each other, allowing the program to remain responsive (e.g., downloading a file while processing user input). Parallel Processing Tasks that can run simultaneously to leverage multicore processors, such as image processing, data analysis, or sorting algorithms. Thread-Safe Code Simplifies concurrent access to shared resources without explicit locks. Event-Driven Programming Ideal for applications that need to respond to events like network requests, user input, or timers. Performance-Critical Applications Helps offload heavy computational tasks without blocking the main thread. How to Use libdispatch In C: #include void my_function() { printf(\"Task executed\\n\"); } int main() { // Create a dispatch queue dispatch_queue_t queue = dispatch_queue_create(\"com.example.myqueue\", DISPATCH_QUEUE_CONCURRENT); // Add tasks to the queue dispatch_async(queue, ^{ my_function(); }); dispatch_async(queue, ^{ printf(\"Another task executed\\n\"); }); // Wait for some time to let tasks finish sleep(1); // Clean up dispatch_release(queue); return 0; } In Swift (if using on macOS or iOS): import Dispatch let queue = DispatchQueue(label: \"com.example.myqueue\", attributes: .concurrent) // Schedule tasks queue.async { print(\"Task 1 executed\") } queue.async { print(\"Task 2 executed\") } // Dispatch to the main queue DispatchQueue.main.async { print(\"UI updates can go here\") } Advantages of libdispatch Simplifies Multithreading: Abstracts low-level threading details. Efficient: Optimizes resource use, particularly in multicore systems. Portable: Works on macOS, iOS, Linux, and more. Limitations Not a substitute for more complex threading needs like thread-local storage or thread prioritization. For very fine-grained control of threads, alternatives like POSIX threads or C++ std::thread might be better. In short, libdispatch is an essential tool for building modern, high-performance applications, especially when concurrency and responsiveness are crucial. macOS GCD - Grand Central Dispatc macOS GCD - Grand Central Dispatch Grand Central Dispatch (GCD), also known as libdispatch (libdispatch.dyld), is available in both macOS and iOS. It's a technology developed by Apple to optimize application support for concurrent (multithreaded) execution on multicore hardware. Grand Central Dispatch (GCD)Ôºå‰πüÁß∞‰∏∫libdispatch ( libdispatch.dyld )ÔºåÂú® macOS Âíå iOS ‰∏≠ÂùáÂèØÁî®„ÄÇÂÆÉÊòØ Apple ÂºÄÂèëÁöÑ‰∏ÄÈ°πÊäÄÊúØÔºåÊó®Âú®‰ºòÂåñÂ§öÊ†∏Á°¨‰ª∂‰∏äÂπ∂ÂèëÔºàÂ§öÁ∫øÁ®ãÔºâÊâßË°åÁöÑÂ∫îÁî®Á®ãÂ∫èÊîØÊåÅ„ÄÇ GCD provides and manages FIFO queues to which your application can submit tasks in the form of block objects. Blocks submitted to dispatch queues are executed on a pool of threads fully managed by the system. GCD automatically creates threads for executing the tasks in the dispatch queues and schedules those tasks to run on the available cores. GCDÊèê‰æõÂπ∂ÁÆ°ÁêÜFIFO ÈòüÂàóÔºåÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫èÂèØ‰ª•ÂêëÂÖ∂‰∏≠‰ª•ÂùóÂØπË±°ÁöÑÂΩ¢ÂºèÊèê‰∫§‰ªªÂä°„ÄÇÊèê‰∫§Âà∞Ë∞ÉÂ∫¶ÈòüÂàóÁöÑÂùóÂú®ÂÆåÂÖ®Áî±Á≥ªÁªüÁÆ°ÁêÜÁöÑÁ∫øÁ®ãÊ±†‰∏äÊâßË°å„ÄÇ GCD Ëá™Âä®ÂàõÂª∫Á∫øÁ®ãÊù•ÊâßË°åË∞ÉÂ∫¶ÈòüÂàó‰∏≠ÁöÑ‰ªªÂä°ÔºåÂπ∂ÂÆâÊéíËøô‰∫õ‰ªªÂä°Âú®ÂèØÁî®ÂÜÖÊ†∏‰∏äËøêË°å„ÄÇ In summary, to execute code in parallel, processes can send blocks of code to GCD, which will take care of their execution. Therefore, processes don't create new threads; GCD executes the given code with its own pool of threads (which might increase or decrease as necessary). ÊÄª‰πãÔºåË¶ÅÂπ∂Ë°åÊâßË°å‰ª£Á†ÅÔºåËøõÁ®ãÂèØ‰ª•Â∞Ü‰ª£Á†ÅÂùóÂèëÈÄÅÂà∞ GCD ÔºåGCD Â∞ÜË¥üË¥£ÂÆÉ‰ª¨ÁöÑÊâßË°å„ÄÇÂõ†Ê≠§ÔºåËøõÁ®ã‰∏ç‰ºöÂàõÂª∫Êñ∞Á∫øÁ®ãÔºõËÄåÊòØÂàõÂª∫Êñ∞Á∫øÁ®ã„ÄÇ GCD ‰ΩøÁî®Ëá™Â∑±ÁöÑÁ∫øÁ®ãÊ±†ÊâßË°åÁªôÂÆöÁöÑ‰ª£Á†ÅÔºàÂèØËÉΩ‰ºöÊ†πÊçÆÈúÄË¶ÅÂ¢ûÂä†ÊàñÂáèÂ∞ëÔºâ„ÄÇ This is very helpful to manage parallel execution successfully, greatly reducing the number of threads processes create and optimising the parallel execution. This is ideal for tasks that require great parallelism (brute-forcing?) or for tasks that shouldn't block the main thread: For example, the main thread on iOS handles UI interactions, so any other functionality that could make the app hang (searching, accessing a web, reading a file...) is managed this way. ËøôÂØπ‰∫éÊàêÂäüÁÆ°ÁêÜÂπ∂Ë°åÊâßË°åÈùûÂ∏∏ÊúâÂ∏ÆÂä©ÔºåÂ§ßÂ§ßÂáèÂ∞ë‰∫ÜËøõÁ®ãÂàõÂª∫ÁöÑÁ∫øÁ®ãÊï∞ÈáèÂπ∂‰ºòÂåñ‰∫ÜÂπ∂Ë°åÊâßË°å„ÄÇËøôÈùûÂ∏∏ÈÄÇÂêàÈúÄË¶ÅÂ§ßÈáèÂπ∂Ë°åÊÄßÔºàÂº∫Âà∂ÔºüÔºâÁöÑ‰ªªÂä°Êàñ‰∏çÂ∫îÈòªÂ°û‰∏ªÁ∫øÁ®ãÁöÑ‰ªªÂä°Ôºö‰æãÂ¶ÇÔºåiOS ‰∏äÁöÑ‰∏ªÁ∫øÁ®ãÂ§ÑÁêÜ UI ‰∫§‰∫íÔºåÂõ†Ê≠§‰ªª‰ΩïÂÖ∂‰ªñÂèØËÉΩÂØºËá¥Â∫îÁî®Á®ãÂ∫èÊåÇËµ∑ÁöÑÂäüËÉΩÔºàÊêúÁ¥¢„ÄÅËÆøÈóÆÁΩëÁªú„ÄÅËØªÂèñÊñá‰ª∂...ÔºâÈÉΩÊòØ‰ª•ËøôÁßçÊñπÂºèËøõË°åÁÆ°ÁêÜÁöÑ„ÄÇ GCD Part 1: Queues and methods Grand Central Dispatch (GCD) on FreeBSD GCD Handbook "},"Learn/LearnMocCUDA/LibUnwind.html":{"url":"Learn/LearnMocCUDA/LibUnwind.html","title":"LibUnwind","keywords":"","body":"sudo apt install libunwind-dev Reading package lists... Done Building dependency tree... Done Reading state information... Done The following NEW packages will be installed: libunwind-dev 0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded. Need to get 441 kB of archives. After this operation, 2,916 kB of additional disk space will be used. Get:1 http://mirrors.ustc.edu.cn/debian bookworm/main amd64 libunwind-dev amd64 1.6.2-3 [441 kB] Fetched 441 kB in 1s (775 kB/s) Selecting previously unselected package libunwind-dev:amd64. (Reading database ... 296316 files and directories currently installed.) Preparing to unpack .../libunwind-dev_1.6.2-3_amd64.deb ... Unpacking libunwind-dev:amd64 (1.6.2-3) ... Setting up libunwind-dev:amd64 (1.6.2-3) ... Processing triggers for man-db (2.11.2-2) ... "},"Learn/LearnMocCUDA/MakefileNote.html":{"url":"Learn/LearnMocCUDA/MakefileNote.html","title":"MakefileNote","keywords":"","body":"The Makefile appears to be structured to build a project with specific compiler configurations tailored for a system, potentially the Fugaku supercomputer. Here's an analysis and an organized breakdown of its components: Analysis of Key Sections in the Makefile General Description: The initial comments describe the Makefile's purpose: make depend: Generate dependencies using makedepend. make: Build the executable (presumably mycc). make clean: Remove intermediate (*.o) and executable files. Compiler Configuration: Defines the compilers: CC: Default C compiler (clang). CXX: Default C++ compiler (clang++). FC: Default Fortran compiler (flang). Compile-Time Flags: Optimizations: OPTI: Includes architecture-specific optimizations for the A64FX CPU (Fugaku) and link-time optimization. Debug flags: DEBUG: Disabled by default, can enable -DDEBUG and debugging flags (-O0, -g). CUDA handling: RedirectCUDA: Redirects CUDA functionality to a mock or alternative implementation. RedirCUDAPaths: Adds custom paths for CUDA and cuDNN. GCD: GrandCentralDispatch: Enables Grand Central Dispatch (disabled by default). Sorted Contents of the Makefile 1. Metadata and Instructions # 'make depend' uses makedepend to automatically generate dependencies # 'make' build executable file 'mycc' # 'make clean' removes all .o and executable files Instructions for the user about the purpose and usage of the Makefile. 2. Compiler Configuration # Define the C compiler to use CC ?= clang CXX ?= clang++ FC ?= flang Specifies compilers for C, C++, and Fortran. 3. Optimization and Debug Flags # Define any compile-time flags OPTI ?= -Ofast -ffast-math -mcpu=a64fx -flto=thin DEBUG ?= #-DDEBUG -O0 -g OPTI: Enables optimizations for speed, targeting the A64FX processor. DEBUG: Placeholder for debugging flags, commented out by default. 4. CUDA and Other Flags RedirectCUDA ?= -DUSE_MocCUDA=1 #=0 RedirectCUDA += #-DUSE_MocREGISTERFNs RedirCUDAPaths ?= -DPATHTOMocDeviceProp='\"$(shell pwd)\"' RedirCUDAPaths += -DPATHTOCUDA_ROOT='\"$(CUDA_TOOLKIT_ROOT_DIR)\"' -DPATHTOCUDNN_ROOT='\"$(CUDNN_ROOT)\"' GrandCentralDispatch ?= -DUSE_GCD=1 #=0 Configurations for: Redirecting CUDA calls (RedirectCUDA). Setting custom paths for CUDA and cuDNN. Enabling/disabling Grand Central Dispatch (GrandCentralDispatch). Next Steps The file likely includes build rules, dependency handling, and cleaning targets in subsequent sections. To fully analyze and organize the Makefile, I will inspect further lines and continue sorting its content into logical modules. Additional Analysis and Organization of the Makefile The content adds more configuration for building a complex project. Here‚Äôs the breakdown of the additional sections: 5. Compiler Flags CFLAGS ?= $(OPTI) $(DEBUG) $(RedirectCUDA) $(RedirCUDAPaths) $(GrandCentralDispatch) \\ -Wall -Wno-unused-label -fPIC -fopenmp CXXFLAGS ?= $(CFLAGS) -Wno-deprecated-declarations -std=c++14 CFLAGS: Includes optimization, debugging, CUDA redirection, architecture-specific flags, and OpenMP support. CXXFLAGS: Builds upon CFLAGS with C++-specific flags, including compatibility for C++14. 6. Include Directories LOCALINCL = -I$(shell pwd)/src/cudart -I$(shell pwd)/src/cudnn -I$(shell pwd)/src/cublas \\ -I$(shell pwd)/src/utils -I$(shell pwd)/src/cudawrap CINCLUDES ?= $(LOCALINCL) \\ -DFUJITSU -I$(TORCH_BUILD_ROOT)/ssl2/include \\ $(shell pkg-config --keep-system-cflags --cflags libunwind) \\ $(shell pkg-config --keep-system-cflags --cflags hwloc) \\ -I$(LIBDIS_ROOT)/include CXXINCLUDES ?= $(LOCALINCL) \\ -I$(TORCH_BUILD_ROOT)/aten/src \\ -I$(TORCH_BUILD_ROOT)/torch/include \\ -I$(CUDA_TOOLKIT_ROOT_DIR)/include FINCLUDES ?= $(LOCALINCL) LOCALINCL: Defines local include paths for CUDA, cuDNN, utilities, and CUDA wrappers. CINCLUDES, CXXINCLUDES, and FINCLUDES: Extend local includes to support Torch library paths, CUDA Toolkit, and other dependencies (e.g., libunwind, hwloc). 7. Linker Flags and Library Paths LFLAGS ?= -fuse-ld=lld \\ -L$(TORCH_BUILD_ROOT)/ssl2/lib -Wl,-rpath=$(TORCH_BUILD_ROOT)/ssl2/lib \\ $(shell pkg-config --keep-system-libs --libs-only-L libunwind) \\ $(shell pkg-config --keep-system-libs --libs-only-L hwloc) \\ -L$(LIBDIS_ROOT)/lib -L$(LIBPWQ_ROOT)/lib -L$(LIBKQU_ROOT)/lib64 -L$(LIBBRT_ROOT)/lib \\ -L$(VENV_SITEPACKAGES)/torch/lib -Wl,-rpath=$(VENV_SITEPACKAGES)/torch/lib Specifies: The linker to use (lld). Library search paths and runtime paths (e.g., Torch, libunwind, hwloc). Dependencies on additional libraries in specific paths (e.g., LIBDIS_ROOT, LIBPWQ_ROOT). 8. Libraries to Link LIBS ?= -lopenblas \\ $(shell pkg-config --keep-system-libs --libs-only-l libunwind) \\ $(shell pkg-config --keep-system-libs --libs-only-l hwloc) \\ -l:libdispatch.a -l:libpthread_workqueue.a -l:libkqueue.a -l:libBlocksRuntime.a \\ -liberty -lstdc++ -lc10 -lpthread -lm Links required libraries, including: Mathematical libraries (e.g., openblas). System utilities (libunwind, pthread). Blocks Runtime and other specific libraries for parallel and GPU operations. Next Steps The subsequent lines likely include definitions for: Source files. Build rules for object files and the final executable. Dependency generation. I will inspect the remaining lines to complete the analysis. Final Breakdown of the Makefile The remaining sections define source files, object file transformations, and build rules for the target executable. Here's an organized summary: 9. Source Files CSRCS ?= src/cudawrap/passthrough.c \\ src/cudart/hijack_cuda_runtime_api.c \\ src/cudnn/hijack_cudnn.c \\ src/cublas/hijack_cublas.c \\ src/utils/utils.c src/utils/addTensor.c src/utils/async.c CXXSRCS ?= src/torch/hijack_torch_cuda.cpp FSRCS ?= src/utils/frt_utils.f90 CSRCS: C source files for CUDA wrapping and utilities. CXXSRCS: C++ source files for Torch and CUDA handling. FSRCS: Fortran source files for utility functions. 10. Object File Definitions .SUFFIXES: .c .cpp .f90 OBJS = $(CSRCS:.c=.o) OBJS += $(CXXSRCS:.cpp=.o) OBJS += $(FSRCS:.f90=.o) Transforms the source files into object files by replacing their extensions (.c, .cpp, .f90) with .o. 11. Target Executable and Libraries # Define the executable file MAIN = lib/libMocCUDA.so CUDNN_shared = dep/install/cudnn/lib64/libcudnn.so CUDNN_static = dep/install/cudnn/lib64/libcudnn_static.a MAIN: The target output is a shared library (libMocCUDA.so). CUDNN_shared and CUDNN_static: Paths for shared and static cuDNN libraries. 12. Build Rules .PHONY: depend clean all: $(MAIN) @echo \"Our CUDA wrapper\" $(MAIN) \"has been compiled,\" @echo \"use LD_PRELOAD=$(shell pwd)/lib/libMocCUDA.so to apply it.\" $(MAIN): $(OBJS) all: Default target, builds the MAIN target and outputs instructions for using the shared library. Dependencies: Relies on compiled object files ($(OBJS)). Overall Organization of the Makefile Metadata and Instructions: Overview of Makefile usage. Compiler and Build Configurations: Compiler settings (CC, CXX, FC). Optimization (OPTI), debugging (DEBUG), and CUDA-related flags. Include Paths: Defines paths for header files and dependencies. Linker Flags and Libraries: Specifies library paths (LFLAGS) and libraries to link (LIBS). Source File Definitions: Lists source files for different languages (CSRCS, CXXSRCS, FSRCS). Object File Transformations: Generates object files using suffix replacement. Target and Build Rules: Builds the MAIN target (shared library) and provides a usage message. Would you like assistance refining or modifying this Makefile? "},"Learn/LearnMocCUDA/MocCUDA.html":{"url":"Learn/LearnMocCUDA/MocCUDA.html","title":"MocCUDA","keywords":"","body":""},"Learn/LearnMocCUDA/OpenBLAS.html":{"url":"Learn/LearnMocCUDA/OpenBLAS.html","title":"OpenBLAS","keywords":"","body":"OpenBLAS "},"Learn/LearnMocCUDA/OpenMPI.html":{"url":"Learn/LearnMocCUDA/OpenMPI.html","title":"OpenMPI","keywords":"","body":"text text "},"Learn/LearnMocCUDA/Spack.html":{"url":"Learn/LearnMocCUDA/Spack.html","title":"Spack","keywords":"","body":"https://spack.io/ https://github.com/spack/spack Welcome to Spack! Spack is a package manager for supercomputers, Linux, and macOS. It makes installing scientific software easy. Spack isn‚Äôt tied to a particular language; you can build a software stack in Python or R, link to libraries written in C, C++, or Fortran, and easily swap compilers or target specific microarchitectures. Learn more here. "},"Learn/LearnMocCUDA/pytorch.needed.libs.Note.html":{"url":"Learn/LearnMocCUDA/pytorch.needed.libs.Note.html","title":"pytorch.needed.libs.Note","keywords":"","body":"This Bash script is designed to automate the generation of wrapper libraries for various CUDA-related libraries, which are commonly used in GPU-accelerated computing. These wrappers seem to integrate with Score-P, a performance analysis and tracing framework. The script processes libraries like libcudart.so, libcublas.so, and others to facilitate performance instrumentation or runtime monitoring of CUDA applications. Here's a detailed breakdown: ËØ• Bash ËÑöÊú¨Êó®Âú®Ëá™Âä®ÁîüÊàêÂêÑÁßç CUDA Áõ∏ÂÖ≥Â∫ìÁöÑÂåÖË£ÖÂô®Â∫ìÔºåËøô‰∫õÂ∫ìÈÄöÂ∏∏Áî®‰∫é GPU Âä†ÈÄüËÆ°ÁÆó„ÄÇËøô‰∫õÂåÖË£ÖÂô®‰ºº‰πé‰∏éScore-PÔºà‰∏Ä‰∏™ÊÄßËÉΩÂàÜÊûêÂíåË∑üË∏™Ê°ÜÊû∂ÔºâÈõÜÊàê„ÄÇËØ•ËÑöÊú¨Â§ÑÁêÜlibcudart.so „ÄÅ libcublas.soÁ≠âÂ∫ìÔºå‰ª•‰øÉËøõ CUDA Â∫îÁî®Á®ãÂ∫èÁöÑÊÄßËÉΩÊ£ÄÊµãÊàñËøêË°åÊó∂ÁõëÊéß„ÄÇ‰ª•‰∏ãÊòØËØ¶ÁªÜÁöÑÁªÜÂàÜÔºö Purpose of the Script Wrapper Libraries Creation: Uses the scorep-libwrap-init tool to generate Score-P wrapper libraries for CUDA libraries. Enables capturing calls to CUDA libraries for debugging, profiling, or performance analysis. Custom Adjustments: Edits wrapper source files and build configurations to include specific headers and modify compilation flags (e.g., adding -fPIC for position-independent code). Instruments Specific CUDA Libraries: Covers libraries such as: libcudart.so: Runtime API for CUDA. libcublas.so: Basic Linear Algebra Subprograms (BLAS). libcufft.so: Fast Fourier Transform (FFT). libcurand.so: Random number generation. libcudnn.so: Deep neural network support. libcusparse.so: Sparse matrix operations. libnvToolsExt.so: Profiling and debugging tools. libnccl.so: Multi-GPU communication. Key Sections of the Script 1. Preparations Directory Setup: Creates a wrapper directory for holding generated wrappers. Environment Variables: Defines paths to CUDA Toolkit, cuDNN, and NCCL libraries:CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.0/targets/x86_64-linux CUDNN_ROOT_DIR=/work/opt/cuda/cudnn-10.0-linux-x64-v7.6.5.32 NCCL_ROOT_DIR=/work/opt/cuda/nccl_2.5.6-1+cuda10.0_x86_64 2. Wrapper Creation Loop For each CUDA library: Executes scorep-libwrap-init: scorep-libwrap-init --name ${LIBN} -x c++ \\ --cppflags \"-I${CUDA_TOOLKIT_ROOT_DIR}/include/\" \\ --ldflags \"-L${CUDA_TOOLKIT_ROOT_DIR}/lib/\" \\ --libs \"-l${LIBN}\" --update wrapper/wrap_${LIBN} Generates initial wrapper sources and build files for the target library. Customizes source code (libwrap.h, .filter files) and the Makefile: Includes appropriate CUDA headers like cublas_v2.h for cublas, cudnn.h for cudnn, etc. Edits filtering rules to exclude certain symbols (e.g., cuda*, curandGenerateBinomial*). Builds the wrapper: make libscorep_libwrap_${LIBN}_runtime.la 3. Special Handling Some libraries require additional modifications: For libcudart.so, it adds a custom set_launch_func to handle kernel launches. For libcufft.so, includes cufft.h and cufftXt.h. Output The script generates a series of dynamic libraries (.la files) in the wrapper directory, such as: libscorep_libwrap_cudart_runtime.la libscorep_libwrap_cublas_runtime.la libscorep_libwrap_cufft_runtime.la ... and so on. These libraries allow Score-P to monitor and trace GPU-related operations in programs that use these CUDA libraries. Potential Use Cases Performance Profiling: Developers can profile CUDA-based applications to analyze bottlenecks or resource usage. Debugging and Instrumentation: The generated wrappers enable fine-grained debugging of CUDA calls. Integration with HPC Environments: Supports performance analysis for GPU-heavy workloads in high-performance computing (HPC) clusters. Suggestions for Improvement Documentation: Add comments to clarify what specific modifications in each sed command are meant to achieve. Portability: Replace hardcoded paths (e.g., /usr/local/cuda-10.0/) with more configurable options or environment checks. Error Handling: Include error checks after key commands (mkdir, scorep-libwrap-init, make). This script is highly specialized and targets developers working with GPU performance optimization or debugging using CUDA and Score-P. ËøôÊÆµ Bash ËÑöÊú¨Êó®Âú®Ëá™Âä®ÁîüÊàêÈíàÂØπÂêÑÁßç CUDA Áõ∏ÂÖ≥Â∫ìÁöÑÂ∞ÅË£ÖÂ∫ìÔºàwrapper librariesÔºâÔºåËøô‰∫õÂ∫ìÈÄöÂ∏∏Áî®‰∫é GPU Âä†ÈÄüËÆ°ÁÆó„ÄÇÂ∞ÅË£ÖÂ∫ì‰ºº‰πé‰∏é Score-P ÈõÜÊàêÔºåËøôÊòØ‰∏ÄÁßçÊÄßËÉΩÂàÜÊûêÂíåËøΩË∏™Ê°ÜÊû∂„ÄÇËÑöÊú¨Â§ÑÁêÜËØ∏Â¶Ç libcudart.so„ÄÅlibcublas.so Á≠âÂ∫ìÔºå‰ª•‰æø‰∏∫ CUDA Â∫îÁî®Á®ãÂ∫èÊèê‰æõÊÄßËÉΩÊ£ÄÊµãÊàñËøêË°åÊó∂ÁõëÊéßÂäüËÉΩ„ÄÇ‰ª•‰∏ãÊòØËØ¶ÁªÜÁöÑÂàÜËß£Ôºö ËÑöÊú¨ÁöÑÁõÆÁöÑ ÂàõÂª∫Â∞ÅË£ÖÂ∫ìÔºö ‰ΩøÁî® scorep-libwrap-init Â∑•ÂÖ∑‰∏∫ CUDA Â∫ìÁîüÊàê Score-P Â∞ÅË£ÖÂ∫ì„ÄÇ ‰ΩøÂÖ∂ËÉΩÂ§üÊçïËé∑ÂØπ CUDA Â∫ìÁöÑË∞ÉÁî®ÔºåÁî®‰∫éË∞ÉËØï„ÄÅÊÄßËÉΩÂàÜÊûêÊàñËøêË°åÊó∂ÁõëÊéß„ÄÇ Ëá™ÂÆö‰πâË∞ÉÊï¥Ôºö ÁºñËæëÂ∞ÅË£ÖÊ∫êÁ†ÅÊñá‰ª∂ÂíåÊûÑÂª∫ÈÖçÁΩÆÔºå‰æãÂ¶ÇÂåÖÂê´ÁâπÂÆöÂ§¥Êñá‰ª∂„ÄÅ‰øÆÊîπÁºñËØëÊ†áÂøóÔºàÂ¶ÇÊ∑ªÂä† -fPIC ÊîØÊåÅ‰ΩçÁΩÆÊó†ÂÖ≥‰ª£Á†ÅÔºâ„ÄÇ Â§ÑÁêÜÁâπÂÆöÁöÑ CUDA Â∫ìÔºö Ê∂µÁõñÁöÑÂ∫ìÂåÖÊã¨Ôºö libcudart.soÔºöCUDA ÁöÑËøêË°åÊó∂ API„ÄÇ libcublas.soÔºöÂü∫Êú¨Á∫øÊÄß‰ª£Êï∞Â≠êÁ®ãÂ∫èÔºàBLASÔºâ„ÄÇ libcufft.soÔºöÂø´ÈÄüÂÇÖÈáåÂè∂ÂèòÊç¢ÔºàFFTÔºâ„ÄÇ libcurand.soÔºöÈöèÊú∫Êï∞ÁîüÊàê„ÄÇ libcudnn.soÔºöÊ∑±Â∫¶Á•ûÁªèÁΩëÁªúÊîØÊåÅ„ÄÇ libcusparse.soÔºöÁ®ÄÁñèÁü©ÈòµËøêÁÆó„ÄÇ libnvToolsExt.soÔºöÊÄßËÉΩÂàÜÊûêÂíåË∞ÉËØïÂ∑•ÂÖ∑„ÄÇ libnccl.soÔºöÂ§ö GPU ÈÄö‰ø°„ÄÇ ËÑöÊú¨ÁöÑ‰∏ªË¶ÅÈÉ®ÂàÜ 1. ÂáÜÂ§áÈò∂ÊÆµ ÁõÆÂΩïÂàõÂª∫Ôºö ÂàõÂª∫ wrapper ÁõÆÂΩïÔºåÁî®‰∫éÂ≠òÊîæÁîüÊàêÁöÑÂ∞ÅË£ÖÂ∫ì„ÄÇ ÁéØÂ¢ÉÂèòÈáèÂÆö‰πâÔºö ÂÆö‰πâ CUDA Toolkit„ÄÅcuDNN Âíå NCCL Â∫ìÁöÑË∑ØÂæÑÔºöCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.0/targets/x86_64-linux CUDNN_ROOT_DIR=/work/opt/cuda/cudnn-10.0-linux-x64-v7.6.5.32 NCCL_ROOT_DIR=/work/opt/cuda/nccl_2.5.6-1+cuda10.0_x86_64 2. Âæ™ÁéØÁîüÊàêÂ∞ÅË£ÖÂ∫ì ÂØπ‰∫éÊØè‰∏™ CUDA Â∫ìÔºö ÊâßË°å scorep-libwrap-initÔºö scorep-libwrap-init --name ${LIBN} -x c++ \\ --cppflags \"-I${CUDA_TOOLKIT_ROOT_DIR}/include/\" \\ --ldflags \"-L${CUDA_TOOLKIT_ROOT_DIR}/lib/\" \\ --libs \"-l${LIBN}\" --update wrapper/wrap_${LIBN} ‰∏∫ÁõÆÊ†áÂ∫ìÁîüÊàêÂàùÂßãÁöÑÂ∞ÅË£ÖÊ∫êÁ†ÅÂíåÊûÑÂª∫Êñá‰ª∂„ÄÇ Ëá™ÂÆö‰πâÊ∫êÁ†ÅÔºàÂ¶Ç libwrap.h Âíå .filter Êñá‰ª∂Ôºâ‰ª•Âèä MakefileÔºö ÂåÖÂê´ÈÄÇÂΩìÁöÑ CUDA Â§¥Êñá‰ª∂Ôºå‰æãÂ¶ÇÈíàÂØπ cublas ÁöÑ cublas_v2.hÔºåÈíàÂØπ cudnn ÁöÑ cudnn.h Á≠â„ÄÇ ÁºñËæëËøáÊª§ËßÑÂàô‰ª•ÊéíÈô§Êüê‰∫õÁ¨¶Âè∑Ôºà‰æãÂ¶Ç cuda*„ÄÅcurandGenerateBinomial*Ôºâ„ÄÇ ÁºñËØëÂ∞ÅË£ÖÂ∫ìÔºö make libscorep_libwrap_${LIBN}_runtime.la 3. ÁâπÊÆäÂ§ÑÁêÜ Êüê‰∫õÂ∫ìÈúÄË¶ÅÈ¢ùÂ§ñÁöÑ‰øÆÊîπÔºö ÂØπ‰∫é libcudart.soÔºåÊ∑ªÂä†‰∫ÜËá™ÂÆö‰πâÁöÑ set_launch_func ‰ª•Â§ÑÁêÜÂÜÖÊ†∏ÂêØÂä®„ÄÇ ÂØπ‰∫é libcufft.soÔºåÂåÖÂê´‰∫Ü cufft.h Âíå cufftXt.h„ÄÇ ËæìÂá∫ ËÑöÊú¨Âú® wrapper ÁõÆÂΩï‰∏≠ÁîüÊàê‰∏ÄÁ≥ªÂàóÂä®ÊÄÅÂ∫ìÔºà.la Êñá‰ª∂ÔºâÔºå‰æãÂ¶ÇÔºö libscorep_libwrap_cudart_runtime.la libscorep_libwrap_cublas_runtime.la libscorep_libwrap_cufft_runtime.la ... Á≠â„ÄÇ Ëøô‰∫õÂ∫ìÂÖÅËÆ∏ Score-P ÁõëÊéßÂíåË∑üË∏™Á®ãÂ∫è‰∏≠‰∏é GPU Áõ∏ÂÖ≥ÁöÑÊìç‰Ωú„ÄÇ ÊΩúÂú®Áî®ÈÄî ÊÄßËÉΩÂàÜÊûêÔºö ÂºÄÂèëËÄÖÂèØ‰ª•ÂàÜÊûê CUDA Â∫îÁî®Á®ãÂ∫èÁöÑÊÄßËÉΩÁì∂È¢àÊàñËµÑÊ∫ê‰ΩøÁî®ÊÉÖÂÜµ„ÄÇ Ë∞ÉËØï‰∏éÁõëÊéßÔºö ÁîüÊàêÁöÑÂ∞ÅË£ÖÂ∫ìÊîØÊåÅÂØπ CUDA Ë∞ÉÁî®ÁöÑÁªÜÁ≤íÂ∫¶Ë∞ÉËØï„ÄÇ ‰∏éÈ´òÊÄßËÉΩËÆ°ÁÆóÁéØÂ¢ÉÈõÜÊàêÔºö ÊîØÊåÅÂú®È´òÊÄßËÉΩËÆ°ÁÆóÔºàHPCÔºâÈõÜÁæ§‰∏≠ÂàÜÊûê GPU ÂØÜÈõÜÂûãÂ∑•‰ΩúË¥üËΩΩÁöÑÊÄßËÉΩ„ÄÇ ÊîπËøõÂª∫ËÆÆ ÊñáÊ°£Ôºö Ê∑ªÂä†Ê≥®ÈáäÔºåËØ¥ÊòéÊØè‰∏™ sed ÂëΩ‰ª§ÁöÑÂÖ∑‰Ωì‰øÆÊîπÁõÆÁöÑ„ÄÇ ÁßªÊ§çÊÄßÔºö Â∞ÜÁ°¨ÁºñÁ†ÅË∑ØÂæÑÔºàÂ¶Ç /usr/local/cuda-10.0/ÔºâÊõøÊç¢‰∏∫ÂèØÈÖçÁΩÆÈÄâÈ°πÊàñÁéØÂ¢ÉÊ£ÄÊü•„ÄÇ ÈîôËØØÂ§ÑÁêÜÔºö Âú®ÂÖ≥ÈîÆÂëΩ‰ª§ÔºàÂ¶Ç mkdir„ÄÅscorep-libwrap-init„ÄÅmakeÔºâÂêéÊ∑ªÂä†ÈîôËØØÊ£ÄÊü•„ÄÇ Ê≠§ËÑöÊú¨È´òÂ∫¶‰∏ì‰∏öÂåñÔºåÈÄÇÁî®‰∫é‰ΩøÁî® CUDA Âíå Score-P ËøõË°å GPU ÊÄßËÉΩ‰ºòÂåñÊàñË∞ÉËØïÁöÑÂºÄÂèëËÄÖ„ÄÇ "},"Learn/LearnMordenCpp/Note.html":{"url":"Learn/LearnMordenCpp/Note.html","title":"Note","keywords":"","body":"Morden Cpp Links cppreference modern-cpp hackingcpp cppweeklynews RVO and NRVO github: Mq-b/ModernCpp-ConcurrentProgramming-Tutorial awesome repositories: github: awesome-cpp cli arg parse: github.com: p-ranav/argparse Misc Smart Pointers All programming languages must answer: how to allocate the resources? how to get the read only access to the resource? how to get the mut/write access to the resource? how to pass or move the access of the resource? when to give up the access to the resource? when to release the resources? ~~ practical answer: resource ownership with lifetime Back to Basics: Smart Pointers and RAII - Inbal Levi - CppCon 2021 hacking cpp: unique_ownership The ownership model in C++ syntax and design of smart pointers and RAII ownership events: moving an object passing an object as a function parameter returning an object from a function smart pointers unique_ptr: single ownership shared_ptr: multiple ownership weak_ptr: non ownership RESOURCE MANAGEMENT-RAII Standard library classes using RAll std:string, std::vector - free memory on DTOR std::jthread - rejoin on DTOR Standard library utilities std::unique_lock - exclusive mutex wrapper (C++11) std::shared_lock - shared mutex wrapper (C++14) std:lock_guard - ownership of a mutex in a scope (C++11) std::scoped_lock - ownership of multiple mutexes (avoids deadlock) (C++11) experimental:scope_exit - general purpose scope guard Guidelines Support Library (github: Microsoft GSL) gsl::owner - a wrapper which prevents multiple ownership to an object unique_ptr hacking cpp: unique_ptr shared_ptr hacking cpp: shared_ownership. "},"Learn/LearnPest/ParsingExpressionGrammar.html":{"url":"Learn/LearnPest/ParsingExpressionGrammar.html","title":"ParsingExpressionGrammar","keywords":"","body":"PEG: Parsing Expression Grammar Ëß£ÊûêË°®ËææÂºèËØ≠Ê≥ï Parsing_expression_grammar awesome-pest In computer science, a parsing expression grammar (PEG) is a type of analytic formal grammar, i.e. it describes a formal language in terms of a set of rules for recognizing strings in the language. The formalism was introduced by Bryan Ford in 2004[1] and is closely related to the family of top-down parsing languages introduced in the early 1970s. Syntactically, PEGs also look similar to context-free grammars (CFGs), but they have a different interpretation: the choice operator selects the first match in PEG, while it is ambiguous in CFG. This is closer to how string recognition tends to be done in practice, e.g. by a recursive descent parser. Âú®ËÆ°ÁÆóÊú∫ÁßëÂ≠¶‰∏≠ÔºåËß£ÊûêË°®ËææÂºèËØ≠Ê≥ïÔºà PEG ÔºâÊòØ‰∏ÄÁßçÂàÜÊûêÂΩ¢ÂºèËØ≠Ê≥ïÔºåÂç≥ÂÆÉÊ†πÊçÆ‰∏ÄÁªÑÁî®‰∫éËØÜÂà´ËØ≠Ë®Ä‰∏≠Â≠óÁ¨¶‰∏≤ÁöÑËßÑÂàôÊù•ÊèèËø∞ÂΩ¢ÂºèËØ≠Ë®Ä„ÄÇËØ•ÂΩ¢Âºè‰∏ª‰πâÁî± Bryan Ford ‰∫é 20041 Âπ¥ÊèêÂá∫Ôºå‰∏é 20 ‰∏ñÁ∫™ 70 Âπ¥‰ª£ÂàùÊé®Âá∫ÁöÑËá™È°∂Âêë‰∏ãËß£ÊûêËØ≠Ë®ÄÁ≥ªÂàóÂØÜÂàáÁõ∏ÂÖ≥„ÄÇ‰ªéËØ≠Ê≥ï‰∏äËÆ≤ÔºåPEG ÁúãËµ∑Êù•‰πü‰∏é‰∏ä‰∏ãÊñáÊó†ÂÖ≥ËØ≠Ê≥ïÔºàCFGÔºâÁ±ª‰ººÔºå‰ΩÜÂÆÉ‰ª¨Êúâ‰∏çÂêåÁöÑËß£ÈáäÔºöÈÄâÊã©ËøêÁÆóÁ¨¶ÈÄâÊã© PEG ‰∏≠ÁöÑÁ¨¨‰∏Ä‰∏™ÂåπÈÖçÈ°πÔºåËÄåÂú® CFG ‰∏≠ÂÆÉÊòØ‰∏çÊòéÁ°ÆÁöÑ„ÄÇËøôÊõ¥Êé•Ëøë‰∫éÂÆûË∑µ‰∏≠Â≠óÁ¨¶‰∏≤ËØÜÂà´ÁöÑÊñπÂºèÔºå‰æãÂ¶ÇÈÄöËøáÈÄíÂΩí‰∏ãÈôçËß£ÊûêÂô®„ÄÇ Unlike CFGs, PEGs cannot be ambiguous; a string has exactly one valid parse tree or none. It is conjectured that there exist context-free languages that cannot be recognized by a PEG, but this is not yet proven.[1] PEGs are well-suited to parsing computer languages (and artificial human languages such as Lojban) where multiple interpretation alternatives can be disambiguated locally, but are less likely to be useful for parsing natural languages where disambiguation may have to be global.[2] ‰∏é CFG ‰∏çÂêåÔºåPEG ‰∏çËÉΩÂê´Á≥ä‰∏çÊ∏ÖÔºõ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Âè™Êúâ‰∏Ä‰∏™ÊúâÊïàÁöÑËß£ÊûêÊ†ëÔºåÊàñËÄÖÊ≤°Êúâ„ÄÇÊçÆÊé®ÊµãÔºåÂ≠òÂú® PEG Êó†Ê≥ïËØÜÂà´ÁöÑ‰∏ä‰∏ãÊñáÊó†ÂÖ≥ËØ≠Ë®ÄÔºå‰ΩÜËøôÂ∞öÊú™ÂæóÂà∞ËØÅÂÆû„ÄÇ1 PEG ÈùûÂ∏∏ÈÄÇÂêàËß£ÊûêËÆ°ÁÆóÊú∫ËØ≠Ë®ÄÔºà‰ª•ÂèäLojbanÁ≠â‰∫∫Â∑•‰∫∫Á±ªËØ≠Ë®ÄÔºâÔºåÂÖ∂‰∏≠ÂèØ‰ª•ÊúâÂ§öÁßçËß£ÈáäÊõø‰ª£ÊñπÊ°à„ÄÇÂú®Êú¨Âú∞Ê∂àÈô§Ê≠ß‰πâÔºå‰ΩÜÂØπ‰∫éËß£ÊûêÂèØËÉΩÂøÖÈ°ªÊòØÂÖ®Â±ÄÊ∂àÊ≠ßÁöÑËá™ÁÑ∂ËØ≠Ë®Ä‰∏çÂ§™ÊúâÁî®„ÄÇ "},"Learn/LearnPest/pest.html":{"url":"Learn/LearnPest/pest.html","title":"pest","keywords":"","body":"pest. The Elegant Parser pest.rs pest.docs.rs pest.book pest is a general purpose parser written in Rust with a focus on accessibility , correctness , and performance . It uses parsing expression grammars (or PEG) as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages. pest ÊòØ‰∏Ä‰∏™Áî® Rust ÁºñÂÜôÁöÑÈÄöÁî®Ëß£ÊûêÂô®ÔºåÈáçÁÇπÂÖ≥Ê≥®ÂèØËÆøÈóÆÊÄß„ÄÅÊ≠£Á°ÆÊÄßÂíåÊÄßËÉΩ„ÄÇÂÆÉ‰ΩøÁî®Ëß£ÊûêË°®ËææÂºèËØ≠Ê≥ïÔºàÊàñ PEGÔºâ‰Ωú‰∏∫ËæìÂÖ•ÔºåÂÖ∂Êú¨Ë¥®‰∏ä‰∏éÊ≠£ÂàôË°®ËææÂºèÁ±ª‰ººÔºå‰ΩÜÊèê‰æõ‰∫ÜËß£ÊûêÂ§çÊùÇËØ≠Ë®ÄÊâÄÈúÄÁöÑÂ¢ûÂº∫Ë°®ËææËÉΩÂäõ„ÄÇ alpha = { 'a'..'z' | 'A'..'Z' } digit = { '0'..'9' } ident = { (alpha | digit)+ } ident_list = _{ !digit ~ ident ~ (\" \" ~ ident)+ } // ^ // ident_list rule is silent (produces no tokens or error reports) int main() { return 5; } - FuncDecl - int_t: \"int \" - Identifier: \"main\" - FormalParams: \"\" - Block > Stmt > Return > Expr > Integer: \"5\" "},"Learn/LearnPolygeist/2021_Polygeist-Raising C to Polyhedral MLIR-translated_only.html":{"url":"Learn/LearnPolygeist/2021_Polygeist-Raising C to Polyhedral MLIR-translated_only.html","title":"2021_Polygeist-Raising C to Polyhedral MLIR-translated_only","keywords":"","body":"GPT-Academic Report Title: Polygeist: Raising C to Polyhedral MLIR Abstract: We present Polygeist, a new compilation flow that connects the MLIR compiler infrastructure to cutting edge polyhedral optimization tools. It consists of a C and C++ frontend capable of converting a broad range of existing codes into MLIR suitable for polyhedral transformation and a bi-directional conversion between MLIR and OpenScop exchange format. The Polygeist/MLIR intermediate representation featuring high-level (affine) loop constructs and n-D arrays embedded into a single static assignment (SSA) substrate enables an unprecedented combination of SSA-based and polyhedral optimizations. We illustrate this by proposing and implementing two extra transformations: statement splitting and reduction parallelization. Our evaluation demonstrates that Polygeist outperforms on average both an LLVM IR-level optimizer (Polly) and a source-to-source state-of-the-art polyhedral compiler (Pluto) when exercised on the Polybench/C benchmark suite in sequential (2.53x vs 1.41x, 2.34x) and parallel mode (9.47x vs 3.26x, 7.54x) thanks to the new representation and transformations. Meta Translation Ê†áÈ¢òÔºöPolygeist: Â∞ÜCÊèêÂçáÂà∞Â§öÈù¢‰ΩìMLIR ÊëòË¶ÅÔºöÊàë‰ª¨ÊèêÂá∫‰∫ÜPolygeistÔºåËøôÊòØ‰∏ÄÁßçÊñ∞ÁöÑÁºñËØëÊµÅÁ®ãÔºåÊó®Âú®Â∞ÜMLIRÁºñËØëÂü∫Á°ÄËÆæÊñΩ‰∏éÂâçÊ≤øÁöÑÂ§öÈù¢‰Ωì‰ºòÂåñÂ∑•ÂÖ∑ËøûÊé•Ëµ∑Êù•„ÄÇÂÆÉÂåÖÊã¨‰∏Ä‰∏™CÂíåC++ÂâçÁ´ØÔºåËÉΩÂ§üÂ∞ÜÂπøÊ≥õÁöÑÁé∞Êúâ‰ª£Á†ÅËΩ¨Êç¢‰∏∫ÈÄÇÂêàÂ§öÈù¢‰ΩìÂèòÊç¢ÁöÑMLIRÔºåÂπ∂ÂÆûÁé∞MLIR‰∏éOpenScop‰∫§Êç¢Ê†ºÂºè‰πãÈó¥ÁöÑÂèåÂêëËΩ¨Êç¢„ÄÇPolygeist/MLIR‰∏≠Èó¥Ë°®Á§∫ÂÖ∑Â§áÈ´òÂ±ÇÔºà‰ªøÂ∞ÑÔºâÂæ™ÁéØÊûÑÈÄ†ÂíåÂµåÂÖ•Âà∞Âçï‰∏ÄÈùôÊÄÅËµãÂÄºÔºàSSAÔºâÂü∫Á°ÄÁªìÊûÑ‰∏≠ÁöÑnÁª¥Êï∞ÁªÑÔºåËÉΩÂ§üÂÆûÁé∞ÂâçÊâÄÊú™ÊúâÁöÑSSAÂü∫Á°ÄÂíåÂ§öÈù¢‰Ωì‰ºòÂåñÁöÑÁªìÂêà„ÄÇÊàë‰ª¨ÈÄöËøáÊèêÂá∫ÂíåÂÆûÁé∞‰∏§‰∏™È¢ùÂ§ñÂèòÊç¢ÔºöËØ≠Âè•ÂàÜÂâ≤ÂíåÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºåÊù•ËØÅÊòéËøô‰∏ÄÁÇπ„ÄÇÊàë‰ª¨ÁöÑËØÑ‰º∞Ë°®ÊòéÔºåPolygeistÂú®Polybench/CÂü∫ÂáÜÂ•ó‰ª∂ÁöÑÈ°∫Â∫èÊ®°ÂºèÔºà2.53xÂØπÊØî1.41xÔºå2.34xÔºâÂíåÂπ∂Ë°åÊ®°ÂºèÔºà9.47xÂØπÊØî3.26xÔºå7.54xÔºâ‰∏äÁöÑË°®Áé∞Âπ≥Âùá‰ºò‰∫éLLVM IRÁ∫ßÂà´‰ºòÂåñÂô®ÔºàPollyÔºâÂíåÂÖàËøõÁöÑÊ∫êÂà∞Ê∫êÂ§öÈù¢‰ΩìÁºñËØëÂô®ÔºàPlutoÔºâÔºåËøôÂæóÁõä‰∫éÊñ∞ÁöÑË°®Á§∫ÂíåÂèòÊç¢„ÄÇ I. INTRODUCTION I. ÂºïË®Ä ÊèêÈ´òËÆ°ÁÆóÊïàÁéá‰∏ÄÁõ¥ÊòØËÆ°ÁÆóÈ¢ÜÂüüÁöÑ‰∏ªË¶ÅÁõÆÊ†á‰πã‰∏Ä„ÄÇÈÄöËøáÂà©Áî®Âπ∂Ë°åÊÄß„ÄÅÊó∂Èó¥ÂíåÁ©∫Èó¥Â±ÄÈÉ®ÊÄß‰ª•ÂèäÂÖ∂‰ªñÊÄßËÉΩÊù•Ê∫êÔºåÂèØ‰ª•ÊòæËëóÊèêÈ´òÁ®ãÂ∫èÊÄßËÉΩ„ÄÇÂΩìÈíàÂØπÁé∞‰ª£Â§öÊ†∏ CPU Âíå GPU ËøõË°åÁõ∏ÂÖ≥Á®ãÂ∫èÂèòÊç¢Êó∂ÔºåËøô‰∫õÂèòÊç¢Â∞§ÂÖ∂ÁπÅÁêê‰∏îÂÖ∑ÊúâÊåëÊàòÊÄßÔºåÂõ†‰∏∫Áé∞‰ª£Êû∂ÊûÑÂÖ∑ÊúâÊ∑±Â∫¶ÂÜÖÂ≠òÂ±ÇÊ¨°ÂíåÂπ∂Ë°åÊÄßÔºåÈÄöÂ∏∏Áî±‰ºòÂåñÁºñËØëÂô®Ëá™Âä®ÊâßË°å„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãËÉΩÂ§üÂÆûÁé∞Á≤æÁ°ÆÂàÜÊûêÂíåÁõ∏ÂØπÁÆÄÂçïÁöÑÂèòÊç¢ËßÑËåÉÔºàÂ¶ÇÂæ™ÁéØÈáçÊûÑ„ÄÅËá™Âä®Âπ∂Ë°åÂåñÁ≠âÔºâÔºå‰ª•Âà©Áî®Á°¨‰ª∂ÊÄßËÉΩÊù•Ê∫ê„ÄÇÂõ†Ê≠§ÔºåÊúâË∂äÊù•Ë∂äÂ§öÁöÑËØÅÊçÆË°®ÊòéÔºåÂ§öÈù¢‰ΩìÊ®°ÂûãÊòØÈ´òÊïàËΩ¨ÂåñËÆ°ÁÆóÂØÜÈõÜÂûãÁ®ãÂ∫è [1]„ÄÅ[2]„ÄÅ[3] ÂíåÁºñÁ®ãÂä†ÈÄüÂô®Êû∂ÊûÑ [4]„ÄÅ[5]„ÄÅ[6] ÁöÑÊúÄ‰Ω≥Ê°ÜÊû∂‰πã‰∏Ä„ÄÇÂõ†Ê≠§ÔºåÁºñËØëÂô®Á§æÂå∫‰∏ìÊ≥®‰∫éÊûÑÂª∫Â∑•ÂÖ∑Ôºå‰ª•ËØÜÂà´Âíå‰ºòÂåñÂèØ‰ª•Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠Ë°®Á§∫ÁöÑÁ®ãÂ∫èÈÉ®ÂàÜÔºàÈÄöÂ∏∏Áß∞‰∏∫ÈùôÊÄÅÊéßÂà∂ÈÉ®ÂàÜÊàñ SCoPÔºâ„ÄÇËøô‰∫õÂ∑•ÂÖ∑ÂæÄÂæÄÂàÜ‰∏∫‰∏§Á±ª„ÄÇ Âü∫‰∫éÁºñËØëÂô®ÁöÑÂ∑•ÂÖ∑ÔºåÂ¶Ç Polly [7] Âíå Graphite [8]ÔºåÂú®ÁºñËØëÂô®‰∏≠Èó¥Ë°®Á§∫ÔºàIRÔºâ‰∏≠Ê£ÄÊµãÂíåËΩ¨Êç¢ SCoP„ÄÇÂ∞ΩÁÆ°Ëøô‰∏éÁºñËØëÂô®ÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜÊó†ÁºùÈõÜÊàêÔºå‰ΩÜÁº∫‰πèÈ´òÂ±ÇÊ¨°ÁªìÊûÑÂíå‰ø°ÊÅØÈôêÂà∂‰∫ÜËøô‰∫õÂ∑•ÂÖ∑ËøõË°åÂàÜÊûêÂíåÂèòÊç¢ÁöÑËÉΩÂäõ„ÄÇËøôÁßçÁªìÊûÑÈÄöÂ∏∏ÈúÄË¶ÅÈÄöËøá‰ºòÂåñÂêéÁöÑ IR ÊÅ¢Â§çÔºåÂæÄÂæÄÊòØ‰ª•‰∏çÂÆåÂÖ®ÊàñÈ´òÊàêÊú¨ÁöÑÊñπÂºèÂÆûÁé∞ [9]„ÄÇÊ≠§Â§ñÔºåËØ∏Â¶Ç LICM ÁöÑÂ∏∏ËßÅÁºñËØëÂô®‰ºòÂåñÂèØËÉΩ‰ºöÂπ≤Êâ∞Ëøô‰∏ÄËøáÁ®ã [10]„ÄÇÊúÄÂêéÔºå‰ΩéÁ∫ß IR ÈÄöÂ∏∏Áº∫‰πèÁî±ÂèòÊç¢ÁîüÊàêÁöÑÂπ∂Ë°åÊÄßÊàñÂΩíÁ∫¶ÁöÑÊûÑÈÄ†Ôºå‰ªéËÄå‰ΩøÊµÅÁ®ãÊõ¥Âä†Â§çÊùÇ„ÄÇ Ê∫êÂà∞Ê∫êÁºñËØëÂô®ÔºåÂ¶Ç Pluto [11]„ÄÅPOCC [12] Âíå PPCG [5]ÔºåÁõ¥Êé•Âú® C Êàñ C++ ‰ª£Á†Å‰∏äÊìç‰Ωú„ÄÇËôΩÁÑ∂ËøôÂèØ‰ª•ÊúâÊïàÂú∞Âà©Áî®Ê∫ê‰ª£Á†Å‰∏≠ÁöÑÈ´òÂ±Ç‰ø°ÊÅØÔºå‰ΩÜËøô‰∫õÂ∑•ÂÖ∑ÁöÑÊúâÊïàÊÄßÂæÄÂæÄÂõ†Áº∫‰πèÂêØÁî®‰ºòÂåñËÄåÈôç‰ΩéÔºå‰æãÂ¶ÇÂ∞ÜÂç±Èô©ÁöÑÂÜÖÂ≠òÂä†ËΩΩËΩ¨Êç¢‰∏∫ÂçïËµãÂÄºËôöÊãüÂØÑÂ≠òÂô®„ÄÇÊ≠§Â§ñÔºåÂèòÊç¢ÁªìÊûúÂøÖÈ°ªÁî® C Ë°®ËææÔºåËÄå C ËØ≠Ë®ÄÊú¨Ë∫´ÁöÑÂ§çÊùÇÊÄß‰ºóÊâÄÂë®Áü• [13]„ÄÅ[14]ÔºåËÄå‰∏î‰πüÁº∫‰πè‰æãÂ¶ÇÂΩíÁ∫¶Âæ™ÁéØÊàñÊú™Ë¢´ÂÜÖÂ≠òÂ≠òÂÇ®ÊîØÊåÅÁöÑÂØÑÂ≠òÂô®ÂÄºÁöÑÊûÑÈÄ†„ÄÇ Êú¨ÊñáÊèêÂá∫Âπ∂ËØÑ‰º∞‰∫Ü‰∏ÄÁßçÂ§öÈù¢‰ΩìÁºñËØëÊµÅÁ®ã PolygeistÔºàÂõæ 1ÔºâÁöÑÂ•ΩÂ§ÑÔºåËØ•ÊµÅÁ®ãÂèØ‰ª•Âà©Áî®Ê∫ê‰ª£Á†Å‰∏≠ÂèØÁî®ÁöÑÈ´òÂ±ÇÁªìÊûÑ‰ª•ÂèäÁî±‰ΩéÁ∫ß IR Êèê‰æõÁöÑÁºñËØëÂô®‰ºòÂåñÁöÑÁªÜÁ≤íÂ∫¶ÊéßÂà∂„ÄÇÂÆÉÊûÑÂª∫Âú®ÊúÄËøëÁöÑ MLIR ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ‰πã‰∏äÔºåËØ•Âü∫Á°ÄËÆæÊñΩÂÖÅËÆ∏Âú®Âêå‰∏ÄË°®Á§∫‰∏≠„ÄÅÂú®Âêå‰∏ÄÂèòÊç¢ËøáÁ®ã‰∏≠Ê∑∑ÂêàÂ§ö‰∏™ÊäΩË±°Â±ÇÊ¨° [15]„ÄÇÂèØ‰∫íÊç¢ÁöÑ MLIR ÊäΩË±°ÊàñÊñπË®ÄÂåÖÊã¨È´òÂ±ÇÊûÑÈÄ†ÔºåÂ¶ÇÂæ™ÁéØ„ÄÅÂπ∂Ë°åÂíåÂΩíÁ∫¶Ê®°ÂºèÔºõÂÆåÊï¥Ë¶ÜÁõñ LLVM IR ÁöÑ‰ΩéÂ±ÇË°®Á§∫ [16]Ôºõ‰ª•Âèä‰∏ÄÁßçÂèóÂà∞Â§öÈù¢‰ΩìÂêØÂèëÁöÑË°®Á§∫ÔºåÂÖ∑ÊúâÂ∏¶Êúâ‰ªøÂ∞ÑË°®ËææÂºèÊ≥®ÈáäÁöÑÂæ™ÁéØÂíåÂÜÖÂ≠òËÆøÈóÆ„ÄÇÊ≠§Â§ñÔºåÈÄöËøáÂ∞ÜÊ∫êÁ∫ßÂíå IR Á∫ßÂ∑•ÂÖ∑ÁöÑ‰ºòÂäøÁªìÂêàÂú®‰∏Ä‰∏™Á´ØÂà∞Á´ØÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ã‰∏≠ÔºåPolygeist ‰øùÁïô‰∫ÜÈ´òÂ±Ç‰ø°ÊÅØÂπ∂Âà©Áî®Ëøô‰∫õ‰ø°ÊÅØÂú®ËæÉ‰ΩéÁ∫ßÂà´ÊäΩË±°‰∏äÊâßË°åÊñ∞ÁöÑÊàñÊîπËøõÁöÑ‰ºòÂåñÔºåÂ¶ÇËØ≠Âè•ÊãÜÂàÜÂíåÂæ™ÁéØÊê∫Â∏¶ÂÄºÊ£ÄÊµãÔºåÂêåÊó∂ÂΩ±ÂìçÂêéÁª≠‰ºòÂåñ„ÄÇ Êàë‰ª¨ÁöÑË¥°ÁåÆÂ¶Ç‰∏ãÔºö ‚Ä¢ ‰∏Ä‰∏™ C Âíå C++ ÁöÑ MLIR ÂâçÁ´ØÔºå‰øùÁïôÂéüÂßãÊ∫ê‰ª£Á†Å‰∏≠ÁöÑÈ´òÂ±ÇÂæ™ÁéØÁªìÊûÑÔºõ ‚Ä¢ ‰∏Ä‰∏™Á´ØÂà∞Á´ØÁöÑÊµÅÁ®ãÔºåÂÆûÁé∞ÂêëÂ§öÈù¢‰ΩìÊ®°ÂûãÁöÑÊèêÂçáÂíåÈôç‰ΩéÔºåÂà©Áî®Êàë‰ª¨ÁöÑÊäΩË±°ÊâßË°åÊØîÊ∫êÁ∫ßÂíå IR Á∫ßÂ∑•ÂÖ∑Êõ¥Â§öÁöÑ‰ºòÂåñÔºåÂåÖÊã¨ÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºõ ‚Ä¢ Êé¢Á¥¢ Polygeist ÂàõÂª∫ÁöÑÊñ∞ÂèòÊç¢Êú∫‰ºöÔºåÂ∞§ÂÖ∂ÊòØËØ≠Âè•ÊãÜÂàÜÔºõ ‚Ä¢ ‰ª•Âèä Polygeist ‰∏éÊúÄÂÖàËøõÁöÑÂü∫‰∫éÊ∫êÂíå IR ÁöÑÂ∑•ÂÖ∑ÔºàPluto [11] Âíå Polly [14]Ôºâ‰πãÈó¥ÁöÑÁ´ØÂà∞Á´ØÊØîËæÉÔºå‰ª•Âèä‰ºòÂåñÊ°à‰æãÁ†îÁ©∂„ÄÇ A. Overview A. Ê¶ÇËø∞ MLIRÊòØ‰∏ÄÁßç‰ºòÂåñÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩÔºåÂèóÂà∞LLVMÁöÑÂêØÂèëÔºåÈáçÁÇπÂÖ≥Ê≥®Êâ©Â±ïÊÄßÂíåÊ®°ÂùóÂåñ„ÄÇÂÖ∂‰∏ªË¶ÅÂàõÊñ∞Âú®‰∫éÊîØÊåÅÂÆåÂÖ®ÂèØÊâ©Â±ïÁöÑ‰∏ÄÁªÑÊåá‰ª§ÔºàÁß∞‰∏∫Êìç‰ΩúÔºâÂíåÁ±ªÂûãÁöÑ‰∏≠Èó¥Ë°®Á§∫ÔºàIRÔºâ„ÄÇÂÆûÈôÖ‰∏äÔºåMLIRÂ∞ÜÈùôÊÄÅÂçïËµãÂÄºÔºàSSAÔºâ‰∏éÂµåÂ•óÂå∫ÂüüÁõ∏ÁªìÂêàÔºå‰ΩøÂæóËÉΩÂ§üÂ∞Ü‰∏ÄÁ≥ªÂàóÊ¶ÇÂøµË°®Á§∫‰∏∫‰∏ÄÁ±ª‰∏ÄÊµÅÁöÑÊìç‰ΩúÔºåÂåÖÊã¨Êú∫Âô®Êåá‰ª§Ôºå‰æãÂ¶ÇÊµÆÁÇπÂä†Ê≥ï„ÄÅÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºå‰æãÂ¶ÇÂæ™ÁéØ„ÄÅÁ°¨‰ª∂ÁîµË∑ØÔºå‰ª•ÂèäÂ§ßÂûãÊú∫Âô®Â≠¶‰π†Âõæ„ÄÇÊìç‰ΩúÂÆö‰πâ‰∫ÜÁ®ãÂ∫èÁöÑËøêË°åÊó∂ËØ≠‰πâÔºåÂπ∂Â§ÑÁêÜ‰∏çÂèØÂèòÂÄº„ÄÇÊúâÂÖ≥ÂÄºÁöÑÁºñËØëÊó∂‰ø°ÊÅØÁî®Á±ªÂûãË°®Á§∫ÔºåËÄåÊúâÂÖ≥Êìç‰ΩúÁöÑ‰ø°ÊÅØÁî®Â±ûÊÄßË°®Á§∫„ÄÇÊìç‰ΩúÂèØ‰ª•ÈôÑÂ∏¶Âå∫ÂüüÔºåËÄåËøô‰∫õÂå∫ÂüüÂÜÖÈÉ®ÂèàÂåÖÂê´ÂÖ∂‰ªñÊìç‰ΩúÁöÑÔºàÂü∫Êú¨ÔºâÂùó„ÄÇÊâÄÊúâÊìç‰ΩúÊé•ÂèóÁöÑÈÄöÁî®ËØ≠Ê≥ïÂú®Âõæ2‰∏≠Â±ïÁ§∫‰∫ÜMLIRÁöÑÁªìÊûÑ„ÄÇÊ≠§Â§ñÔºåMLIRÊîØÊåÅÁî®Êà∑Ëá™ÂÆö‰πâÁöÑËá™ÂÆö‰πâËØ≠Ê≥ï„ÄÇ Â±ûÊÄß„ÄÅÊìç‰ΩúÂíåÁ±ªÂûãË¢´ÁªÑÁªáÂú®ÊñπË®Ä‰∏≠ÔºåÂèØ‰ª•ËßÜ‰∏∫Ê®°ÂùóÂåñÂ∫ì„ÄÇMLIRÊèê‰æõ‰∫ÜÂ∞ëÈáèÊñπË®ÄÔºå‰ª•ÂÆö‰πâÂ∏∏ËßÅÊìç‰ΩúÔºåÂ¶ÇÊ®°Âùó„ÄÅÂáΩÊï∞„ÄÅÂæ™ÁéØ„ÄÅÂÜÖÂ≠òÊàñÁÆóÊúØÊåá‰ª§Ôºå‰ª•ÂèäÂÉèÊï¥Êï∞ÂíåÊµÆÁÇπÊï∞ËøôÊ†∑ÁöÑÈÄöÁî®Á±ªÂûã„ÄÇÊàë‰ª¨Â∞ÜÂú®Êé•‰∏ãÊù•ÁöÑÁ´†ËäÇ‰∏≠ËÆ®ËÆ∫‰∏éPolygeistÁõ∏ÂÖ≥ÁöÑÊñπË®Ä„ÄÇ B. Affine and MemRef Dialects B. ‰ªøÂ∞ÑÂíåÂÜÖÂ≠òÂºïÁî®ÊñπË®Ä ‰ªøÂ∞ÑÊñπË®Ä [18] Êó®Âú®Ë°®Á§∫ÂÖ∑ÊúâÊòæÂºèÈÄÇÂêàÂ§öÈù¢‰ΩìÁöÑÂæ™ÁéØÂíåÊù°‰ª∂ÊûÑÈÄ†ÁöÑÈùôÊÄÅËÆ°ÁÆóÁ®ãÂ∫èÔºàSCoPÔºâ„ÄÇÂÖ∂Ë°®Á§∫ÁöÑÊ†∏ÂøÉÊòØ‰ª•‰∏ãÂÄºÁ±ªÂà´ÁöÑÂàÜÁ±ªÔºö Á¨¶Âè∑‚Äî‚ÄîÂ∑≤Áü•‰∏∫Âæ™ÁéØ‰∏çÂèò‰ΩÜÂú®ÁºñËØëÊó∂Êú™Áü•ÁöÑÊï¥Êï∞ÂÄºÔºåÂú®Â§öÈù¢‰ΩìÊñáÁåÆ‰∏≠‰πüÁß∞‰∏∫Á®ãÂ∫èÂèÇÊï∞ÔºåÈÄöÂ∏∏ÊòØÊï∞ÁªÑÁª¥Â∫¶ÊàñÂáΩÊï∞ÂèÇÊï∞„ÄÇÂú® MLIR ‰∏≠ÔºåÁ¨¶Âè∑ÊòØÂú®ÂÖ∑Êúâ‚Äú‰ªøÂ∞ÑËåÉÂõ¥‚ÄùËØ≠‰πâÁöÑÊìç‰ΩúÁöÑÈ°∂Á∫ßÂå∫Âüü‰∏≠ÂÆö‰πâÁöÑÂÄºÔºå‰æãÂ¶ÇÂáΩÊï∞ÔºõÊàñËÄÖÊï∞ÁªÑÁª¥Â∫¶„ÄÅÂ∏∏ÈáèÂíå‰ªøÂ∞ÑÊò†Â∞ÑÔºàËßÅ‰∏ãÊñáÔºâÂ∫îÁî®ÁªìÊûúÔºåÊó†ËÆ∫ÂÆÉ‰ª¨ÁöÑÂÆö‰πâÁÇπÂú®Âì™Èáå„ÄÇ Áª¥Â∫¶‚Äî‚ÄîÊòØÁ¨¶Âè∑ÁöÑÊâ©Â±ïÔºåÊé•Âèó‰ªøÂ∞ÑÂæ™ÁéØÁöÑÂΩíÁ∫≥ÂèòÈáè„ÄÇ Èùû‰ªøÂ∞Ñ‚Äî‚Äî‰ªª‰ΩïÂÖ∂‰ªñÂÄº„ÄÇÁ¨¶Âè∑ÂíåÁª¥Â∫¶ÂÖ∑ÊúâÁ¥¢ÂºïÁ±ªÂûãÔºåÂç≥Âπ≥Âè∞ÁâπÂÆöÁöÑÊï¥Êï∞ÔºåÈÄÇÂêàÊåáÈíàÔºàÂú® C ‰∏≠‰∏∫ intptr_tÔºâ„ÄÇ MLIR Êèê‰æõ‰∫Ü‰∏§‰∏™‰∏é‰ªøÂ∞ÑÊñπË®ÄÁõ∏ÂÖ≥ÁöÑÂ±ûÊÄßÔºö ‰ªøÂ∞ÑÊò†Â∞ÑÊòØÂ§öÁª¥ÁöÑÔºàÂáÜÔºâÁ∫øÊÄßÂáΩÊï∞ÔºåÂÆÉÂ∞Ü‰∏ÄÁªÑÁª¥Â∫¶ÂíåÁ¨¶Âè∑ÂèÇÊï∞Êò†Â∞ÑÂà∞‰∏ÄÁªÑÁªìÊûú„ÄÇ‰æãÂ¶ÇÔºå ( (d_0, d_1, d_2, s_0) \\rightarrow (d_0 + d_1, s_0 \\cdot d_2) ) ÊòØ‰∏Ä‰∏™‰∫åÁª¥ÂáÜ‰ªøÂ∞ÑÊò†Â∞ÑÔºåÂèØ‰ª•Âú® MLIR ‰∏≠Ë°®Á§∫‰∏∫ affine_map (d0+d1, s0 * d2)>„ÄÇÁª¥Â∫¶ÔºàÂ∑¶‰æßÁöÑÊã¨Âè∑ÂÜÖÔºâÂíåÁ¨¶Âè∑ÔºàÂ∑¶‰æßÁöÑÊñπÊã¨Âè∑ÂÜÖÔºâË¢´ÂàÜÈöîÂºÄÔºå‰ª•ÂÖÅËÆ∏ÂáÜÁ∫øÊÄßË°®ËææÂºèÔºöÁ¨¶Âè∑Ë¢´ËßÜ‰∏∫Â∏∏ÈáèÔºåÂõ†Ê≠§ÂèØ‰ª•‰∏éÁª¥Â∫¶Áõ∏‰πòÔºåËÄå‰∏§‰∏™Áª¥Â∫¶ÁöÑ‰πòÁßØÊòØÊó†ÊïàÁöÑ„ÄÇ Êï¥Êï∞ÈõÜÊòØË¢´ÔºàÂáÜÔºâÁ∫øÊÄßË°®ËææÂºèÁöÑÂêàÂèñÈôêÂà∂ÁöÑÊï¥Êï∞ÂÖÉÁªÑÈõÜÂêà„ÄÇ‰æãÂ¶ÇÔºå‚Äú‰∏âËßíÂΩ¢‚ÄùÈõÜÂêà ({(d_0, d_1) : 0 \\leq d_0 affine_set= 0, s0-d0-1 >= 0, d1 >= 0, d0-d1 >= 0)>„ÄÇ ‰ªøÂ∞ÑÊñπË®ÄÂà©Áî®‰∏äËø∞Ê¶ÇÂøµÂÆö‰πâ‰∫Ü‰∏ÄÁªÑÊìç‰Ωú„ÄÇaffine.for ÊòØ‰∏Ä‰∏™‚Äúfor‚ÄùÂæ™ÁéØÔºåÂÖ∂Âæ™ÁéØ‰∏çÂèòÁöÑ‰∏ãÁïåÂíå‰∏äÁïåË°®Á§∫‰∏∫Â∏¶ÊúâÂ∏∏ÈáèÊ≠•ÈïøÁöÑ‰ªøÂ∞ÑÊò†Â∞Ñ„ÄÇaffine.parallel ÊòØ‰∏Ä‰∏™‚ÄúÂ§öÈáçfor‚ÄùÂæ™ÁéØÂµåÂ•óÔºåÂÖ∂Ëø≠‰ª£ÂèØ‰ª•Âπ∂ÂèëÊâßË°å„ÄÇËøô‰∏§ÁßçÂæ™ÁéØÈÉΩÊîØÊåÅÈÄöËøáÂæ™ÁéØ‰º†ÈÄíÂÄºËøõË°åÂΩíÁ∫¶Ôºå‰ª•Âèä max(min) Ë°®ËææÂºèÁöÑ‰∏ãÔºà‰∏äÔºâÁïå„ÄÇaffine.if ÊòØ‰∏Ä‰∏™Êù°‰ª∂ÊûÑÈÄ†ÔºåÂ∏¶Êúâ‰∏Ä‰∏™ÂèØÈÄâÁöÑ else Âå∫ÂüüÔºåÊù°‰ª∂Ë¢´ÂÆö‰πâ‰∏∫ÁªôÂÆöÂÄºÂåÖÂê´Âú®‰∏Ä‰∏™Êï¥Êï∞ÈõÜ‰∏≠„ÄÇÊúÄÂêéÔºåaffine.load Âíå affine.store Ë°®Á§∫ÂÜÖÂ≠òËÆøÈóÆÔºåÂÖ∂‰∏≠Âú∞ÂùÄËÆ°ÁÆóË°®Á§∫‰∏∫‰ªøÂ∞ÑÊò†Â∞Ñ„ÄÇÊ†∏ÂøÉÁöÑ MLIR Á±ªÂûã‚Äî‚ÄîÂÜÖÂ≠òÂºïÁî®ÔºàmemrefÔºâÔºå‰ª•ÂèäÁõ∏Â∫îÁöÑ memref ÊñπË®Ä‰πüÂú®Âõæ 3 ‰∏≠Â±ïÁ§∫„ÄÇmemref Á±ªÂûãÊèèËø∞‰∫ÜÊåáÂêëÂÜÖÂ≠òÁöÑÁªìÊûÑÂåñÂ§öÁ¥¢ÂºïÊåáÈíàÔºå‰æãÂ¶ÇÔºåmemref Ë°®Á§∫‰∏Ä‰∏™ÊµÆÁÇπÂÖÉÁ¥†ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑÔºõËÄå memref ÊñπË®ÄÊèê‰æõ‰∫ÜÂÜÖÂ≠òÂíåÁ±ªÂûãÊìç‰ΩúÔºå‰æãÂ¶Ç memref.dim Ê£ÄÁ¥¢ memref ÂØπË±°ÁöÑÁª¥Â∫¶„ÄÇmemref ‰∏çÂÖÅËÆ∏ÂÜÖÈÉ®Âà´ÂêçÔºåÂç≥‰∏çÂêåÁöÑ‰∏ãÊ†áÂßãÁªàÊåáÂêë‰∏çÂêåÁöÑÂú∞ÂùÄ„ÄÇËøôÊúâÊïàÂú∞Ëß£ÂÜ≥‰∫ÜÈôêÂà∂Â§öÈù¢‰ΩìÊäÄÊúØÂú® LLVM IR Á∫ßÂà´Â∫îÁî®ÁöÑÂéªÁ∫øÊÄßÂåñÈóÆÈ¢ò [9]„ÄÇÂú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨Âè™ËÄÉËôë‰∏éÂÖºÂÆπ C ABIÔºàÂ∫îÁî®Á®ãÂ∫è‰∫åËøõÂà∂Êé•Âè£ÔºâÁöÑËøûÁª≠Ë°å‰∏ªÂ≠òÂÇ®ÂØπÂ∫îÁöÑÈªòËÆ§Â∏ÉÂ±ÄÁöÑ memrefs„ÄÇÂÆûÈôÖ‰∏äÔºåmemrefs ÊîØÊåÅÂèØ‰Ωú‰∏∫‰ªøÂ∞ÑÊò†Â∞ÑË°®ËææÁöÑ‰ªªÊÑèÂ∏ÉÂ±ÄÔºå‰ΩÜÂú® Polygeist ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåËøô‰∫õÂπ∂‰∏çÊòØÂøÖÈúÄÁöÑ„ÄÇ C. Other Relevant Core Dialects MLIRÊèê‰æõ‰∫ÜÂá†ÂçÅÁßçÊñπË®Ä„ÄÇÂú®Ëøô‰∫õÊñπË®Ä‰∏≠ÔºåÂè™ÊúâÂ∞ëÊï∞Âá†Áßç‰∏éÊàë‰ª¨ÁöÑËÆ®ËÆ∫Áõ∏ÂÖ≥Ôºö ÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºàscfÔºâÊñπË®ÄÂÆö‰πâ‰∫ÜÊéßÂà∂ÊµÅÊìç‰ΩúÔºå‰æãÂ¶ÇÂæ™ÁéØÂíåÊù°‰ª∂ËØ≠Âè•ÔºåËøô‰∫õÊìç‰Ωú‰∏çÂèó‰ªøÂ∞ÑÂàÜÁ±ªËßÑÂàôÁöÑÈôêÂà∂„ÄÇ‰æãÂ¶ÇÔºåscf.for Âæ™ÁéØÂèØ‰ª•Êé•Âèó‰ªª‰ΩïÊï¥Êï∞ÂÄº‰Ωú‰∏∫Âæ™ÁéØËæπÁïåÔºåËøô‰∫õËæπÁïå‰∏ç‰∏ÄÂÆöÊòØ‰ªøÂ∞ÑË°®ËææÂºè„ÄÇ Ê†áÂáÜÔºàstdÔºâÊñπË®ÄÂåÖÂê´Â∏∏ËßÅÁöÑÊìç‰ΩúÔºå‰æãÂ¶ÇÊï¥Êï∞ÂíåÊµÆÁÇπÁÆóÊúØÔºåËøôË¢´Áî®‰Ωú‰ªéÊõ¥È´òÁ∫ßÂà´ÊñπË®ÄÂà∞Â§ö‰∏™ÁõÆÊ†áÊñπË®ÄÁöÑÂÖ±ÂêåÈôç‰ΩéÁÇπÔºåÂèØ‰ª•ËßÜ‰∏∫LLVM IRÁöÑÊ¶ÇÊã¨[16]„ÄÇ LLVMÊñπË®ÄÁõ¥Êé•Â∞ÜLLVM IRÊåá‰ª§ÂíåÁ±ªÂûãÊò†Â∞ÑÂà∞MLIRÔºå‰∏ªË¶ÅÊòØ‰∏∫‰∫ÜÁÆÄÂåñÂÆÉ‰ª¨‰πãÈó¥ÁöÑËΩ¨Êç¢„ÄÇ OpenMPÊñπË®ÄÊèê‰æõ‰∫Ü‰∏ÄÁßç‰∏éÊñπË®ÄÂíåÂπ≥Âè∞Êó†ÂÖ≥ÁöÑOpenMPÊåá‰ª§Ë°®Á§∫Ôºå‰æãÂ¶Ç‚Äúparallel‚ÄùÂíå‚Äúworkshare loop‚ÄùÔºåÂèØÁî®‰∫éËΩ¨Êç¢OpenMPÊûÑÈÄ†ÊàñÁîüÊàê‰∏éOpenMPËøêË°åÊó∂‰∫§‰∫íÁöÑLLVM IR„ÄÇ Êï∞Â≠¶ÊñπË®ÄÂ∞ÜÊï¥Êï∞ÂíåÊµÆÁÇπÁ±ªÂûã‰∏äÁöÑÊï∞Â≠¶Êìç‰ΩúÔºàË∂ÖÂá∫ÁÆÄÂçïÁÆóÊúØÔºâÂΩí‰∏∫‰∏ÄÁªÑÔºå‰æãÂ¶ÇÔºåmath.powÊàñmath.sqrt„ÄÇ III. AN (AFFINE) MLIR COMPILATION PIPELINE III. ‰∏Ä‰∏™Ôºà‰ªøÂ∞ÑÔºâMLIRÁºñËØëÊµÅÁ®ã PolygeistÁºñËØëÊµÅÁ®ãÁî±4‰∏™ÁªÑ‰ª∂ÁªÑÊàêÔºàËßÅÂõæ1Ôºâ„ÄÇËøô‰ΩøÂæóPolygeistËÉΩÂ§ü‰øùÁïôÂéüÂßãÁ®ãÂ∫è‰∏≠ÂèØÁî®ÁöÑÊõ¥Â§öÁªìÊûÑÔºà‰æãÂ¶ÇÔºåÂ§öÁª¥Êï∞ÁªÑÔºâÔºåÂπ∂ËÉΩÂ§ü‰∏éMLIRÁöÑÈ´òÁ∫ßÂÜÖÂ≠òÊìç‰ΩúËøõË°å‰∫§‰∫í„ÄÇËøô‰∏é‰ªª‰ΩïÂÖ∑ÊúâÊåáÈíàÂèÇÊï∞ÁöÑC ABI‰∏çÂêåÔºåÂπ∂‰∏î‰∏éCÂáΩÊï∞ÁöÑÊé•Âè£‰∏ç‰∏ÄËá¥„ÄÇPolygeistÈÄöËøá‰∏∫ÂáΩÊï∞ÂèÇÊï∞ÂíåÂàÜÈÖçÊèê‰æõ‰∏Ä‰∏™Â±ûÊÄßÔºå‰ΩøÂÖ∂‰ΩøÁî®‰∏éCÂÖºÂÆπÁöÑÊåáÈíàÁ±ªÂûãÔºåËÄå‰∏çÊòØmemrefÔºåÈªòËÆ§ÈÄÇÁî®‰∫éÂ§ñÈÉ®ÂáΩÊï∞ÔºåÂ¶ÇstrcmpÂíåscanf„ÄÇÂΩì‰ΩøÁî®memref ABIÂèÇÊï∞Ë∞ÉÁî®ÊåáÈíà ABIÂáΩÊï∞Êó∂ÔºåPolygeistÁîüÊàêÂåÖË£Ö‰ª£Á†ÅÔºå‰ªémemref‰∏≠ÊÅ¢Â§ç‰∏éC ABIÂÖºÂÆπÁöÑÊåáÈíàÔºåÂπ∂Á°Æ‰øùÁªìÊûúÊ≠£Á°Æ„ÄÇÂõæ5Â±ïÁ§∫‰∫Ü‰∏Ä‰∏™Á§∫‰æãÔºåÊºîÁ§∫‰∫ÜPolygeist‰∏éC ABIÂú®‰∏Ä‰∏™Â∞èÁ®ãÂ∫è‰∏≠ÁöÑ‰∫íÂä®„ÄÇ Âú®ÂàÜÈÖçÂíåÈáäÊîæÂÜÖÂ≠òÊó∂ÔºåËøôÁßçABIÁöÑÂ∑ÆÂºÇÊòæÂæóÂ∞§‰∏∫ÈáçË¶Å„ÄÇËøôÊòØÂõ†‰∏∫‰ΩøÁî®mallocÂàÜÈÖçÊï∞ÁªÑÁöÑÂá†‰∏™Â≠óËäÇÂêéÔºåÂÜçÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫memrefÂ∞Ü‰∏ç‰ºö‰∫ßÁîüÂêàÊ≥ï‰ª£Á†ÅÔºàÂõ†‰∏∫memrefÊú¨Ë∫´ÂèØËÉΩ‰∏çÊòØÁî®ÂéüÂßãÊåáÈíàÂÆûÁé∞ÁöÑÔºâ„ÄÇÂõ†Ê≠§ÔºåPolygeistËØÜÂà´ÂØπÂàÜÈÖçÂíåÈáäÊîæÂáΩÊï∞ÁöÑË∞ÉÁî®ÔºåÂπ∂Â∞ÜÂÖ∂ÊõøÊç¢‰∏∫memrefÁöÑÂêàÊ≥ïÁ≠âÊïàÂáΩÊï∞„ÄÇ ÂáΩÊï∞ÂíåÂÖ®Â±ÄÂèòÈáè‰ΩøÁî®CÊàñC++ ABI‰∏≠‰ΩøÁî®ÁöÑÁõ∏ÂêåÂêçÁß∞ÂèëÂá∫„ÄÇËøôÁ°Æ‰øùÊâÄÊúâÂ§ñÈÉ®ÂÄºÈÉΩË¢´Ê≠£Á°ÆÂä†ËΩΩÔºåÂπ∂‰∏îÂ§öÁâàÊú¨ÂáΩÊï∞ÔºàÂ¶ÇC++Ê®°ÊùøÊàñÈáçËΩΩÁîüÊàêÁöÑÂáΩÊï∞ÔºâÊã•Êúâ‰∏çÂêåÁöÑÂêçÁß∞ÂíåÂÆö‰πâ„ÄÇ c) Êåá‰ª§ÁîüÊàêÔºöÂØπ‰∫éÂ§ßÂ§öÊï∞Êåá‰ª§ÔºåPolygeistÁõ¥Êé•ÂèëÂá∫‰∏éÁ≠âÊïàCÊìç‰ΩúÁõ∏ÂØπÂ∫îÁöÑMLIRÊìç‰ΩúÔºàÂ¶ÇÊï¥Êï∞Âä†Ê≥ïÁöÑaddiÔºåÂáΩÊï∞Ë∞ÉÁî®ÁöÑcallÁ≠âÔºâ„ÄÇÂØπ‰∫éÊüê‰∫õÁâπÊÆäÊåá‰ª§ÔºåÂ¶ÇÂØπpowÁöÑË∞ÉÁî®ÔºåPolygeistÈÄâÊã©ÂèëÂá∫MathÊñπË®Ä‰∏≠ÁâπÂÆöÁöÑMLIRÊìç‰ΩúÔºåËÄå‰∏çÊòØË∞ÉÁî®Â§ñÈÉ®ÂáΩÊï∞ÔºàÂú®libm‰∏≠ÂÆö‰πâÔºâ„ÄÇËøô‰ΩøÂæóËøô‰∫õÊåá‰ª§ËÉΩÂ§üÂú®MLIR‰∏≠Êõ¥Â•ΩÂú∞ËøõË°åÂàÜÊûêÂíå‰ºòÂåñ„ÄÇ Ê∂âÂèäÂÜÖÂ≠òÊàñÊåáÈíàÁÆóÊúØÁöÑÊìç‰ΩúÈúÄË¶ÅÈ¢ùÂ§ñÂ§ÑÁêÜ„ÄÇMLIRÊ≤°ÊúâÈÄöÁî®ÁöÑÊåáÈíàÁÆóÊúØÊåá‰ª§ÔºõÁõ∏ÂèçÔºåÂÆÉË¶ÅÊ±ÇloadÂíåstoreÊìç‰ΩúÂåÖÂê´ÊâÄÊúâË¢´Êü•ÊâæÁöÑÁ¥¢Âºï„ÄÇËøô‰∏∫ÊâßË°åÊåáÈíàÁÆóÊúØÁöÑÊìç‰ΩúÂ∏¶Êù•‰∫ÜÈóÆÈ¢ò„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÂºïÂÖ•‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂Â≠êÁ¥¢ÂºïÊìç‰ΩúÔºåÁî®‰∫émemrefÔºå‰ª•Ë∑üË∏™ÈôÑÂä†ÁöÑÂú∞ÂùÄÂÅèÁßª„ÄÇÂú®Polygeist‰∏≠ÁöÑÂêéÁª≠‰ºòÂåñËøáÁ®ã‰∏≠ÔºåÂ∞ÜÂ≠êÁ¥¢Âºï‰∏≠ÁöÑÂÅèÁßªÈáèËΩ¨ÂèëÁªô‰ªª‰Ωï‰ΩøÁî®ÂÆÉ‰ª¨ÁöÑloadÊàñstore„ÄÇ d) Â±ÄÈÉ®ÂèòÈáèÔºöÂ±ÄÈÉ®ÂèòÈáèÈÄöËøáÂú®ÂáΩÊï∞È°∂ÈÉ®ÂàÜÈÖç‰∏Ä‰∏™memrefÂú®Ê†à‰∏äËøõË°åÂ§ÑÁêÜ„ÄÇËøô‰ΩøÂæóCÊàñC++ÁöÑÊâÄÈúÄËØ≠‰πâËÉΩÂ§üÁõ∏ÂØπÂÆπÊòìÂú∞ÂÆûÁé∞„ÄÇÁÑ∂ËÄåÔºåÁî±‰∫éËÆ∏Â§öÂ±ÄÈÉ®ÂèòÈáèÂíåÂèÇÊï∞ÂåÖÂê´memrefÁ±ªÂûãÔºåËøôÁ´ãÂç≥ÂØºËá¥‰∫ÜmemrefÁöÑmemref-ËøôÂØπÂ§ßÂ§öÊï∞MLIR‰ºòÂåñÊù•ËØ¥ÊòØ‰∏Ä‰∏™ÈöúÁ¢çÔºåÂõ†‰∏∫Âú®Polygeist‰πãÂ§ñËøôÊòØ‰∏çÂêàÊ≥ïÁöÑ„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÂÆûÁé∞‰∫Ü‰∏Ä‰∏™ÈáçÈáèÁ∫ßÁöÑÂÜÖÂ≠òÂà∞ÂØÑÂ≠òÂô®Ôºàmem2regÔºâËΩ¨Êç¢ËøáÁ®ãÔºåËØ•ËøáÁ®ãÊ∂àÈô§‰∫ÜMLIRÊûÑÈÄ†‰∏≠ÁöÑ‰∏çÂøÖË¶ÅÁöÑÂä†ËΩΩ„ÄÅÂ≠òÂÇ®ÂíåÂàÜÈÖç„ÄÇÊ†πÊçÆÁªèÈ™åÔºåËøôÊ∂àÈô§‰∫ÜPolybenchÂ•ó‰ª∂‰∏≠ÊâÄÊúâmemrefÁöÑmemref„ÄÇ B. Raising to Affine Â∞ÜCÊàñC++Áõ¥Êé•ÁøªËØë‰∏∫MLIRËÉΩÂ§ü‰øùÁïôÂÖ≥‰∫éÂæ™ÁéØÁªìÊûÑÂíånÁª¥Êï∞ÁªÑÁöÑÈ´òÁ∫ß‰ø°ÊÅØÔºå‰ΩÜ‰∏ç‰ºöÁîüÊàêÂÖ∂‰ªñÁöÑ‰ªøÂ∞ÑÊìç‰Ωú„ÄÇ‰πãÂêéÔºåPolygeistÂ∞ÜÂÜÖÂ≠ò„ÄÅÊù°‰ª∂ÂíåÂæ™ÁéØÊìç‰ΩúÊèêÂçáËá≥ÂÖ∂‰ªøÂ∞ÑÊñπË®ÄÂØπÂ∫îÁâ©ÔºåÂ¶ÇÊûúÂÆÉËÉΩÂ§üËØÅÊòéËøô‰∫õÊìç‰ΩúÊòØÂêàÊ≥ïÁöÑ‰ªøÂ∞ÑÊìç‰Ωú„ÄÇÂ¶ÇÊûúÁõ∏Â∫îÁöÑÂâçÁ´Ø‰ª£Á†ÅË¢´ÂåÖË£πÂú®#pragma scop‰∏≠ÔºåPolygeistÂÅáËÆæÂú®ËØ•Âå∫ÂüüÂÜÖÊèêÂçáÊâÄÊúâÊìç‰ΩúÊòØÂßãÁªàÂêàÊ≥ïÁöÑÔºå‰∏îÊó†ÈúÄÈ¢ùÂ§ñÊ£ÄÊü•„ÄÇÂØπ‰∫é‰ªª‰ΩïÊú™Ë¢´ËØÅÊòéÊàñÂÅáËÆæ‰∏∫‰ªøÂ∞ÑÁöÑÊìç‰ΩúÔºåÂàô‰øùÊåÅ‰∏çÂèò„ÄÇÊàë‰ª¨ÂØπ‰ªøÂ∞ÑÊò†Â∞ÑËøõË°åÁÆÄÂåñÔºå‰ª•ÂéªÈô§ÂÖ∑ÊúâÈõ∂Ê¨°Êàñ‰∏ÄÊ¨°Ëø≠‰ª£ÁöÑÂæ™ÁéØÔºåÂπ∂Âà†Èô§Âú®ÁºñËØëÊó∂Â∑≤Áü•Êù°‰ª∂ÁöÑÊù°‰ª∂ËØ≠Âè•ÁöÑÂàÜÊîØ„ÄÇ a) Memory operations and loop bounds: a) ÂÜÖÂ≠òÊìç‰ΩúÂíåÂæ™ÁéØËæπÁïåÔºö‰∏∫‰∫ÜËΩ¨Êç¢‰∏Ä‰∏™Êìç‰ΩúÔºåPolygeist Áî®ÊÅíÁ≠â‰ªøÂ∞ÑÊò†Â∞ÑÔºàaffine_map(s0)>[%bound]ÔºâÊõøÊç¢ÂÖ∂ËæπÁïåÂíå‰∏ãÊ†áÊìç‰ΩúÊï∞„ÄÇÂÆÉÁÑ∂ÂêéÂ∞ÜËÆ°ÁÆóÊò†Â∞ÑÊìç‰ΩúÊï∞ÁöÑÊìç‰ΩúÔºå‰æãÂ¶ÇÂä†Ê≥ïÔºàaddiÔºâ„ÄÅ‰πòÊ≥ïÔºàmuliÔºâÔºåÊäòÂè†Âà∞Êò†Â∞ÑÊú¨Ë∫´‰∏≠„ÄÇ‰ªéÂæ™ÁéØÂΩíÁ∫≥ÂèòÈáè‰º†ÈÄíÂæóÂá∫ÁöÑÂÄºÂèòÊàê‰∫ÜÊò†Â∞ÑÁª¥Â∫¶ÔºåÂÖ∂‰ªñÂÄºÂàôÂèòÊàêÁ¨¶Âè∑„ÄÇ‰æãÂ¶ÇÔºåaffine_map(s0)> [%bound] Âú® %bound = addi %N, %i ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÖ∂‰∏≠ %i ÊòØ‰∏Ä‰∏™ÂΩíÁ∫≥ÂèòÈáèÔºåË¢´ÊäòÂè†‰∏∫ affine_map(s0 + d0)>(%i)[%N]„ÄÇËØ•ËøáÁ®ãÂú®Êó†Ê≥ïÂÜçÊäòÂè†Êìç‰ΩúÊàñÊª°Ë∂≥‰ªøÂ∞ÑÂÄºÂàÜÁ±ªËßÑÂàôÊó∂ÁªàÊ≠¢„ÄÇ b) Êù°‰ª∂ËØ≠Âè•ÔºöÂâçÁ´Ø‰∏∫‰∏§ÁßçËæìÂÖ•‰ª£Á†ÅÊ®°ÂºèÔºàif Êù°‰ª∂Âíå‰∏âÂÖÉË°®ËææÂºèÔºâÁîüÊàêÊù°‰ª∂Êìç‰Ωú„ÄÇÊù°‰ª∂ÈÄöËøáÂºïÂÖ•Êï¥Êï∞ÈõÜÂêàÂπ∂Â∞ÜÊìç‰ΩúÊï∞ÊäòÂè†Âà∞ÂÖ∂‰∏≠ËøõË°åËΩ¨Êç¢ÔºåÁ±ª‰ºº‰∫é‰ªøÂ∞ÑÊò†Â∞ÑÔºåÊ≠§Â§ñÔºåÊìç‰Ωú‰πãÈó¥ÁöÑÂä†Ê≥ïÂíåËøêÁÆóÂàÜÈöîÈõÜÂêàÁ∫¶ÊùüÔºåËÄåÈùûËøêÁÆóÂàôÂØπÂÖ∂ËøõË°åÂèçËΩ¨Ôºàaffine.if ‰ªÖÊé•Âèó ‚â• 0 Âíå = 0 ÁöÑÁ∫¶ÊùüÔºâ„ÄÇPolygeist Â§ÑÁêÜÂµåÂ•óÊù°‰ª∂Êó∂ÈÅµÂæ™ C È£éÊ†ºÁöÑÁü≠Ë∑ØËØ≠‰πâÔºåÂÖ∂‰∏≠ÂêéÁª≠Êù°‰ª∂Âú®ÂâçÈù¢Êù°‰ª∂ÁöÑ‰∏ª‰ΩìÂÜÖËøõË°åÊ£ÄÊü•ÔºåÂΩìÊ≥ïÂæãÂÖÅËÆ∏Êó∂ÔºåÂ∞ÜÊù°‰ª∂ÊèêÂçáÂà∞ÊúÄÂ§ñÂ±ÇÊù°‰ª∂‰πãÂ§ñÔºåÂπ∂Áî®Â∏ÉÂ∞îÊìç‰ΩúÊàñÈÄâÊã©Êìç‰ΩúÊõøÊç¢ÂÆÉ‰ª¨„ÄÇÂú® #pragma scop ÂÜÖÔºåËøôÊÄªÊòØÂêàÊ≥ïÁöÑ„ÄÇ ‰∏∫‰∏âÂÖÉË°®ËææÂºèÁîüÊàêÁöÑÊù°‰ª∂ËØ≠Âè•ÈÄöÂ∏∏Ê∂âÂèäÂÖ∂Âå∫ÂüüÂÜÖÁöÑÂÜÖÂ≠òÂä†ËΩΩÔºåÁî±‰∫éÂâØ‰ΩúÁî®ÔºåÂØºËá¥Êó†Ê≥ïÊèêÂçá„ÄÇÊàë‰ª¨ÈáçÁî® mem2reg ÈÄöÈÅìÔºåÂú®ÂèØËÉΩÁöÑÊÉÖÂÜµ‰∏ãÂ∞ÜÂÖ∂ÊõøÊç¢‰∏∫Á≠âÊïàÁöÑÊó©ÊúüÂä†ËΩΩÔºå‰ª•ÂÆûÁé∞ÊèêÂçá„ÄÇ‰ªéÁªèÈ™å‰∏äÁúãÔºåËøôË∂≥‰ª•Â§ÑÁêÜ Polybench/C Â•ó‰ª∂‰∏≠ÁöÑÊâÄÊúâ‰∏âÂÖÉË°®ËææÂºè [19]„ÄÇÂê¶ÂàôÔºå‰∏âÂÖÉË°®ËææÂºèÂ∞ÜÈúÄË¶ÅË¢´‰∏ãÊ∏∏Â§öÈù¢‰ΩìÈÄöÈÅìÊâìÂåÖÊàêÂçï‰∏™ËØ≠Âè•„ÄÇ C. Connecting MLIR to Polyhedral Tools ËæìÂÖ•Á®ãÂ∫è‰∏≠‰ΩøÁî® MLIR Affine ÊñπË®ÄË°®ËææÁöÑÂå∫ÂüüÈÄÇÁî®‰∫éÂ§öÈù¢‰ΩìÊ®°Âûã„ÄÇÁÑ∂ËÄåÔºåÁé∞ÊúâÂ∑•ÂÖ∑Êó†Ê≥ïÁõ¥Êé•‰ΩøÁî® MLIR„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÈÄâÊã©ÂÆûÁé∞‰∏é OpenScop [20] ÁöÑÂèåÂêëËΩ¨Êç¢ÔºåËøôÊòØ‰∏ÄÁßçÂèØË¢´‰ºóÂ§öÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Áõ¥Êé•‰ΩøÁî®ÁöÑ‰∫§Êç¢Ê†ºÂºèÔºåÂåÖÊã¨ Pluto [11]ÔºåÂπ∂‰∏îËøõ‰∏ÄÊ≠•ÂèØËΩ¨Êç¢‰∏∫ isl [21] Ë°®Á§∫„ÄÇËøô‰ΩøÂæó Polygeist ËÉΩÂ§ü‰∏éÂú®Â§öÈù¢‰ΩìÁºñËØëÁ†îÁ©∂‰∏≠ÂàõÂª∫ÁöÑÂ∑•ÂÖ∑Êó†ÁºùËøûÊé•ÔºåËÄåÊó†ÈúÄ‰øÆÊîπËøô‰∫õÂ∑•ÂÖ∑‰ª•ÊîØÊåÅ MLIR„ÄÇ Â§ßÂ§öÊï∞Â§öÈù¢‰ΩìÂ∑•ÂÖ∑ËÆæËÆ°Áî®‰∫éÂ§ÑÁêÜ‰ª•ËØ≠Âè•‰∏∫Âü∫Á°ÄÁöÑ C Êàñ FORTRAN ËæìÂÖ•ÔºåËÄåÂÆÉ‰ª¨Âú® MLIR ‰∏≠Âπ∂Ê≤°ÊúâÁõ¥Êé•ÂØπÂ∫îÁöÑÁ≠â‰ª∑Áâ©„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ËÆæËÆ°‰∫Ü‰∏ÄÁßçÊú∫Âà∂Ôºå‰ªé‰∏ÄÁ≥ªÂàó MLIR Êìç‰ΩúÂàõÂª∫Á±ª‰ººËØ≠Âè•ÁöÑÁªìÊûÑ„ÄÇ‰æãÂ¶ÇÔºö void setArray(int N, double val, double * array) {...} int main(int argc, char ** argv) { ... cmp = strcmp(str1, str2) ... double array [10]; setArray(10, 42.0, array) } ÂèØËΩ¨Êç¢‰∏∫Ôºö func @setArray(%N: i32, %val: f64, %array: memref) { %0 = index_cast %N : i32 to index affine.for %i = 0 to %0 { affine.store %val, %array[%i] : memref } return } func @main(%argc: i32, %argv: !llvm.ptr>) -> i32 { ... %cmp = llvm.call @strcmp(%str1, %str2) : (!llvm.ptr, !llvm.ptr) -> !llvm.i32 ... %array = memref.alloca() : memref %arraycst = memref.cast %array : memref to memref %val = constant 42.0 : f64 call @setArray(%N, %val, %arraycst) : (i32, f64, memref) -> () } Âõæ 5. Á§∫‰æãÊºîÁ§∫‰∫Ü Polygeist ÁöÑ ABI„ÄÇÂØπ‰∫éÈ¢ÑÊúüË¶ÅÁî± Polygeist ÁºñËØëÁöÑÂáΩÊï∞ÔºàÂ¶Ç setArrayÔºâÔºåÊåáÈíàÂèÇÊï∞Ë¢´ÊõøÊç¢‰∏∫ memref„ÄÇÂØπ‰∫éÈúÄË¶ÅÂ§ñÈÉ®Ë∞ÉÁî®Á∫¶ÂÆöÔºàÂ¶Ç main/strcmpÔºâÁöÑÂáΩÊï∞ÔºåPolygeist ÈÄÄÂõûÂà∞ÂèëÂá∫ llvm.ptr Âπ∂ÁîüÊàêËΩ¨Êç¢‰ª£Á†ÅÁöÑÊñπÂºè„ÄÇ Êàë‰ª¨Ëøõ‰∏ÄÊ≠•ËØÅÊòéÔºåËøô‰ΩøÂæó Polygeist ËÉΩÂ§üÈÄöËøáÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ÔºåÁßØÊûÅÂΩ±ÂìçÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ÁöÑË°å‰∏∫ÔºàËØ¶ËßÅÁ¨¨ III-D ËäÇÔºâ„ÄÇ a) ÁÆÄÂçïËØ≠Âè•ÂΩ¢ÊàêÔºöËßÇÂØüÂà∞Á¨¶ÂêàÂ§öÈù¢‰ΩìÊ®°ÂûãÁöÑCËØ≠Âè•‰∏ªË¶ÅÊòØÂèòÈáèËµãÂÄºÔºåÊàë‰ª¨ÂèØ‰ª•Êé®ÂØºÂá∫‰∏ÄÁßçÊú∫Âà∂Ôºå‰ªéMLIRÊìç‰ΩúÈìæ‰∏≠ËØÜÂà´ËØ≠Âè•„ÄÇÂ≠òÂÇ®Âà∞ÂÜÖÂ≠ò‰∏≠ÁöÑÊìç‰ΩúÊòØËØ•ËØ≠Âè•ÁöÑÊúÄÂêé‰∏Ä‰∏™Êìç‰Ωú„ÄÇËØ•Êìç‰ΩúÁöÑÈÄÜÂêëÂàáÁâáÔºåÂç≥‰º†ÈÄíËÆ°ÁÆóÂÖ∂Êìç‰ΩúÊï∞ÁöÑÊìç‰ΩúÔºåÂ±û‰∫éËØ•ËØ≠Âè•„ÄÇÂàáÁâáÊâ©Â±ïÂú®ÁîüÊàêË¢´ÂàÜÁ±ª‰∏∫‰ªøÂ∞ÑÁª¥Â∫¶ÊàñÁ¨¶Âè∑ÁöÑÂÄºÁöÑÊìç‰ΩúÂ§ÑÂÅúÊ≠¢ÔºåËøô‰∫õÂÄºÂèØ‰ª•Áõ¥Êé•Áî®‰∫é‰ªøÂ∞ÑË°®ËææÂºè„ÄÇÊ≠§Á±ªÂÄºÂåÖÊã¨Âæ™ÁéØÂΩíÁ∫≥ÂèòÈáèÊàñÂæ™ÁéØ‰∏çÂèòÂ∏∏Èáè„ÄÇ‰∏Ä‰∫õÊìç‰ΩúÂèØËÉΩÂá∫Áé∞Âú®Â§ö‰∏™ËØ≠Âè•‰∏≠ÔºåÂ¶ÇÊûúËØ•ÂÄºË¢´Â§öÊ¨°‰ΩøÁî®„ÄÇÁÑ∂ËÄåÔºåÊàë‰ª¨ÈúÄË¶ÅÊìç‰Ωú‰∏éËØ≠Âè•‰πãÈó¥ÁöÑÊò†Â∞ÑÊòØÂèåÂêëÁöÑÔºå‰ª•‰æøÂú®Ë∞ÉÂ∫¶Âô®ÈáçÊñ∞ÁªìÊûÑÂåñÁ®ãÂ∫èÂêéÂèëÂá∫MLIRÔºåËÄå‰∏çËÄÉËôëSSAÂÄºÁöÑÂèØËßÅÊÄßËßÑÂàô„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™Â§öÊ¨°‰ΩøÁî®ÁöÑÊìç‰ΩúÊ≤°ÊúâÂâØ‰ΩúÁî®ÔºåPolygeist‰ºöÁÆÄÂçïÂú∞Â§çÂà∂ÂÆÉ„ÄÇÂØπ‰∫éÈáçÂ§çÊìç‰ΩúÁöÑÂ§çÂà∂‰∏çÂêàÊ≥ïÁöÑÊÉÖÂÜµÔºåPolygeistÂ∞ÜÂÖ∂ÁªìÊûúÂ≠òÂÇ®Âú®Â†ÜÊ†àÂàÜÈÖçÁöÑÂÜÖÂ≠òÂºïÁî®‰∏≠ÔºåÂπ∂Â∞ÜÊâÄÊúâÂêéÁª≠‰ΩøÁî®ÊõøÊç¢‰∏∫ÂÜÖÂ≠òÂä†ËΩΩ„ÄÇÂõæ6Â±ïÁ§∫‰∫ÜÂú®Êìç‰Ωú%20‰∏≠‰ΩøÁî®ÁöÑÂÄº%0ÁöÑËΩ¨Êç¢„ÄÇËøôÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑËØ≠Âè•„ÄÇ b) Ë∑®Âå∫Âüü‰æùËµñÂÖ≥Á≥ªÔºöÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏Ä‰∏™ËØ≠Âè•ÂèØËÉΩÁî±‰∏çÂêåÔºàÂµåÂ•óÔºâÂæ™ÁéØ‰∏≠ÁöÑMLIRÊìç‰ΩúÁªÑÊàêÔºå‰æãÂ¶ÇÔºå‰ªéÂÜÖÂ≠òÂä†ËΩΩÂà∞SSAÂØÑÂ≠òÂô®ÁöÑÊìç‰ΩúÂèëÁîüÂú®Â§ñÈÉ®Âæ™ÁéØ‰∏≠ÔºåËÄåÂÆÉÂú®ÂÜÖÈÉ®Âæ™ÁéØ‰∏≠Ë¢´‰ΩøÁî®„ÄÇËØ•ËØ≠Âè•Âú®Âæ™ÁéØÂ±ÇÊ¨°ÁªìÊûÑ‰∏≠ÁöÑ‰ΩçÁΩÆÂπ∂‰∏çÊòéÁ°Æ„ÄÇÊõ¥ÈáçË¶ÅÁöÑÊòØÔºåÊó†Ê≥ïÂ∞ÜÂÖ∂‰º†ËææÁªôÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®„ÄÇPolygeistÈÄöËøáÂú®ÂÆö‰πâÂå∫Âüü‰∏≠Â∞ÜÂÄºÂ≠òÂÇ®Âú®Â†ÜÊ†àÂàÜÈÖçÁöÑÂÜÖÂ≠òÂºïÁî®‰∏≠ÔºåÂπ∂Âú®‰ΩøÁî®Âå∫Âüü‰∏≠Â∞ÜÂÖ∂Âä†ËΩΩÂõûÂéªÔºå‰ªéËÄåËß£ÂÜ≥‰∫ÜËøô‰∏ÄÈóÆÈ¢ò„ÄÇÂõæ6Â±ïÁ§∫‰∫ÜÂú®Êìç‰Ωú%10‰∏≠‰ΩøÁî®ÁöÑÂÄº%0ÁöÑËøôÁßçËΩ¨Êç¢„ÄÇ‰∏éÂü∫Êú¨ÊÉÖÂÜµÁ±ª‰ººÔºåËøôÂú®Â§ñÈÉ®Âæ™ÁéØ‰∏≠ÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑËØ≠Âè•ÔºåÂèØ‰ª•Áã¨Á´ãË∞ÉÂ∫¶„ÄÇËØ•ÊñπÊ≥ïÂèØ‰ª•ËßÜ‰∏∫reg2memËΩ¨Êç¢ÔºåËøôÊòØÂú®ÂâçÁ´ØÊâßË°åÁöÑmem2regÁöÑÂèçÂêëÊìç‰Ωú„ÄÇÂÆÉ‰ªÖÈÄÇÁî®‰∫é‰∏ÄÈÉ®ÂàÜÂÄºÔºåÂπ∂‰∏îÂú®Â§öÈù¢‰ΩìË∞ÉÂ∫¶ÂÆåÊàêÂêéÂèØ‰ª•Êí§ÈîÄ„ÄÇÊ≠§Â§ñÔºå‰∏∫‰∫ÜÂáèÂ∞ë‰æùËµñÂÖ≥Á≥ªÂíåÂÜÖÂ≠òÂç†Áî®ÔºåPolygeistÊâßË°åÁÆÄÂçïÁöÑÂÄºÂàÜÊûêÔºåÂπ∂Âú®Âêå‰∏ÄÂÄºÂú®Âè¶‰∏Ä‰∏™ÂÜÖÂ≠ò‰ΩçÁΩÆÂèØÁî®Âπ∂ËÉΩÂ§ü‰ªéÈÇ£ÈáåËØªÂèñÊó∂ÔºåÈÅøÂÖçÂàõÂª∫Â†ÜÊ†àÂàÜÈÖçÁöÑÁºìÂÜ≤Âå∫„ÄÇ c) SCoP ÂΩ¢ÊàêÔºö‰∏∫‰∫ÜÂÆö‰πâ‰∏Ä‰∏™ SCoPÔºåÊàë‰ª¨Â∞ÜÂçïÁã¨ÁöÑËØ≠Âè•ÂàíÂàÜ‰∏∫ÂáΩÊï∞ÔºåËøôÊ†∑ÂÆÉ‰ª¨Â∞±ÂèØ‰ª•Ë¢´Ë°®Á§∫‰∏∫ÂÖ∑ÊúâÂ∑≤Áü•ÂÜÖÂ≠òÂç†Áî®ÁöÑÈÄèÊòéË∞ÉÁî®ÔºåÁ±ª‰ºº‰∫é Pencil [22]„ÄÇËøô‰∏™ËøáÁ®ã‰πü‰ΩøÂæóËØ≠Âè•Èó¥ÁöÑ SSA ‰æùËµñÂÖ≥Á≥ªÂèòÂæóÊ∏ÖÊô∞„ÄÇËøô‰∫õ‰æùËµñÂÖ≥Á≥ªÂ≠òÂú®‰∫é‰ΩøÁî®Áõ∏Âêå SSA ÂÄºÁöÑË∞ÉÁî®‰πãÈó¥Ôºå‰ΩÜËøô‰∫õË∞ÉÁî®Ê≤°ÊúâÂÆö‰πâ‰ªª‰ΩïÂÄº„ÄÇÊàë‰ª¨ÊèêÂçáÊâÄÊúâÂ±ÄÈÉ®Ê†àÂàÜÈÖçÔºåÂπ∂Â∞ÜÂÆÉ‰ª¨ÊîæÁΩÆÂú®Âë®Âõ¥ÂáΩÊï∞ÁöÑÂÖ•Âè£Âùó‰∏≠Ôºå‰ª•‰øùÊåÅÂÆÉ‰ª¨Âú®Âæ™ÁéØÈáçÊûÑÂêé‰ªçÁÑ∂ÂèØËßÅ„ÄÇÂõæ 7 Â±ïÁ§∫‰∫ÜÂæóÂà∞ÁöÑ IR„ÄÇ Â§öÈù¢‰ΩìË°®Á§∫ÁöÑÂÖ∂‰ΩôÁªÑ‰ª∂Â¶Ç‰∏ãÊ¥æÁîüÔºöËØ≠Âè•ÁöÑÂüüË¢´ÂÆö‰πâ‰∏∫ÂÖ∂ÊâÄÂåÖÂê´Âæ™ÁéØÁöÑËø≠‰ª£Á©∫Èó¥ÔºåÁî±ÂêÑËá™ÁöÑ‰∏ãÁïåÂíå‰∏äÁïåÁ∫¶ÊùüÔºåÂπ∂‰∏é‰ªª‰Ωï‚Äúif‚ÄùÊù°‰ª∂Áõ∏‰∫§„ÄÇËøô‰∏™ËøáÁ®ãÂà©Áî®‰∫Ü MLIR Áõ¥Êé•Â∞ÜËæπÁïåÂíåÊù°‰ª∂Ë°®Á§∫‰∏∫‰ªøÂ∞ÑÊûÑÈÄ†ÁöÑÁâπÊÄß„ÄÇÊØè‰∏™ËØ≠Âè•ÁöÑËÆøÈóÆÂÖ≥Á≥ª‰Ωú‰∏∫ affine.loadÔºàËØªÂèñÔºâÂíå affine.storeÔºàÂøÖÈ°ªÂÜôÂÖ•ÔºâÊìç‰ΩúÁöÑ‰ªøÂ∞ÑÊò†Â∞ÑÁöÑÂπ∂ÈõÜËé∑ÂæóÔºåÂÖ≥Á≥ªÁöÑÂè≥‰æßË¢´Ê≥®Èáä‰∏∫‰∏éË¢´ËÆøÈóÆÁöÑ memref ÂØπÂ∫îÁöÑ‚ÄúÊï∞ÁªÑ‚ÄùÔºåËøôÂØπÂ∫î‰∫é SSA ÂÄº„ÄÇÂàùÂßãË∞ÉÂ∫¶ÊòØ‰ΩøÁî® (2d + 1) ÂΩ¢ÂºèÂàÜÈÖçÁöÑÔºåÂ•áÊï∞Áª¥Â∫¶Ë°®Á§∫ËæìÂÖ•Á®ãÂ∫è‰∏≠Âæ™ÁéØÁöÑËØçÊ≥ïÈ°∫Â∫èÔºåËÄåÂÅ∂Êï∞Áª¥Â∫¶Á≠â‰∫éÂæ™ÁéØÂºïÂØºÂèòÈáè„ÄÇOpenScop ‰∏≠ÁöÑ‰ªøÂ∞ÑÊûÑÈÄ†Ë°®Á§∫‰∏∫Á∫øÊÄßÁ≠âÂºè (= 0) Êàñ‰∏çÁ≠âÂºè (‚â• 0) Á≥ªÊï∞ÁöÑÂàóË°®ÔºåËøôÊ≠£Â•Ω‰∏é MLIR ‰∏≠ÁöÑÂÜÖÈÉ®Ë°®Á§∫Áõ∏ÂåπÈÖçÔºå‰ΩøËΩ¨Êç¢ÂèòÂæóÁÆÄÂçïÊòé‰∫Ü„ÄÇ d) ‰ª£Á†ÅÁîüÊàêÂõû MLIRÔºöPluto Ë∞ÉÂ∫¶Âô®Âõ†Ê≠§ÁîüÊàê‰∫Ü OpenScop ‰∏≠ÁöÑÊñ∞Ë∞ÉÂ∫¶„ÄÇ‰ªé‰ªøÂ∞ÑË∞ÉÂ∫¶ÁîüÊàêÂæ™ÁéØÁªìÊûÑÊòØ‰∏Ä‰∏™Â∑≤Ëß£ÂÜ≥‰ΩÜÁõ∏ÂΩìÂ§çÊùÇÁöÑÈóÆÈ¢ò [13]Ôºå[14]„ÄÇPolygeist ‰æùËµñ‰∫é CLooG [13] Êù•ÁîüÊàêÂàùÂßãÁöÑÂæ™ÁéØÁ∫ß ASTÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫‰ªøÂ∞ÑÊñπË®ÄÁöÑÂæ™ÁéØÂíåÊù°‰ª∂„ÄÇÂú®‰ª£Á†ÅÁîüÊàêÊó∂Êó†ÈúÄÁÆÄÂåñ‰ªøÂ∞ÑË°®ËææÂºèÔºåÂõ†‰∏∫ MLIR ÂèØ‰ª•Áõ¥Êé•Êé•ÂèóÂÆÉ‰ª¨ÔºåÂπ∂ËÉΩÂ§üÂú®ÂêéÁª≠Èò∂ÊÆµËøõË°åÁÆÄÂåñ„ÄÇËØ≠Âè•‰Ωú‰∏∫ÂÖ∑ÊúâÈáçÂÜôÊìç‰ΩúÊï∞ÁöÑÂáΩÊï∞Ë∞ÉÁî®ÂºïÂÖ•ÔºåÁÑ∂ÂêéËøõË°åÂÜÖËÅî„ÄÇ D. Controlling Statement Granularity D. ÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ ÂõûÊÉ≥‰∏Ä‰∏ãÔºåPolygeist ÊòØÈÄöËøáÂéüÂßãÊìç‰ΩúÁöÑÂ∫èÂàóÈáçÂª∫‚ÄúËØ≠Âè•‚ÄùÁöÑÔºàËßÅÁ¨¨‰∏âËäÇCÔºâ„ÄÇÊàë‰ª¨ÊúÄÂàùËÆæËÆ°‰∫Ü‰∏ÄÁßçÊÅ¢Â§ç‰∏é C ËæìÂÖ•‰∏≠Áõ∏‰ººÁöÑËØ≠Âè•ÁªìÊûÑÁöÑÊñπÊ≥ïÔºå‰ΩÜËøôÂπ∂‰∏çÊòØÂøÖÈúÄÁöÑ„ÄÇÂÆûÈôÖ‰∏äÔºåÂè™Ë¶ÅÂèØ‰ª•Â∞ÜËØ≠Âè•ÁªÑÁªáÊàêÂæ™ÁéØÂπ∂ËøõË°åÊãìÊâëÊéíÂ∫èÔºàÂç≥ËØ≠Âè•‰πãÈó¥Ê≤°Êúâ‰ΩøÁî®-ÂÆö‰πâÂæ™ÁéØÔºâÔºåËØ≠Âè•ÂèØ‰ª•Áî±‰ªª‰ΩïÂ≠êÈõÜÁöÑ MLIR Êìç‰ΩúÂΩ¢Êàê„ÄÇ‰∏∫‰∫ÜÂêë‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Êö¥Èú≤Ëøô‰∫õËØ≠Âè•‰πãÈó¥ÁöÑ‰æùËµñÂÖ≥Á≥ªÔºåÊàë‰ª¨ÈáçÁî®‰∫ÜÈÄöËøá‰∏¥Êó∂Â≠òÂÇ®Âô®ÁöÑÊÄùÊÉ≥ÔºöÊØè‰∏™ËØ≠Âè•Â∞ÜÂÖ∂‰ªñËØ≠Âè•ÊâÄÈúÄÁöÑÂÄºÂÜôÂÖ•‰∏ìÁî®ÂÜÖÂ≠ò‰ΩçÁΩÆÔºåÈöèÂêéËØ≠Âè•‰ªéËøô‰∫õ‰ΩçÁΩÆËØªÂèñ„ÄÇ‰∏¥Êó∂Â≠òÂÇ®Âô®ÂèóÂà∞ÈÉ®ÂàÜÊï∞ÁªÑÊâ©Â±ïÁöÑÈôêÂà∂[23]Ôºå‰ª•ÊúÄÂ∞èÂåñÂÆÉ‰ª¨ÂØπ‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®ÁöÑÂΩ±ÂìçÔºåÂõ†‰∏∫ÂçïÂÖÉÁ¥†ÁöÑ‰∏¥Êó∂Â≠òÂÇ®Âô®Êï∞ÁªÑ‰ºö‰∫ßÁîü‰∫∫‰∏∫ÁöÑÊ†áÈáè‰æùËµñÂÖ≥Á≥ª„ÄÇËøôÁßçËØ≠Âè•Á≤íÂ∫¶ÁöÑÂèòÂåñ‰∏∫‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Êèê‰æõ‰∫ÜÂâçÊâÄÊú™ÊúâÁöÑÁÅµÊ¥ªÊÄßÔºå‰ΩøÂÖ∂ËÉΩÂ§ü‰∏∫Âêå‰∏Ä C ËØ≠Âè•ÁöÑ‰∏çÂêåÈÉ®ÂàÜÈÄâÊã©‰∏çÂêåÁöÑË∞ÉÂ∫¶„ÄÇ‰ª•Âõæ8ÔºàÈ°∂ÈÉ®Ôºâ‰∏≠ÁöÑËØ≠Âè• S ‰∏∫‰æãÔºåËØ•ËØ≠Âè•Ë¢´‰∏â‰∏™ÈíàÂØπ i„ÄÅj Âíå k ÁöÑÂæ™ÁéØÂåÖÂõ¥„ÄÇËøôÁßçÊî∂Áº©Ê®°ÂºèÂú®ËÆ°ÁÆóÁ®ãÂ∫è‰∏≠ÂæàÂ∏∏ËßÅÔºàÊ≠§ÁâπÂÆöÁ§∫‰æãÂèØ‰ª•Âú®Áõ∏ÂÖ≥Âü∫ÂáÜ‰∏≠ÊâæÂà∞ÔºåB‚â°CÔºåËßÅÁ¨¨‰∫îËäÇEÔºâ„ÄÇÊúÄ‰Ω≥Âà©Áî®Â±ÄÈÉ®ÊÄßÁöÑÂæ™ÁéØÈ°∫Â∫èÊòØ (k, i, j)ÔºåËøôÂØπ‰ªé B ÁöÑËØªÂèñ‰∫ßÁîüÊó∂ÊïàÂ±ÄÈÉ®ÊÄßÔºàËØ•ÂÄºÂú®Áé∞Âú®ÊúÄÂÜÖÂ±ÇÁöÑ j Âæ™ÁéØÁöÑÊâÄÊúâËø≠‰ª£‰∏≠Ë¢´ÈáçÁî®ÔºâÂπ∂ÂØπ‰ªé C ÁöÑËØªÂèñ‰∫ßÁîüÁ©∫Èó¥Â±ÄÈÉ®ÊÄßÔºàËøûÁª≠ÁöÑÂÄºË¢´ËøûÁª≠ÁöÑËø≠‰ª£ËØªÂèñÔºå‰ªéËÄåÂ¢ûÂä†‰∫Ü L1 ÁºìÂ≠òÂëΩ‰∏≠ÁéáÁöÑÂèØËÉΩÊÄßÔºâ„ÄÇÁÑ∂ËÄåÔºåPluto ‰ªéÊú™ÊèêÂá∫ËøôÊ†∑ÁöÑÈ°∫Â∫èÔºåÂõ†‰∏∫Âú® k Áª¥Â∫¶‰∏äÁî±‰∫éÂØπ A[i][j] ÁöÑÈáçÂ§çËØª/ÂÜôËÆøÈóÆËÄåÂ≠òÂú®ÂáèÂ∞ë‰æùËµñÂÖ≥Á≥ªÔºåPluto Ë∂ãÂêë‰∫éÈÄâÊã©‰æùËµñÂÖ≥Á≥ªËæÉÂ∞ëÁöÑÂæ™ÁéØ‰Ωú‰∏∫ÊúÄÂ§ñÂ±Ç„ÄÇËôΩÁÑ∂ËøôÁßç‰æùËµñÂÖ≥Á≥ªÊú¨Ë∫´ÊòØ‰∏çÂèØÈÅøÂÖçÁöÑÔºå‰ΩÜÂÆÉÂèØ‰ª•ËΩ¨ÁßªÂà∞Âõæ8ÔºàÂ∫ïÈÉ®Â∑¶‰æßÔºâÁöÑÂçïÁã¨ËØ≠Âè• T ‰∏≠„ÄÇËøôÁßçÊñπÊ≥ï‰∏∫Ë∞ÉÂ∫¶Âô®Êèê‰æõ‰∫ÜÊõ¥Â§öÁöÑÈÄâÊã©Ëá™Áî±Â∫¶ÔºåÂÜÖÂ≠òÊàêÊú¨Áõ∏ÂØπËæÉ‰ΩéÔºåËÄå‰∏çÊòØÊâ©Â±ïÊï¥‰∏™ A Êï∞ÁªÑ„ÄÇÂÆÉËøòÂ∞ÜÂáèÂ∞ëÈóÆÈ¢òÂàÜËß£‰∏∫‰∏Ä‰∏™‚ÄúËßÑËåÉ‚ÄùËØ≠Âè•Ôºå‰ΩøÂæó‰∏ãÊ∏∏Â§ÑÁêÜÔºà‰æãÂ¶ÇÂêëÈáèÂåñÔºâÊõ¥ÂÆπÊòìËøõË°å„ÄÇ Âú® C Á∫ßÂà´ÂÆûÁé∞Ëøô‰∏ÄËΩ¨Êç¢Â∞ÜÈúÄË¶ÅÊìç‰Ωú C ÊäΩË±°ËØ≠Ê≥ïÊ†ëÔºàASTÔºâÂπ∂Êé®ÁêÜ CÔºàÁîöËá≥ C++ÔºâÁöÑËØ≠‰πâ„ÄÇËøôÈÄöÂ∏∏Ë∂ÖÂá∫‰∫ÜËØ∏Â¶Ç Pluto ËøôÊ†∑ÁöÑÊ∫êÂà∞Ê∫êÂ§öÈù¢‰Ωì‰ºòÂåñÂô®ÁöÑËÉΩÂäõÔºåÂõ†‰∏∫Ëøô‰∫õ‰ºòÂåñÂô®Â∞ÜËØ≠Âè•ËßÜ‰∏∫ÈªëÁÆ±„ÄÇËôΩÁÑ∂Âú® LLVM IR Á∫ßÂà´ÂÆûÁé∞Ëøô‰∏ÄËΩ¨Êç¢‰πüÊòØÂèØËÉΩÁöÑÔºå‰æãÂ¶ÇÂú® Polly ‰∏≠ÔºåÂú®ÈÇ£ÈáåËØ≠Âè•‰πüË¢´ÈáçÂª∫‰∏îÊöÇÊó∂ÂàÜÈÖçÁöÑÊ≥®ÂÖ•ËæÉ‰∏∫ÂÆπÊòìÔºå‰ΩÜÈ©±Âä®ËΩ¨Êç¢ÁöÑÂêØÂèëÂºèÊòØÂü∫‰∫éÂæ™ÁéØÁªìÊûÑÂíåÂ§öÁª¥ËÆøÈóÆÊ®°ÂºèÁöÑÔºåËÄåÂú®Â¶ÇÊ≠§‰ΩéÁöÑÁ∫ßÂà´ÊÅ¢Â§çËøô‰∫õ‰ø°ÊÅØÊòØÂõ∞ÈöæÁöÑ[9]„ÄÇ ÊΩúÂú®ÂàÜÂâ≤ÁöÑÁ©∫Èó¥ÊòØÂ∑®Â§ßÁöÑ‚Äî‚ÄîÊØè‰∏™ MLIR Êìç‰ΩúÈÉΩÊúâÂèØËÉΩÊàê‰∏∫‰∏Ä‰∏™ËØ≠Âè•„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ËÆæËÆ°‰∫Ü‰∏ÄÁßçÂêØÂèëÂºèÊñπÊ≥ïÊù•Â§ÑÁêÜÁ±ª‰ºº‰∫éÂõæ8ÁöÑÊî∂Áº©ÊÉÖÂÜµ„ÄÇÂáèÂ∞ëËØ≠Âè•ÂàÜÂâ≤ÈÄÇÁî®‰∫é‰ª•‰∏ãËØ≠Âè•Ôºö ‚Ä¢ Ëá≥Â∞ëË¢´ 3 ‰∏™Âæ™ÁéØÂåÖÂõ¥Ôºõ ‚Ä¢ Â∑¶‰æß = Âè≥‰æßÔºåÂπ∂‰∏î‰ΩøÁî®ÊâÄÊúâÂæ™ÁéØÔºåÈô§‰∫ÜÊúÄÂÜÖÂ±ÇÁöÑÔºõ ‚Ä¢ Âè≥‰æßÂÖ∑Êúâ‰∏§‰∏™ÊàñÊõ¥Â§ö‰∏çÂêåÁöÑËÆøÈóÆÊ®°Âºè„ÄÇËøôÊ∂µÁõñ‰∫ÜÈÇ£‰∫õÂèØËÉΩÈÄöËøá‰∏çÂêåÂæ™ÁéØÈ°∫Â∫èÊîπÂñÑÂ±ÄÈÉ®ÊÄßÁöÑËØ≠Âè•ÔºåÂπ∂‰∏îÈ£éÈô©ËæÉ‰ΩéÔºå‰∏ç‰ºö‰∫ßÁîü‰∏çÂ∏åÊúõÁöÑÂàÜË£Ç„ÄÇËøô‰∏™ÂêØÂèëÂºèÊñπÊ≥ï‰ªÖ‰Ωú‰∏∫ Polygeist ËÉΩÂ§üÂêØÁî®ÁöÑÊñ∞ËΩ¨Êç¢Á±ªÂûãÁöÑÁ§∫‰æã„ÄÇ E. Post-Transformations and Backend E. ÂêéÂèòÊç¢ÂèäÂêéÁ´Ø Polygeist ‰ΩøÂæóÂú® quasi-syntactic Âíå SSA Â±ÇÈù¢‰∏äÊìç‰ΩúÊàê‰∏∫ÂèØËÉΩÔºå‰ªéËÄåÂÆûÁé∞‰∫ÜÂú®‰ªª‰Ωï‰∏Ä‰∏™Â±ÇÈù¢‰∏äÂçïÁã¨ËøõË°åÂàÜÊûêÂíå‰ºòÂåñÊó∂ÊûÅÂÖ∂Âõ∞ÈöæÔºàÁîöËá≥‰∏çÂèØËÉΩÔºâÁöÑ‰ªªÂä°„ÄÇÈô§‰∫ÜËØ≠Âè•ÊãÜÂàÜÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏§ÁßçÂ±ïÁ§∫ Polygeist ÊΩúÂäõÁöÑÊäÄÊúØ„ÄÇ a) ËΩ¨Êç¢Â∏¶ÊúâÂª∂Áª≠ÂÄºÁöÑÂæ™ÁéØÔºàÂΩíÁ∫¶ÔºâÔºöPolygeist Âà©Áî® MLIR ÂØπÂæ™ÁéØÊê∫Â∏¶ÂÄºÁöÑ‰∏ÄÁ∫ßÊîØÊåÅÔºåÊù•Ê£ÄÊµã„ÄÅË°®ËææÂíåËΩ¨Êç¢Á±ª‰ººÂΩíÁ∫¶ÁöÑÂæ™ÁéØ„ÄÇËøôÁßçÊîØÊåÅ‰∏çÈúÄË¶ÅÊ∫ê‰ª£Á†ÅÊ≥®ÈáäÔºåËÄå‰∏é‰ΩøÁî®Ê≥®Èáä‰ª•ÂêØÁî®Ê£ÄÊµãÁöÑÊ∫êÁ∫ßÂ∑•ÂÖ∑ [24] ‰∏çÂêåÔºå‰πü‰∏çÈúÄË¶ÅÂ§çÊùÇÁöÑ‰øÆÊîπÊù•ËøõË°åÂπ∂Ë°å‰ª£Á†ÅÁöÑÁîüÊàêÔºå‰∏é Polly [25] ‰∏çÂêåÔºåÂêéËÄÖÂèóÂà∞ LLVM Áº∫Â§±‰∏ÄÁ∫ßÂπ∂Ë°åÊûÑÈÄ†ÁöÑÈôêÂà∂„ÄÇÊàë‰ª¨‰πüÊú™ÂØπÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ËøõË°å‰øÆÊîπÔºåËÄåÊòØ‰æùËµñÂêéÂ§ÑÁêÜÊù•ËøõË°åÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºåÂåÖÊã¨ÊúÄÂ§ñÂ±ÇÁöÑÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØ„ÄÇ ÊÄª‰ΩìÊñπÊ≥ïÈÅµÂæ™‰∫Ü [26] ‰∏≠ÊèêÂá∫ÁöÑÂÆö‰πâÔºåÈíàÂØπ MLIR ÁöÑÂü∫‰∫éÂå∫ÂüüÁöÑ‰∏≠Èó¥Ë°®Á§∫ËøõË°å‰∫ÜË∞ÉÊï¥ÔºåÂ¶ÇÂõæ 9 ÊâÄÁ§∫„ÄÇPolygeist ÈÄöËøáÊâ´ÊèèÂæ™ÁéØÁöÑÂçïÂùó‰∏ª‰ΩìÔºåËØÜÂà´ÊØèÊ¨°Ëø≠‰ª£‰∏≠Ë¢´‰øÆÊîπÁöÑÂÜÖÂ≠ò‰ΩçÁΩÆÔºåÂç≥ÂÖ∑ÊúâÂæ™ÁéØ‰∏çÂèò‰∏ãÊ†á‰∏îÊ≤°Êúâ‰∫§ÈîôÂà´ÂêçÂ≠òÂÇ®ÁöÑÂä†ËΩΩ/Â≠òÂÇ®ÂØπ„ÄÇËøô‰∫õË¢´ËΩ¨Êç¢‰∏∫Âæ™ÁéØÊê∫Â∏¶ÂÄºÊàñ‰∫åÊ¨°ÂΩíÁ∫≥ÂèòÈáèÔºåÂä†ËΩΩ/Â≠òÂÇ®ÂØπË¢´ÊèêÂçáÂà∞Âæ™ÁéØÂ§ñÂπ∂ÈáçÊñ∞Áî®‰∫éËØªÂèñÂàùÂßãÂÄºÂíåÂ≠òÂÇ®ÊúÄÁªàÂÄº„ÄÇÂú®Âæ™ÁéØ‰∏ª‰Ωì‰∏≠ÔºåÂæ™ÁéØÊê∫Â∏¶ÂÄºÂèØ‰ª•ÈÄöËøá‰∏ÄÁ≥ªÂàóÊó†ÂâØ‰ΩúÁî®Êìç‰ΩúËøõË°åÊõ¥Êñ∞„ÄÇÂ¶ÇÊûúËøô‰∏™ÈìæË¢´ËÆ§‰∏∫ÊòØÁªìÂêàÁöÑÂíå‰∫§Êç¢ÁöÑÔºåÈÇ£‰πàËØ•Âæ™ÁéØÂç≥‰∏∫ÂΩíÁ∫¶„ÄÇÂç≥‰ΩøÂú®Ê≤°ÊúâÂêàÈÄÇÁöÑÂΩíÁ∫¶Êìç‰ΩúÁöÑÊÉÖÂÜµ‰∏ãÔºåÂæ™ÁéØÊê∫Â∏¶ÂÄº‰πüËÉΩË¢´Ê£ÄÊµãÂà∞„ÄÇÂÖ∑ÊúâÊ≠§Á±ªÂÄºÁöÑÂæ™ÁéØÂ∞ÜÂØπ mem2reg ‰∫ßÁîüË¥°ÁåÆÔºåÈôç‰ΩéÂÜÖÂ≠òÂç†Áî®Ôºå‰ΩÜ‰∏çÈÄÇÂêàËøõË°åÂπ∂Ë°åÂåñ„ÄÇ b) Âª∂ËøüÂπ∂Ë°åÂåñÔºöPolygeist Âπ∂‰∏ç‰æùËµñ‰∫éÈÄöËøá‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Ëé∑ÂèñÁöÑ‰æùËµñË∑ùÁ¶ª‰ø°ÊÅØÔºåËÄåÊòØÂØπÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂçïÁã¨ÁöÑÂ§öÈù¢‰ΩìÂàÜÊûê‰ª•Ê£ÄÊµãÂæ™ÁéØÂπ∂Ë°åÊÄß„ÄÇËØ•ÂàÜÊûêÊú¨Ë∫´ÊòØ‰∏ÄÁßçÁªèÂÖ∏ÁöÑÂ§öÈù¢‰Ωì‰æùËµñÂàÜÊûê [27]„ÄÅ[28]ÔºåÂú® MLIR Âå∫ÂüüÁªìÊûÑ‰πã‰∏äÂÆûÁé∞„ÄÇÂú®ËøõË°å SSA Âü∫‰∫é‰ºòÂåñ‰πãÂêéÊâßË°åËøô‰∏ÄÊ≠•ÔºåÁâπÂà´ÊòØ mem2reg ÂíåÂΩíÁ∫¶Ê£ÄÊµãÔºåËÉΩÂ§üÂπ∂Ë°åÂåñÊõ¥Â§öÁöÑÂæ™ÁéØ„ÄÇÁâπÂà´ÊòØÔºåÂΩíÁ∫¶Âæ™ÁéØÂíåÈÇ£‰∫õÂèòÈáèÂÄº‰ªÖÂú®ÂçïÊ¨°Ëø≠‰ª£ÂÜÖÁõ∏ÂÖ≥ÁöÑÂæ™ÁéØÔºàÁ±ª‰ºº‰∫éÊ¥ªË∑ÉËåÉÂõ¥ÈáçÊéíÂ∫è [29]Ôºå‰ΩÜÊ≤°ÊúâÊòÇË¥µÁöÑÈ¢ùÂ§ñÂ§öÈù¢‰ΩìÂàÜÊûêÔºâÈÉΩÂæóÂà∞Â§ÑÁêÜÔºàÂú®Âæ™ÁéØ‰∏≠ÂÆö‰πâÁöÑ SSA ÂÄºÁöÑÊ¥ªË∑ÉËåÉÂõ¥‰ªé‰∏çË∂ÖÂá∫Âæ™ÁéØÔºâ„ÄÇ IV. EVALUATION Êàë‰ª¨ÁöÑËØÑ‰º∞Êúâ‰∏§‰∏™ÁõÆÊ†á„ÄÇ1ÔºâÊàë‰ª¨Â∏åÊúõËØÅÊòéÔºåPolygeist ÁîüÊàêÁöÑ‰ª£Á†ÅÂú®Ê≤°ÊúâÈ¢ùÂ§ñ‰ºòÂåñÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÖ∂ÊÄßËÉΩ‰∏éÂÉè Clang ËøôÊ†∑ÁöÑÁé∞‰ª£ÁºñËØëÂô®Ê≤°Êúâ‰ªª‰Ωï‰∏çÂèØËß£ÈáäÁöÑÂ∑ÆÂºÇ„ÄÇ2ÔºâÊàë‰ª¨Êé¢ËÆ® Polygeist ÁöÑÂÜÖÈÉ®Ë°®Á§∫Â¶Ç‰ΩïÂú®Âêå‰∏ÄÁºñËØëÊµÅÁ®ã‰∏≠ÊîØÊåÅÁªìÂêà‰ΩøÁî®‰ªøÂ∞ÑÂèòÊç¢ÂíåÂü∫‰∫é SSA ÁöÑÂèòÊç¢ÔºåÂπ∂ËØÑ‰º∞‰∏éÁé∞ÊúâÁöÑÊ∫ê‰ª£Á†ÅÂíåÁºñËØëÂô®Âü∫Á°Ä‰∏äÁöÑÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Áõ∏ÊØîÁöÑÊΩúÂú®‰ºòÂäø„ÄÇ A. Experimental Setup Êàë‰ª¨Âú®‰∏ÄÂè∞ AWS c5.metal ÂÆû‰æã‰∏äËøõË°åÂÆûÈ™åÔºåËØ•ÂÆû‰æãÁ¶ÅÁî®‰∫ÜË∂ÖÁ∫øÁ®ãÂíå Turbo Boost„ÄÇÁ≥ªÁªü‰∏∫ Ubuntu 20.04ÔºåËøêË°å‰∫éÂèåÊèíÊßΩ Intel Xeon Platinum 8275CL CPUÔºå‰∏ªÈ¢ë‰∏∫ 3.0 GHzÔºåÊØè‰∏™ÊèíÊßΩÊúâ 24 ‰∏™Ê†∏ÂøÉÔºåL1„ÄÅL2 Âíå L3 ÁºìÂ≠òÂàÜÂà´‰∏∫ 0.75 MB„ÄÅ35 MB Âíå 35.75 MBÔºåÂπ∂ÈÖçÂ§á 256 GB RAM„ÄÇÊàë‰ª¨‰ΩøÁî®‚ÄúEXTRALARGE‚ÄùÊï∞ÊçÆÈõÜËøêË°å Poly-Bench [19] ‰∏≠ÁöÑÊâÄÊúâ 30 ‰∏™Âü∫ÂáÜÊµãËØï„ÄÇPluto Êó†Ê≥ï‰ªé adi Âü∫ÂáÜÊµãËØï‰∏≠ÊèêÂèñ SCoP„ÄÇÊàë‰ª¨ÂØπÊØè‰∏™Âü∫ÂáÜÊµãËØïËøõË°å‰∫ÜÊÄªÂÖ± 5 Ê¨°ËØïÈ™åÔºåÈááÁî® PolyBench Êä•ÂëäÁöÑÊâßË°åÊó∂Èó¥ÔºõÈô§ÈùûÂè¶ÊúâËØ¥ÊòéÔºåÁªìÊûú‰ª•‰∏≠‰ΩçÊï∞ÁöÑÂΩ¢ÂºèÁªôÂá∫„ÄÇ‰ª•‰∏ãÂêÑËäÇ‰∏≠Êä•ÂëäÁöÑÊØè‰∏™ÊµãÈáèÊàñÁªìÊûúÂùá‰∏éÂèåÁ≤æÂ∫¶Êï∞ÊçÆÁõ∏ÂÖ≥„ÄÇÊâÄÊúâÂÆûÈ™åÂùáÂú®Ê†∏ÂøÉ 1-8 ‰∏äËøêË°åÔºå‰ª•Á°Æ‰øùÊâÄÊúâÁ∫øÁ®ã‰Ωç‰∫éÂêå‰∏ÄÊèíÊßΩÔºåÂπ∂‰∏î‰∏ç‰ºö‰∏éË∞ÉÂ∫¶Âú®Ê†∏ÂøÉ 0 ‰∏äÁöÑËøõÁ®ãÂèëÁîüÊΩúÂú®ÂÜ≤Á™Å„ÄÇ Âú®ÊâÄÊúâÊÉÖÂÜµ‰∏ãÔºåÊàë‰ª¨ÈááÁî®‰∏§Èò∂ÊÆµÁºñËØëÔºö(i) ‰ΩøÁî® clang ‰ª• -O3 Á∫ßÂà´ÁºñËØëÔºå‰∏çÂåÖÊã¨Â±ïÂºÄÂíåÂêëÈáèÂåñÔºõÊàñ‰ΩøÁî® Polygeist ‰ªé C ÂèëÂá∫ LLVM IRÔºõ(ii) ‰ΩøÁî® clang ‰ª• -O3 Á∫ßÂà´ÂèëÂá∫ÊúÄÁªà‰∫åËøõÂà∂Êñá‰ª∂„ÄÇÁî±‰∫éÊüê‰∫õ‰ºòÂåñÂπ∂ÈùûÂπÇÁ≠âÁöÑÔºåÂõ†Ê≠§Á¨¨‰∫åËΩÆ‰ºòÂåñÂèØËÉΩ‰ºöÊòæËëóÊèêÂçáÔºàËÄåÂæàÂ∞ëÊÉÖÂÜµ‰ºöÊäëÂà∂ÔºâÊÄßËÉΩ„ÄÇËøôÂ∞±ÊòØÊàë‰ª¨ÈÄâÊã©‰ªÖÂú®ÊúÄÂêé‰ºòÂåñÈò∂ÊÆµËøõË°åÂêëÈáèÂåñÂíåÂ±ïÂºÄÁöÑÂéüÂõ†„ÄÇÁî±‰∫é Polygeist Âú® MLIR Á∫ßÂà´Â∫îÁî®‰∫Ü‰∏Ä‰∫õ‰ºòÂåñÔºà‰æãÂ¶ÇÔºåmem2regÔºâÔºåÊàë‰ª¨Â∞ÜÂÖ∂‰∏é‰∏§Èò∂ÊÆµÁºñËØëÊµÅÁ®ãÔºàCLANGÔºâËøõË°åÊØîËæÉÔºå‰Ωú‰∏∫Êõ¥ÂÖ¨Âπ≥ÁöÑÂü∫Á∫ø„ÄÇÊàë‰ª¨ËøòËØÑ‰º∞‰∫ÜÂçïÈò∂ÊÆµÁºñËØëÔºå‰ª•ËØÑ‰º∞‰∏§Èò∂ÊÆµÊµÅÁ®ãÁöÑÊïàÊûúÔºàCLANGSINGÔºâ„ÄÇ B. Baseline Performance B. Âü∫Á∫øÊÄßËÉΩ PolygeistÂøÖÈ°ªÁîüÊàêÂ∞ΩÂèØËÉΩÊé•ËøëÁé∞ÊúâÁºñËØëÊµÅÁ®ãÁöÑËøêË°åÊó∂‰ª£Á†ÅÔºå‰ª•Âª∫Á´ã‰∏Ä‰∏™Á®≥Âõ∫ÁöÑÂü∫Á∫ø„ÄÇÊç¢Âè•ËØùËØ¥ÔºåPolygeist‰∏çÂ∫îËØ•ÂºïÂÖ•ÂºÄÈîÄÊàñÂä†ÈÄüÔºåÈô§ÈùûÊòéÁ°ÆÊåáÁ§∫Ôºå‰ª•‰æøËÉΩÂ§üÊµãÈáèÈ¢ùÂ§ñ‰ºòÂåñÁöÑÊïàÊûú„ÄÇÊàë‰ª¨ÈÄöËøáÊØîËæÉPolygeistÁîüÊàêÁöÑÁ®ãÂ∫è‰∏éÂêå‰∏ÄÊèê‰∫§ÁâàÊú¨Ôºà2021Âπ¥4ÊúàÔºâ‰∏ãClangÁîüÊàêÁöÑÁ®ãÂ∫èÁöÑËøêË°åÊó∂Êù•ËØÑ‰º∞Ëøô‰∏ÄÁÇπ„ÄÇÂõæ10ÊÄªÁªì‰∫Ü‰ª•‰∏ãÂá†ÁßçÊµÅÁ®ãÁöÑÁªìÊûúÔºö ‚Ä¢ CLANGÔºö‰ΩøÁî®ClangÁºñËØëÁ®ãÂ∫èÔºåËøêË°å‰∏§Èò∂ÊÆµ‰ºòÂåñÁöÑËøáÁ®ãÔºõ ‚Ä¢ CLANGSINGÔºö‰ΩøÁî®ClangÁºñËØëÁ®ãÂ∫èÔºåËøêË°å‰∏ÄÈò∂ÊÆµ‰ºòÂåñÁöÑËøáÁ®ãÔºõ ‚Ä¢ MLIR-CLANGÔºö‰ΩøÁî®PolygeistÂâçÁ´ØÁöÑÁºñËØëÊµÅÁ®ãÔºåÂú®MLIRÂÜÖËøõË°åÈ¢ÑÂ§ÑÁêÜ‰ºòÂåñÔºå‰ΩÜ‰∏çÊâßË°åÂ§öÈù¢‰ΩìË∞ÉÂ∫¶ÊàñÂêéÂ§ÑÁêÜ„ÄÇ C. Compilation Flows Êàë‰ª¨Â∞ÜPolygeist‰∏éÊ∫ê‰ª£Á†ÅÁ∫ßÂíå‰∏≠Èó¥Ë°®Á§∫Á∫ß‰ºòÂåñÂô®ÔºàPlutoÂíåPollyÔºâËøõË°åÊØîËæÉÔºåÈÖçÁΩÆÂ¶Ç‰∏ãÔºö PLUTOÔºö‰ΩøÁî®-polycc 3Âèä-noparallelÂíå-tileÊ†áÂøóÁöÑPlutoÁºñËØëÂô®Ëá™Âä®ËΩ¨Êç¢Ôºõ PLUTOPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜ‰ΩøÁî®-parallelÊ†áÂøóÔºõ POLLYÔºöPolly [7]ÁöÑLLVMÈÄöÈÅìÔºåÂÖ∑Êúâ‰ªøÂ∞ÑË∞ÉÂ∫¶ÂíåÂàáÁâáÔºåÊ≤°ÊúâÂü∫‰∫éÊ®°ÂºèÁöÑ‰ºòÂåñ [30]Ôºõ POLLYPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜËøõË°å‰∫ÜËá™Âä®Âπ∂Ë°åÂåñÔºõ POLYGEISTÔºöÊàë‰ª¨ÁöÑÂ∑•‰ΩúÊµÅÔºåÁªìÂêà‰∫ÜPlutoÂíåÈ¢ùÂ§ñÁöÑÂèòÊç¢Ôºõ POLYGEISTPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜ‰ΩøÁî®-parallelÁöÑPlutoË∞ÉÂ∫¶ÔºåPolygeistÂπ∂Ë°åÂåñÂíåÂΩíÁ∫¶„ÄÇ Âú®Ê∫ê‰ª£Á†ÅÂíåLLVM IRÁ∫ßÂà´‰πãÈó¥ËøêË°åÊó∂ÔºåÊàë‰ª¨ÊúüÊúõPolygeistËÉΩÂ§ü‰ªéËøô‰∏§ËÄÖÁöÑ‰ºòÁÇπ‰∏≠ÂèóÁõäÔºå‰ªéËÄåÁîüÊàêÁöÑ‰ª£Á†ÅËÉΩÂ§ü‰∏éÁ´û‰∫âÂØπÊâãÁõ∏Â™≤ÁæéÊàñÊõ¥‰ºò„ÄÇÂú®‰ΩøÁî®PlutoÊó∂ÔºåÊó†ËÆ∫ÊòØÁã¨Á´ãÂú∞ËøòÊòØÂú®Polygeist‰∏≠ÔºåÊàë‰ª¨ÈÉΩ‰ºöÁ¶ÅÁî®ÂêëÈáèÂåñÊèêÁ§∫ÂíåÂæ™ÁéØÂ±ïÂºÄÁöÑÂèëÂá∫Ôºå‰ª•Á°Æ‰øùËøô‰∏§ÁßçÂèòÊç¢ÈÉΩÂÆåÂÖ®Áî±LLVM‰ºòÂåñÂô®ÊéßÂà∂ÔºåËØ•‰ºòÂåñÂô®‰πüÂú®PollyÊµÅÁ®ã‰∏≠ËøêË°å„ÄÇÊàë‰ª¨Âú®ClangÁºñËØëÁöÑÊúÄÊñ∞Èò∂ÊÆµËøêË°åPollyÔºå‰ΩøÁî®-mllvm -pollyÂèäÂÖ∂‰ªñÊ†áÂøó‰ª•ÂêØÁî®‰ªøÂ∞ÑË∞ÉÂ∫¶„ÄÅÂàáÁâáÂíåÂπ∂Ë°åÂåñ„ÄÇPolly‰∏éClang‰ΩøÁî®Áõ∏ÂêåÁöÑLLVMÊèê‰∫§ÁâàÊú¨„ÄÇÊàë‰ª¨Á¶ÅÁî®Âú®ÂÖ∂‰ªñÂú∞Êñπ‰∏çÂèØÁî®ÁöÑÂü∫‰∫éÊ®°ÂºèÁöÑ‰ºòÂåñ [30]„ÄÇÂõæ11ÂíåÂõæ12ÂàÜÂà´ÊÄªÁªì‰∫ÜÈ°∫Â∫èÂíåÂπ∂Ë°åÊµÅÁ®ãÁöÑÁªìÊûú„ÄÇ A. Benchmarking Èôç‰ΩéÂæ™ÁéØÁöÑËΩ¨Êç¢ÔºåÁâπÂà´ÊòØÂπ∂Ë°åÂåñÔºåÂèØËÉΩ‰ºöÂØºËá¥ÈÉ®ÂàÜÁªìÊûúÁ¥ØÁßØÁöÑÈ°∫Â∫èÂèëÁîüÂèòÂåñ„ÄÇËøôÂú® IEEE 754 ËØ≠‰πâ‰∏ãÊòØ‰∏çÂÖÅËÆ∏ÁöÑÔºå‰ΩÜ‰ΩøÁî® -ffast-math ÈÄâÈ°πÁöÑÁºñËØëÂô®ÊîØÊåÅËøôÁßçÊÉÖÂÜµ„ÄÇÊàë‰ª¨ÂèëÁé∞ÔºåPolybench ÁöÑÂàÜÈÖçÂáΩÊï∞‰ºöÂ¶®Á¢ç Clang/LLVM ÁöÑÂà´ÂêçÂàÜÊûêÔºå‰ªéËÄåÂØπÊÄßËÉΩ‰∫ßÁîüË¥üÈù¢ÂΩ±Âìç 2 LLVM Êèê‰∫§ 20d5c42e0ef5d252b434bcb610b04f1cb79fe771 3 Pluto Êèê‰∫§ dae26e77b94b2624a540c08ec7128f20cd7b7985Ôºå‰∏æ‰æãÊù•ËØ¥ÔºåÂú® adi ‰∏≠„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨‰øÆÊîπ‰∫ÜÊâÄÊúâÂü∫ÂáÜÊµãËØïÔºå‰ΩøÁî®Â∑≤Áü•‰ºö‰∫ßÁîüÈùûÂà´ÂêçÊåáÈíàÁöÑ malloc„ÄÇ B. Baseline Comparison Êàë‰ª¨Ê≤°ÊúâËßÇÂØüÂà∞CLANGÂíåCLANGSINGÈÖçÁΩÆ‰πãÈó¥ÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÊòæËëóÂ∑ÆÂºÇÔºåÂú®Âü∫ÂáÜÊµãËØï‰∏≠ÔºåÂÆÉ‰ª¨ÁöÑÂá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.43%„ÄÇÂõ†Ê≠§ÔºåÂú®Êú¨ÊñáÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜ‰∏≠ÔºåÊàë‰ª¨‰ªÖËÄÉËôëCLANG‰Ωú‰∏∫Âü∫Á∫ø„ÄÇÂêåÊ†∑ÔºåÊàë‰ª¨‰πüÊ≤°ÊúâËßÇÂØüÂà∞CLANGÂíåMLIR-CLANGÈÖçÁΩÆ‰πãÈó¥ÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÊòæËëóÂ∑ÆÂºÇÔºåÂÖ∂Âá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.24%„ÄÇ Êàë‰ª¨ÂèëÁé∞Áü≠ËøêË°åÂü∫ÂáÜÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÂèòÂä®ÔºåÁâπÂà´ÊòØÂú®jacobi-1d‰∏ä„ÄÇËøôÂèØ‰ª•ÂΩíÂõ†‰∫éÊï∞ÊçÆÂàùÂßãÂåñÂíåÂü∫ÂáÜÊµãËØï‰ª£Á†Å‰πãÈó¥ÁöÑÁõ∏‰∫í‰ΩúÁî®Ôºå‰ª•ÂèäÂÖ∂‰ªñÊìç‰ΩúÁ≥ªÁªüËøõÁ®ãÁöÑÂΩ±Âìç„ÄÇ‰ªéÂàÜÊûê‰∏≠ÊéíÈô§ËøêË°åÊó∂Èó¥Â∞ë‰∫é0.05ÁßíÁöÑÂü∫ÂáÜÔºàÂ¶Çjacobi-1d„ÄÅgesummv„ÄÅatax„ÄÅbicgÔºâÔºåÊàë‰ª¨ÂàÜÂà´Ëé∑Âæó‰∏äËø∞‰∏§‰∏™ÊØîËæÉÁöÑÂá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.32%Âíå0.17%„ÄÇËøô‰∫õÁªìÊûúË°®ÊòéÔºåÊàë‰ª¨ÁöÑÊµÅÁ®ãÂú®Âü∫Á∫ø‰πã‰∏äÊ≤°ÊúâÊú™Ëß£ÈáäÁöÑÔºà‰∏çÔºâ‰ºòÂäø„ÄÇ C. Performance Differences in Sequential Code Êï¥‰ΩìËÄåË®ÄÔºåPolygeist Áõ∏ËæÉ‰∫é PlutoÔºà2.34√óÔºâÂíå PollyÔºà1.41√óÔºâÊèê‰æõ‰∫ÜÊõ¥Â§ßÁöÑÂä†ÈÄüÔºåÂá†‰ΩïÂπ≥ÂùáÂÄº‰∏∫ 2.53√óÔºåÂ∞ΩÁÆ°ÊîπËøõÂπ∂‰∏çÊòØÁ≥ªÁªüÊÄßÁöÑ„ÄÇPolygeist Âíå Polly ‰πãÈó¥ÁöÑ‰∏Ä‰∫õÂ∑ÆÂºÇÊòØÁî±‰∫éÊâÄÈááÁî®ÁöÑÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®Ôºå‰æãÂ¶ÇÂú® lu Âíå mvt ‰∏≠„ÄÇÂæóÁõä‰∫éËØ≠Âè•ÂàÜÂâ≤ÔºåPolygeist Âú® 2mm„ÄÅ3mm ÂèäÂÖ∂‰ªñÊüê‰∫õÊÉÖÂÜµ‰∏ãÁîüÊàêÁöÑ‰ª£Á†ÅÈÄüÂ∫¶Ë∂ÖËøá‰∫Ü Pluto Âíå PollyÔºåËØ¶ËßÅÁ¨¨ V-E ËäÇ„ÄÇ Âú®ÁªôÂÆöÁõ∏ÂêåËØ≠Âè•ÂíåË∞ÉÂ∫¶ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰ª£Á†ÅÁîüÊàêÂ±ÇÈù¢ÁöÑ‰ºòÂåñÊòØÈÄ†ÊàêÂÖ∂‰ªñÊÄßËÉΩÂ∑ÆÂºÇÁöÑÂéüÂõ†„ÄÇseidel-2d ÊòØÊúÄÊòéÊòæÁöÑ‰æãÂ≠êÔºöPluto ÊâßË°åÁöÑÊï¥Êï∞Êåá‰ª§ÊØî Polygeist Â§öÂá∫ 2.7‚Ä¢10^11 Ê¨°„ÄÇÂÅáËÆæËøô‰∫õÊåá‰ª§ÈÉΩÊòØÁ¥¢Âºï/Âú∞ÂùÄËÆ°ÁÆóÔºåÊ∑∑Âêà‰∫Ü addÔºàÂêûÂêêÈáè‰∏∫ 1/2 Êàñ 1/4ÔºâÂíå imul/shlÔºàÂêûÂêêÈáè‰∏∫ 1ÔºâÔºåÊàë‰ª¨ÂèØ‰ª•È¢ÑËÆ°Âú® 3GHz ‰∏ã‰ºöÊúâ ‚âà 59 ÁßíÁöÑÂ∑ÆÂºÇÔºåËøô‰∏éÂÆûÈ™åËßÇÂØüÁªìÊûú‰∏ÄËá¥„ÄÇPolygeist Âú®ÂÖ∂Âêé‰ºòÂåñÈò∂ÊÆµ‰ºòÂåñÊéâ‰∫Ü‰∏ÄÈÉ®ÂàÜÊåá‰ª§ÔºåÂπ∂‰ªé memref ÂèëÂá∫ÈÄÇÂΩìÊú∫Âô®Â§ßÂ∞èÁ±ªÂûãÁöÑÂùáÂåÄÂú∞ÂùÄËÆ°ÁÆóÔºå‰Ωø‰∏ãÊ∏∏ÁºñËØëÂô®ËÉΩÂ§üËøõË°åÊõ¥ÊøÄËøõÁöÑÁïåÈôêÂàÜÊûêÂíåÁÆÄÂåñ„ÄÇÁõ∏ÂèçÔºåÁî±‰∫é Polygeist ‰∏∫‰∫ÜÁºñËØëÂô®ÊÄßËÉΩÂéüÂõ†ÊîæÂºÉ‰∫ÜÂØπ CLooG ‰ª£Á†ÅÁöÑÁÆÄÂåñÔºåjacobi-2d ÁöÑÊÄßËÉΩËæÉÂ∑ÆÔºåÂú® 40 ‰∏™ÂàÜÊîØ‰∏≠ÊúâÂ§öËææ 75 ‰∏™ËØ≠Âè•ÂâØÊú¨ÔºåËÄå Clang Â§ÑÁêÜËøô‰∫õ‰ª£Á†ÅÈúÄËÄóÊó∂Â§öËææ 5 ÁßíÔºå‰ΩÜÂÖ∂ÁªìÊûúÂç¥ÂÆûÁé∞‰∫ÜÊõ¥Â•ΩÁöÑÂêëÈáèÂåñ„ÄÇÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÁöÑÂ∑•‰ΩúÊù•Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÈÄöËøáÁõ¥Êé•‰ªé Polygeist ÂèëÂá∫ÂêëÈáèÊåá‰ª§„ÄÇ D. Performance Differences In Parallel Code ÂêåÊ†∑ÔºåÂØπ‰∫éÂπ∂Ë°å‰ª£Á†ÅÔºåÊüê‰∫õÊÄßËÉΩÂ∑ÆÂºÇÊòØÁî±‰∫é‰∏çÂêåÁöÑË∞ÉÂ∫¶Âô®„ÄÇ‰æãÂ¶ÇÔºåÂú® cholesky Âíå lu ‰∏≠ÔºåPluto Âíå Polygeist ÁöÑÊÄßËÉΩÈÉΩ‰ºò‰∫é PollyÔºåÂâ©‰ΩôÁöÑÂ∑ÆË∑ùÂèØ‰ª•ÂΩíÂõ†‰∫é‰ª£Á†ÅÁîüÊàêÁ∫ßÂà´ÁöÑÂ∑ÆÂºÇ„ÄÇÁõ∏ÂèçÔºåÂú® gemver Âíå mvt ‰∏≠ÔºåPolly Áõ∏ËæÉ‰∫é‰∏§ËÄÖÁöÜÊúâ‰ºòÂäø„ÄÇ Âõæ 10 ÊòæÁ§∫‰∫ÜÂú® CLANG„ÄÅCLANGSING Âíå MLIR-CLANG ÈÖçÁΩÆ‰∏ãÔºåPolybench ÁöÑ‰∫îÊ¨°ËøêË°å‰∏≠Á®ãÂ∫èËøêË°åÊó∂Èó¥ÁöÑÂùáÂÄºÂíå 95% ÁΩÆ‰ø°Âå∫Èó¥ÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂ä‰ΩéË∂äÂ•Ω„ÄÇÁî± Polygeist ‰∫ßÁîüÁöÑÊú™‰ºòÂåñ‰ª£Á†ÅÁöÑËøêË°åÊó∂Èó¥‰∏é Clang ÁöÑËøêË°åÊó∂Èó¥Áõ∏ÂΩì„ÄÇ‰∏çÂêåÁ®ãÂ∫¶ÁöÑÂçïÈáçÂíåÂèåÈáç‰ºòÂåñ‰πãÈó¥Ê≤°ÊúâËßÇÂØüÂà∞ÊòæËëóÂ∑ÆÂºÇ„ÄÇËøêË°åÊó∂Èó¥ËæÉÁü≠ÁöÑ jacobi-1d ÊòæÁ§∫Âá∫È´òÁöÑÁªÑÂÜÖÂèòÂºÇÊÄß„ÄÇ Âõæ 11 ÊòæÁ§∫‰∫ÜÂú®È°∫Â∫èÈÖçÁΩÆ‰∏ãÁõ∏ÂØπ‰∫é CLANG ÁöÑ‰∏≠‰ΩçÊï∞Âä†ÈÄüÊØîÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂äÈ´òË∂äÂ•Ω„ÄÇPolygeist Âú®Âπ≥ÂùáÊÉÖÂÜµ‰∏ãÁöÑÂä†ÈÄüÊØîÔºàÂá†‰ΩïÂùáÂÄºÂä†ÈÄüÊØî‰∏∫ 2.53√óÔºâ‰ºò‰∫é PlutoÔºà2.34√óÔºâÂíå PollyÔºà1.41√óÔºâ„ÄÇPluto Êó†Ê≥ïÂ§ÑÁêÜ adiÔºåÂõ†Ê≠§ËØ•Ê°à‰æãË¢´ÊéíÈô§Âú®ÊÄªÁªìÁªüËÆ°‰πãÂ§ñ„ÄÇ Âõæ 12 ÊòæÁ§∫‰∫ÜÂú®Âπ∂Ë°åÈÖçÁΩÆ‰∏ãÁõ∏ÂØπ‰∫é CLANG ÁöÑ‰∏≠‰ΩçÊï∞Âä†ÈÄüÊØîÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂äÈ´òË∂äÂ•Ω„ÄÇPolygeist Âú®Âπ≥ÂùáÊÉÖÂÜµ‰∏ãÁöÑÂä†ÈÄüÊØîÔºàÂá†‰ΩïÂùáÂÄºÂä†ÈÄüÊØî‰∏∫ 9.47√óÔºâ‰ºò‰∫é PlutoÔºà7.54√óÔºâÂíå PollyÔºà3.26√óÔºâ„ÄÇPluto Êó†Ê≥ïÂ§ÑÁêÜ adiÔºåÂõ†Ê≠§ËØ•Ê°à‰æã‰πüË¢´ÊéíÈô§Âú®ÊÄªÁªìÁªüËÆ°‰πãÂ§ñ„ÄÇ Âú® ludcmp Âíå syr(2)k ‰∏≠ÔºåSSA Á∫ßÂà´ÁöÑ‰ºòÂåñ‰ΩøÂæó Polygeist ÁîüÊàêÁöÑ‰ª£Á†ÅÊØî Pluto Êõ¥Âø´ÔºåÂπ∂‰∏îËá≥Â∞ë‰∏é Polly ÂêåÊ†∑Âø´„ÄÇËøô‰∫õÁªìÊûúË°®ÊòéÔºåPolygeist Á°ÆÂÆûÂà©Áî®‰∫Ü‰ªøÂ∞Ñ‰ºòÂåñÂíå SSA Âü∫Á°Ä‰ºòÂåñÁöÑ‰ºòÁÇπ„ÄÇ Polygeist ÊòØÂîØ‰∏ÄÂú® dericheÔºàÂä†ÈÄüÊØî 6.9√óÔºâÂíå symmÔºàÂä†ÈÄüÊØî 7.7√óÔºâ‰∏äÂÆûÁé∞Âä†ÈÄüÁöÑÁºñËØëÊµÅÁ®ã„ÄÇÈÄöËøáÊ£ÄÊü•ËæìÂá∫‰ª£Á†ÅÔºåÊàë‰ª¨ËßÇÂØüÂà∞Âè™Êúâ Polygeist ÊàêÂäüÂú∞ÂØπËøô‰∏§‰∏™Âü∫ÂáÜËøõË°å‰∫ÜÂπ∂Ë°åÂåñ„ÄÇËÄÉËôëÂà∞Âõæ 13 ‰∏≠ÁöÑËæìÂÖ•‰ª£Á†ÅÔºåÂèØ‰ª•ËßÇÂØüÂà∞ i Âæ™ÁéØÈáçÁî®‰∫Ü ym1 ÂèòÈáèÔºåËøôË¢´‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Ëß£Èáä‰∏∫Â¶®Á¢çÂπ∂Ë°åÂåñÁöÑÂæ™ÁéØÊê∫Â∏¶‰æùËµñ„ÄÇPolygeist Âú®Â∞Ü ym1 ÊèêÂçá‰∏∫‰∏Ä‰∏™Áî± j Âæ™ÁéØÊê∫Â∏¶ÁöÑ SSA ÂØÑÂ≠òÂô®ÂêéÔºåËøõË°åËá™Â∑±ÁöÑÂπ∂Ë°åÊÄßÂàÜÊûêÔºåÂÖ∂‰ΩøÁî®ÂÆö‰πâËåÉÂõ¥‰∏çÂ¶®Á¢çÂπ∂Ë°åÂåñ„ÄÇ Á±ª‰ººÂú∞ÔºåPolygeist ÁöÑÂπ∂Ë°åÂåñÂô®ËØÜÂà´Âá∫‰∏§‰∏™ÂÖ∑ÊúâÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØÁöÑÂü∫ÂáÜÔºåËøô‰∫õÂæ™ÁéØ‰∏çÂåÖÂê´Âú®ÂÖ∂‰ªñÂπ∂Ë°åÂæ™ÁéØ‰∏≠Ôºögramschmidt Âíå durbin„ÄÇÁõ∏ÊØî‰∫é Polly ÁöÑ 34√ó Âíå Pluto ÁöÑ 54√óÔºågramschmidt Âú® Polygeist ÁöÑÂ∏ÆÂä©‰∏ãËé∑Âæó‰∫Ü 56√ó ÁöÑÂä†ÈÄü„ÄÇdurbin ÂàôÂá∫Áé∞‰∫Ü 6√ó ÁöÑÂáèÈÄüÔºåÂõ†‰∏∫Êñ∞ÁöÑÂπ∂Ë°åÂæ™ÁéØËø≠‰ª£Ê¨°Êï∞Áõ∏ÂØπËæÉÂ∞ëÔºåÂπ∂‰∏îÂµåÂ•óÂú®‰∏Ä‰∏™È°∫Â∫èÂæ™ÁéØÂÜÖÔºåÂØºËá¥ÂêåÊ≠•ÊàêÊú¨Ë∂ÖËøá‰∫ÜÂπ∂Ë°åÂåñÂ∏¶Êù•ÁöÑÂ•ΩÂ§Ñ„ÄÇÁ¨¨ V-F ËäÇÂ∞ÜÊõ¥ËØ¶ÁªÜÂú∞Êé¢ËÆ® durbin Âü∫ÂáÜ„ÄÇ Polybench ÊòØ‰∏ÄÁªÑÔºàÂ§ßÂ§öÊï∞Â∑≤Áü•ÔºâÂÖ∑ÊúâÂπ∂Ë°åÁâπÊÄßÁöÑ‰ª£Á†ÅÔºåÂõ†Ê≠§Âú® CPU ‰∏äËøõË°åÂΩíÁ∫¶Âπ∂Ë°åÂåñÁöÑÈúÄÊ±Ç‰∏çÂ§ßÔºåÂõ†‰∏∫Âè™Êúâ‰∏ÄÂ∫¶ÁöÑÂπ∂Ë°åÊÄßÂ∞±Â∑≤Ë∂≥Â§ü„ÄÇÁÑ∂ËÄåÔºåÂΩìÈíàÂØπÂõ∫ÊúâÁöÑÁõÆÊ†áÊû∂ÊûÑÂ¶Ç GPU Êó∂ÔºåÂà©Áî®ÂΩíÁ∫¶Âπ∂Ë°åÊÄßÂèØËÉΩÂØπ‰∫éÂÆûÁé∞Â≥∞ÂÄºÊÄßËÉΩËá≥ÂÖ≥ÈáçË¶Å [31], [24]„ÄÇ E. Case Study: Statement Splitting E. Ê°à‰æãÁ†îÁ©∂ÔºöËØ≠Âè•ÊãÜÂàÜ Êàë‰ª¨Á°ÆÂÆö‰∫Ü 5 ‰∏™Âü∫ÂáÜÊµãËØïÔºåÂÖ∂‰∏≠Â∫îÁî®‰∫ÜËØ≠Âè•ÊãÜÂàÜÂêØÂèëÂºèÊñπÊ≥ïÔºö2mm„ÄÅ3mm„ÄÅÁõ∏ÂÖ≥ÊÄß„ÄÅÂçèÊñπÂ∑ÆÂíå trmm„ÄÇ‰∏∫‰∫ÜËØÑ‰º∞ÂèòÊç¢ÁöÑÊïàÊûúÔºåÊàë‰ª¨ÊâßË°å‰∫ÜËøô‰∫õÂü∫ÂáÜÊµãËØïÔºåÂπ∂Á¶ÅÁî®‰∫ÜËØ≠Âè•ÊãÜÂàÜÔºåÁî® -nosplit ÂêéÁºÄÊ†áËÆ∞ÔºåÂ¶ÇÂõæ 14 ÊâÄÁ§∫„ÄÇÂú®È°∫Â∫èÁâàÊú¨‰∏≠Ôºå2mm ÁöÑÈÄüÂ∫¶ÊÖ¢‰∫Ü 4.1%Ôºà3.13 ÁßíÂØπÊØî 3.26 ÁßíÔºâÔºå‰ΩÜÂÖ∂‰ªñÂü∫ÂáÜÊµãËØïÂàÜÂà´ÁúãÂà∞‰∫Ü 25%„ÄÅ50%„ÄÅ51% Âíå 27% ÁöÑÂä†ÈÄü„ÄÇÂØπ‰∫éÂπ∂Ë°åÁâàÊú¨ÔºåÈÄüÂ∫¶ÊèêÂçáÂàÜÂà´‰∏∫ 36%„ÄÅ20%„ÄÅ44%„ÄÅ40% Âíå -9%„ÄÇ ÂØπÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ËæìÂá∫ÁöÑÊ£ÄÊü•Ë°®ÊòéÔºåÂÆÉÁ°ÆÂÆûÁîüÊàê‰∫ÜÈ¢ÑÊúüÁöÑË∞ÉÂ∫¶„ÄÇ‰æãÂ¶ÇÔºåÂú®Áõ∏ÂÖ≥ÊÄßÂü∫ÂáÜ‰∏≠ÔºåËØ≠Âè• A[i][j] += B[k][i] * B[k][j] Polygeist ËÉΩÂ§üÂú®ÊãÜÂàÜÂêéÊâæÂà∞ (k, i, j) ÁöÑÂæ™ÁéØÈ°∫Â∫è„ÄÇÈÄöËøáÂú®È°∫Â∫è‰ª£Á†Å‰∏ä‰ΩøÁî®Á°¨‰ª∂ÊÄßËÉΩËÆ°Êï∞Âô®ÔºåÊàë‰ª¨Á°ÆËÆ§Êï¥‰ΩìÁºìÂ≠òÁº∫Â§±ÁéáÁ°ÆÂÆûÂàÜÂà´Èôç‰Ωé‰∫Ü 75%„ÄÅ50%„ÄÅ20%„ÄÅ27% Âíå -26%„ÄÇÁÑ∂ËÄåÔºåÁî±ÊÄªÂå£Âë®Êúü‰º∞ÁÆóÁöÑÂÜÖÂ≠òÊµÅÈáèÂú® 2mm ‰∏≠Â¢ûÂä†‰∫Ü 9%ÔºåËÄåÂÖ∂‰ªñÂü∫ÂáÜÊµãËØïÂàôÂàÜÂà´ÂáèÂ∞ë‰∫Ü 18%„ÄÅ32%„ÄÅ32% Âíå 21%„ÄÇËØ•ÊåáÊ†á‰∏éÂêå‰∏ÄËøêË°å‰∏≠ËßÇÂØüÂà∞ÁöÑÊÄßËÉΩÂ∑ÆÂºÇÂº∫Áõ∏ÂÖ≥Ôºàr = 0.99Ôºåp = 3 ‚Ä¢ 10 -11Ôºâ„ÄÇËøôÁßçË°å‰∏∫ÂèØËÉΩÊòØÁî±‰∫éË∞ÉÂ∫¶Âô®‰∫ßÁîü‰∫Ü‰∏çÂêåÁöÑËûçÂêàÁªìÊûÑÔºå‰æãÂ¶ÇÔºåÂú® 2mm ‰∏≠Ê≤°ÊúâËûçÂêàÊúÄÂ§ñÂ±ÇÁöÑÂæ™ÁéØÔºåËøô‰πüÂΩ±Âìç‰∫ÜÂ±ÄÈÉ®ÊÄß„ÄÇÂπ∂Ë°å‰ª£Á†Å‰∏≠‰πüÂèØ‰ª•ËßÇÂØüÂà∞Á±ª‰ººÁöÑÁªìÊûú„ÄÇËøõ‰∏ÄÊ≠•ÁöÑÁ†îÁ©∂ÊúâÂøÖË¶ÅÂà©Áî® Polygeist ÂàõÈÄ†ÁöÑËØ≠Âè•ÊãÜÂàÜÊú∫‰ºöÔºåÂπ∂‰∏éËûçÂêàËøõË°åÁõ∏‰∫í‰ΩúÁî®„ÄÇ F. Case Study: Reduction Parallelization in durbin F. Ê°à‰æãÁ†îÁ©∂ÔºöDurbin‰∏≠ÁöÑÂΩíÁ∫¶Âπ∂Ë°åÂåñ Âú®Ëøô‰∏™Âü∫ÂáÜÊµãËØï‰∏≠ÔºåPolygeistÂà©Áî®ÂÖ∂ÂΩíÁ∫¶‰ºòÂåñÂàõÂª∫‰∫Ü‰∏Ä‰∏™ÂÖ∂‰ªñÂ∑•ÂÖ∑Êó†Ê≥ïÂÆûÁé∞ÁöÑÂπ∂Ë°åÂæ™ÁéØ„ÄÇÂØπ‰∫éÈªòËÆ§ËøêË°åÁöÑÁõ∏ÂØπËæÉÂ∞èÁöÑËæìÂÖ•ÔºåN = 4000ÁöÑËø≠‰ª£ÂµåÂ•óÂú®Âè¶‰∏Ä‰∏™ÂÖ∑ÊúâNÊ¨°Ëø≠‰ª£ÁöÑÈ°∫Â∫èÂæ™ÁéØ‰∏≠ÔºåÊï¥‰ΩìÊÄßËÉΩÂá∫Áé∞‰∏ãÈôç„ÄÇÊàë‰ª¨ÂÅáËÆæÂàõÂª∫Âπ∂Ë°åÁ∫øÁ®ãÂíåÂêåÊ≠•ÂÆÉ‰ª¨ÁöÑÊàêÊú¨Ë∂ÖËøá‰∫ÜÈ¢ùÂ§ñÂπ∂Ë°åÊÄßÂ∏¶Êù•ÁöÑÊî∂ÁõäÔºåÂπ∂ÈÄöËøáÂ¢ûÂä†NÊù•È™åËØÅÊàë‰ª¨ÁöÑÂÅáËÆæ„ÄÇÊ†πÊçÆÂõæ15‰∏≠ÁöÑÁªìÊûúÔºåÂèØ‰ª•ËßÇÂØüÂà∞ÔºåPolygeistÂú®N ‚â• 16000Êó∂ÂºÄÂßã‰∫ßÁîüÂä†ÈÄüÊïàÊûúÔºà> 1ÔºâÔºåËÄåPolly‰ªÖÂú®N ‚â• 224000Êó∂Êâç‰ºöÂ¶ÇÊ≠§ÔºåÂπ∂‰∏îÂπÖÂ∫¶Ë¶ÅÂ∞èÂæóÂ§öÔºö6.62√óÂØπÊØî1.01√ó„ÄÇÂú®Ê≤°ÊúâÂΩíÁ∫¶Âπ∂Ë°åÂåñÁöÑÊÉÖÂÜµ‰∏ãÔºåPolygeistÁöÑË°®Áé∞‰∏éPollyÁõ∏Âêå„ÄÇPlutoÊú™ËÉΩÂØπ‰ªª‰ΩïÊúÄÂÜÖÂ±ÇÂæ™ÁéØËøõË°åÂπ∂Ë°åÂåñÔºåÂπ∂‰∏îÊòæÁ§∫Ê≤°ÊúâÂä†ÈÄü„ÄÇËøôÊîØÊåÅ‰∫ÜÊàë‰ª¨ÁöÑÂÅáËÆæÔºåÂπ∂Âº∫Ë∞É‰∫ÜËÉΩÂ§üÂπ∂Ë°åÂåñÂΩíÁ∫¶ÁöÑÈáçË¶ÅÊÄß„ÄÇ VI. RELATED WORK VI. Áõ∏ÂÖ≥Â∑•‰Ωú a) MLIRÂâçÁ´ØÔºöËá™‰ªéMLIRË¢´Á∫≥ÂÖ•LLVMÊ°ÜÊû∂ÂêéÔºåÂ∑≤ÁªèÂàõÂª∫‰∫ÜÂ§ö‰∏™ÂâçÁ´ØÁî®‰∫é‰ªéÁâπÂÆöÈ¢ÜÂüüËØ≠Ë®ÄÁîüÊàêMLIR„ÄÇTeckyl [2] Â∞ÜÈù¢ÂêëÁîü‰∫ßÂäõÁöÑÂº†ÈáèÁêÜËß£ [1] Á¨¶Âè∑ËøûÊé•Âà∞MLIRÁöÑLinalgÊñπË®Ä„ÄÇFlangÔºåLLVMÁöÑFortranÂâçÁ´ØÔºå‰ΩøÁî®FIRÊñπË®ÄÂª∫Ê®°FortranÁâπÂÆöÁöÑÊûÑÈÄ† [32]„ÄÇCOMETÔºå‰∏Ä‰∏™ÈíàÂØπÂåñÂ≠¶È¢ÜÂüüÁöÑÁâπÂÆöÈ¢ÜÂüüÁºñËØëÂô®ÔºåÂºïÂÖ•‰∫Ü‰∏Ä‰∏™‰ªéÂü∫‰∫éÂº†ÈáèÁöÑËØ≠Ë®ÄÂà∞MLIRÁöÑÁâπÂÆöÈ¢ÜÂüüÂâçÁ´Ø [33]„ÄÇNPCompÊó®Âú®Êèê‰æõÂøÖË¶ÅÁöÑÂü∫Á°ÄËÆæÊñΩ‰ª•‰æøÁºñËØëÊï∞ÂÄºPythonÂíåPyTorchÁ®ãÂ∫èÔºå‰ªéËÄåÂà©Áî®MLIRÂü∫Á°ÄËÆæÊñΩ [34]„ÄÇPET-to-MLIRÈÄöËøáËß£ÊûêpetÁöÑÂÜÖÈÉ®Ë°®Á§∫ÔºåÂ∞Ü‰∏ÄÈÉ®ÂàÜÂ§öÈù¢‰ΩìC‰ª£Á†ÅËΩ¨Êç¢‰∏∫MLIRÁöÑAffineÊñπË®Ä„ÄÇÈô§‰∫ÜÂΩìÂâç‰∏çÂ§ÑÁêÜÁâπÂÆöÊûÑÈÄ†ÔºàÂ¶ÇifËØ≠Âè•„ÄÅÁ¨¶Âè∑ËæπÁïåÂíåÂ§ñÈÉ®ÂáΩÊï∞Ë∞ÉÁî®ÔºâÂ§ñÔºåËß£ÊûêpetÁöÑË°®Á§∫ÈôêÂà∂‰∫ÜÂâçÁ´ØÁöÑÂèØÁî®ÊÄßÔºåÂõ†‰∏∫ÂÆÉÊó†Ê≥ï‰∏éÈùûÂ§öÈù¢‰Ωì‰ª£Á†ÅÔºàÂ¶ÇÂàùÂßãÂåñ„ÄÅÈ™åËØÅÊàñÊâìÂç∞‰æãÁ®ãÔºâÊé•Âè£ [35]„ÄÇÁõ∏ÂØπËÄåË®ÄÔºåPolygeistËÉΩÂ§ü‰ªéÈùûÂ§öÈù¢‰Ωì‰ª£Á†ÅÁîüÊàêMLIRÔºàÂ∞ΩÁÆ°‰∏ç‰∏ÄÂÆöÂú®AffineÊñπË®Ä‰∏≠Ôºâ„ÄÇCIRCTÊòØ‰∏Ä‰∏™Êñ∞ÁöÑÈ°πÁõÆÔºåÊó®Âú®Â∞ÜMLIRÂºÄÂèëÊñπÊ≥ïÂ∫îÁî®‰∫éÁîµÂ≠êËÆæËÆ°Ëá™Âä®ÂåñË°å‰∏öÔºåÈö∂Â±û‰∫éLLVMÊ°ÜÊû∂ [17]„ÄÇStripe‰ΩøÁî®MLIRÁöÑAffineÊñπË®Ä‰Ωú‰∏∫Êú∫Âô®Â≠¶‰π†Ê®°Âûã‰∏≠ÁöÑÂæ™ÁéØÂèòÊç¢ÁöÑÂü∫Á°ÄÔºåÂåÖÊã¨ÊãÜÂàÜÂíåÂêëÈáèÂåñÔºåÂπ∂Êé•ÂèóËá™ÂÆö‰πâDSL‰Ωú‰∏∫ËæìÂÖ• [36]„ÄÇ b) Compilers Leveraging Multiple Representations: b) Âà©Áî®Â§öÁßçË°®Á§∫ÁöÑÁºñËØëÂô®ÔºöSUIFÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩÂºÄÂàõ‰∫Ü‰∏ÄÁßçÁªÑÂêàÂÜÖÈÉ®Ë°®Á§∫ÔºåÊîØÊåÅÊõ¥È´òÁ∫ßÁöÑËΩ¨Êç¢ÔºåÂåÖÊã¨Âæ™ÁéØ‰ºòÂåñÂíåÂπ∂Ë°åÂåñ [37]ÔºåÂ∞§ÂÖ∂ÊòØÂΩíÁ∫¶Âπ∂Ë°åÂåñ [38]„ÄÇPolygeistÂà©Áî®SUIF‰∏≠‰∏çÂèØÁî®ÁöÑMLIRÊäΩË±°ÔºöÂ∏∏ËßÑÂíå‰ªøÂ∞ÑÂæ™ÁéØÔºåOpenMPÂΩíÁ∫¶ÊûÑÈÄ†Á≠â„ÄÇÂÆÉËøòÂèóÁõä‰∫é‰ªÖ‰Ωú‰∏∫Â§ñÈÉ®Êâ©Â±ïÂ≠òÂú®‰∫éSUIF‰∏≠ÁöÑSSA+Âå∫ÂüüÂΩ¢Âºè [39]ÔºåÂèØ‰ª•Áî®‰∫é‰∏≠Èó¥Ë°®Á§∫ÁöÑÁÆÄÂåñ„ÄÇPIPSÂú®ÈíàÂØπOpenMPÊó∂ÊîØÊåÅÂæ™ÁéØËΩ¨Êç¢ÂíåËøáÁ®ãÈó¥‰ºòÂåñ [40]Ôºå[41]„ÄÇPolygeist‰∏éËøô‰∏§ËÄÖÁöÑ‰∏çÂêå‰πãÂ§ÑÂú®‰∫éÂÆÉÂèëÂá∫Êú∫Âô®‰ª£Á†ÅËÄå‰∏çÊòØÊ∫ê‰ª£Á†ÅÔºå‰ªéËÄåËÉΩÂ§üÂèëÂá∫Âπ∂Ë°åËøêË°åÊó∂ÂíåÂÖ∂‰ªñÂú®Ê∫êËØ≠Ë®ÄÔºàÂ¶ÇCÔºâ‰∏≠Ê≤°ÊúâË°®Á§∫ÁöÑÊåá‰ª§„ÄÇ c) ÁªìÂêà‚ÄúÁªèÂÖ∏‚ÄùÂíåÂ§öÈù¢‰ΩìÊµÅÁ®ãÔºöÂ∞ëÊï∞ËÆ∫ÊñáÂÖ≥Ê≥®‰∫éÂ∞Ü‚ÄúÁªèÂÖ∏‚ÄùÁöÑ„ÄÅÂ§ßÂ§öÊï∞ÊòØASTÁ∫ßÂà´ÁöÑËΩ¨Âåñ‰∏éÂ§öÈù¢‰ΩìËΩ¨ÂåñÁªìÂêàËµ∑Êù•„ÄÇPolyASTÈÄöËøáÁªìÂêà‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®‰∏éASTÁ∫ßÂà´ÁöÑÂêØÂèëÂºèÊñπÊ≥ïËøõË°åËûçÂêàÂíåÂàáÁâá [42]ÔºåÂºÄÂàõ‰∫ÜËøôÁßçÊñπÊ≥ïÔºåÂ∞ΩÁÆ°‰ªÖ‰ΩøÁî®Â§öÈù¢‰ΩìËΩ¨Âåñ‰πüÂ±ïÁ§∫‰∫ÜÁ±ª‰ººÁöÑÁªìÊûú [43]„ÄÇCUDA-CHiLL [44] ‰πüÂÆûÈ™å‰∫Ü‰∏ÄÁßçÁ±ª‰ººÁöÑÊñπÊ≥ï„ÄÇÂèØ‰ª•ËØ¥ÔºåËÆ∏Â§öËá™Âä®ÂåñÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ãÂ∞ÜÂæ™ÁéØËûçÂêàÂíå/ÊàñÂàáÁâá‰Ωú‰∏∫‰∏Ä‰∏™Áã¨Á´ãÊ≠•È™§Êù•ÊâßË°åÔºåËøôÂèØ‰ª•Ë¢´ËÆ§‰∏∫ÊòØ‰∏ÄÁßçÁªèÂÖ∏ËΩ¨Âåñ„ÄÇPluto [11] ‰ΩøÁî®Âá†‰∏™‚ÄúËØ≠Ê≥ï‚ÄùÂêéÂ§ÑÁêÜËøáÁ®ãÊù•Âà©Áî®Ê®°Êùø‰∏≠ÁöÑÁ©∫Èó¥Â±ÄÈÉ®ÊÄßÂíåÂπ∂Ë°åÊÄß [45]„ÄÇÂ∑≤ÊèêÂá∫Â§ö‰∏™Â∑•ÂÖ∑Ôºå‰ª•ÁªèÂÖ∏Âæ™ÁéØËΩ¨ÂåñÂ¶ÇËûçÂêàÂíåÊéíÂàó‰Ωú‰∏∫Êìç‰ΩúÔºåÈ©±Âä®Â§öÈù¢‰ΩìÂæ™ÁéØËΩ¨ÂåñÔºåÂåÖÊã¨URUK [46]„ÄÅCHiLL [47] ÂíåClay [48]„ÄÇPolygeist‰∏éËøô‰∫õÂ∑•ÂÖ∑ÁöÑ‰∏çÂêå‰πãÂ§ÑÂú®‰∫éÂÆÉÂú®ÂÖ∂IR‰∏≠‰øùÁïô‰∫ÜÊ≠§Á±ªËΩ¨ÂåñÁöÑÁªìÊûúÔºåÂπ∂‰∏î‰∏éÂ§öÈù¢‰ΩìÊûÑÈÄ†‰∏ÄËµ∑ÔºåÂÖÅËÆ∏‰∏çÂêåÊäΩË±°Â±ÇÊ¨°‰πãÈó¥ÁöÑ‰∫§‰∫í„ÄÇ d) È¢ùÂ§ñÁöÑÔºàÂêéÔºâÂ§öÈù¢‰ΩìËΩ¨ÂåñÔºöPolly [25] ÊèêÂá∫‰∫ÜÂ§ÑÁêÜÂΩíÁ∫¶Âæ™ÁéØÁöÑÊîØÊåÅÔºå‰ΩÜÂπ∂Êú™ÂÆûÁé∞‰ª£Á†ÅÁîüÊàê„ÄÇÂú®ËØ≠Ê≥ïÂ±ÇÈù¢ÔºåÈÄöËøáÊâãÂä®Ê≥®Èáä‰ΩøÁî®PENCILÊåá‰ª§ÂêëPETÊ∑ªÂä†‰∫ÜÂΩíÁ∫¶ÊîØÊåÅ [24]„ÄÇÊçÆÊä•ÈÅìÔºåR-Stream‰ΩøÁî®‰∫Ü‰∏ÄÁßçÂèò‰ΩìÁöÑËØ≠Âè•ÊãÜÂàÜ‰ª•ÂΩ±ÂìçË∞ÉÂ∫¶Âô®ÁöÑË°å‰∏∫Âπ∂‰ºòÂåñÂÜÖÂ≠òÊ∂àËÄó [49]„ÄÇPOLYSIMDÂú®PPCGÂ§öÈù¢‰ΩìÊµÅÁ®ãÂë®Âõ¥‰ΩøÁî®ÂèòÈáèÈáçÂëΩÂêç‰ª•ÊîπÂñÑÂêëÈáèÂåñ [50]„ÄÇPolygeistÂà©Áî®SSAÂíåÂ§öÈù¢‰Ωì‰ø°ÊÅØËá™Âä®ÂåñËøô‰∫õÊìç‰Ωú„ÄÇ e) Integration of Polyhedral Optimizers into Compilers: e) ËÅöÂêà‰ºòÂåñÂô®‰∏éÁºñËØëÂô®ÁöÑÈõÜÊàê: ËÅöÂêà‰ºòÂåñ‰º†ÈÄíÂú®Áîü‰∫ßÔºàGCC [8]ÔºåLLVM [7]ÔºåIBM XL [51]ÔºâÂíåÁ†îÁ©∂ÔºàR-Stream [49]ÔºåROSE [52]ÔºâÁºñËØëÂô®‰∏≠ÂèØÁî®„ÄÇÂú®Â§ßÂ§öÊï∞ÊÉÖÂÜµ‰∏ãÔºåÂøÖÈ°ª‰ªé‰ΩéÁ∫ßË°®Á§∫‰∏≠ÊèêÂèñËÅöÂêàÊäΩË±°ÔºåÁÑ∂ÂêéÂú®‰∏ìÈó®ÁöÑ‰ª£Á†ÅÁîüÊàêÊ≠•È™§‰∏≠ËøõË°åËΩ¨Êç¢ÂíåÈôçÁ∫ß [13]Ôºå[14]„ÄÇËøô‰∏™ÊèêÂèñËøáÁ®ãÂπ∂‰∏çÊòØ‰øùËØÅÊàêÂäüÁöÑÔºåÂèØËÉΩÊó†Ê≥ïÊÅ¢Â§çÊ∫êÁ∫ßÂà´‰∏äÂèØÁî®ÁöÑÈ´òÁ∫ß‰ø°ÊÅØ [9]„ÄÇÊ≠§Â§ñÔºåÂ∏∏ËßÅÁöÑÁºñËØëÂô®‰ºòÂåñÔºå‰æãÂ¶ÇLICMÔºåÂ∑≤Áü•‰ºöÂØπÊ≠§‰∫ßÁîüÂπ≤Êâ∞ [10]„ÄÇPolygeist ÈÄöËøáËÆæËÆ°Áª¥Êä§Ë∂≥Â§üÁöÑÈ´òÁ∫ß‰ø°ÊÅØÔºåÂ∞§ÂÖ∂ÊòØÂæ™ÁéØÂíåÂ§öÁª¥Êï∞ÁªÑÁªìÊûÑÔºå‰ª•ËßÑÈÅøËøô‰∫õÈóÆÈ¢ò„ÄÇ Ê∫êÂà∞Ê∫êÁöÑËÅöÂêàÁºñËØëÂô®ÔºåÂ¶ÇPluto [11] ÂíåPPCG [5]ÔºåÂú®CÊàñC++Á∫ßÂà´‰∏äËøêË°å„ÄÇÂÆÉ‰ª¨Áº∫‰πè‰∏éÂÖ∂‰ªñÁºñËØëÂô®‰ºòÂåñÁöÑ‰∫§‰∫íÔºå‰ª•ÂèäÂØπ‰ª£Á†ÅÁöÑÂÖ®Â±ÄËßÜËßíÔºåËøôÈòªÁ¢ç‰∫Ü‰æãÂ¶ÇÂ∏∏Èáè‰º†Êí≠ÂíåÂÜÖËÅîÁ≠âÂèØËÉΩÊîπÂñÑËÅöÂêà‰ºòÂåñÁªìÊûúÁöÑËøáÁ®ã„ÄÇPolygeist‰Ωç‰∫éASTÂíåLLVM IRÁ∫ßÂà´‰πãÈó¥Ôºå‰ΩøÂæóÊõ¥È´òÁ∫ßÂà´Âíå‰ΩéÁ∫ßÂà´ÊäΩË±°‰πãÈó¥ÁöÑ‰∫§‰∫íÊàê‰∏∫ÂèØËÉΩÔºåËÄåËøôÁßç‰∫§‰∫íÂú®ÂÖ∂‰ªñÊÉÖÂÜµ‰∏ã‰ªÖÈôê‰∫éÁºñËØëÂô®ÊåáÁ§∫ÔºåÂç≥‰ªÖ‰ªÖÊòØ‰ºòÂåñÊèêÁ§∫„ÄÇÊ≠§Â§ñÔºåPolygeistÂèØ‰ª•‰æùÈù†MLIRÁöÑÈÄêÊ≠•ÊèêÂçá [53]Ôºå‰ª•ÊØîËÅöÂêàÊ°ÜÊû∂ [54] Êõ¥Â∞ëÁöÑÂä™ÂäõÔºåÈíàÂØπÊõ¥È´ò‰∫éC‰ª£Á†ÅÁöÑÊäΩË±°„ÄÇ VII. DISCUSSION VII. ËÆ®ËÆ∫ A. ÈôêÂà∂a) ÂâçÁ´ØÔºöÂ∞ΩÁÆ°PolygeistÊäÄÊúØ‰∏äÂèØ‰ª•Êé•Âèó‰ªª‰ΩïÊúâÊïàÁöÑCÊàñC++‰ª£Á†ÅÔºåÂõ†‰∏∫ÂÆÉÊòØÂü∫‰∫éClangÊûÑÂª∫ÁöÑÔºå‰ΩÜ‰ªçÁÑ∂Â≠òÂú®‰ª•‰∏ãÈôêÂà∂„ÄÇÁî±‰∫éÈ´òÂ±ÇÊ¨°MLIRÊñπË®Ä‰∏≠Áº∫‰πèÁªìÊûÑÁ±ªÂûãÔºå‰ªÖÊîØÊåÅÂÄºÁ±ªÂûãÁõ∏ÂêåÁöÑÁªìÊûÑ‰ΩìÔºåÊàñÂú®ÁâπÂÆöÂáΩÊï∞ÂÜÖÔºàÂ¶Çfprintf‰∏≠ÁöÑFILEÔºâ‰ΩøÁî®ÁöÑÁªìÊûÑ‰Ωì„ÄÇÊâÄÊúâÂàÜÈÖçÂÜÖÂ≠òÁöÑÂáΩÊï∞ÂøÖÈ°ª‰ΩøÁî®PolygeistÁºñËØëÔºåËÄå‰∏çÊòØ‰ΩøÁî®C++ÁºñËØëÂô®ÔºåËøôÊ†∑ÊâçËÉΩÁ°Æ‰øùÁîüÊàêÁöÑÊòØmemrefËÄåÈùûÊåáÈíà„ÄÇb) ‰ºòÂåñÂô®Ôºö‰ºòÂåñÂô®ÁöÑÈôêÂà∂Ê∫êËá™‰∫éÊâÄÊ∂âÂèäÂ∑•ÂÖ∑ÁöÑÈôêÂà∂„ÄÇÁâπÂà´ÊòØÔºåMLIRÁöÑ‰ªøÂ∞ÑÂÄºÂàÜÁ±ªÂØºËá¥‰∫ÜÂÖ®ÊúâÊàñÂÖ®Êó†ÁöÑÂª∫Ê®°ÔºåÂ¶ÇÊûú‰ªª‰ΩïÂæ™ÁéØ‰∏≠ÂåÖÂê´‰∏Ä‰∏™Èùû‰ªøÂ∞ÑËÆøÈóÆÊàñË¥üÊ≠•ÈïøÔºåÂ∞±‰ºöÂ∞ÜËØ•Âæ™ÁéØÈôçÁ∫ß‰∏∫Èùû‰ªøÂ∞Ñ„ÄÇÂØπ‰∏çÊòØÁî±PolygeistÂâçÁ´ØÁîüÊàêÁöÑ‰ª£Á†Å‰ΩøÁî®PolygeistÁöÑÂêéÁ´ØËøêË°åÊó∂ÔºåÂ∞ÜÈôêÂà∂Âú®ÂÖ∑ÊúâÊ≠£Á¥¢ÂºïÁöÑÂæ™ÁéØ‰∏ä„ÄÇÊúÄÂêéÔºåMLIRÁõÆÂâçÂ∞öÊú™Êèê‰æõÂØπÈùûÂá∏ÈõÜÂêàÁöÑÂπøÊ≥õÊîØÊåÅÔºàÈÄöÂ∏∏‰ª•Âπ∂ÈõÜÁöÑÂΩ¢ÂºèË°®Á§∫Ôºâ„ÄÇMLIRÂÜÖÈÉ®Ê≠£Âú®ËøõË°åÁõ∏ÂÖ≥Â∑•‰Ωú‰ª•Ëß£ÂÜ≥Ê≠§Á±ªÈóÆÈ¢ò„ÄÇc) ÂÆûÈ™åÔºöÂ∞ΩÁÆ°Êàë‰ª¨ÁöÑÂÆûÈ™åÊ∏ÖÊ•öÂú∞Â±ïÁ§∫‰∫ÜÂú®Polygeist‰∏≠ÂÆûÁé∞ÁöÑÊäÄÊúØÁöÑÂ•ΩÂ§Ñ‚Äî‚ÄîËØ≠Âè•ÊãÜÂàÜÂíåÂêéÊúüÔºàÂΩíÁ∫¶ÔºâÂπ∂Ë°åÂåñ‚Äî‚Äî‰ΩÜ‰ªçÊúâ‰∏çÂÆπÂøΩËßÜÁöÑÊïàÊûúÊòØÁî±‰∫éË∞ÉÂ∫¶Âô®ÁöÑÂ∑ÆÂºÇÔºöPolygeist‰∏≠ÁöÑPlutoÂíåPolly‰∏≠ÁöÑisl„ÄÇ‰ΩøÁî®Pluto 5ÁöÑPollyÁâàÊú¨‰∏éÁé∞‰ª£LLVM‰∏çÂÖºÂÆπÔºåËÄåÂêéËÄÖÂèàÊòØÂà©Áî®MLIRÊâÄÂøÖÈúÄÁöÑ„ÄÇÂ∞ÜislË∞ÉÂ∫¶Âô®ËøûÊé•Âà∞PolygeistÂèØËÉΩ‰ºö‰ΩøÁªìÊûúÊõ¥Êé•ËøëPollyÔºå‰ΩÜ‰ªçÁÑ∂Êó†Ê≥ïÊõ¥Áõ¥Êé•Âú∞ËøõË°åÊØîËæÉÔºåÂõ†‰∏∫SCoPÊ£ÄÊµã„ÄÅËØ≠Âè•ÂΩ¢ÊàêÂíå‰ªøÂ∞ÑË∞ÉÂ∫¶‰πãÈó¥ÁöÑÁõ∏‰∫í‰ΩúÁî®„ÄÇ B. Opportunities and Future Work Â∞ÜMLIR‰∏éÁé∞ÊúâÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ãËøûÊé•Ëµ∑Êù•Ôºå‰∏∫ÁºñËØëÂô®‰ºòÂåñÁ†îÁ©∂ÂºÄËæü‰∫ÜËÆ∏Â§öÊñ∞ÈÄîÂæÑÔºåËøûÊé•‰∫ÜÂ§öÈù¢‰ΩìÂíå‰º†ÁªüÁöÑÂü∫‰∫éSSAÁöÑÁºñËØëÂô®ËΩ¨Êç¢„ÄÇËøô‰ΩøÂæóÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ÂèØ‰ª•ËÆøÈóÆ‰∏Ä‰∫õÈáçË¶ÅÁöÑÂàÜÊûê‰ø°ÊÅØÔºåÂ¶ÇÂà´ÂêçÂàÜÊûê‰ª•ÂèäÁ≤æÁ°ÆÁöÑÊï∞ÊçÆÂ∏ÉÂ±ÄÂíåÁõÆÊ†áÊú∫Âô®ÊèèËø∞Á≠âÊúâÁî®‰ø°ÊÅØ„ÄÇÂèØ‰ª•ËØ¥ÔºåËøô‰∫õ‰ø°ÊÅØÂ∑≤ÁªèË¢´PollyÂà©Áî®Ôºå‰ΩÜLLVM IRÂíå‰ªøÂ∞ÑÂæ™ÁéØ‰πãÈó¥ÁöÑË°®Á§∫‰∏çÂåπÈÖç‰ΩøÂæóÈ´òÊïàÂà©Áî®Ëøô‰∫õ‰ø°ÊÅØÂèòÂæóÂõ∞Èöæ„ÄÇMLIR‰ª•Ë∂≥Â§üÈ´òÁöÑÊäΩË±°Â±ÇÁ∫ßÊö¥Èú≤‰∫ÜÁ±ª‰ººÁöÑ‰ø°ÊÅØÔºå‰ΩøÂÖ∂ÂèØÁî®‰∫é‰ªøÂ∞ÑÂèòÊç¢„ÄÇ ÈÄöËøáÂú®Âçï‰∏™Ê®°Âùó‰∏≠Ê∑∑Âêà‰∏çÂêåÁöÑÊäΩË±°ÔºåMLIRÂØπÊï¥‰∏™ËΩ¨Êç¢ËøáÁ®ãÊèê‰æõ‰∫ÜÊõ¥ÁªÜÁ≤íÂ∫¶ÁöÑÊéßÂà∂„ÄÇPolygeistÁöÑÊâ©Â±ïÂèØ‰ª•Á°Æ‰øùÈÄöËøáÁõ¥Êé•ÂèëÂá∫ÂêëÈáèÊåá‰ª§Êù•ÂÆûÁé∞Âæ™ÁéØÂêëÈáèÂåñÔºåËÄå‰∏çÊòØ‰æùËµñ‰∫éÂ∏∏Â∏∏Âè™ÊòØÁºñËØëÂô®Âª∫ËÆÆÁöÑpragmaÊåá‰ª§„ÄÇËØ•ÊµÅÁ®ãËøòÂèØ‰ª•ÊéßÂà∂Êõ¥‰ΩéÂ±ÇÊ¨°ÁöÑÊú∫Âà∂ÔºåÂ¶ÇÈ¢ÑÂèñÊàñÂèëÂá∫‰∏ìÁî®ÁöÑÁ°¨‰ª∂Êåá‰ª§„ÄÇÂèç‰πãÔºåÂ§öÈù¢‰ΩìÂàÜÊûêÂèØ‰ª•Á°Æ‰øù‰∏ãÊ∏∏ÁöÑÂ§ÑÁêÜËøáÁ®ãÔºå‰æãÂ¶ÇÔºåÂú∞ÂùÄËÆ°ÁÆóÊ∞∏Ëøú‰∏ç‰ºöÂØºËá¥Ë∂äÁïåËÆøÈóÆÔºå‰ª•ÂèäÂÖ∂‰ªñ‰ø°ÊÅØ„ÄÇ Âú®PolygeistÁöÑÊîØÊåÅ‰∏ãÔºåÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ÁöÑÊú™Êù•Â∑•‰ΩúÊòØÂøÖË¶ÅÁöÑ„ÄÇÈô§‰∫ÜÂΩ±Âìç‰ªøÂ∞ÑË∞ÉÂ∫¶Â§ñÔºåËØ•ÊäÄÊúØËøò‰ΩøÂæóËΩªÊùæÁöÑÈáçÊñ∞Áâ©ÂåñÂíåÂ±ÄÈÉ®ËΩ¨ÁΩÆÁºìÂÜ≤Êàê‰∏∫ÂèØËÉΩÔºåËøôÂú®GPU‰∏äÊòØËá≥ÂÖ≥ÈáçË¶ÅÁöÑ[55]Ôºå‰ª•ÂèäËΩØ‰ª∂ÊµÅÊ∞¥Á∫øÂåñÔºõÊâÄÊúâËøô‰∫õÈÉΩ‰∏çÈúÄË¶ÅÁîüÊàêÂ∑≤Áü•Â§çÊùÇÁöÑCÊ∫ê‰ª£Á†Å[56]„ÄÇÂè¶‰∏ÄÊñπÈù¢ÔºåËØ≠Âè•Êï∞ÈáèÂèØËÉΩ‰ºöÂØπÁºñËØëÊó∂Èó¥‰∫ßÁîüÂΩ±ÂìçÔºåÂõ†‰∏∫ËØ≠Âè•Êï∞ÈáèÊòØ‰æùËµñÂàÜÊûêÂíåË∞ÉÂ∫¶ÁÆóÊ≥ïÂ§çÊùÇÊÄßËæπÁïåÁöÑÈáçË¶ÅÂõ†Á¥†„ÄÇ C. Alternatives Êõø‰ª£ÊñπÊ°à ‰∏éÂÖ∂ËÆ©Â§öÈù¢‰ΩìÂ∑•ÂÖ∑Ëß£ÊûêÂπ∂ÁîüÊàêMLIRÔºå‰∏çÂ¶ÇÁõ¥Êé•‰ªéMLIRÂèëÂá∫CÔºàÊàñC++Ôºâ‰ª£Á†ÅÔºåÂπ∂Âú®CÊ∫ê‰ª£Á†Å‰∏ä‰ΩøÁî®Âü∫‰∫éCÁöÑÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Ôºå‰ΩÜËøôÁßçÊñπÊ≥ïÈôç‰Ωé‰∫ÜÁºñËØëÊµÅÁ®ãÁöÑË°®ËææËÉΩÂäõ„ÄÇ‰∏Ä‰∫õMLIRÊûÑÈÄ†Ôºå‰æãÂ¶ÇÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØÔºåÂèØ‰ª•Áõ¥Êé•Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠Ë°®ËææÔºåËÄåÂú®C‰∏≠Âç¥ÈúÄË¶Å‰∏Ä‰∏™Â§çÊùÇ‰∏î‰∏ç‰øùËØÅÂèØË°åÁöÑÊèêÂçáÊ≠•È™§„ÄÇÂè¶‰∏Ä‰∫õÊûÑÈÄ†Ôºå‰æãÂ¶ÇÈ¢ÑÂêëÈáèÂåñÁöÑ‰ªøÂ∞ÑÂÜÖÂ≠òÊìç‰ΩúÔºåÂàôÊ†πÊú¨Êó†Ê≥ïÂú®C‰∏≠Ë°®Ëææ„ÄÇPolygeistÊîØÊåÅÂú®MLIRÂà∞MLIRÁöÑÊµÅÁ®ã‰∏≠ÈÄèÊòéÂú∞Â§ÑÁêÜËøô‰∫õÊûÑÈÄ†Ôºå‰ΩÜÊàë‰ª¨Â∞ÜÊ≠§Á±ªÂ§ÑÁêÜÁöÑÁªÜËäÇÁïôÂæÖÊú™Êù•Á†îÁ©∂„ÄÇ PolygeistÊµÅÁ®ã‰πüÂèØ‰ª•‰∏éÂÖ∂‰ªñÂ§öÈù¢‰ΩìÊ†ºÂºèÁõ∏ËøûÊé•ÔºåÁâπÂà´ÊòØ‰∏éislÁõ∏Ëøû„ÄÇÊàë‰ª¨ÈÄâÊã©OpenScop‰Ωú‰∏∫Êú¨Á†îÁ©∂ÁöÑÂØπË±°ÔºåÂõ†‰∏∫ÂÆÉÂæóÂà∞Êõ¥Â§öÂ∑•ÂÖ∑ÁöÑÊîØÊåÅ„ÄÇisl‰ΩøÁî®Ë∞ÉÂ∫¶Ê†ëÊù•Ë°®Á§∫ÂàùÂßãÂíåËΩ¨ÂåñÂêéÁöÑÁ®ãÂ∫èË∞ÉÂ∫¶„ÄÇË∞ÉÂ∫¶Ê†ë‰∏éÂµåÂ•óÊìç‰ΩúÁöÑIRÊ®°ÂûãÈùûÂ∏∏Êé•ËøëÔºå‰ΩøÂæóËΩ¨Êç¢ÂèòÂæóÁÆÄÂçïÔºöforÂæ™ÁéØÂØπÂ∫î‰∫éÂ∏¶ËäÇÁÇπÔºàÊØè‰∏™Â∏¶Áª¥Â∫¶‰∏Ä‰∏™Âæ™ÁéØÔºâÔºåifÊù°‰ª∂ÂØπÂ∫î‰∫éËøáÊª§ËäÇÁÇπÔºåÂáΩÊï∞Á∫ßÂ∏∏ÈáèÂèØ‰ª•ÂåÖÂê´Âú®‰∏ä‰∏ãÊñáËäÇÁÇπ‰∏≠„ÄÇÊ†ëÁªìÊûÑ‰∏éMLIRÂå∫Âüü‰øùÊåÅ‰∏ÄËá¥„ÄÇÈÄÜÂêëËΩ¨Êç¢ÂèØ‰ª•ÈÄöËøáislÁöÑASTÁîüÊàêÂ∑•ÂÖ∑Ëé∑Âæó„ÄÇ VIII. CONCLUSION Êàë‰ª¨ÊèêÂá∫‰∫ÜPolygeistÔºå‰∏ÄÁßçÂ∞ÜÁé∞ÊúâCÊàñC++‰ª£Á†ÅÂØºÂÖ•MLIRÁöÑÁºñËØëÂ∑•‰ΩúÊµÅÁ®ãÔºåÂπ∂ÂÖÅËÆ∏Â§öÈù¢‰ΩìÂ∑•ÂÖ∑ÔºàÂ¶ÇPlutoÔºâÂØπMLIRÁ®ãÂ∫èËøõË°å‰ºòÂåñ„ÄÇËøô‰ΩøÂæóMLIRËÉΩÂ§üÂèóÁõä‰∫éÊï∞ÂçÅÂπ¥Êù•Âú®Â§öÈù¢‰ΩìÁºñËØëÊñπÈù¢ÁöÑÁ†îÁ©∂„ÄÇÊàë‰ª¨ËØÅÊòé‰∫ÜPolygeistÁîüÊàêÁöÑ‰ª£Á†ÅÂú®ÊÄßËÉΩ‰∏ä‰∏éClangÁõ∏ÂΩìÔºå‰ªéËÄåÂÆûÁé∞‰∫ÜÈíàÂØπMLIRÊûÑÂª∫ÁöÑÂèòÊç¢‰∏éÁé∞ÊúâÂ§öÈù¢‰ΩìÊ°ÜÊû∂‰πãÈó¥ÁöÑÂÖ¨Ê≠£ÊØîËæÉ„ÄÇÊúÄÂêéÔºåÊàë‰ª¨Â±ïÁ§∫‰∫ÜPolygeistÊâÄÂ∏¶Êù•ÁöÑ‰ºòÂåñÊú∫‰ºöÔºåËÄÉËôë‰∫Ü‰∏§Áßç‰∫íË°•ÁöÑÂèòÊç¢ÔºöËØ≠Âè•ÊãÜÂàÜÂíåÂΩíÁ∫¶Âπ∂Ë°åÂåñ„ÄÇÂú®Ëøô‰∏§ÁßçÊÉÖÂÜµ‰∏ãÔºåPolygeistÁöÑÊÄßËÉΩÂùá‰ºò‰∫éÊúÄÂÖàËøõÁöÑÂ§öÈù¢‰ΩìÁºñËØëÂô®ÂíåÊ∫êÂà∞Ê∫ê‰ºòÂåñÂô®„ÄÇ ÂÖ≥‰∫éÂ¶Ç‰ΩïÂú®Á°¨‰ª∂ÊàñËΩØ‰ª∂ÈÖçÁΩÆ‰∏éÊàë‰ª¨ÊâÄ‰ΩøÁî®ÁöÑ‰∏çÂêåÁöÑÁ≥ªÁªü‰∏äËøêË°åÔºåËøôÂèØËÉΩÈúÄË¶Å‰øÆÊîπÁöÑËØÑËÆ∫„ÄÇÂ¶ÇÈ¢ÑÊúüÁöÑÈÇ£Ê†∑ÔºåÂëΩ‰ª§ÊèèËø∞‰∏édockerÊñá‰ª∂ÁöÑÂÜÖÂÆπÁõ∏‰ºº„ÄÇËôΩÁÑ∂dockerÊñá‰ª∂Êó†ÁñëÊõ¥Êñπ‰æøÔºåÊòØËÆæÁΩÆÁºñËØëÂô®ÁöÑÂ•ΩÊñπÊ≥ïÔºå‰ΩÜÂç≥‰æø‰ΩøÁî®DockerÔºåÂØπ‰∫éËØÑ‰º∞Á≥ªÁªüÁöÑÊ†∏ÂøÉÊï∞ÈáèÁöÑÊúüÊúõ‰πüÈúÄË¶ÅÁ±ª‰ººÁöÑÊõ¥Êîπ„ÄÇ Ë¶ÅÁºñËØëPolygeistÔºåÈ¶ñÂÖàÈúÄË¶ÅÁºñËØëÂÖ∂Ëã•Âπ≤‰æùËµñÈ°π„ÄÇÊàë‰ª¨Âú®Âü∫‰∫éUbuntu 20.04ÁöÑAWS c5.metalÂÆû‰æã‰∏äËøêË°å‰∫ÜÂÆûÈ™å„ÄÇÊàë‰ª¨Ê†πÊçÆËØ•Á≥ªÁªüË∞ÉÊï¥‰∫ÜÊûÑÂª∫ËØ¥Êòé„ÄÇËôΩÁÑ∂ËÆ∏Â§öËØ¥ÊòéÊòØÈÄöÁî®ÁöÑÔºå‰∏éÊú∫Âô®ÊàñÊìç‰ΩúÁ≥ªÁªüÊó†ÂÖ≥Ôºå‰ΩÜÊüê‰∫õÊ≠•È™§ÂèØËÉΩÂπ∂ÈùûÂ¶ÇÊ≠§ÔºàÊàë‰ª¨Â∞ÜÂú®‰∏ãÊñá‰∏≠ÊèèËø∞ÂÆÉ‰ª¨ÂèØËÉΩÂá∫Áé∞ÁöÑ‰ΩçÁΩÆÔºâ„ÄÇ $ sudo apt update $ sudo apt install apt-utils $ sudo apt install tzdata build-essential \\ libtool autoconf pkg-config flex bison \\ libgmp-dev clang-9 libclang-9-dev texinfo \\ cmake ninja-build git texlive-full numactl # Êõ¥ÊîπÈªòËÆ§ÁºñËØëÂô®‰ª•‰ΩøPlutoÊ≠£Â∏∏Â∑•‰Ωú $ sudo update-alternatives --install \\ /usr/bin/llvm-config llvm-config \\ /usr/bin/llvm-config-9 100 $ sudo update-alternatives --install \\ /usr/bin/FileCheck FileCheck-9 \\ /usr/bin/FileCheck 100 $ sudo update-alternatives --install \\ /usr/bin/clang clang \\ /usr/bin/clang-9 100 $ sudo update-alternatives --install \\ /usr/bin/clang++ clang++ \\ /usr/bin/clang++-9 100 È¶ñÂÖàÔºåËÆ©Êàë‰ª¨‰∏ãËΩΩ‰∏Ä‰∏™ÂÆûÁî®Â∑•ÂÖ∑Â∫ìÔºåÂÖ∂‰∏≠Â∞ÜÂåÖÂê´‰∏Ä‰∫õÁºñËØëÂíåÂü∫ÂáÜÊµãËØïÊâÄÈúÄÁöÑËÑöÊú¨ÂíåÂÖ∂‰ªñÊñá‰ª∂Ôºö $ cd $ git clone \\ https://github.com/wsmoses/Polygeist-Script\\ scripts Áé∞Âú®ÂèØ‰ª•ÊåâÁÖß‰∏ãÈù¢ÁöÑÊ≠•È™§ÁºñËØëÂíåÊûÑÂª∫PlutoÔºö $ cd $ git clone \\ https://github.com/bondhugula/pluto $ cd pluto/ $ git checkout e5a039096547e0a3d34686295c $ git submodule init $ git submodule update $ ./autogen.sh $ ./configure $ make -jnproc Êé•‰∏ãÊù•ÔºåÂèØ‰ª•ÈÄöËøáÊâßË°å‰ª•‰∏ãÊìç‰ΩúÊù•ÊûÑÂª∫LLVM„ÄÅMLIRÂíåÂâçÁ´ØÔºö ‰ªéËøôÈáåÂºÄÂßãÔºåÊàë‰ª¨ÈúÄË¶ÅÈÄöËøáÂ§çÂà∂ËÑöÊú¨Â∫ì‰∏≠ÁöÑÁâàÊú¨Âπ∂ÊõøÊç¢Êàë‰ª¨ÂàöÂàöÊûÑÂª∫ÁöÑÁâàÊú¨Êù•‰øÆÊîπomp.h„ÄÇ $ cd $ export OMP_FILE=find \\ $HOME/mlir-clang/build -iname omp.h $ cp $HOME/scripts/omp.h $OMP_FILE Áé∞Âú®ËÆ©Êàë‰ª¨ÊûÑÂª∫MLIRÂ§öÈù¢‰ΩìÂàÜÊûêÔºå‰ª•ÂèäÂÆÉÊâÄÈúÄÁöÑÁâπÂÆöÁâàÊú¨ÁöÑLLVM„ÄÇÊàë‰ª¨Â∞ÜÂºÄÂßã‰∏ãËΩΩÊâÄÈúÄÁöÑ‰ª£Á†ÅÂπ∂ÊûÑÂª∫ÂÖ∂‰æùËµñÈ°π„ÄÇ $ cd $ git clone --recursive \\ https://github.com/kumasento/polymer -b pact $ cd polymer/ $ cd llvm/ $ mkdir build $ cd build/ $ cmake ../llvm \\ -DLLVM_ENABLE_PROJECTS=\"llvm;clang;mlir\" \\ -DLLVM_TARGETS_TO_BUILD=\"host\" \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_INSTALL_UTILS=ON \\ -G Ninja $ ninja -jnproc $ ninja check-mlir Áé∞Âú®Êàë‰ª¨ÂèØ‰ª•ÊûÑÂª∫MLIRÂ§öÈù¢‰ΩìÂàÜÊûêÂπ∂ÂØºÂá∫Áõ∏Â∫îÁöÑÊûÑÂª∫‰∫ßÁâ©„ÄÇ $ cd ~/polymer $ mkdir build $ cd build $ export BUILD=$PWD/../llvm/build $ cmake .. \\ -DCMAKE_BUILD_TYPE=DEBUG \\ -DMLIR_DIR=$BUILD/lib/cmake/mlir \\ -DLLVM_DIR=$BUILD/lib/cmake/llvm \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DLLVM_EXTERNAL_LIT=$BUILD/bin/llvm-lit \\ -G Ninja $ ninja -jnproc $ export LD_LIBRARY_PATH= \\ pwd/pluto/lib:$LD_LIBRARY_PATH $ ninja check-polymer ÊúÄÂêéÔºåÊàë‰ª¨ÂáÜÂ§áÂºÄÂßãÂü∫ÂáÜÊµãËØï„ÄÇÊàë‰ª¨È¶ñÂÖàËøêË°å‰∏Ä‰∏™ËÑöÊú¨ÔºåÁ¶ÅÁî®Ê∂°ËΩÆÊèêÂçáÂíåË∂ÖÁ∫øÁ®ãÔºåÂπ∂ÂÖ≥Èó≠Êú∫Âô®‰∏ä‰ªçÁÑ∂‰∏çÂøÖË¶ÅÁöÑÊúçÂä°„ÄÇËØ•ËÑöÊú¨ÁâπÂÆö‰∫éAWSÂÆû‰æã‰∏äÁöÑÊ†∏ÂøÉÊï∞ÈáèÔºàÊâÄÊúâÊ†∏ÂøÉ‰∏≠Èô§Á¨¨‰∏Ä‰∏™ÊèíÊßΩ‰∏äÁöÑÈùûË∂ÖÁ∫øÁ®ãÊ†∏ÂøÉÂ§ñÂùáË¢´Á¶ÅÁî®ÔºâÔºå‰ª•Âèä‰ΩøÁî®ÁöÑÈïúÂÉèÔºàÈïúÂÉè‰∏ä‰ªçÂ≠òÂú®ÁöÑÊâÄÊúâ‰∏çÂøÖË¶ÅÊúçÂä°Ë¢´Á¶ÅÁî®ÔºâÔºåÂõ†Ê≠§Â¶ÇÊûúÊâìÁÆóÂú®ÂÖ∂‰ªñÊú∫Âô®‰∏ä‰ΩøÁî®ÔºåÂèØËÉΩÈúÄË¶ÅËøõË°å‰øÆÊîπ„ÄÇ $ cd ~/scripts/ $ sudo bash ./hyper.sh Êàë‰ª¨Áé∞Âú®ÂèØ‰ª•ËøêË°åÂü∫ÂáÜÊµãËØïËÑöÊú¨„ÄÇËØ•ËÑöÊú¨Êú¨Ë∫´ÂØπÊ†∏ÂøÉÂíåÂ∏ÉÂ±ÄÊúâ‰∏Ä‰∫õÂÅáËÆæÔºà‰æãÂ¶ÇÔºåËÆæÁΩÆ taskset -c 1-8 numactl -i allÔºâ„ÄÇÂ¶ÇÊûú‰ΩøÁî®‰∏çÂêåÁöÑÊú∫Âô®ÔºåÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥Ëøô‰∫õËÆæÁΩÆ„ÄÇ cd ~/scripts/ $ cd polybench-c-4.2.1-beta/ $ ./run.sh # ËæìÂá∫ÈÄöËøáÊ†áÂáÜËæìÂá∫ÁîüÊàê ËØ•ËÑöÊú¨ÁöÑËæìÂá∫Â∞ÜÂåÖÂê´ÊØèÊ¨°ËØïÈ™åÁöÑËøêË°åÊó∂Èó¥ÔºåÊèèËø∞ÊâÄ‰ΩøÁî®ÁöÑÁºñËØëËÆæÁΩÆ‰ª•ÂèäËøêË°å‰∫ÜÂì™‰∏™Âü∫ÂáÜÊµãËØï„ÄÇ Êú¨Êñá‰ª∂‰∏≠ÂåÖÂê´ÁöÑËßÇÁÇπÂíåÁªìËÆ∫ÊòØ‰ΩúËÄÖÁöÑËßÇÁÇπÔºå‰∏çÂ∫îË¢´Ëß£ËØª‰∏∫‰ª£Ë°®ÁæéÂõΩÁ©∫ÂÜõÊàñÁæéÂõΩÊîøÂ∫úÁöÑÂÆòÊñπÊîøÁ≠ñÔºåÊó†ËÆ∫ÊòØÊòéÁ§∫ËøòÊòØÊöóÁ§∫„ÄÇÁæéÂõΩÊîøÂ∫úË¢´ÊéàÊùÉ‰∏∫‰∫ÜÊîøÂ∫úÁõÆÁöÑÂ§çÂç∞ÂíåÂàÜÂèëËØ•Êñá‰ª∂ÁöÑÂç∞Âà∑Êú¨ÔºåÂ∞ΩÁÆ°ËøôÈáåÊúâ‰ªª‰ΩïÁâàÊùÉËØ¥Êòé„ÄÇ APPENDIX Âú®Êú¨ÈôÑÂΩï‰∏≠ÔºåÊàë‰ª¨ÊèèËø∞‰∫ÜÂ¶Ç‰ΩïÊûÑÂª∫PolygeistÂπ∂ËØÑ‰º∞ÂÖ∂Âú®PolybenchÂü∫ÂáÜÊµãËØïÂ•ó‰ª∂‰∏äÁöÑÊÄßËÉΩÔºà‰ª•ÂèäÂü∫ÂáÜÁºñËØëÂô®Ôºâ„ÄÇÊàë‰ª¨Êèê‰æõ‰∫Ü‰∏§ÁßçËâ∫ÊúØÂìÅËØÑ‰º∞Êú∫Âà∂Ôºö‰∏Ä‰∏™DockerÂÆπÂô®‰ª•ÂèäÈÄêÊ≠•ÂëΩ‰ª§ÊèèËø∞ÁöÑÂÆâË£ÖËøáÁ®ãÔºåËøûÂêå "},"Learn/LearnPolygeist/2021_Polygeist-Raising C to Polyhedral MLIRtranslated_and_original.html":{"url":"Learn/LearnPolygeist/2021_Polygeist-Raising C to Polyhedral MLIRtranslated_and_original.html","title":"2021_Polygeist-Raising C to Polyhedral MLIRtranslated_and_original","keywords":"","body":"GPT-Academic Report # Title: Polygeist: Raising C to Polyhedral MLIR # Abstract: We present Polygeist, a new compilation flow that connects the MLIR compiler infrastructure to cutting edge polyhedral optimization tools. It consists of a C and C++ frontend capable of converting a broad range of existing codes into MLIR suitable for polyhedral transformation and a bi-directional conversion between MLIR and OpenScop exchange format. The Polygeist/MLIR intermediate representation featuring high-level (affine) loop constructs and n-D arrays embedded into a single static assignment (SSA) substrate enables an unprecedented combination of SSA-based and polyhedral optimizations. We illustrate this by proposing and implementing two extra transformations: statement splitting and reduction parallelization. Our evaluation demonstrates that Polygeist outperforms on average both an LLVM IR-level optimizer (Polly) and a source-to-source state-of-the-art polyhedral compiler (Pluto) when exercised on the Polybench/C benchmark suite in sequential (2.53x vs 1.41x, 2.34x) and parallel mode (9.47x vs 3.26x, 7.54x) thanks to the new representation and transformations. # Meta Translation Ê†áÈ¢òÔºöPolygeist: Â∞ÜCÊèêÂçáÂà∞Â§öÈù¢‰ΩìMLIR ÊëòË¶ÅÔºöÊàë‰ª¨ÊèêÂá∫‰∫ÜPolygeistÔºåËøôÊòØ‰∏ÄÁßçÊñ∞ÁöÑÁºñËØëÊµÅÁ®ãÔºåÊó®Âú®Â∞ÜMLIRÁºñËØëÂü∫Á°ÄËÆæÊñΩ‰∏éÂâçÊ≤øÁöÑÂ§öÈù¢‰Ωì‰ºòÂåñÂ∑•ÂÖ∑ËøûÊé•Ëµ∑Êù•„ÄÇÂÆÉÂåÖÊã¨‰∏Ä‰∏™CÂíåC++ÂâçÁ´ØÔºåËÉΩÂ§üÂ∞ÜÂπøÊ≥õÁöÑÁé∞Êúâ‰ª£Á†ÅËΩ¨Êç¢‰∏∫ÈÄÇÂêàÂ§öÈù¢‰ΩìÂèòÊç¢ÁöÑMLIRÔºåÂπ∂ÂÆûÁé∞MLIR‰∏éOpenScop‰∫§Êç¢Ê†ºÂºè‰πãÈó¥ÁöÑÂèåÂêëËΩ¨Êç¢„ÄÇPolygeist/MLIR‰∏≠Èó¥Ë°®Á§∫ÂÖ∑Â§áÈ´òÂ±ÇÔºà‰ªøÂ∞ÑÔºâÂæ™ÁéØÊûÑÈÄ†ÂíåÂµåÂÖ•Âà∞Âçï‰∏ÄÈùôÊÄÅËµãÂÄºÔºàSSAÔºâÂü∫Á°ÄÁªìÊûÑ‰∏≠ÁöÑnÁª¥Êï∞ÁªÑÔºåËÉΩÂ§üÂÆûÁé∞ÂâçÊâÄÊú™ÊúâÁöÑSSAÂü∫Á°ÄÂíåÂ§öÈù¢‰Ωì‰ºòÂåñÁöÑÁªìÂêà„ÄÇÊàë‰ª¨ÈÄöËøáÊèêÂá∫ÂíåÂÆûÁé∞‰∏§‰∏™È¢ùÂ§ñÂèòÊç¢ÔºöËØ≠Âè•ÂàÜÂâ≤ÂíåÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºåÊù•ËØÅÊòéËøô‰∏ÄÁÇπ„ÄÇÊàë‰ª¨ÁöÑËØÑ‰º∞Ë°®ÊòéÔºåPolygeistÂú®Polybench/CÂü∫ÂáÜÂ•ó‰ª∂ÁöÑÈ°∫Â∫èÊ®°ÂºèÔºà2.53xÂØπÊØî1.41xÔºå2.34xÔºâÂíåÂπ∂Ë°åÊ®°ÂºèÔºà9.47xÂØπÊØî3.26xÔºå7.54xÔºâ‰∏äÁöÑË°®Áé∞Âπ≥Âùá‰ºò‰∫éLLVM IRÁ∫ßÂà´‰ºòÂåñÂô®ÔºàPollyÔºâÂíåÂÖàËøõÁöÑÊ∫êÂà∞Ê∫êÂ§öÈù¢‰ΩìÁºñËØëÂô®ÔºàPlutoÔºâÔºåËøôÂæóÁõä‰∫éÊñ∞ÁöÑË°®Á§∫ÂíåÂèòÊç¢„ÄÇ # I. INTRODUCTION Improving the efficiency of computation has always been one of the prime goals of computing. Program performance can be improved significantly by reaping the benefits of parallelism, temporal and spatial locality, and other performance sources. Relevant program transformations are particularly tedious and challenging when targeting modern multicore CPUs and GPUs with deep memory hierarchies and parallelism, and are often performed automatically by optimizing compilers. The polyhedral model enables precise analyses and a relatively easy specification of transformations (loop restructuring, automatic parallelization, etc.) that take advantage of hardware performance sources. As a result, there is growing evidence that the polyhedral model is one of the best frameworks for efficient transformation of compute-intensive programs [1], [2], [3], and for programming accelerator architectures [4], [5], [6]. Consequently, the compiler community has focused on building tools that identify and optimize parts of the program that can be represented within the polyhedral model (commonly referred to as static-control parts, or SCoP's). Such tools tend to fall into two categories. Compiler-based tools like Polly [7] and Graphite [8] detect and transform SCoPs in compiler intermediate representations (IRs). While this offers seamless integration with rest of the compiler, the lack of high-level structure and information hinders the tools' ability to perform analyses and transformations. This structure needs to be recovered from optimized IR, often Fig. 1. The Polygeist compilation flow consists of 4 stages. The frontend traverses Clang AST to emit MLIR SCF dialect (Section III-A), which is raised to the Affine dialect and pre-optimized (Section III-B). The IR is then processed by a polyhedral scheduler (Sections III-C,III-D) before postoptimization and parallelization (Section III-E). Finally, it is translated to LLVM IR for further optimization and binary generation by LLVM. imperfectly or at a significant cost [9]. Moreover, common compiler optimizations such as LICM may interfere with the process [10]. Finally, low-level IRs often lack constructs for, e.g., parallelism or reductions, produced by the transformation, which makes the flow more complex. Source-to-source compilers such as Pluto [11], POCC [12] and PPCG [5] operate directly on C or C++ code. While this can effectively leverage the high-level information from source code, the effectiveness of such tools is often reduced by the lack of enabling optimizations such as those converting hazardous memory loads into single-assignment virtual registers. Furthermore, the transformation results must be expressed in C, which is known to be complex [13], [14] and is also missing constructs for, e.g., reduction loops or register values not backed by memory storage. This paper proposes and evaluates the benefits of a polyhedral compilation flow, Polygeist (Figure 1), that can leverage both the high-level structure available in source code and the fine-grained control of compiler optimization provided by lowlevel IRs. It builds on the recent MLIR compiler infrastructure that allows the interplay of multiple abstraction levels within the same representation, during the same transformations [15]. Intermixable MLIR abstractions, or dialects, include highlevel constructs such as loops, parallel and reduction patterns; low-level representations fully covering LLVM IR [16]; and a polyhedral-inspired representation featuring loops and memory accesses annotated with affine expressions. Moreover, by combining the best of source-level and IR-level tools in an end-to-end polyhedral flow, Polygeist preserves high-level information and leverages them to perform new or improved %result = \"dialect.operation\"(%operand, %operand) {attribute = #dialect} ({ // Inside a nested region. ^basic_block(%block_argument: !dialect.type): \"another.operation\"() : () -> () }) : (!dialect.type) -> !dialect.result_type Fig. 2. Generic MLIR syntax for an operation with two operands, one result, one attribute and a single-block region. optimizations, such as statement splitting and loop-carried value detection, on a lower-level abstraction as well as to influence downstream optimizations. We make the following contributions: ‚Ä¢ a C and C++ frontend for MLIR that preserves high-level loop structure from the original source code; ‚Ä¢ an end-to-end flow with raising to and lowering from the polyhedral model, leveraging our abstraction to perform more optimizations than both source-and IR-level tools, including reduction parallelization; ‚Ä¢ an exploration of new transformation opportunities created by Polygeist, in particular, statement splitting; ‚Ä¢ and an end-to-end comparison between Polygeist and state-of-the-art source-and IR-based tools (Pluto [11] and Polly [14]) along with optimization case studies. I. ÂºïË®Ä ÊèêÈ´òËÆ°ÁÆóÊïàÁéá‰∏ÄÁõ¥ÊòØËÆ°ÁÆóÈ¢ÜÂüüÁöÑ‰∏ªË¶ÅÁõÆÊ†á‰πã‰∏Ä„ÄÇÈÄöËøáÂà©Áî®Âπ∂Ë°åÊÄß„ÄÅÊó∂Èó¥ÂíåÁ©∫Èó¥Â±ÄÈÉ®ÊÄß‰ª•ÂèäÂÖ∂‰ªñÊÄßËÉΩÊù•Ê∫êÔºåÂèØ‰ª•ÊòæËëóÊèêÈ´òÁ®ãÂ∫èÊÄßËÉΩ„ÄÇÂΩìÈíàÂØπÁé∞‰ª£Â§öÊ†∏ CPU Âíå GPU ËøõË°åÁõ∏ÂÖ≥Á®ãÂ∫èÂèòÊç¢Êó∂ÔºåËøô‰∫õÂèòÊç¢Â∞§ÂÖ∂ÁπÅÁêê‰∏îÂÖ∑ÊúâÊåëÊàòÊÄßÔºåÂõ†‰∏∫Áé∞‰ª£Êû∂ÊûÑÂÖ∑ÊúâÊ∑±Â∫¶ÂÜÖÂ≠òÂ±ÇÊ¨°ÂíåÂπ∂Ë°åÊÄßÔºåÈÄöÂ∏∏Áî±‰ºòÂåñÁºñËØëÂô®Ëá™Âä®ÊâßË°å„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãËÉΩÂ§üÂÆûÁé∞Á≤æÁ°ÆÂàÜÊûêÂíåÁõ∏ÂØπÁÆÄÂçïÁöÑÂèòÊç¢ËßÑËåÉÔºàÂ¶ÇÂæ™ÁéØÈáçÊûÑ„ÄÅËá™Âä®Âπ∂Ë°åÂåñÁ≠âÔºâÔºå‰ª•Âà©Áî®Á°¨‰ª∂ÊÄßËÉΩÊù•Ê∫ê„ÄÇÂõ†Ê≠§ÔºåÊúâË∂äÊù•Ë∂äÂ§öÁöÑËØÅÊçÆË°®ÊòéÔºåÂ§öÈù¢‰ΩìÊ®°ÂûãÊòØÈ´òÊïàËΩ¨ÂåñËÆ°ÁÆóÂØÜÈõÜÂûãÁ®ãÂ∫è [1]„ÄÅ[2]„ÄÅ[3] ÂíåÁºñÁ®ãÂä†ÈÄüÂô®Êû∂ÊûÑ [4]„ÄÅ[5]„ÄÅ[6] ÁöÑÊúÄ‰Ω≥Ê°ÜÊû∂‰πã‰∏Ä„ÄÇÂõ†Ê≠§ÔºåÁºñËØëÂô®Á§æÂå∫‰∏ìÊ≥®‰∫éÊûÑÂª∫Â∑•ÂÖ∑Ôºå‰ª•ËØÜÂà´Âíå‰ºòÂåñÂèØ‰ª•Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠Ë°®Á§∫ÁöÑÁ®ãÂ∫èÈÉ®ÂàÜÔºàÈÄöÂ∏∏Áß∞‰∏∫ÈùôÊÄÅÊéßÂà∂ÈÉ®ÂàÜÊàñ SCoPÔºâ„ÄÇËøô‰∫õÂ∑•ÂÖ∑ÂæÄÂæÄÂàÜ‰∏∫‰∏§Á±ª„ÄÇ Âü∫‰∫éÁºñËØëÂô®ÁöÑÂ∑•ÂÖ∑ÔºåÂ¶Ç Polly [7] Âíå Graphite [8]ÔºåÂú®ÁºñËØëÂô®‰∏≠Èó¥Ë°®Á§∫ÔºàIRÔºâ‰∏≠Ê£ÄÊµãÂíåËΩ¨Êç¢ SCoP„ÄÇÂ∞ΩÁÆ°Ëøô‰∏éÁºñËØëÂô®ÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜÊó†ÁºùÈõÜÊàêÔºå‰ΩÜÁº∫‰πèÈ´òÂ±ÇÊ¨°ÁªìÊûÑÂíå‰ø°ÊÅØÈôêÂà∂‰∫ÜËøô‰∫õÂ∑•ÂÖ∑ËøõË°åÂàÜÊûêÂíåÂèòÊç¢ÁöÑËÉΩÂäõ„ÄÇËøôÁßçÁªìÊûÑÈÄöÂ∏∏ÈúÄË¶ÅÈÄöËøá‰ºòÂåñÂêéÁöÑ IR ÊÅ¢Â§çÔºåÂæÄÂæÄÊòØ‰ª•‰∏çÂÆåÂÖ®ÊàñÈ´òÊàêÊú¨ÁöÑÊñπÂºèÂÆûÁé∞ [9]„ÄÇÊ≠§Â§ñÔºåËØ∏Â¶Ç LICM ÁöÑÂ∏∏ËßÅÁºñËØëÂô®‰ºòÂåñÂèØËÉΩ‰ºöÂπ≤Êâ∞Ëøô‰∏ÄËøáÁ®ã [10]„ÄÇÊúÄÂêéÔºå‰ΩéÁ∫ß IR ÈÄöÂ∏∏Áº∫‰πèÁî±ÂèòÊç¢ÁîüÊàêÁöÑÂπ∂Ë°åÊÄßÊàñÂΩíÁ∫¶ÁöÑÊûÑÈÄ†Ôºå‰ªéËÄå‰ΩøÊµÅÁ®ãÊõ¥Âä†Â§çÊùÇ„ÄÇ Ê∫êÂà∞Ê∫êÁºñËØëÂô®ÔºåÂ¶Ç Pluto [11]„ÄÅPOCC [12] Âíå PPCG [5]ÔºåÁõ¥Êé•Âú® C Êàñ C++ ‰ª£Á†Å‰∏äÊìç‰Ωú„ÄÇËôΩÁÑ∂ËøôÂèØ‰ª•ÊúâÊïàÂú∞Âà©Áî®Ê∫ê‰ª£Á†Å‰∏≠ÁöÑÈ´òÂ±Ç‰ø°ÊÅØÔºå‰ΩÜËøô‰∫õÂ∑•ÂÖ∑ÁöÑÊúâÊïàÊÄßÂæÄÂæÄÂõ†Áº∫‰πèÂêØÁî®‰ºòÂåñËÄåÈôç‰ΩéÔºå‰æãÂ¶ÇÂ∞ÜÂç±Èô©ÁöÑÂÜÖÂ≠òÂä†ËΩΩËΩ¨Êç¢‰∏∫ÂçïËµãÂÄºËôöÊãüÂØÑÂ≠òÂô®„ÄÇÊ≠§Â§ñÔºåÂèòÊç¢ÁªìÊûúÂøÖÈ°ªÁî® C Ë°®ËææÔºåËÄå C ËØ≠Ë®ÄÊú¨Ë∫´ÁöÑÂ§çÊùÇÊÄß‰ºóÊâÄÂë®Áü• [13]„ÄÅ[14]ÔºåËÄå‰∏î‰πüÁº∫‰πè‰æãÂ¶ÇÂΩíÁ∫¶Âæ™ÁéØÊàñÊú™Ë¢´ÂÜÖÂ≠òÂ≠òÂÇ®ÊîØÊåÅÁöÑÂØÑÂ≠òÂô®ÂÄºÁöÑÊûÑÈÄ†„ÄÇ Êú¨ÊñáÊèêÂá∫Âπ∂ËØÑ‰º∞‰∫Ü‰∏ÄÁßçÂ§öÈù¢‰ΩìÁºñËØëÊµÅÁ®ã PolygeistÔºàÂõæ 1ÔºâÁöÑÂ•ΩÂ§ÑÔºåËØ•ÊµÅÁ®ãÂèØ‰ª•Âà©Áî®Ê∫ê‰ª£Á†Å‰∏≠ÂèØÁî®ÁöÑÈ´òÂ±ÇÁªìÊûÑ‰ª•ÂèäÁî±‰ΩéÁ∫ß IR Êèê‰æõÁöÑÁºñËØëÂô®‰ºòÂåñÁöÑÁªÜÁ≤íÂ∫¶ÊéßÂà∂„ÄÇÂÆÉÊûÑÂª∫Âú®ÊúÄËøëÁöÑ MLIR ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ‰πã‰∏äÔºåËØ•Âü∫Á°ÄËÆæÊñΩÂÖÅËÆ∏Âú®Âêå‰∏ÄË°®Á§∫‰∏≠„ÄÅÂú®Âêå‰∏ÄÂèòÊç¢ËøáÁ®ã‰∏≠Ê∑∑ÂêàÂ§ö‰∏™ÊäΩË±°Â±ÇÊ¨° [15]„ÄÇÂèØ‰∫íÊç¢ÁöÑ MLIR ÊäΩË±°ÊàñÊñπË®ÄÂåÖÊã¨È´òÂ±ÇÊûÑÈÄ†ÔºåÂ¶ÇÂæ™ÁéØ„ÄÅÂπ∂Ë°åÂíåÂΩíÁ∫¶Ê®°ÂºèÔºõÂÆåÊï¥Ë¶ÜÁõñ LLVM IR ÁöÑ‰ΩéÂ±ÇË°®Á§∫ [16]Ôºõ‰ª•Âèä‰∏ÄÁßçÂèóÂà∞Â§öÈù¢‰ΩìÂêØÂèëÁöÑË°®Á§∫ÔºåÂÖ∑ÊúâÂ∏¶Êúâ‰ªøÂ∞ÑË°®ËææÂºèÊ≥®ÈáäÁöÑÂæ™ÁéØÂíåÂÜÖÂ≠òËÆøÈóÆ„ÄÇÊ≠§Â§ñÔºåÈÄöËøáÂ∞ÜÊ∫êÁ∫ßÂíå IR Á∫ßÂ∑•ÂÖ∑ÁöÑ‰ºòÂäøÁªìÂêàÂú®‰∏Ä‰∏™Á´ØÂà∞Á´ØÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ã‰∏≠ÔºåPolygeist ‰øùÁïô‰∫ÜÈ´òÂ±Ç‰ø°ÊÅØÂπ∂Âà©Áî®Ëøô‰∫õ‰ø°ÊÅØÂú®ËæÉ‰ΩéÁ∫ßÂà´ÊäΩË±°‰∏äÊâßË°åÊñ∞ÁöÑÊàñÊîπËøõÁöÑ‰ºòÂåñÔºåÂ¶ÇËØ≠Âè•ÊãÜÂàÜÂíåÂæ™ÁéØÊê∫Â∏¶ÂÄºÊ£ÄÊµãÔºåÂêåÊó∂ÂΩ±ÂìçÂêéÁª≠‰ºòÂåñ„ÄÇ Êàë‰ª¨ÁöÑË¥°ÁåÆÂ¶Ç‰∏ãÔºö ‚Ä¢ ‰∏Ä‰∏™ C Âíå C++ ÁöÑ MLIR ÂâçÁ´ØÔºå‰øùÁïôÂéüÂßãÊ∫ê‰ª£Á†Å‰∏≠ÁöÑÈ´òÂ±ÇÂæ™ÁéØÁªìÊûÑÔºõ ‚Ä¢ ‰∏Ä‰∏™Á´ØÂà∞Á´ØÁöÑÊµÅÁ®ãÔºåÂÆûÁé∞ÂêëÂ§öÈù¢‰ΩìÊ®°ÂûãÁöÑÊèêÂçáÂíåÈôç‰ΩéÔºåÂà©Áî®Êàë‰ª¨ÁöÑÊäΩË±°ÊâßË°åÊØîÊ∫êÁ∫ßÂíå IR Á∫ßÂ∑•ÂÖ∑Êõ¥Â§öÁöÑ‰ºòÂåñÔºåÂåÖÊã¨ÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºõ ‚Ä¢ Êé¢Á¥¢ Polygeist ÂàõÂª∫ÁöÑÊñ∞ÂèòÊç¢Êú∫‰ºöÔºåÂ∞§ÂÖ∂ÊòØËØ≠Âè•ÊãÜÂàÜÔºõ ‚Ä¢ ‰ª•Âèä Polygeist ‰∏éÊúÄÂÖàËøõÁöÑÂü∫‰∫éÊ∫êÂíå IR ÁöÑÂ∑•ÂÖ∑ÔºàPluto [11] Âíå Polly [14]Ôºâ‰πãÈó¥ÁöÑÁ´ØÂà∞Á´ØÊØîËæÉÔºå‰ª•Âèä‰ºòÂåñÊ°à‰æãÁ†îÁ©∂„ÄÇ # A. Overview MLIR is an optimizing compiler infrastructure inspired by LLVM [16] with a focus on extensibility and modularity [15]. Its main novelty is the IR supporting a fully extensible set of instructions (called operations) and types. Practically, MLIR combines SSA with nested regions, allowing one to express a range of concepts as first-class operations including machine instructions such as floating-point addition, structured control flow such as loops, hardware circuitry [17], and large machine learning graphs. Operations define the runtime semantics of a program and process immutable values. Compile-time information about values is expressed in types, and information about operations is expressed in attributes. Operations can have attached regions, which in turn contain (basic) blocks of further operations. The generic syntax, accepted by all operations, illustrates the structure of MLIR in Figure 2. Additionally, MLIR supports user-defined custom syntax. Attributes, operations, and types are organized in dialects, which can be thought of as modular libraries. MLIR provides a handful of dialects that define common operations such as modules, functions, loops, memory or arithmetic instructions, and ubiquitous types such as integers and floats. We discuss the dialects relevant to Polygeist in the following sections. A. Ê¶ÇËø∞ MLIRÊòØ‰∏ÄÁßç‰ºòÂåñÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩÔºåÂèóÂà∞LLVMÁöÑÂêØÂèëÔºåÈáçÁÇπÂÖ≥Ê≥®Êâ©Â±ïÊÄßÂíåÊ®°ÂùóÂåñ„ÄÇÂÖ∂‰∏ªË¶ÅÂàõÊñ∞Âú®‰∫éÊîØÊåÅÂÆåÂÖ®ÂèØÊâ©Â±ïÁöÑ‰∏ÄÁªÑÊåá‰ª§ÔºàÁß∞‰∏∫Êìç‰ΩúÔºâÂíåÁ±ªÂûãÁöÑ‰∏≠Èó¥Ë°®Á§∫ÔºàIRÔºâ„ÄÇÂÆûÈôÖ‰∏äÔºåMLIRÂ∞ÜÈùôÊÄÅÂçïËµãÂÄºÔºàSSAÔºâ‰∏éÂµåÂ•óÂå∫ÂüüÁõ∏ÁªìÂêàÔºå‰ΩøÂæóËÉΩÂ§üÂ∞Ü‰∏ÄÁ≥ªÂàóÊ¶ÇÂøµË°®Á§∫‰∏∫‰∏ÄÁ±ª‰∏ÄÊµÅÁöÑÊìç‰ΩúÔºåÂåÖÊã¨Êú∫Âô®Êåá‰ª§Ôºå‰æãÂ¶ÇÊµÆÁÇπÂä†Ê≥ï„ÄÅÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºå‰æãÂ¶ÇÂæ™ÁéØ„ÄÅÁ°¨‰ª∂ÁîµË∑ØÔºå‰ª•ÂèäÂ§ßÂûãÊú∫Âô®Â≠¶‰π†Âõæ„ÄÇÊìç‰ΩúÂÆö‰πâ‰∫ÜÁ®ãÂ∫èÁöÑËøêË°åÊó∂ËØ≠‰πâÔºåÂπ∂Â§ÑÁêÜ‰∏çÂèØÂèòÂÄº„ÄÇÊúâÂÖ≥ÂÄºÁöÑÁºñËØëÊó∂‰ø°ÊÅØÁî®Á±ªÂûãË°®Á§∫ÔºåËÄåÊúâÂÖ≥Êìç‰ΩúÁöÑ‰ø°ÊÅØÁî®Â±ûÊÄßË°®Á§∫„ÄÇÊìç‰ΩúÂèØ‰ª•ÈôÑÂ∏¶Âå∫ÂüüÔºåËÄåËøô‰∫õÂå∫ÂüüÂÜÖÈÉ®ÂèàÂåÖÂê´ÂÖ∂‰ªñÊìç‰ΩúÁöÑÔºàÂü∫Êú¨ÔºâÂùó„ÄÇÊâÄÊúâÊìç‰ΩúÊé•ÂèóÁöÑÈÄöÁî®ËØ≠Ê≥ïÂú®Âõæ2‰∏≠Â±ïÁ§∫‰∫ÜMLIRÁöÑÁªìÊûÑ„ÄÇÊ≠§Â§ñÔºåMLIRÊîØÊåÅÁî®Êà∑Ëá™ÂÆö‰πâÁöÑËá™ÂÆö‰πâËØ≠Ê≥ï„ÄÇ Â±ûÊÄß„ÄÅÊìç‰ΩúÂíåÁ±ªÂûãË¢´ÁªÑÁªáÂú®ÊñπË®Ä‰∏≠ÔºåÂèØ‰ª•ËßÜ‰∏∫Ê®°ÂùóÂåñÂ∫ì„ÄÇMLIRÊèê‰æõ‰∫ÜÂ∞ëÈáèÊñπË®ÄÔºå‰ª•ÂÆö‰πâÂ∏∏ËßÅÊìç‰ΩúÔºåÂ¶ÇÊ®°Âùó„ÄÅÂáΩÊï∞„ÄÅÂæ™ÁéØ„ÄÅÂÜÖÂ≠òÊàñÁÆóÊúØÊåá‰ª§Ôºå‰ª•ÂèäÂÉèÊï¥Êï∞ÂíåÊµÆÁÇπÊï∞ËøôÊ†∑ÁöÑÈÄöÁî®Á±ªÂûã„ÄÇÊàë‰ª¨Â∞ÜÂú®Êé•‰∏ãÊù•ÁöÑÁ´†ËäÇ‰∏≠ËÆ®ËÆ∫‰∏éPolygeistÁõ∏ÂÖ≥ÁöÑÊñπË®Ä„ÄÇ # B. Affine and MemRef Dialects The Affine dialect [18] aims at representing SCoP's with explicit polyhedral-friendly loop and conditional constructs. The core of its representation is the following classification of value categories: ‚Ä¢ Symbols-integer values that are known to be loopinvariant but unknown at compile-time, also referred to as program parameters in polyhedral literature, typically array dimensions or function arguments. In MLIR, symbols are values defined in the top-level region of an operation with \"affine scope\" semantics, e.g., functions; or array dimensions, constants, and affine map (see below) application results regardless of their definition point. ‚Ä¢ Dimensions-are an extension of symbols that also accepts induction variables of affine loops. ‚Ä¢ Non-affine-any other values. Symbols and dimensions have index type, which is a platform-specific integer that fits a pointer (intptr_t in C). MLIR provides two attributes relevant for the Affine dialect: ‚Ä¢ Affine maps are multi-dimensional (quasi-)linear functions that map a list of dimension and symbol arguments to a list of results. For example, (d 0 , d 1 , d 2 , s 0 ) ‚Üí (d 0 + d 1 , s 0 ‚Ä¢ d 2 ) is a two-dimensional quasi-affine map, which can be expressed in MLIR as affine_map (d0+d1, s0 * d2)>. Dimensions (in parentheses on the left) and symbols (in brackets on the left) are separated to allow quasi-linear expressions: symbols are treated as constants, which can therefore be multiplied with dimensions, whereas a product of two dimensions is invalid. ‚Ä¢ Integer sets are collections of integer tuples constrained by conjunctions of (quasi-)linear expressions. For example, a \"triangular\" set {(d 0 , d 1 ) : 0 ‚â§ d 0 = 0, s0-d0-1 >= 0, d1 >= 0, d0-d1 >= 0)>. The Affine dialect makes use of the concepts above to define a set of operations. An affine.for is a \"for\" loop with loop-invariant lower and upper bounds expressed as affine maps with a constant step. An affine.parallel is a \"multifor\" loop nest, iterations of which may be executed concurrently. Both kinds of loops support reductions via loopcarried values as well as max(min) expression lower(upper) bounds. An affine.if is a conditional construct, with an optional else region, and a condition defined as inclusion of the given values into an integer set. Finally, affine.load and affine.store express memory accesses where the address computation is expressed as an affine map. A core MLIR type-memref, which stands for memory reference-and the corresponding memref dialect are also featured in Figure 3. The memref type describes a structured multi-index pointer into memory, e.g., memref denotes a 1-d array of floating-point elements; and the memref dialect provides memory and type manipulation operations, e.g., memref.dim retrieves the dimensionality of a memref object. memref does not allow internal aliasing, i.e., different subscripts always point to different addresses. This effectively defines away the delinearization problem that hinders the application of polyhedral techniques at the LLVM IR level [9]. Throughout this paper, we only consider memrefs with the default layout that corresponds to contiguous row-major storage compatible with C ABI (Application Binary Interface). In practice, memrefs support arbitrary layouts expressible as affine maps, but these are not necessary in Polygeist context. B. ‰ªøÂ∞ÑÂíåÂÜÖÂ≠òÂºïÁî®ÊñπË®Ä ‰ªøÂ∞ÑÊñπË®Ä [18] Êó®Âú®Ë°®Á§∫ÂÖ∑ÊúâÊòæÂºèÈÄÇÂêàÂ§öÈù¢‰ΩìÁöÑÂæ™ÁéØÂíåÊù°‰ª∂ÊûÑÈÄ†ÁöÑÈùôÊÄÅËÆ°ÁÆóÁ®ãÂ∫èÔºàSCoPÔºâ„ÄÇÂÖ∂Ë°®Á§∫ÁöÑÊ†∏ÂøÉÊòØ‰ª•‰∏ãÂÄºÁ±ªÂà´ÁöÑÂàÜÁ±ªÔºö Á¨¶Âè∑‚Äî‚ÄîÂ∑≤Áü•‰∏∫Âæ™ÁéØ‰∏çÂèò‰ΩÜÂú®ÁºñËØëÊó∂Êú™Áü•ÁöÑÊï¥Êï∞ÂÄºÔºåÂú®Â§öÈù¢‰ΩìÊñáÁåÆ‰∏≠‰πüÁß∞‰∏∫Á®ãÂ∫èÂèÇÊï∞ÔºåÈÄöÂ∏∏ÊòØÊï∞ÁªÑÁª¥Â∫¶ÊàñÂáΩÊï∞ÂèÇÊï∞„ÄÇÂú® MLIR ‰∏≠ÔºåÁ¨¶Âè∑ÊòØÂú®ÂÖ∑Êúâ‚Äú‰ªøÂ∞ÑËåÉÂõ¥‚ÄùËØ≠‰πâÁöÑÊìç‰ΩúÁöÑÈ°∂Á∫ßÂå∫Âüü‰∏≠ÂÆö‰πâÁöÑÂÄºÔºå‰æãÂ¶ÇÂáΩÊï∞ÔºõÊàñËÄÖÊï∞ÁªÑÁª¥Â∫¶„ÄÅÂ∏∏ÈáèÂíå‰ªøÂ∞ÑÊò†Â∞ÑÔºàËßÅ‰∏ãÊñáÔºâÂ∫îÁî®ÁªìÊûúÔºåÊó†ËÆ∫ÂÆÉ‰ª¨ÁöÑÂÆö‰πâÁÇπÂú®Âì™Èáå„ÄÇ Áª¥Â∫¶‚Äî‚ÄîÊòØÁ¨¶Âè∑ÁöÑÊâ©Â±ïÔºåÊé•Âèó‰ªøÂ∞ÑÂæ™ÁéØÁöÑÂΩíÁ∫≥ÂèòÈáè„ÄÇ Èùû‰ªøÂ∞Ñ‚Äî‚Äî‰ªª‰ΩïÂÖ∂‰ªñÂÄº„ÄÇÁ¨¶Âè∑ÂíåÁª¥Â∫¶ÂÖ∑ÊúâÁ¥¢ÂºïÁ±ªÂûãÔºåÂç≥Âπ≥Âè∞ÁâπÂÆöÁöÑÊï¥Êï∞ÔºåÈÄÇÂêàÊåáÈíàÔºàÂú® C ‰∏≠‰∏∫ intptr_tÔºâ„ÄÇ MLIR Êèê‰æõ‰∫Ü‰∏§‰∏™‰∏é‰ªøÂ∞ÑÊñπË®ÄÁõ∏ÂÖ≥ÁöÑÂ±ûÊÄßÔºö ‰ªøÂ∞ÑÊò†Â∞ÑÊòØÂ§öÁª¥ÁöÑÔºàÂáÜÔºâÁ∫øÊÄßÂáΩÊï∞ÔºåÂÆÉÂ∞Ü‰∏ÄÁªÑÁª¥Â∫¶ÂíåÁ¨¶Âè∑ÂèÇÊï∞Êò†Â∞ÑÂà∞‰∏ÄÁªÑÁªìÊûú„ÄÇ‰æãÂ¶ÇÔºå ( (d_0, d_1, d_2, s_0) \\rightarrow (d_0 + d_1, s_0 \\cdot d_2) ) ÊòØ‰∏Ä‰∏™‰∫åÁª¥ÂáÜ‰ªøÂ∞ÑÊò†Â∞ÑÔºåÂèØ‰ª•Âú® MLIR ‰∏≠Ë°®Á§∫‰∏∫ affine_map (d0+d1, s0 * d2)>„ÄÇÁª¥Â∫¶ÔºàÂ∑¶‰æßÁöÑÊã¨Âè∑ÂÜÖÔºâÂíåÁ¨¶Âè∑ÔºàÂ∑¶‰æßÁöÑÊñπÊã¨Âè∑ÂÜÖÔºâË¢´ÂàÜÈöîÂºÄÔºå‰ª•ÂÖÅËÆ∏ÂáÜÁ∫øÊÄßË°®ËææÂºèÔºöÁ¨¶Âè∑Ë¢´ËßÜ‰∏∫Â∏∏ÈáèÔºåÂõ†Ê≠§ÂèØ‰ª•‰∏éÁª¥Â∫¶Áõ∏‰πòÔºåËÄå‰∏§‰∏™Áª¥Â∫¶ÁöÑ‰πòÁßØÊòØÊó†ÊïàÁöÑ„ÄÇ Êï¥Êï∞ÈõÜÊòØË¢´ÔºàÂáÜÔºâÁ∫øÊÄßË°®ËææÂºèÁöÑÂêàÂèñÈôêÂà∂ÁöÑÊï¥Êï∞ÂÖÉÁªÑÈõÜÂêà„ÄÇ‰æãÂ¶ÇÔºå‚Äú‰∏âËßíÂΩ¢‚ÄùÈõÜÂêà ({(d_0, d_1) : 0 \\leq d_0 affine_set= 0, s0-d0-1 >= 0, d1 >= 0, d0-d1 >= 0)>„ÄÇ ‰ªøÂ∞ÑÊñπË®ÄÂà©Áî®‰∏äËø∞Ê¶ÇÂøµÂÆö‰πâ‰∫Ü‰∏ÄÁªÑÊìç‰Ωú„ÄÇaffine.for ÊòØ‰∏Ä‰∏™‚Äúfor‚ÄùÂæ™ÁéØÔºåÂÖ∂Âæ™ÁéØ‰∏çÂèòÁöÑ‰∏ãÁïåÂíå‰∏äÁïåË°®Á§∫‰∏∫Â∏¶ÊúâÂ∏∏ÈáèÊ≠•ÈïøÁöÑ‰ªøÂ∞ÑÊò†Â∞Ñ„ÄÇaffine.parallel ÊòØ‰∏Ä‰∏™‚ÄúÂ§öÈáçfor‚ÄùÂæ™ÁéØÂµåÂ•óÔºåÂÖ∂Ëø≠‰ª£ÂèØ‰ª•Âπ∂ÂèëÊâßË°å„ÄÇËøô‰∏§ÁßçÂæ™ÁéØÈÉΩÊîØÊåÅÈÄöËøáÂæ™ÁéØ‰º†ÈÄíÂÄºËøõË°åÂΩíÁ∫¶Ôºå‰ª•Âèä max(min) Ë°®ËææÂºèÁöÑ‰∏ãÔºà‰∏äÔºâÁïå„ÄÇaffine.if ÊòØ‰∏Ä‰∏™Êù°‰ª∂ÊûÑÈÄ†ÔºåÂ∏¶Êúâ‰∏Ä‰∏™ÂèØÈÄâÁöÑ else Âå∫ÂüüÔºåÊù°‰ª∂Ë¢´ÂÆö‰πâ‰∏∫ÁªôÂÆöÂÄºÂåÖÂê´Âú®‰∏Ä‰∏™Êï¥Êï∞ÈõÜ‰∏≠„ÄÇÊúÄÂêéÔºåaffine.load Âíå affine.store Ë°®Á§∫ÂÜÖÂ≠òËÆøÈóÆÔºåÂÖ∂‰∏≠Âú∞ÂùÄËÆ°ÁÆóË°®Á§∫‰∏∫‰ªøÂ∞ÑÊò†Â∞Ñ„ÄÇÊ†∏ÂøÉÁöÑ MLIR Á±ªÂûã‚Äî‚ÄîÂÜÖÂ≠òÂºïÁî®ÔºàmemrefÔºâÔºå‰ª•ÂèäÁõ∏Â∫îÁöÑ memref ÊñπË®Ä‰πüÂú®Âõæ 3 ‰∏≠Â±ïÁ§∫„ÄÇmemref Á±ªÂûãÊèèËø∞‰∫ÜÊåáÂêëÂÜÖÂ≠òÁöÑÁªìÊûÑÂåñÂ§öÁ¥¢ÂºïÊåáÈíàÔºå‰æãÂ¶ÇÔºåmemref Ë°®Á§∫‰∏Ä‰∏™ÊµÆÁÇπÂÖÉÁ¥†ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑÔºõËÄå memref ÊñπË®ÄÊèê‰æõ‰∫ÜÂÜÖÂ≠òÂíåÁ±ªÂûãÊìç‰ΩúÔºå‰æãÂ¶Ç memref.dim Ê£ÄÁ¥¢ memref ÂØπË±°ÁöÑÁª¥Â∫¶„ÄÇmemref ‰∏çÂÖÅËÆ∏ÂÜÖÈÉ®Âà´ÂêçÔºåÂç≥‰∏çÂêåÁöÑ‰∏ãÊ†áÂßãÁªàÊåáÂêë‰∏çÂêåÁöÑÂú∞ÂùÄ„ÄÇËøôÊúâÊïàÂú∞Ëß£ÂÜ≥‰∫ÜÈôêÂà∂Â§öÈù¢‰ΩìÊäÄÊúØÂú® LLVM IR Á∫ßÂà´Â∫îÁî®ÁöÑÂéªÁ∫øÊÄßÂåñÈóÆÈ¢ò [9]„ÄÇÂú®Êú¨Êñá‰∏≠ÔºåÊàë‰ª¨Âè™ËÄÉËôë‰∏éÂÖºÂÆπ C ABIÔºàÂ∫îÁî®Á®ãÂ∫è‰∫åËøõÂà∂Êé•Âè£ÔºâÁöÑËøûÁª≠Ë°å‰∏ªÂ≠òÂÇ®ÂØπÂ∫îÁöÑÈªòËÆ§Â∏ÉÂ±ÄÁöÑ memrefs„ÄÇÂÆûÈôÖ‰∏äÔºåmemrefs ÊîØÊåÅÂèØ‰Ωú‰∏∫‰ªøÂ∞ÑÊò†Â∞ÑË°®ËææÁöÑ‰ªªÊÑèÂ∏ÉÂ±ÄÔºå‰ΩÜÂú® Polygeist ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåËøô‰∫õÂπ∂‰∏çÊòØÂøÖÈúÄÁöÑ„ÄÇ # C. Other Relevant Core Dialects MLIR provides several dozen dialects. Out of those, only a handful are relevant for our discussion: ‚Ä¢ The Structured Control Flow (scf) dialect defines the control flow operations such as loops and conditionals that are not constrained by affine categorization rules. For example, the scf.for loop accepts any integer value as loop bounds, which are not necessarily affine expressions. ‚Ä¢ The Standard (std) dialect contains common operations such as integer and float arithmetic, which is used as a common lowering point from higher-level dialects before fanning out into multiple target dialects and can be seen as a generalization of LLVM IR [16]. ‚Ä¢ The LLVM dialect directly maps from LLVM IR instructions and types to MLIR, primarily to simplify the translation between them. ‚Ä¢ The OpenMP dialect provides a dialect-and platformagnostic representation of OpenMP directives such as \"parallel\" and \"workshare loop\", which can be used to transform OpenMP constructs or emit LLVM IR that interacts with the OpenMP runtime. ‚Ä¢ The Math dialect groups together mathematical operations on integer and floating type beyond simple arithmetic, e.g., math.pow or math.sqrt. MLIRÊèê‰æõ‰∫ÜÂá†ÂçÅÁßçÊñπË®Ä„ÄÇÂú®Ëøô‰∫õÊñπË®Ä‰∏≠ÔºåÂè™ÊúâÂ∞ëÊï∞Âá†Áßç‰∏éÊàë‰ª¨ÁöÑËÆ®ËÆ∫Áõ∏ÂÖ≥Ôºö ÁªìÊûÑÂåñÊéßÂà∂ÊµÅÔºàscfÔºâÊñπË®ÄÂÆö‰πâ‰∫ÜÊéßÂà∂ÊµÅÊìç‰ΩúÔºå‰æãÂ¶ÇÂæ™ÁéØÂíåÊù°‰ª∂ËØ≠Âè•ÔºåËøô‰∫õÊìç‰Ωú‰∏çÂèó‰ªøÂ∞ÑÂàÜÁ±ªËßÑÂàôÁöÑÈôêÂà∂„ÄÇ‰æãÂ¶ÇÔºåscf.for Âæ™ÁéØÂèØ‰ª•Êé•Âèó‰ªª‰ΩïÊï¥Êï∞ÂÄº‰Ωú‰∏∫Âæ™ÁéØËæπÁïåÔºåËøô‰∫õËæπÁïå‰∏ç‰∏ÄÂÆöÊòØ‰ªøÂ∞ÑË°®ËææÂºè„ÄÇ Ê†áÂáÜÔºàstdÔºâÊñπË®ÄÂåÖÂê´Â∏∏ËßÅÁöÑÊìç‰ΩúÔºå‰æãÂ¶ÇÊï¥Êï∞ÂíåÊµÆÁÇπÁÆóÊúØÔºåËøôË¢´Áî®‰Ωú‰ªéÊõ¥È´òÁ∫ßÂà´ÊñπË®ÄÂà∞Â§ö‰∏™ÁõÆÊ†áÊñπË®ÄÁöÑÂÖ±ÂêåÈôç‰ΩéÁÇπÔºåÂèØ‰ª•ËßÜ‰∏∫LLVM IRÁöÑÊ¶ÇÊã¨[16]„ÄÇ LLVMÊñπË®ÄÁõ¥Êé•Â∞ÜLLVM IRÊåá‰ª§ÂíåÁ±ªÂûãÊò†Â∞ÑÂà∞MLIRÔºå‰∏ªË¶ÅÊòØ‰∏∫‰∫ÜÁÆÄÂåñÂÆÉ‰ª¨‰πãÈó¥ÁöÑËΩ¨Êç¢„ÄÇ OpenMPÊñπË®ÄÊèê‰æõ‰∫Ü‰∏ÄÁßç‰∏éÊñπË®ÄÂíåÂπ≥Âè∞Êó†ÂÖ≥ÁöÑOpenMPÊåá‰ª§Ë°®Á§∫Ôºå‰æãÂ¶Ç‚Äúparallel‚ÄùÂíå‚Äúworkshare loop‚ÄùÔºåÂèØÁî®‰∫éËΩ¨Êç¢OpenMPÊûÑÈÄ†ÊàñÁîüÊàê‰∏éOpenMPËøêË°åÊó∂‰∫§‰∫íÁöÑLLVM IR„ÄÇ Êï∞Â≠¶ÊñπË®ÄÂ∞ÜÊï¥Êï∞ÂíåÊµÆÁÇπÁ±ªÂûã‰∏äÁöÑÊï∞Â≠¶Êìç‰ΩúÔºàË∂ÖÂá∫ÁÆÄÂçïÁÆóÊúØÔºâÂΩí‰∏∫‰∏ÄÁªÑÔºå‰æãÂ¶ÇÔºåmath.powÊàñmath.sqrt„ÄÇ # III. AN (AFFINE) MLIR COMPILATION PIPELINE The Polygeist pipeline consists of 4 components (Figure 1): 4). This allows Polygeist to preserve more of the structure available within the original program (e.g., multi-dimensional arrays) and enables interaction with MLIR's high-level memory operations. This diverges from the C ABI for any functions with pointer arguments and wouldn't interface correctly with C functions. Polygeist addresses this by providing an attribute for function arguments and allocations to use a C-compatible pointer type rather than memref, applied by default to external functions such as strcmp and scanf. When calling a pointer-ABI function with a memref-ABI argument, Polygeist generates wrapper code that recovers the C ABI-compatible pointer from memref and ensures the correct result. Figure 5 shows an example demonstrating how the Polygeist and C ABI may interact for a small program. When allocating and deallocating memory, this difference in ABI becomes significant. This is because allocating several bytes of an array with malloc then casting to a memref will not result in legal code (as memref itself may not be implemented with a raw pointer). Thus, Polygeist identifies calls to allocation and deallocation functions and replaces them with legal equivalents for memref. Functions and global variables are emitted using the same name used by the C or C++ ABI. This ensures that all external values are loaded correctly, and multi-versioned functions (such as those generated by C++ templates or overloading) have distinct names and definitions. c) Instruction Generation: For most instructions, Polygeist directly emits an MLIR operation corresponding to the equivalent C operation (addi for integer add, call for function call, etc.). For some special instructions such as a call to pow, Polygeist chooses to emit a specific MLIR operation in the Math dialect, instead of a call to an external function (defined in libm). This permits such instructions to be better analyzed and optimized within MLIR. Operations that involve memory or pointer arithmetic require additional handling. MLIR does not have a generic pointer arithmetic instruction; instead, it requires that load and store operations contain all of the indices being looked up. This presents issues for operations that perform pointer arithmetic. To remedy this, we introduce a temporary subindex operation for memref's keeps track of the additional address offsets. A subsequent optimization pass within Polygeist, forwards the offsets in a subindex to any load or store which uses them. d) Local Variables: Local variables are handled by allocating a memref on stack at the top of a function. This permits the desired semantics of C or C++ to be implemented with relative ease. However, as many local variables and arguments contain memref types, this immediately results in a memref of a memref-a hindrance for most MLIR optimizations as it is illegal outside of Polygeist. As a remedy, we implement a heavyweight memory-to-register (mem2reg) transformation pass that eliminates unnecessary loads, stores, and allocations within MLIR constructs. Empirically this eliminates all memrefs of memref in the Polybench suite. III. ‰∏Ä‰∏™Ôºà‰ªøÂ∞ÑÔºâMLIRÁºñËØëÊµÅÁ®ã PolygeistÁºñËØëÊµÅÁ®ãÁî±4‰∏™ÁªÑ‰ª∂ÁªÑÊàêÔºàËßÅÂõæ1Ôºâ„ÄÇËøô‰ΩøÂæóPolygeistËÉΩÂ§ü‰øùÁïôÂéüÂßãÁ®ãÂ∫è‰∏≠ÂèØÁî®ÁöÑÊõ¥Â§öÁªìÊûÑÔºà‰æãÂ¶ÇÔºåÂ§öÁª¥Êï∞ÁªÑÔºâÔºåÂπ∂ËÉΩÂ§ü‰∏éMLIRÁöÑÈ´òÁ∫ßÂÜÖÂ≠òÊìç‰ΩúËøõË°å‰∫§‰∫í„ÄÇËøô‰∏é‰ªª‰ΩïÂÖ∑ÊúâÊåáÈíàÂèÇÊï∞ÁöÑC ABI‰∏çÂêåÔºåÂπ∂‰∏î‰∏éCÂáΩÊï∞ÁöÑÊé•Âè£‰∏ç‰∏ÄËá¥„ÄÇPolygeistÈÄöËøá‰∏∫ÂáΩÊï∞ÂèÇÊï∞ÂíåÂàÜÈÖçÊèê‰æõ‰∏Ä‰∏™Â±ûÊÄßÔºå‰ΩøÂÖ∂‰ΩøÁî®‰∏éCÂÖºÂÆπÁöÑÊåáÈíàÁ±ªÂûãÔºåËÄå‰∏çÊòØmemrefÔºåÈªòËÆ§ÈÄÇÁî®‰∫éÂ§ñÈÉ®ÂáΩÊï∞ÔºåÂ¶ÇstrcmpÂíåscanf„ÄÇÂΩì‰ΩøÁî®memref ABIÂèÇÊï∞Ë∞ÉÁî®ÊåáÈíà ABIÂáΩÊï∞Êó∂ÔºåPolygeistÁîüÊàêÂåÖË£Ö‰ª£Á†ÅÔºå‰ªémemref‰∏≠ÊÅ¢Â§ç‰∏éC ABIÂÖºÂÆπÁöÑÊåáÈíàÔºåÂπ∂Á°Æ‰øùÁªìÊûúÊ≠£Á°Æ„ÄÇÂõæ5Â±ïÁ§∫‰∫Ü‰∏Ä‰∏™Á§∫‰æãÔºåÊºîÁ§∫‰∫ÜPolygeist‰∏éC ABIÂú®‰∏Ä‰∏™Â∞èÁ®ãÂ∫è‰∏≠ÁöÑ‰∫íÂä®„ÄÇ Âú®ÂàÜÈÖçÂíåÈáäÊîæÂÜÖÂ≠òÊó∂ÔºåËøôÁßçABIÁöÑÂ∑ÆÂºÇÊòæÂæóÂ∞§‰∏∫ÈáçË¶Å„ÄÇËøôÊòØÂõ†‰∏∫‰ΩøÁî®mallocÂàÜÈÖçÊï∞ÁªÑÁöÑÂá†‰∏™Â≠óËäÇÂêéÔºåÂÜçÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫memrefÂ∞Ü‰∏ç‰ºö‰∫ßÁîüÂêàÊ≥ï‰ª£Á†ÅÔºàÂõ†‰∏∫memrefÊú¨Ë∫´ÂèØËÉΩ‰∏çÊòØÁî®ÂéüÂßãÊåáÈíàÂÆûÁé∞ÁöÑÔºâ„ÄÇÂõ†Ê≠§ÔºåPolygeistËØÜÂà´ÂØπÂàÜÈÖçÂíåÈáäÊîæÂáΩÊï∞ÁöÑË∞ÉÁî®ÔºåÂπ∂Â∞ÜÂÖ∂ÊõøÊç¢‰∏∫memrefÁöÑÂêàÊ≥ïÁ≠âÊïàÂáΩÊï∞„ÄÇ ÂáΩÊï∞ÂíåÂÖ®Â±ÄÂèòÈáè‰ΩøÁî®CÊàñC++ ABI‰∏≠‰ΩøÁî®ÁöÑÁõ∏ÂêåÂêçÁß∞ÂèëÂá∫„ÄÇËøôÁ°Æ‰øùÊâÄÊúâÂ§ñÈÉ®ÂÄºÈÉΩË¢´Ê≠£Á°ÆÂä†ËΩΩÔºåÂπ∂‰∏îÂ§öÁâàÊú¨ÂáΩÊï∞ÔºàÂ¶ÇC++Ê®°ÊùøÊàñÈáçËΩΩÁîüÊàêÁöÑÂáΩÊï∞ÔºâÊã•Êúâ‰∏çÂêåÁöÑÂêçÁß∞ÂíåÂÆö‰πâ„ÄÇ c) Êåá‰ª§ÁîüÊàêÔºöÂØπ‰∫éÂ§ßÂ§öÊï∞Êåá‰ª§ÔºåPolygeistÁõ¥Êé•ÂèëÂá∫‰∏éÁ≠âÊïàCÊìç‰ΩúÁõ∏ÂØπÂ∫îÁöÑMLIRÊìç‰ΩúÔºàÂ¶ÇÊï¥Êï∞Âä†Ê≥ïÁöÑaddiÔºåÂáΩÊï∞Ë∞ÉÁî®ÁöÑcallÁ≠âÔºâ„ÄÇÂØπ‰∫éÊüê‰∫õÁâπÊÆäÊåá‰ª§ÔºåÂ¶ÇÂØπpowÁöÑË∞ÉÁî®ÔºåPolygeistÈÄâÊã©ÂèëÂá∫MathÊñπË®Ä‰∏≠ÁâπÂÆöÁöÑMLIRÊìç‰ΩúÔºåËÄå‰∏çÊòØË∞ÉÁî®Â§ñÈÉ®ÂáΩÊï∞ÔºàÂú®libm‰∏≠ÂÆö‰πâÔºâ„ÄÇËøô‰ΩøÂæóËøô‰∫õÊåá‰ª§ËÉΩÂ§üÂú®MLIR‰∏≠Êõ¥Â•ΩÂú∞ËøõË°åÂàÜÊûêÂíå‰ºòÂåñ„ÄÇ Ê∂âÂèäÂÜÖÂ≠òÊàñÊåáÈíàÁÆóÊúØÁöÑÊìç‰ΩúÈúÄË¶ÅÈ¢ùÂ§ñÂ§ÑÁêÜ„ÄÇMLIRÊ≤°ÊúâÈÄöÁî®ÁöÑÊåáÈíàÁÆóÊúØÊåá‰ª§ÔºõÁõ∏ÂèçÔºåÂÆÉË¶ÅÊ±ÇloadÂíåstoreÊìç‰ΩúÂåÖÂê´ÊâÄÊúâË¢´Êü•ÊâæÁöÑÁ¥¢Âºï„ÄÇËøô‰∏∫ÊâßË°åÊåáÈíàÁÆóÊúØÁöÑÊìç‰ΩúÂ∏¶Êù•‰∫ÜÈóÆÈ¢ò„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÂºïÂÖ•‰∫Ü‰∏Ä‰∏™‰∏¥Êó∂Â≠êÁ¥¢ÂºïÊìç‰ΩúÔºåÁî®‰∫émemrefÔºå‰ª•Ë∑üË∏™ÈôÑÂä†ÁöÑÂú∞ÂùÄÂÅèÁßª„ÄÇÂú®Polygeist‰∏≠ÁöÑÂêéÁª≠‰ºòÂåñËøáÁ®ã‰∏≠ÔºåÂ∞ÜÂ≠êÁ¥¢Âºï‰∏≠ÁöÑÂÅèÁßªÈáèËΩ¨ÂèëÁªô‰ªª‰Ωï‰ΩøÁî®ÂÆÉ‰ª¨ÁöÑloadÊàñstore„ÄÇ d) Â±ÄÈÉ®ÂèòÈáèÔºöÂ±ÄÈÉ®ÂèòÈáèÈÄöËøáÂú®ÂáΩÊï∞È°∂ÈÉ®ÂàÜÈÖç‰∏Ä‰∏™memrefÂú®Ê†à‰∏äËøõË°åÂ§ÑÁêÜ„ÄÇËøô‰ΩøÂæóCÊàñC++ÁöÑÊâÄÈúÄËØ≠‰πâËÉΩÂ§üÁõ∏ÂØπÂÆπÊòìÂú∞ÂÆûÁé∞„ÄÇÁÑ∂ËÄåÔºåÁî±‰∫éËÆ∏Â§öÂ±ÄÈÉ®ÂèòÈáèÂíåÂèÇÊï∞ÂåÖÂê´memrefÁ±ªÂûãÔºåËøôÁ´ãÂç≥ÂØºËá¥‰∫ÜmemrefÁöÑmemref-ËøôÂØπÂ§ßÂ§öÊï∞MLIR‰ºòÂåñÊù•ËØ¥ÊòØ‰∏Ä‰∏™ÈöúÁ¢çÔºåÂõ†‰∏∫Âú®Polygeist‰πãÂ§ñËøôÊòØ‰∏çÂêàÊ≥ïÁöÑ„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÊàë‰ª¨ÂÆûÁé∞‰∫Ü‰∏Ä‰∏™ÈáçÈáèÁ∫ßÁöÑÂÜÖÂ≠òÂà∞ÂØÑÂ≠òÂô®Ôºàmem2regÔºâËΩ¨Êç¢ËøáÁ®ãÔºåËØ•ËøáÁ®ãÊ∂àÈô§‰∫ÜMLIRÊûÑÈÄ†‰∏≠ÁöÑ‰∏çÂøÖË¶ÅÁöÑÂä†ËΩΩ„ÄÅÂ≠òÂÇ®ÂíåÂàÜÈÖç„ÄÇÊ†πÊçÆÁªèÈ™åÔºåËøôÊ∂àÈô§‰∫ÜPolybenchÂ•ó‰ª∂‰∏≠ÊâÄÊúâmemrefÁöÑmemref„ÄÇ # B. Raising to Affine The translation from C or C++ to MLIR directly preserves high-level information about loop structure and n-D arrays, but does not generate other Affine operations. Polygeist subsequently raises memory, conditional, and looping operations into their Affine dialect counterparts if it can prove them to be legal affine operations. If the corresponding frontend code was enclosed within #pragma scop, Polygeist assumes it is always legal to raise all operations within that region without additional checks. 1 Any operations which are not proven or assumed to be affine remain untouched. We perform simplifications on affine maps to remove loops with zero or one iteration and drop branches of a conditional with a condition known at compile time. Â∞ÜCÊàñC++Áõ¥Êé•ÁøªËØë‰∏∫MLIRËÉΩÂ§ü‰øùÁïôÂÖ≥‰∫éÂæ™ÁéØÁªìÊûÑÂíånÁª¥Êï∞ÁªÑÁöÑÈ´òÁ∫ß‰ø°ÊÅØÔºå‰ΩÜ‰∏ç‰ºöÁîüÊàêÂÖ∂‰ªñÁöÑ‰ªøÂ∞ÑÊìç‰Ωú„ÄÇ‰πãÂêéÔºåPolygeistÂ∞ÜÂÜÖÂ≠ò„ÄÅÊù°‰ª∂ÂíåÂæ™ÁéØÊìç‰ΩúÊèêÂçáËá≥ÂÖ∂‰ªøÂ∞ÑÊñπË®ÄÂØπÂ∫îÁâ©ÔºåÂ¶ÇÊûúÂÆÉËÉΩÂ§üËØÅÊòéËøô‰∫õÊìç‰ΩúÊòØÂêàÊ≥ïÁöÑ‰ªøÂ∞ÑÊìç‰Ωú„ÄÇÂ¶ÇÊûúÁõ∏Â∫îÁöÑÂâçÁ´Ø‰ª£Á†ÅË¢´ÂåÖË£πÂú®#pragma scop‰∏≠ÔºåPolygeistÂÅáËÆæÂú®ËØ•Âå∫ÂüüÂÜÖÊèêÂçáÊâÄÊúâÊìç‰ΩúÊòØÂßãÁªàÂêàÊ≥ïÁöÑÔºå‰∏îÊó†ÈúÄÈ¢ùÂ§ñÊ£ÄÊü•„ÄÇÂØπ‰∫é‰ªª‰ΩïÊú™Ë¢´ËØÅÊòéÊàñÂÅáËÆæ‰∏∫‰ªøÂ∞ÑÁöÑÊìç‰ΩúÔºåÂàô‰øùÊåÅ‰∏çÂèò„ÄÇÊàë‰ª¨ÂØπ‰ªøÂ∞ÑÊò†Â∞ÑËøõË°åÁÆÄÂåñÔºå‰ª•ÂéªÈô§ÂÖ∑ÊúâÈõ∂Ê¨°Êàñ‰∏ÄÊ¨°Ëø≠‰ª£ÁöÑÂæ™ÁéØÔºåÂπ∂Âà†Èô§Âú®ÁºñËØëÊó∂Â∑≤Áü•Êù°‰ª∂ÁöÑÊù°‰ª∂ËØ≠Âè•ÁöÑÂàÜÊîØ„ÄÇ # a) Memory operations and loop bounds: To convert an operation, Polygeist replaces its bound and subscript operands with identity affine maps (affine_map(s0)>[%bound]). It then folds the operations computing the map operands, e.g., addi, muli, into the map itself. Values that are transitively derived from loop induction variables become map dimensions and other values become symbols. For example, affine_map(s0)> [%bound] with %bound = addi %N, %i, where %i is an induction variable, is folded into affine_map(s0 + d0)>(%i)[%N]. The process terminates when no operations can be folded or when Affine value categorization rules are satisfied. b) Conditionals: Conditional operations are emitted by the frontend for two input code patterns: if conditions and ternary expressions. The condition is transformed by introducing an integer set and by folding the operands into it similarly to the affine maps, with in addition and operations separating set constraints and not operations inverting them (affine.if only accepts ‚â• 0 and = 0 constraints). Polygeist processes nested conditionals with C-style shortcircuit semantics, in which the subsequent conditions are checked within the body of the preceding conditionals, by hoisting conditions outside the outermost conditional when legal and replacing them with a boolean operation or a select. This is always legal within #pragma scop. Conditionals emitted for ternary expressions often involve memory loads in their regions, which prevent hoisting due to side effects. We reuse our mem2reg pass to replace those to equivalent earlier loads when possible to enable hoisting. Empirically, this is sufficient to process all ternary expressions in the Polybench/C suite [19]. Otherwise, ternary expressions would need to be packed into a single statement by the downstream polyhedral pass. a) ÂÜÖÂ≠òÊìç‰ΩúÂíåÂæ™ÁéØËæπÁïåÔºö‰∏∫‰∫ÜËΩ¨Êç¢‰∏Ä‰∏™Êìç‰ΩúÔºåPolygeist Áî®ÊÅíÁ≠â‰ªøÂ∞ÑÊò†Â∞ÑÔºàaffine_map(s0)>[%bound]ÔºâÊõøÊç¢ÂÖ∂ËæπÁïåÂíå‰∏ãÊ†áÊìç‰ΩúÊï∞„ÄÇÂÆÉÁÑ∂ÂêéÂ∞ÜËÆ°ÁÆóÊò†Â∞ÑÊìç‰ΩúÊï∞ÁöÑÊìç‰ΩúÔºå‰æãÂ¶ÇÂä†Ê≥ïÔºàaddiÔºâ„ÄÅ‰πòÊ≥ïÔºàmuliÔºâÔºåÊäòÂè†Âà∞Êò†Â∞ÑÊú¨Ë∫´‰∏≠„ÄÇ‰ªéÂæ™ÁéØÂΩíÁ∫≥ÂèòÈáè‰º†ÈÄíÂæóÂá∫ÁöÑÂÄºÂèòÊàê‰∫ÜÊò†Â∞ÑÁª¥Â∫¶ÔºåÂÖ∂‰ªñÂÄºÂàôÂèòÊàêÁ¨¶Âè∑„ÄÇ‰æãÂ¶ÇÔºåaffine_map(s0)> [%bound] Âú® %bound = addi %N, %i ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÖ∂‰∏≠ %i ÊòØ‰∏Ä‰∏™ÂΩíÁ∫≥ÂèòÈáèÔºåË¢´ÊäòÂè†‰∏∫ affine_map(s0 + d0)>(%i)[%N]„ÄÇËØ•ËøáÁ®ãÂú®Êó†Ê≥ïÂÜçÊäòÂè†Êìç‰ΩúÊàñÊª°Ë∂≥‰ªøÂ∞ÑÂÄºÂàÜÁ±ªËßÑÂàôÊó∂ÁªàÊ≠¢„ÄÇ b) Êù°‰ª∂ËØ≠Âè•ÔºöÂâçÁ´Ø‰∏∫‰∏§ÁßçËæìÂÖ•‰ª£Á†ÅÊ®°ÂºèÔºàif Êù°‰ª∂Âíå‰∏âÂÖÉË°®ËææÂºèÔºâÁîüÊàêÊù°‰ª∂Êìç‰Ωú„ÄÇÊù°‰ª∂ÈÄöËøáÂºïÂÖ•Êï¥Êï∞ÈõÜÂêàÂπ∂Â∞ÜÊìç‰ΩúÊï∞ÊäòÂè†Âà∞ÂÖ∂‰∏≠ËøõË°åËΩ¨Êç¢ÔºåÁ±ª‰ºº‰∫é‰ªøÂ∞ÑÊò†Â∞ÑÔºåÊ≠§Â§ñÔºåÊìç‰Ωú‰πãÈó¥ÁöÑÂä†Ê≥ïÂíåËøêÁÆóÂàÜÈöîÈõÜÂêàÁ∫¶ÊùüÔºåËÄåÈùûËøêÁÆóÂàôÂØπÂÖ∂ËøõË°åÂèçËΩ¨Ôºàaffine.if ‰ªÖÊé•Âèó ‚â• 0 Âíå = 0 ÁöÑÁ∫¶ÊùüÔºâ„ÄÇPolygeist Â§ÑÁêÜÂµåÂ•óÊù°‰ª∂Êó∂ÈÅµÂæ™ C È£éÊ†ºÁöÑÁü≠Ë∑ØËØ≠‰πâÔºåÂÖ∂‰∏≠ÂêéÁª≠Êù°‰ª∂Âú®ÂâçÈù¢Êù°‰ª∂ÁöÑ‰∏ª‰ΩìÂÜÖËøõË°åÊ£ÄÊü•ÔºåÂΩìÊ≥ïÂæãÂÖÅËÆ∏Êó∂ÔºåÂ∞ÜÊù°‰ª∂ÊèêÂçáÂà∞ÊúÄÂ§ñÂ±ÇÊù°‰ª∂‰πãÂ§ñÔºåÂπ∂Áî®Â∏ÉÂ∞îÊìç‰ΩúÊàñÈÄâÊã©Êìç‰ΩúÊõøÊç¢ÂÆÉ‰ª¨„ÄÇÂú® #pragma scop ÂÜÖÔºåËøôÊÄªÊòØÂêàÊ≥ïÁöÑ„ÄÇ ‰∏∫‰∏âÂÖÉË°®ËææÂºèÁîüÊàêÁöÑÊù°‰ª∂ËØ≠Âè•ÈÄöÂ∏∏Ê∂âÂèäÂÖ∂Âå∫ÂüüÂÜÖÁöÑÂÜÖÂ≠òÂä†ËΩΩÔºåÁî±‰∫éÂâØ‰ΩúÁî®ÔºåÂØºËá¥Êó†Ê≥ïÊèêÂçá„ÄÇÊàë‰ª¨ÈáçÁî® mem2reg ÈÄöÈÅìÔºåÂú®ÂèØËÉΩÁöÑÊÉÖÂÜµ‰∏ãÂ∞ÜÂÖ∂ÊõøÊç¢‰∏∫Á≠âÊïàÁöÑÊó©ÊúüÂä†ËΩΩÔºå‰ª•ÂÆûÁé∞ÊèêÂçá„ÄÇ‰ªéÁªèÈ™å‰∏äÁúãÔºåËøôË∂≥‰ª•Â§ÑÁêÜ Polybench/C Â•ó‰ª∂‰∏≠ÁöÑÊâÄÊúâ‰∏âÂÖÉË°®ËææÂºè [19]„ÄÇÂê¶ÂàôÔºå‰∏âÂÖÉË°®ËææÂºèÂ∞ÜÈúÄË¶ÅË¢´‰∏ãÊ∏∏Â§öÈù¢‰ΩìÈÄöÈÅìÊâìÂåÖÊàêÂçï‰∏™ËØ≠Âè•„ÄÇ # C. Connecting MLIR to Polyhedral Tools Part-1 Regions of the input program expressed using MLIR Affine dialect are amenable to the polyhedral model. Existing tools, however, cannot directly consume MLIR. We chose to implement a bi-directional conversion to and from OpenScop [20], an exchange format readily consumable by numerous polyhedral tools, including Pluto [11], and further convertible to isl [21] representation. This allows Polygeist to seamlessly connect with tools created in polyhedral compilation research without having to amend those tools to support MLIR. Most polyhedral tools are designed to operate on C or FORTRAN inputs build around statements, which do not have a direct equivalent in MLIR. Therefore, we design a mechanism to create statement-like structure from chains of MLIR void setArray(int N, double val, double array) {...} int main(int argc, char * argv) { ... cmp = strcmp(str1, str2) ... double array [10]; setArray(10, 42.0, array) } ‚áì func @setArray(%N: i32, %val: f64, %array: memref) { %0 = index_cast %N : i32 to index affine.for %i = 0 to %0 { affine.store %val, %array[%i] : memref } return } func @main(%argc: i32, %argv: !llvm.ptr>) -> i32 { ... %cmp = llvm.call @strcmp(%str1, %str2) : (!llvm.ptr, !llvm.ptr) -> !llvm.i32 ... %array = memref.alloca() : memref %arraycst = memref.cast %array : memref to memref %val = constant 42.0 : f64 call @setArray(%N, %val, %arraycst) : (i32, f64, memref) -> () } Fig. 5. Example demonstrating Polygeist ABI. For functions expected to be compiled with Polygeist such as setArray, pointer arguments are replaced with memref's. For functions that require external calling conventions (such as main/strcmp), Polygeist falls back to emitting llvm.ptr and generates conversion code. operations. We further demonstrate that this gives Polygeist an ability to favorably affect the behavior of the polyhedral scheduler by controlling statement granularity (Section III-D). ËæìÂÖ•Á®ãÂ∫è‰∏≠‰ΩøÁî® MLIR Affine ÊñπË®ÄË°®ËææÁöÑÂå∫ÂüüÈÄÇÁî®‰∫éÂ§öÈù¢‰ΩìÊ®°Âûã„ÄÇÁÑ∂ËÄåÔºåÁé∞ÊúâÂ∑•ÂÖ∑Êó†Ê≥ïÁõ¥Êé•‰ΩøÁî® MLIR„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ÈÄâÊã©ÂÆûÁé∞‰∏é OpenScop [20] ÁöÑÂèåÂêëËΩ¨Êç¢ÔºåËøôÊòØ‰∏ÄÁßçÂèØË¢´‰ºóÂ§öÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Áõ¥Êé•‰ΩøÁî®ÁöÑ‰∫§Êç¢Ê†ºÂºèÔºåÂåÖÊã¨ Pluto [11]ÔºåÂπ∂‰∏îËøõ‰∏ÄÊ≠•ÂèØËΩ¨Êç¢‰∏∫ isl [21] Ë°®Á§∫„ÄÇËøô‰ΩøÂæó Polygeist ËÉΩÂ§ü‰∏éÂú®Â§öÈù¢‰ΩìÁºñËØëÁ†îÁ©∂‰∏≠ÂàõÂª∫ÁöÑÂ∑•ÂÖ∑Êó†ÁºùËøûÊé•ÔºåËÄåÊó†ÈúÄ‰øÆÊîπËøô‰∫õÂ∑•ÂÖ∑‰ª•ÊîØÊåÅ MLIR„ÄÇ Â§ßÂ§öÊï∞Â§öÈù¢‰ΩìÂ∑•ÂÖ∑ËÆæËÆ°Áî®‰∫éÂ§ÑÁêÜ‰ª•ËØ≠Âè•‰∏∫Âü∫Á°ÄÁöÑ C Êàñ FORTRAN ËæìÂÖ•ÔºåËÄåÂÆÉ‰ª¨Âú® MLIR ‰∏≠Âπ∂Ê≤°ÊúâÁõ¥Êé•ÂØπÂ∫îÁöÑÁ≠â‰ª∑Áâ©„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ËÆæËÆ°‰∫Ü‰∏ÄÁßçÊú∫Âà∂Ôºå‰ªé‰∏ÄÁ≥ªÂàó MLIR Êìç‰ΩúÂàõÂª∫Á±ª‰ººËØ≠Âè•ÁöÑÁªìÊûÑ„ÄÇ‰æãÂ¶ÇÔºö void setArray(int N, double val, double * array) {...} int main(int argc, char ** argv) { ... cmp = strcmp(str1, str2) ... double array [10]; setArray(10, 42.0, array) } ÂèØËΩ¨Êç¢‰∏∫Ôºö func @setArray(%N: i32, %val: f64, %array: memref) { %0 = index_cast %N : i32 to index affine.for %i = 0 to %0 { affine.store %val, %array[%i] : memref } return } func @main(%argc: i32, %argv: !llvm.ptr>) -> i32 { ... %cmp = llvm.call @strcmp(%str1, %str2) : (!llvm.ptr, !llvm.ptr) -> !llvm.i32 ... %array = memref.alloca() : memref %arraycst = memref.cast %array : memref to memref %val = constant 42.0 : f64 call @setArray(%N, %val, %arraycst) : (i32, f64, memref) -> () } Âõæ 5. Á§∫‰æãÊºîÁ§∫‰∫Ü Polygeist ÁöÑ ABI„ÄÇÂØπ‰∫éÈ¢ÑÊúüË¶ÅÁî± Polygeist ÁºñËØëÁöÑÂáΩÊï∞ÔºàÂ¶Ç setArrayÔºâÔºåÊåáÈíàÂèÇÊï∞Ë¢´ÊõøÊç¢‰∏∫ memref„ÄÇÂØπ‰∫éÈúÄË¶ÅÂ§ñÈÉ®Ë∞ÉÁî®Á∫¶ÂÆöÔºàÂ¶Ç main/strcmpÔºâÁöÑÂáΩÊï∞ÔºåPolygeist ÈÄÄÂõûÂà∞ÂèëÂá∫ llvm.ptr Âπ∂ÁîüÊàêËΩ¨Êç¢‰ª£Á†ÅÁöÑÊñπÂºè„ÄÇ Êàë‰ª¨Ëøõ‰∏ÄÊ≠•ËØÅÊòéÔºåËøô‰ΩøÂæó Polygeist ËÉΩÂ§üÈÄöËøáÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ÔºåÁßØÊûÅÂΩ±ÂìçÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ÁöÑË°å‰∏∫ÔºàËØ¶ËßÅÁ¨¨ III-D ËäÇÔºâ„ÄÇ # C. Connecting MLIR to Polyhedral Tools Part-2 a) Simple Statement Formation: Observing that C statements amenable to the polyhedral model are (mostly) variable assignments, we can derive a mechanism to identify statements from chains of MLIR operations. A store into memory is the last operation of the statement. The backward slice of this operation, i.e., the operations transitively computing its operands, belong to the statement. The slice extension stops at operations producing a value categorized as affine dimension or symbol, directly usable in affine expressions. Such values are loop induction variables or loop-invariant constants. Some operations may end up in multiple statements if the value is used more than once. However, we need the mapping between operations and statements to be bidirectional in order to emit MLIR after the scheduler has restructured the program without considering SSA value visibility rules. If an operation with multiple uses is side effect free, Polygeist simply duplicates it. For operations whose duplication is illegal, Polygeist stores their results in stack-allocated memref's and replaces all further uses with memory loads. Figure 6 illustrates the transformation for value %0 used in operation %20. This creates a new statement. b) Region-Spanning Dependencies: In some cases, a statement may consist of MLIR operations across different (nested) loops, e.g., a load from memory into an SSA register happens in an outer loop while it is used in inner loops. The location of such a statement in the loop hierarchy is unclear. More importantly, it cannot be communicated to the polyhedral scheduler. Polygeist resolves this by storing the value in a stack-allocated memref in the defining region and loading it back in the user regions. Figure 6 illustrates this transformation for value %0 used in operation %10. Similarly to the basic case, this creates a new statement in the outer loop that can be scheduled independently. This approach can be seen as a reg2mem conversion, the inverse of mem2reg performed in the frontend. It only applies to a subset of values, and may be undone after polyhedral scheduling has completed. Furthermore, to decrease the number of dependencies and memory footprint, Polygeist performs a simple value analysis and avoids creating stack-allocated buffers if the same value is already available in another memory location and can be read from there. a) ÁÆÄÂçïËØ≠Âè•ÂΩ¢ÊàêÔºöËßÇÂØüÂà∞Á¨¶ÂêàÂ§öÈù¢‰ΩìÊ®°ÂûãÁöÑCËØ≠Âè•‰∏ªË¶ÅÊòØÂèòÈáèËµãÂÄºÔºåÊàë‰ª¨ÂèØ‰ª•Êé®ÂØºÂá∫‰∏ÄÁßçÊú∫Âà∂Ôºå‰ªéMLIRÊìç‰ΩúÈìæ‰∏≠ËØÜÂà´ËØ≠Âè•„ÄÇÂ≠òÂÇ®Âà∞ÂÜÖÂ≠ò‰∏≠ÁöÑÊìç‰ΩúÊòØËØ•ËØ≠Âè•ÁöÑÊúÄÂêé‰∏Ä‰∏™Êìç‰Ωú„ÄÇËØ•Êìç‰ΩúÁöÑÈÄÜÂêëÂàáÁâáÔºåÂç≥‰º†ÈÄíËÆ°ÁÆóÂÖ∂Êìç‰ΩúÊï∞ÁöÑÊìç‰ΩúÔºåÂ±û‰∫éËØ•ËØ≠Âè•„ÄÇÂàáÁâáÊâ©Â±ïÂú®ÁîüÊàêË¢´ÂàÜÁ±ª‰∏∫‰ªøÂ∞ÑÁª¥Â∫¶ÊàñÁ¨¶Âè∑ÁöÑÂÄºÁöÑÊìç‰ΩúÂ§ÑÂÅúÊ≠¢ÔºåËøô‰∫õÂÄºÂèØ‰ª•Áõ¥Êé•Áî®‰∫é‰ªøÂ∞ÑË°®ËææÂºè„ÄÇÊ≠§Á±ªÂÄºÂåÖÊã¨Âæ™ÁéØÂΩíÁ∫≥ÂèòÈáèÊàñÂæ™ÁéØ‰∏çÂèòÂ∏∏Èáè„ÄÇ‰∏Ä‰∫õÊìç‰ΩúÂèØËÉΩÂá∫Áé∞Âú®Â§ö‰∏™ËØ≠Âè•‰∏≠ÔºåÂ¶ÇÊûúËØ•ÂÄºË¢´Â§öÊ¨°‰ΩøÁî®„ÄÇÁÑ∂ËÄåÔºåÊàë‰ª¨ÈúÄË¶ÅÊìç‰Ωú‰∏éËØ≠Âè•‰πãÈó¥ÁöÑÊò†Â∞ÑÊòØÂèåÂêëÁöÑÔºå‰ª•‰æøÂú®Ë∞ÉÂ∫¶Âô®ÈáçÊñ∞ÁªìÊûÑÂåñÁ®ãÂ∫èÂêéÂèëÂá∫MLIRÔºåËÄå‰∏çËÄÉËôëSSAÂÄºÁöÑÂèØËßÅÊÄßËßÑÂàô„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™Â§öÊ¨°‰ΩøÁî®ÁöÑÊìç‰ΩúÊ≤°ÊúâÂâØ‰ΩúÁî®ÔºåPolygeist‰ºöÁÆÄÂçïÂú∞Â§çÂà∂ÂÆÉ„ÄÇÂØπ‰∫éÈáçÂ§çÊìç‰ΩúÁöÑÂ§çÂà∂‰∏çÂêàÊ≥ïÁöÑÊÉÖÂÜµÔºåPolygeistÂ∞ÜÂÖ∂ÁªìÊûúÂ≠òÂÇ®Âú®Â†ÜÊ†àÂàÜÈÖçÁöÑÂÜÖÂ≠òÂºïÁî®‰∏≠ÔºåÂπ∂Â∞ÜÊâÄÊúâÂêéÁª≠‰ΩøÁî®ÊõøÊç¢‰∏∫ÂÜÖÂ≠òÂä†ËΩΩ„ÄÇÂõæ6Â±ïÁ§∫‰∫ÜÂú®Êìç‰Ωú%20‰∏≠‰ΩøÁî®ÁöÑÂÄº%0ÁöÑËΩ¨Êç¢„ÄÇËøôÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑËØ≠Âè•„ÄÇ b) Ë∑®Âå∫Âüü‰æùËµñÂÖ≥Á≥ªÔºöÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºå‰∏Ä‰∏™ËØ≠Âè•ÂèØËÉΩÁî±‰∏çÂêåÔºàÂµåÂ•óÔºâÂæ™ÁéØ‰∏≠ÁöÑMLIRÊìç‰ΩúÁªÑÊàêÔºå‰æãÂ¶ÇÔºå‰ªéÂÜÖÂ≠òÂä†ËΩΩÂà∞SSAÂØÑÂ≠òÂô®ÁöÑÊìç‰ΩúÂèëÁîüÂú®Â§ñÈÉ®Âæ™ÁéØ‰∏≠ÔºåËÄåÂÆÉÂú®ÂÜÖÈÉ®Âæ™ÁéØ‰∏≠Ë¢´‰ΩøÁî®„ÄÇËØ•ËØ≠Âè•Âú®Âæ™ÁéØÂ±ÇÊ¨°ÁªìÊûÑ‰∏≠ÁöÑ‰ΩçÁΩÆÂπ∂‰∏çÊòéÁ°Æ„ÄÇÊõ¥ÈáçË¶ÅÁöÑÊòØÔºåÊó†Ê≥ïÂ∞ÜÂÖ∂‰º†ËææÁªôÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®„ÄÇPolygeistÈÄöËøáÂú®ÂÆö‰πâÂå∫Âüü‰∏≠Â∞ÜÂÄºÂ≠òÂÇ®Âú®Â†ÜÊ†àÂàÜÈÖçÁöÑÂÜÖÂ≠òÂºïÁî®‰∏≠ÔºåÂπ∂Âú®‰ΩøÁî®Âå∫Âüü‰∏≠Â∞ÜÂÖ∂Âä†ËΩΩÂõûÂéªÔºå‰ªéËÄåËß£ÂÜ≥‰∫ÜËøô‰∏ÄÈóÆÈ¢ò„ÄÇÂõæ6Â±ïÁ§∫‰∫ÜÂú®Êìç‰Ωú%10‰∏≠‰ΩøÁî®ÁöÑÂÄº%0ÁöÑËøôÁßçËΩ¨Êç¢„ÄÇ‰∏éÂü∫Êú¨ÊÉÖÂÜµÁ±ª‰ººÔºåËøôÂú®Â§ñÈÉ®Âæ™ÁéØ‰∏≠ÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑËØ≠Âè•ÔºåÂèØ‰ª•Áã¨Á´ãË∞ÉÂ∫¶„ÄÇËØ•ÊñπÊ≥ïÂèØ‰ª•ËßÜ‰∏∫reg2memËΩ¨Êç¢ÔºåËøôÊòØÂú®ÂâçÁ´ØÊâßË°åÁöÑmem2regÁöÑÂèçÂêëÊìç‰Ωú„ÄÇÂÆÉ‰ªÖÈÄÇÁî®‰∫é‰∏ÄÈÉ®ÂàÜÂÄºÔºåÂπ∂‰∏îÂú®Â§öÈù¢‰ΩìË∞ÉÂ∫¶ÂÆåÊàêÂêéÂèØ‰ª•Êí§ÈîÄ„ÄÇÊ≠§Â§ñÔºå‰∏∫‰∫ÜÂáèÂ∞ë‰æùËµñÂÖ≥Á≥ªÂíåÂÜÖÂ≠òÂç†Áî®ÔºåPolygeistÊâßË°åÁÆÄÂçïÁöÑÂÄºÂàÜÊûêÔºåÂπ∂Âú®Âêå‰∏ÄÂÄºÂú®Âè¶‰∏Ä‰∏™ÂÜÖÂ≠ò‰ΩçÁΩÆÂèØÁî®Âπ∂ËÉΩÂ§ü‰ªéÈÇ£ÈáåËØªÂèñÊó∂ÔºåÈÅøÂÖçÂàõÂª∫Â†ÜÊ†àÂàÜÈÖçÁöÑÁºìÂÜ≤Âå∫„ÄÇ # C. Connecting MLIR to Polyhedral Tools Part-3 c) SCoP Formation: To define a SCoP, we outline individual statements into functions so that they can be represented as opaque calls with known memory footprints, similarly to Pencil [22]. This process also makes the inter-statement SSA dependencies clear. These dependencies exist between calls that use the same SSA value, but there are no values defined by these calls. We lift all local stack allocations and place them at the entry block of the surrounding function in order to keep them visible after loop restructuring. Figure 7 demonstrates the resulting IR. The remaining components of the polyhedral representation are derived as follows: the domain of the statement is defined to be the iteration space of its enclosing loops, constrained by their respective lower and upper bounds, and intersected with any \"if\" conditions. This process leverages the fact that MLIR expresses bounds and conditions directly as affine constructs. The access relations for each statement are obtained as unions of affine maps of the affine.load (read) and affine.store (must-write) operations, with RHS of the relation annotated by an \"array\" that corresponds to the SSA value of the accessed memref. Initial schedules are assigned using the (2d + 1) formalism, with odd dimensions representing the lexical order of loops in the input program and even dimensions being equal to loop induction variables. Affine constructs in OpenScop are represented as lists of linear equality (= 0) or inequality (‚â• 0) coefficients, which matches exactly the internal representation in MLIR, making the conversion straightforward. d) Code Generation Back to MLIR: The Pluto scheduler produces new schedules in OpenScop as a result. Generating loop structure back from affine schedules is a solved, albeit daunting, problem [13], [14]. Polygeist relies on CLooG [13] to generate an initial loop-level AST, which it then converts to Affine dialect loops and conditionals. There is no need to simplify affine expressions at code generation since MLIR accepts them directly and can simplify them at a later stage. Statements are introduced as function calls with rewritten operands and then inlined. c) SCoP ÂΩ¢ÊàêÔºö‰∏∫‰∫ÜÂÆö‰πâ‰∏Ä‰∏™ SCoPÔºåÊàë‰ª¨Â∞ÜÂçïÁã¨ÁöÑËØ≠Âè•ÂàíÂàÜ‰∏∫ÂáΩÊï∞ÔºåËøôÊ†∑ÂÆÉ‰ª¨Â∞±ÂèØ‰ª•Ë¢´Ë°®Á§∫‰∏∫ÂÖ∑ÊúâÂ∑≤Áü•ÂÜÖÂ≠òÂç†Áî®ÁöÑÈÄèÊòéË∞ÉÁî®ÔºåÁ±ª‰ºº‰∫é Pencil [22]„ÄÇËøô‰∏™ËøáÁ®ã‰πü‰ΩøÂæóËØ≠Âè•Èó¥ÁöÑ SSA ‰æùËµñÂÖ≥Á≥ªÂèòÂæóÊ∏ÖÊô∞„ÄÇËøô‰∫õ‰æùËµñÂÖ≥Á≥ªÂ≠òÂú®‰∫é‰ΩøÁî®Áõ∏Âêå SSA ÂÄºÁöÑË∞ÉÁî®‰πãÈó¥Ôºå‰ΩÜËøô‰∫õË∞ÉÁî®Ê≤°ÊúâÂÆö‰πâ‰ªª‰ΩïÂÄº„ÄÇÊàë‰ª¨ÊèêÂçáÊâÄÊúâÂ±ÄÈÉ®Ê†àÂàÜÈÖçÔºåÂπ∂Â∞ÜÂÆÉ‰ª¨ÊîæÁΩÆÂú®Âë®Âõ¥ÂáΩÊï∞ÁöÑÂÖ•Âè£Âùó‰∏≠Ôºå‰ª•‰øùÊåÅÂÆÉ‰ª¨Âú®Âæ™ÁéØÈáçÊûÑÂêé‰ªçÁÑ∂ÂèØËßÅ„ÄÇÂõæ 7 Â±ïÁ§∫‰∫ÜÂæóÂà∞ÁöÑ IR„ÄÇ Â§öÈù¢‰ΩìË°®Á§∫ÁöÑÂÖ∂‰ΩôÁªÑ‰ª∂Â¶Ç‰∏ãÊ¥æÁîüÔºöËØ≠Âè•ÁöÑÂüüË¢´ÂÆö‰πâ‰∏∫ÂÖ∂ÊâÄÂåÖÂê´Âæ™ÁéØÁöÑËø≠‰ª£Á©∫Èó¥ÔºåÁî±ÂêÑËá™ÁöÑ‰∏ãÁïåÂíå‰∏äÁïåÁ∫¶ÊùüÔºåÂπ∂‰∏é‰ªª‰Ωï‚Äúif‚ÄùÊù°‰ª∂Áõ∏‰∫§„ÄÇËøô‰∏™ËøáÁ®ãÂà©Áî®‰∫Ü MLIR Áõ¥Êé•Â∞ÜËæπÁïåÂíåÊù°‰ª∂Ë°®Á§∫‰∏∫‰ªøÂ∞ÑÊûÑÈÄ†ÁöÑÁâπÊÄß„ÄÇÊØè‰∏™ËØ≠Âè•ÁöÑËÆøÈóÆÂÖ≥Á≥ª‰Ωú‰∏∫ affine.loadÔºàËØªÂèñÔºâÂíå affine.storeÔºàÂøÖÈ°ªÂÜôÂÖ•ÔºâÊìç‰ΩúÁöÑ‰ªøÂ∞ÑÊò†Â∞ÑÁöÑÂπ∂ÈõÜËé∑ÂæóÔºåÂÖ≥Á≥ªÁöÑÂè≥‰æßË¢´Ê≥®Èáä‰∏∫‰∏éË¢´ËÆøÈóÆÁöÑ memref ÂØπÂ∫îÁöÑ‚ÄúÊï∞ÁªÑ‚ÄùÔºåËøôÂØπÂ∫î‰∫é SSA ÂÄº„ÄÇÂàùÂßãË∞ÉÂ∫¶ÊòØ‰ΩøÁî® (2d + 1) ÂΩ¢ÂºèÂàÜÈÖçÁöÑÔºåÂ•áÊï∞Áª¥Â∫¶Ë°®Á§∫ËæìÂÖ•Á®ãÂ∫è‰∏≠Âæ™ÁéØÁöÑËØçÊ≥ïÈ°∫Â∫èÔºåËÄåÂÅ∂Êï∞Áª¥Â∫¶Á≠â‰∫éÂæ™ÁéØÂºïÂØºÂèòÈáè„ÄÇOpenScop ‰∏≠ÁöÑ‰ªøÂ∞ÑÊûÑÈÄ†Ë°®Á§∫‰∏∫Á∫øÊÄßÁ≠âÂºè (= 0) Êàñ‰∏çÁ≠âÂºè (‚â• 0) Á≥ªÊï∞ÁöÑÂàóË°®ÔºåËøôÊ≠£Â•Ω‰∏é MLIR ‰∏≠ÁöÑÂÜÖÈÉ®Ë°®Á§∫Áõ∏ÂåπÈÖçÔºå‰ΩøËΩ¨Êç¢ÂèòÂæóÁÆÄÂçïÊòé‰∫Ü„ÄÇ d) ‰ª£Á†ÅÁîüÊàêÂõû MLIRÔºöPluto Ë∞ÉÂ∫¶Âô®Âõ†Ê≠§ÁîüÊàê‰∫Ü OpenScop ‰∏≠ÁöÑÊñ∞Ë∞ÉÂ∫¶„ÄÇ‰ªé‰ªøÂ∞ÑË∞ÉÂ∫¶ÁîüÊàêÂæ™ÁéØÁªìÊûÑÊòØ‰∏Ä‰∏™Â∑≤Ëß£ÂÜ≥‰ΩÜÁõ∏ÂΩìÂ§çÊùÇÁöÑÈóÆÈ¢ò [13]Ôºå[14]„ÄÇPolygeist ‰æùËµñ‰∫é CLooG [13] Êù•ÁîüÊàêÂàùÂßãÁöÑÂæ™ÁéØÁ∫ß ASTÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫‰ªøÂ∞ÑÊñπË®ÄÁöÑÂæ™ÁéØÂíåÊù°‰ª∂„ÄÇÂú®‰ª£Á†ÅÁîüÊàêÊó∂Êó†ÈúÄÁÆÄÂåñ‰ªøÂ∞ÑË°®ËææÂºèÔºåÂõ†‰∏∫ MLIR ÂèØ‰ª•Áõ¥Êé•Êé•ÂèóÂÆÉ‰ª¨ÔºåÂπ∂ËÉΩÂ§üÂú®ÂêéÁª≠Èò∂ÊÆµËøõË°åÁÆÄÂåñ„ÄÇËØ≠Âè•‰Ωú‰∏∫ÂÖ∑ÊúâÈáçÂÜôÊìç‰ΩúÊï∞ÁöÑÂáΩÊï∞Ë∞ÉÁî®ÂºïÂÖ•ÔºåÁÑ∂ÂêéËøõË°åÂÜÖËÅî„ÄÇ # D. Controlling Statement Granularity Recall that Polygeist reconstructs \"statements\" from sequences of primitive operations (Section III-C). We initially designed an approach that recovers the statement structure similar to that in the C input, but this is not a requirement. Instead, statements can be formed from any subsets of MLIR operations as long as they can be organized into loops and sorted topologically (i.e., there are no use-def cycles between statements). To expose the dependencies between such statements to the affine scheduler, we reuse the idea of going through scratchpad memory: each statement writes the values required by other statements to dedicated memory locations, and the following statements read from those. The scratchpads are subject to partial array expansion [23] to minimize their effect on the affine scheduler as single-element scratchpad arrays create artificial scalar dependencies. This change in statement granularity gives the affine scheduler unprecedented flexibility allowing it to chose different schedules for different parts of the same C statement. Consider, for example, the statement S in Figure 8(top) surrounded by three loops iterating over i, j and k. Such contraction patterns are common in computational programs (this particular example can be found in the correlation benchmark with B‚â°C, see Section V-E). The loop order that best exploits the locality is (k, i, j), which results in temporal locality for reads from B (the value is reused in all iterations of the now-innermost j loop) and in spatial locality for reads from C (consecutive values are read by consecutive iterations, increasing the likelihood of L1 cache hits). Yet, Pluto never proposes such an order because of a reduction dependency along the k dimension due to repeated read/write access to A[i][j] as Pluto tends to pick loops with fewer dependencies as outermost. While the dependency itself is inevitable, it can be moved into a separate statement T in Figure 8(bottom left). This approach provides scheduler with more freedom of choice for the first statement at a lesser memory cost than expanding the entire A array. It also factors out the reduction into a \"canonical\" statement that is easier to process for the downstream passes, e.g., vectorization. Implementing this transformation at the C level would require manipulating C AST and reasoning about C (or even C++) semantics. This is typically out of reach for source-tosource polyhedral optimizers such as Pluto that treat statements as black boxes. While it is possible to implement this transformation at the LLVM IR level, e.g., in Polly, where statements are also reconstructed and injection of temporary allocations is easy, the heuristic driving the transformation is based on the loop structure and multi-dimensional access patterns which are difficult to recover at such a low level [9]. The space of potential splittings is huge-each MLIR operation can potentially become a statement. Therefore, we devise a heuristic to address the contraction cases similar to Figure 8. Reduction statement splitting applies to statements: ‚Ä¢ surrounded by at least 3 loops; ‚Ä¢ with LHS =RHS, and using all loops but the innermost; ‚Ä¢ with two or more different access patterns on the RHS. This covers statements that could have locality improved by a different loop order and with low risk of undesired fission. This heuristic merely serves as an illustration of the kind of new transformations Polygeist can enable. D. ÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ ÂõûÊÉ≥‰∏Ä‰∏ãÔºåPolygeist ÊòØÈÄöËøáÂéüÂßãÊìç‰ΩúÁöÑÂ∫èÂàóÈáçÂª∫‚ÄúËØ≠Âè•‚ÄùÁöÑÔºàËßÅÁ¨¨‰∏âËäÇCÔºâ„ÄÇÊàë‰ª¨ÊúÄÂàùËÆæËÆ°‰∫Ü‰∏ÄÁßçÊÅ¢Â§ç‰∏é C ËæìÂÖ•‰∏≠Áõ∏‰ººÁöÑËØ≠Âè•ÁªìÊûÑÁöÑÊñπÊ≥ïÔºå‰ΩÜËøôÂπ∂‰∏çÊòØÂøÖÈúÄÁöÑ„ÄÇÂÆûÈôÖ‰∏äÔºåÂè™Ë¶ÅÂèØ‰ª•Â∞ÜËØ≠Âè•ÁªÑÁªáÊàêÂæ™ÁéØÂπ∂ËøõË°åÊãìÊâëÊéíÂ∫èÔºàÂç≥ËØ≠Âè•‰πãÈó¥Ê≤°Êúâ‰ΩøÁî®-ÂÆö‰πâÂæ™ÁéØÔºâÔºåËØ≠Âè•ÂèØ‰ª•Áî±‰ªª‰ΩïÂ≠êÈõÜÁöÑ MLIR Êìç‰ΩúÂΩ¢Êàê„ÄÇ‰∏∫‰∫ÜÂêë‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Êö¥Èú≤Ëøô‰∫õËØ≠Âè•‰πãÈó¥ÁöÑ‰æùËµñÂÖ≥Á≥ªÔºåÊàë‰ª¨ÈáçÁî®‰∫ÜÈÄöËøá‰∏¥Êó∂Â≠òÂÇ®Âô®ÁöÑÊÄùÊÉ≥ÔºöÊØè‰∏™ËØ≠Âè•Â∞ÜÂÖ∂‰ªñËØ≠Âè•ÊâÄÈúÄÁöÑÂÄºÂÜôÂÖ•‰∏ìÁî®ÂÜÖÂ≠ò‰ΩçÁΩÆÔºåÈöèÂêéËØ≠Âè•‰ªéËøô‰∫õ‰ΩçÁΩÆËØªÂèñ„ÄÇ‰∏¥Êó∂Â≠òÂÇ®Âô®ÂèóÂà∞ÈÉ®ÂàÜÊï∞ÁªÑÊâ©Â±ïÁöÑÈôêÂà∂[23]Ôºå‰ª•ÊúÄÂ∞èÂåñÂÆÉ‰ª¨ÂØπ‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®ÁöÑÂΩ±ÂìçÔºåÂõ†‰∏∫ÂçïÂÖÉÁ¥†ÁöÑ‰∏¥Êó∂Â≠òÂÇ®Âô®Êï∞ÁªÑ‰ºö‰∫ßÁîü‰∫∫‰∏∫ÁöÑÊ†áÈáè‰æùËµñÂÖ≥Á≥ª„ÄÇËøôÁßçËØ≠Âè•Á≤íÂ∫¶ÁöÑÂèòÂåñ‰∏∫‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Êèê‰æõ‰∫ÜÂâçÊâÄÊú™ÊúâÁöÑÁÅµÊ¥ªÊÄßÔºå‰ΩøÂÖ∂ËÉΩÂ§ü‰∏∫Âêå‰∏Ä C ËØ≠Âè•ÁöÑ‰∏çÂêåÈÉ®ÂàÜÈÄâÊã©‰∏çÂêåÁöÑË∞ÉÂ∫¶„ÄÇ‰ª•Âõæ8ÔºàÈ°∂ÈÉ®Ôºâ‰∏≠ÁöÑËØ≠Âè• S ‰∏∫‰æãÔºåËØ•ËØ≠Âè•Ë¢´‰∏â‰∏™ÈíàÂØπ i„ÄÅj Âíå k ÁöÑÂæ™ÁéØÂåÖÂõ¥„ÄÇËøôÁßçÊî∂Áº©Ê®°ÂºèÂú®ËÆ°ÁÆóÁ®ãÂ∫è‰∏≠ÂæàÂ∏∏ËßÅÔºàÊ≠§ÁâπÂÆöÁ§∫‰æãÂèØ‰ª•Âú®Áõ∏ÂÖ≥Âü∫ÂáÜ‰∏≠ÊâæÂà∞ÔºåB‚â°CÔºåËßÅÁ¨¨‰∫îËäÇEÔºâ„ÄÇÊúÄ‰Ω≥Âà©Áî®Â±ÄÈÉ®ÊÄßÁöÑÂæ™ÁéØÈ°∫Â∫èÊòØ (k, i, j)ÔºåËøôÂØπ‰ªé B ÁöÑËØªÂèñ‰∫ßÁîüÊó∂ÊïàÂ±ÄÈÉ®ÊÄßÔºàËØ•ÂÄºÂú®Áé∞Âú®ÊúÄÂÜÖÂ±ÇÁöÑ j Âæ™ÁéØÁöÑÊâÄÊúâËø≠‰ª£‰∏≠Ë¢´ÈáçÁî®ÔºâÂπ∂ÂØπ‰ªé C ÁöÑËØªÂèñ‰∫ßÁîüÁ©∫Èó¥Â±ÄÈÉ®ÊÄßÔºàËøûÁª≠ÁöÑÂÄºË¢´ËøûÁª≠ÁöÑËø≠‰ª£ËØªÂèñÔºå‰ªéËÄåÂ¢ûÂä†‰∫Ü L1 ÁºìÂ≠òÂëΩ‰∏≠ÁéáÁöÑÂèØËÉΩÊÄßÔºâ„ÄÇÁÑ∂ËÄåÔºåPluto ‰ªéÊú™ÊèêÂá∫ËøôÊ†∑ÁöÑÈ°∫Â∫èÔºåÂõ†‰∏∫Âú® k Áª¥Â∫¶‰∏äÁî±‰∫éÂØπ A[i][j] ÁöÑÈáçÂ§çËØª/ÂÜôËÆøÈóÆËÄåÂ≠òÂú®ÂáèÂ∞ë‰æùËµñÂÖ≥Á≥ªÔºåPluto Ë∂ãÂêë‰∫éÈÄâÊã©‰æùËµñÂÖ≥Á≥ªËæÉÂ∞ëÁöÑÂæ™ÁéØ‰Ωú‰∏∫ÊúÄÂ§ñÂ±Ç„ÄÇËôΩÁÑ∂ËøôÁßç‰æùËµñÂÖ≥Á≥ªÊú¨Ë∫´ÊòØ‰∏çÂèØÈÅøÂÖçÁöÑÔºå‰ΩÜÂÆÉÂèØ‰ª•ËΩ¨ÁßªÂà∞Âõæ8ÔºàÂ∫ïÈÉ®Â∑¶‰æßÔºâÁöÑÂçïÁã¨ËØ≠Âè• T ‰∏≠„ÄÇËøôÁßçÊñπÊ≥ï‰∏∫Ë∞ÉÂ∫¶Âô®Êèê‰æõ‰∫ÜÊõ¥Â§öÁöÑÈÄâÊã©Ëá™Áî±Â∫¶ÔºåÂÜÖÂ≠òÊàêÊú¨Áõ∏ÂØπËæÉ‰ΩéÔºåËÄå‰∏çÊòØÊâ©Â±ïÊï¥‰∏™ A Êï∞ÁªÑ„ÄÇÂÆÉËøòÂ∞ÜÂáèÂ∞ëÈóÆÈ¢òÂàÜËß£‰∏∫‰∏Ä‰∏™‚ÄúËßÑËåÉ‚ÄùËØ≠Âè•Ôºå‰ΩøÂæó‰∏ãÊ∏∏Â§ÑÁêÜÔºà‰æãÂ¶ÇÂêëÈáèÂåñÔºâÊõ¥ÂÆπÊòìËøõË°å„ÄÇ Âú® C Á∫ßÂà´ÂÆûÁé∞Ëøô‰∏ÄËΩ¨Êç¢Â∞ÜÈúÄË¶ÅÊìç‰Ωú C ÊäΩË±°ËØ≠Ê≥ïÊ†ëÔºàASTÔºâÂπ∂Êé®ÁêÜ CÔºàÁîöËá≥ C++ÔºâÁöÑËØ≠‰πâ„ÄÇËøôÈÄöÂ∏∏Ë∂ÖÂá∫‰∫ÜËØ∏Â¶Ç Pluto ËøôÊ†∑ÁöÑÊ∫êÂà∞Ê∫êÂ§öÈù¢‰Ωì‰ºòÂåñÂô®ÁöÑËÉΩÂäõÔºåÂõ†‰∏∫Ëøô‰∫õ‰ºòÂåñÂô®Â∞ÜËØ≠Âè•ËßÜ‰∏∫ÈªëÁÆ±„ÄÇËôΩÁÑ∂Âú® LLVM IR Á∫ßÂà´ÂÆûÁé∞Ëøô‰∏ÄËΩ¨Êç¢‰πüÊòØÂèØËÉΩÁöÑÔºå‰æãÂ¶ÇÂú® Polly ‰∏≠ÔºåÂú®ÈÇ£ÈáåËØ≠Âè•‰πüË¢´ÈáçÂª∫‰∏îÊöÇÊó∂ÂàÜÈÖçÁöÑÊ≥®ÂÖ•ËæÉ‰∏∫ÂÆπÊòìÔºå‰ΩÜÈ©±Âä®ËΩ¨Êç¢ÁöÑÂêØÂèëÂºèÊòØÂü∫‰∫éÂæ™ÁéØÁªìÊûÑÂíåÂ§öÁª¥ËÆøÈóÆÊ®°ÂºèÁöÑÔºåËÄåÂú®Â¶ÇÊ≠§‰ΩéÁöÑÁ∫ßÂà´ÊÅ¢Â§çËøô‰∫õ‰ø°ÊÅØÊòØÂõ∞ÈöæÁöÑ[9]„ÄÇ ÊΩúÂú®ÂàÜÂâ≤ÁöÑÁ©∫Èó¥ÊòØÂ∑®Â§ßÁöÑ‚Äî‚ÄîÊØè‰∏™ MLIR Êìç‰ΩúÈÉΩÊúâÂèØËÉΩÊàê‰∏∫‰∏Ä‰∏™ËØ≠Âè•„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨ËÆæËÆ°‰∫Ü‰∏ÄÁßçÂêØÂèëÂºèÊñπÊ≥ïÊù•Â§ÑÁêÜÁ±ª‰ºº‰∫éÂõæ8ÁöÑÊî∂Áº©ÊÉÖÂÜµ„ÄÇÂáèÂ∞ëËØ≠Âè•ÂàÜÂâ≤ÈÄÇÁî®‰∫é‰ª•‰∏ãËØ≠Âè•Ôºö ‚Ä¢ Ëá≥Â∞ëË¢´ 3 ‰∏™Âæ™ÁéØÂåÖÂõ¥Ôºõ ‚Ä¢ Â∑¶‰æß = Âè≥‰æßÔºåÂπ∂‰∏î‰ΩøÁî®ÊâÄÊúâÂæ™ÁéØÔºåÈô§‰∫ÜÊúÄÂÜÖÂ±ÇÁöÑÔºõ ‚Ä¢ Âè≥‰æßÂÖ∑Êúâ‰∏§‰∏™ÊàñÊõ¥Â§ö‰∏çÂêåÁöÑËÆøÈóÆÊ®°Âºè„ÄÇËøôÊ∂µÁõñ‰∫ÜÈÇ£‰∫õÂèØËÉΩÈÄöËøá‰∏çÂêåÂæ™ÁéØÈ°∫Â∫èÊîπÂñÑÂ±ÄÈÉ®ÊÄßÁöÑËØ≠Âè•ÔºåÂπ∂‰∏îÈ£éÈô©ËæÉ‰ΩéÔºå‰∏ç‰ºö‰∫ßÁîü‰∏çÂ∏åÊúõÁöÑÂàÜË£Ç„ÄÇËøô‰∏™ÂêØÂèëÂºèÊñπÊ≥ï‰ªÖ‰Ωú‰∏∫ Polygeist ËÉΩÂ§üÂêØÁî®ÁöÑÊñ∞ËΩ¨Êç¢Á±ªÂûãÁöÑÁ§∫‰æã„ÄÇ # E. Post-Transformations and Backend Polygeist allows one to operate on both quasi-syntactic and SSA level, enabling analyses and optimizations that are extremely difficult, if not impossible, to perform at either level in isolation. In addition to statement splitting, we propose two techniques that demonstrate the potential of Polygeist. a) Transforming Loops with Carried Values (Reductions): Polygeist leverages MLIR's first-class support for loopcarried values to detect, express and transform reduction-like loops. This support does not require source code annotations, unlike source-level tools [24] that use annotations to enable detection, nor complex modifications for parallel code emission, unlike Polly [25], which suffers from LLVM missing first-class parallel constructs. We do not modify the polyhedral scheduler either, relying on post-processing for reduction parallelization, including outermost parallel reduction loops. The overall approach follows the definition proposed in [26] with adaptations to MLIR's region-based IR, and is illustrated in Figure 9. Polygeist identifies memory locations modified on each iteration, i.e. load/store pairs with loop-invariant subscripts and no interleaving aliasing stores, by scanning the single-block body of the loop. These are transformed into loop-carried values or secondary induction variables, with the load/store pair lifted out of the loop and repurposed for reading the initial and storing the final value. Loop-carried values may be updated by a chain of side effect-free operations in the loop body. If this chain is known to be associative and commutative, the loop is a reduction. Loop-carried values are detected even in absence of reduction-compatible operations. Loops with such values contribute to mem2reg, decreasing memory footprint, but are not subject to parallelization. b) Late Parallelization: Rather than relying on the dependence distance information obtained by the affine scheduler, Polygeist performs a separate polyhedral analysis to detect loop parallelism in the generated code. The analysis itself is a classical polyhedral dependence analysis [27], [28] implemented on top of MLIR region structure. Performing it after SSA-based optimizations, in particular mem2reg and reduction detection, allows parallelizing more loops. In particular, reduction loops and loops with variables whose value is only relevant within a single iteration similar to live-range reordering [29] but without expensive additional polyhedral analyses (live-range of an SSA value defined in a loop never extends beyond the loop). E. ÂêéÂèòÊç¢ÂèäÂêéÁ´Ø Polygeist ‰ΩøÂæóÂú® quasi-syntactic Âíå SSA Â±ÇÈù¢‰∏äÊìç‰ΩúÊàê‰∏∫ÂèØËÉΩÔºå‰ªéËÄåÂÆûÁé∞‰∫ÜÂú®‰ªª‰Ωï‰∏Ä‰∏™Â±ÇÈù¢‰∏äÂçïÁã¨ËøõË°åÂàÜÊûêÂíå‰ºòÂåñÊó∂ÊûÅÂÖ∂Âõ∞ÈöæÔºàÁîöËá≥‰∏çÂèØËÉΩÔºâÁöÑ‰ªªÂä°„ÄÇÈô§‰∫ÜËØ≠Âè•ÊãÜÂàÜÔºåÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏§ÁßçÂ±ïÁ§∫ Polygeist ÊΩúÂäõÁöÑÊäÄÊúØ„ÄÇ a) ËΩ¨Êç¢Â∏¶ÊúâÂª∂Áª≠ÂÄºÁöÑÂæ™ÁéØÔºàÂΩíÁ∫¶ÔºâÔºöPolygeist Âà©Áî® MLIR ÂØπÂæ™ÁéØÊê∫Â∏¶ÂÄºÁöÑ‰∏ÄÁ∫ßÊîØÊåÅÔºåÊù•Ê£ÄÊµã„ÄÅË°®ËææÂíåËΩ¨Êç¢Á±ª‰ººÂΩíÁ∫¶ÁöÑÂæ™ÁéØ„ÄÇËøôÁßçÊîØÊåÅ‰∏çÈúÄË¶ÅÊ∫ê‰ª£Á†ÅÊ≥®ÈáäÔºåËÄå‰∏é‰ΩøÁî®Ê≥®Èáä‰ª•ÂêØÁî®Ê£ÄÊµãÁöÑÊ∫êÁ∫ßÂ∑•ÂÖ∑ [24] ‰∏çÂêåÔºå‰πü‰∏çÈúÄË¶ÅÂ§çÊùÇÁöÑ‰øÆÊîπÊù•ËøõË°åÂπ∂Ë°å‰ª£Á†ÅÁöÑÁîüÊàêÔºå‰∏é Polly [25] ‰∏çÂêåÔºåÂêéËÄÖÂèóÂà∞ LLVM Áº∫Â§±‰∏ÄÁ∫ßÂπ∂Ë°åÊûÑÈÄ†ÁöÑÈôêÂà∂„ÄÇÊàë‰ª¨‰πüÊú™ÂØπÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ËøõË°å‰øÆÊîπÔºåËÄåÊòØ‰æùËµñÂêéÂ§ÑÁêÜÊù•ËøõË°åÂΩíÁ∫¶Âπ∂Ë°åÂåñÔºåÂåÖÊã¨ÊúÄÂ§ñÂ±ÇÁöÑÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØ„ÄÇ ÊÄª‰ΩìÊñπÊ≥ïÈÅµÂæ™‰∫Ü [26] ‰∏≠ÊèêÂá∫ÁöÑÂÆö‰πâÔºåÈíàÂØπ MLIR ÁöÑÂü∫‰∫éÂå∫ÂüüÁöÑ‰∏≠Èó¥Ë°®Á§∫ËøõË°å‰∫ÜË∞ÉÊï¥ÔºåÂ¶ÇÂõæ 9 ÊâÄÁ§∫„ÄÇPolygeist ÈÄöËøáÊâ´ÊèèÂæ™ÁéØÁöÑÂçïÂùó‰∏ª‰ΩìÔºåËØÜÂà´ÊØèÊ¨°Ëø≠‰ª£‰∏≠Ë¢´‰øÆÊîπÁöÑÂÜÖÂ≠ò‰ΩçÁΩÆÔºåÂç≥ÂÖ∑ÊúâÂæ™ÁéØ‰∏çÂèò‰∏ãÊ†á‰∏îÊ≤°Êúâ‰∫§ÈîôÂà´ÂêçÂ≠òÂÇ®ÁöÑÂä†ËΩΩ/Â≠òÂÇ®ÂØπ„ÄÇËøô‰∫õË¢´ËΩ¨Êç¢‰∏∫Âæ™ÁéØÊê∫Â∏¶ÂÄºÊàñ‰∫åÊ¨°ÂΩíÁ∫≥ÂèòÈáèÔºåÂä†ËΩΩ/Â≠òÂÇ®ÂØπË¢´ÊèêÂçáÂà∞Âæ™ÁéØÂ§ñÂπ∂ÈáçÊñ∞Áî®‰∫éËØªÂèñÂàùÂßãÂÄºÂíåÂ≠òÂÇ®ÊúÄÁªàÂÄº„ÄÇÂú®Âæ™ÁéØ‰∏ª‰Ωì‰∏≠ÔºåÂæ™ÁéØÊê∫Â∏¶ÂÄºÂèØ‰ª•ÈÄöËøá‰∏ÄÁ≥ªÂàóÊó†ÂâØ‰ΩúÁî®Êìç‰ΩúËøõË°åÊõ¥Êñ∞„ÄÇÂ¶ÇÊûúËøô‰∏™ÈìæË¢´ËÆ§‰∏∫ÊòØÁªìÂêàÁöÑÂíå‰∫§Êç¢ÁöÑÔºåÈÇ£‰πàËØ•Âæ™ÁéØÂç≥‰∏∫ÂΩíÁ∫¶„ÄÇÂç≥‰ΩøÂú®Ê≤°ÊúâÂêàÈÄÇÁöÑÂΩíÁ∫¶Êìç‰ΩúÁöÑÊÉÖÂÜµ‰∏ãÔºåÂæ™ÁéØÊê∫Â∏¶ÂÄº‰πüËÉΩË¢´Ê£ÄÊµãÂà∞„ÄÇÂÖ∑ÊúâÊ≠§Á±ªÂÄºÁöÑÂæ™ÁéØÂ∞ÜÂØπ mem2reg ‰∫ßÁîüË¥°ÁåÆÔºåÈôç‰ΩéÂÜÖÂ≠òÂç†Áî®Ôºå‰ΩÜ‰∏çÈÄÇÂêàËøõË°åÂπ∂Ë°åÂåñ„ÄÇ b) Âª∂ËøüÂπ∂Ë°åÂåñÔºöPolygeist Âπ∂‰∏ç‰æùËµñ‰∫éÈÄöËøá‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Ëé∑ÂèñÁöÑ‰æùËµñË∑ùÁ¶ª‰ø°ÊÅØÔºåËÄåÊòØÂØπÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂçïÁã¨ÁöÑÂ§öÈù¢‰ΩìÂàÜÊûê‰ª•Ê£ÄÊµãÂæ™ÁéØÂπ∂Ë°åÊÄß„ÄÇËØ•ÂàÜÊûêÊú¨Ë∫´ÊòØ‰∏ÄÁßçÁªèÂÖ∏ÁöÑÂ§öÈù¢‰Ωì‰æùËµñÂàÜÊûê [27]„ÄÅ[28]ÔºåÂú® MLIR Âå∫ÂüüÁªìÊûÑ‰πã‰∏äÂÆûÁé∞„ÄÇÂú®ËøõË°å SSA Âü∫‰∫é‰ºòÂåñ‰πãÂêéÊâßË°åËøô‰∏ÄÊ≠•ÔºåÁâπÂà´ÊòØ mem2reg ÂíåÂΩíÁ∫¶Ê£ÄÊµãÔºåËÉΩÂ§üÂπ∂Ë°åÂåñÊõ¥Â§öÁöÑÂæ™ÁéØ„ÄÇÁâπÂà´ÊòØÔºåÂΩíÁ∫¶Âæ™ÁéØÂíåÈÇ£‰∫õÂèòÈáèÂÄº‰ªÖÂú®ÂçïÊ¨°Ëø≠‰ª£ÂÜÖÁõ∏ÂÖ≥ÁöÑÂæ™ÁéØÔºàÁ±ª‰ºº‰∫éÊ¥ªË∑ÉËåÉÂõ¥ÈáçÊéíÂ∫è [29]Ôºå‰ΩÜÊ≤°ÊúâÊòÇË¥µÁöÑÈ¢ùÂ§ñÂ§öÈù¢‰ΩìÂàÜÊûêÔºâÈÉΩÂæóÂà∞Â§ÑÁêÜÔºàÂú®Âæ™ÁéØ‰∏≠ÂÆö‰πâÁöÑ SSA ÂÄºÁöÑÊ¥ªË∑ÉËåÉÂõ¥‰ªé‰∏çË∂ÖÂá∫Âæ™ÁéØÔºâ„ÄÇ # IV. EVALUATION Our evaluation has two goals. 1) We want to demonstrate that the code produced by Polygeist without additional op- timization does not have any inexplicable performance differences than a state-of-the-art compiler like Clang. 2) We explore how Polygeist's internal representation can support a mix of affine and SSA-based transformation in the same compilation flow, and evaluate the potential benefits compared to existing source and compiler-based polyhedral tools. Êàë‰ª¨ÁöÑËØÑ‰º∞Êúâ‰∏§‰∏™ÁõÆÊ†á„ÄÇ1ÔºâÊàë‰ª¨Â∏åÊúõËØÅÊòéÔºåPolygeist ÁîüÊàêÁöÑ‰ª£Á†ÅÂú®Ê≤°ÊúâÈ¢ùÂ§ñ‰ºòÂåñÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÖ∂ÊÄßËÉΩ‰∏éÂÉè Clang ËøôÊ†∑ÁöÑÁé∞‰ª£ÁºñËØëÂô®Ê≤°Êúâ‰ªª‰Ωï‰∏çÂèØËß£ÈáäÁöÑÂ∑ÆÂºÇ„ÄÇ2ÔºâÊàë‰ª¨Êé¢ËÆ® Polygeist ÁöÑÂÜÖÈÉ®Ë°®Á§∫Â¶Ç‰ΩïÂú®Âêå‰∏ÄÁºñËØëÊµÅÁ®ã‰∏≠ÊîØÊåÅÁªìÂêà‰ΩøÁî®‰ªøÂ∞ÑÂèòÊç¢ÂíåÂü∫‰∫é SSA ÁöÑÂèòÊç¢ÔºåÂπ∂ËØÑ‰º∞‰∏éÁé∞ÊúâÁöÑÊ∫ê‰ª£Á†ÅÂíåÁºñËØëÂô®Âü∫Á°Ä‰∏äÁöÑÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Áõ∏ÊØîÁöÑÊΩúÂú®‰ºòÂäø„ÄÇ # A. Experimental Setup We ran our experiments on an AWS c5.metal instance with hyper-threading and Turbo Boost disabled. The system is Ubuntu 20.04 running on a dual-socket Intel Xeon Platinum 8275CL CPU at 3.0 GHz with 24 cores each, with 0.75, 35, 35.75 MB L1, L2, L3 cache per socket, respectively, and 256 GB RAM. We ran all 30 benchmarks from Poly-Bench [19], using the \"EXTRALARGE\" dataset. Pluto is unable to extract SCoP from the adi benchmark. We ran a total of 5 trials for each benchmark, taking the execution time reported by PolyBench; the median result is taken unless stated otherwise. Every measurement or result reported in the following sections refers to double-precision data. All experiments were run on cores 1-8, which ensured that all threads were on the same socket and did not potentially conflict with processes scheduled on core 0. In all cases, we use two-stage compilation: (i) using clang at -O3 excluding unrolling and vectorization; or Polygeist to emit LLVM IR from C; (ii) using clang at -O3 to emit the final binary. As several optimizations are not idempotent, a second round of optimization can potentially significantly boost (and rarely, hinder) performance. This is why we chose to only perform vectorization and unrolling at the last optimization stage. Since Polygeist applies some optimizations at the MLIR level (e.g., mem2reg), we compare against the twostage compilation pipeline as a more fair baseline (CLANG). We also evaluate a single-stage compilation to assess the effect of the two-stage flow (CLANGSING). Êàë‰ª¨Âú®‰∏ÄÂè∞ AWS c5.metal ÂÆû‰æã‰∏äËøõË°åÂÆûÈ™åÔºåËØ•ÂÆû‰æãÁ¶ÅÁî®‰∫ÜË∂ÖÁ∫øÁ®ãÂíå Turbo Boost„ÄÇÁ≥ªÁªü‰∏∫ Ubuntu 20.04ÔºåËøêË°å‰∫éÂèåÊèíÊßΩ Intel Xeon Platinum 8275CL CPUÔºå‰∏ªÈ¢ë‰∏∫ 3.0 GHzÔºåÊØè‰∏™ÊèíÊßΩÊúâ 24 ‰∏™Ê†∏ÂøÉÔºåL1„ÄÅL2 Âíå L3 ÁºìÂ≠òÂàÜÂà´‰∏∫ 0.75 MB„ÄÅ35 MB Âíå 35.75 MBÔºåÂπ∂ÈÖçÂ§á 256 GB RAM„ÄÇÊàë‰ª¨‰ΩøÁî®‚ÄúEXTRALARGE‚ÄùÊï∞ÊçÆÈõÜËøêË°å Poly-Bench [19] ‰∏≠ÁöÑÊâÄÊúâ 30 ‰∏™Âü∫ÂáÜÊµãËØï„ÄÇPluto Êó†Ê≥ï‰ªé adi Âü∫ÂáÜÊµãËØï‰∏≠ÊèêÂèñ SCoP„ÄÇÊàë‰ª¨ÂØπÊØè‰∏™Âü∫ÂáÜÊµãËØïËøõË°å‰∫ÜÊÄªÂÖ± 5 Ê¨°ËØïÈ™åÔºåÈááÁî® PolyBench Êä•ÂëäÁöÑÊâßË°åÊó∂Èó¥ÔºõÈô§ÈùûÂè¶ÊúâËØ¥ÊòéÔºåÁªìÊûú‰ª•‰∏≠‰ΩçÊï∞ÁöÑÂΩ¢ÂºèÁªôÂá∫„ÄÇ‰ª•‰∏ãÂêÑËäÇ‰∏≠Êä•ÂëäÁöÑÊØè‰∏™ÊµãÈáèÊàñÁªìÊûúÂùá‰∏éÂèåÁ≤æÂ∫¶Êï∞ÊçÆÁõ∏ÂÖ≥„ÄÇÊâÄÊúâÂÆûÈ™åÂùáÂú®Ê†∏ÂøÉ 1-8 ‰∏äËøêË°åÔºå‰ª•Á°Æ‰øùÊâÄÊúâÁ∫øÁ®ã‰Ωç‰∫éÂêå‰∏ÄÊèíÊßΩÔºåÂπ∂‰∏î‰∏ç‰ºö‰∏éË∞ÉÂ∫¶Âú®Ê†∏ÂøÉ 0 ‰∏äÁöÑËøõÁ®ãÂèëÁîüÊΩúÂú®ÂÜ≤Á™Å„ÄÇ Âú®ÊâÄÊúâÊÉÖÂÜµ‰∏ãÔºåÊàë‰ª¨ÈááÁî®‰∏§Èò∂ÊÆµÁºñËØëÔºö(i) ‰ΩøÁî® clang ‰ª• -O3 Á∫ßÂà´ÁºñËØëÔºå‰∏çÂåÖÊã¨Â±ïÂºÄÂíåÂêëÈáèÂåñÔºõÊàñ‰ΩøÁî® Polygeist ‰ªé C ÂèëÂá∫ LLVM IRÔºõ(ii) ‰ΩøÁî® clang ‰ª• -O3 Á∫ßÂà´ÂèëÂá∫ÊúÄÁªà‰∫åËøõÂà∂Êñá‰ª∂„ÄÇÁî±‰∫éÊüê‰∫õ‰ºòÂåñÂπ∂ÈùûÂπÇÁ≠âÁöÑÔºåÂõ†Ê≠§Á¨¨‰∫åËΩÆ‰ºòÂåñÂèØËÉΩ‰ºöÊòæËëóÊèêÂçáÔºàËÄåÂæàÂ∞ëÊÉÖÂÜµ‰ºöÊäëÂà∂ÔºâÊÄßËÉΩ„ÄÇËøôÂ∞±ÊòØÊàë‰ª¨ÈÄâÊã©‰ªÖÂú®ÊúÄÂêé‰ºòÂåñÈò∂ÊÆµËøõË°åÂêëÈáèÂåñÂíåÂ±ïÂºÄÁöÑÂéüÂõ†„ÄÇÁî±‰∫é Polygeist Âú® MLIR Á∫ßÂà´Â∫îÁî®‰∫Ü‰∏Ä‰∫õ‰ºòÂåñÔºà‰æãÂ¶ÇÔºåmem2regÔºâÔºåÊàë‰ª¨Â∞ÜÂÖ∂‰∏é‰∏§Èò∂ÊÆµÁºñËØëÊµÅÁ®ãÔºàCLANGÔºâËøõË°åÊØîËæÉÔºå‰Ωú‰∏∫Êõ¥ÂÖ¨Âπ≥ÁöÑÂü∫Á∫ø„ÄÇÊàë‰ª¨ËøòËØÑ‰º∞‰∫ÜÂçïÈò∂ÊÆµÁºñËØëÔºå‰ª•ËØÑ‰º∞‰∏§Èò∂ÊÆµÊµÅÁ®ãÁöÑÊïàÊûúÔºàCLANGSINGÔºâ„ÄÇ # B. Baseline Performance Polygeist must generate code with runtime as close as possible to that of existing compilation flows to establish a solid baseline. In other words, Polygeist should not introduce overhead nor speedup unless explicitly instructed otherwise, to allow for measuring the effects of additional optimizations. We evaluate this by comparing the runtime of programs produced by Polygeist with those produced by Clang at the same commit (Apr 2021) 2 . Figure 10 summarizes the results with the following flows: ‚Ä¢ CLANG: A compilation of the program using Clang, when running two stages of optimization; ‚Ä¢ CLANGSING: A compilation of the program using Clang, when running one stage of optimization; ‚Ä¢ MLIR-CLANG: A compilation flow using the Polygeist frontend and preprocessing optimizations within MLIR, but not running polyhedral scheduling nor postprocessing. B. Âü∫Á∫øÊÄßËÉΩ PolygeistÂøÖÈ°ªÁîüÊàêÂ∞ΩÂèØËÉΩÊé•ËøëÁé∞ÊúâÁºñËØëÊµÅÁ®ãÁöÑËøêË°åÊó∂‰ª£Á†ÅÔºå‰ª•Âª∫Á´ã‰∏Ä‰∏™Á®≥Âõ∫ÁöÑÂü∫Á∫ø„ÄÇÊç¢Âè•ËØùËØ¥ÔºåPolygeist‰∏çÂ∫îËØ•ÂºïÂÖ•ÂºÄÈîÄÊàñÂä†ÈÄüÔºåÈô§ÈùûÊòéÁ°ÆÊåáÁ§∫Ôºå‰ª•‰æøËÉΩÂ§üÊµãÈáèÈ¢ùÂ§ñ‰ºòÂåñÁöÑÊïàÊûú„ÄÇÊàë‰ª¨ÈÄöËøáÊØîËæÉPolygeistÁîüÊàêÁöÑÁ®ãÂ∫è‰∏éÂêå‰∏ÄÊèê‰∫§ÁâàÊú¨Ôºà2021Âπ¥4ÊúàÔºâ‰∏ãClangÁîüÊàêÁöÑÁ®ãÂ∫èÁöÑËøêË°åÊó∂Êù•ËØÑ‰º∞Ëøô‰∏ÄÁÇπ„ÄÇÂõæ10ÊÄªÁªì‰∫Ü‰ª•‰∏ãÂá†ÁßçÊµÅÁ®ãÁöÑÁªìÊûúÔºö ‚Ä¢ CLANGÔºö‰ΩøÁî®ClangÁºñËØëÁ®ãÂ∫èÔºåËøêË°å‰∏§Èò∂ÊÆµ‰ºòÂåñÁöÑËøáÁ®ãÔºõ ‚Ä¢ CLANGSINGÔºö‰ΩøÁî®ClangÁºñËØëÁ®ãÂ∫èÔºåËøêË°å‰∏ÄÈò∂ÊÆµ‰ºòÂåñÁöÑËøáÁ®ãÔºõ ‚Ä¢ MLIR-CLANGÔºö‰ΩøÁî®PolygeistÂâçÁ´ØÁöÑÁºñËØëÊµÅÁ®ãÔºåÂú®MLIRÂÜÖËøõË°åÈ¢ÑÂ§ÑÁêÜ‰ºòÂåñÔºå‰ΩÜ‰∏çÊâßË°åÂ§öÈù¢‰ΩìË∞ÉÂ∫¶ÊàñÂêéÂ§ÑÁêÜ„ÄÇ # C. Compilation Flows We compare Polygeist with a source-level and an IR-level optimizer (Pluto and Polly) in the following configurations: ‚Ä¢ PLUTO: Pluto compiler auto-transformation [11] using polycc 3 with -noparallel and -tile flags; ‚Ä¢ PLUTOPAR: Same as above but with -parallel flag; ‚Ä¢ POLLY: Polly [7] LLVM passes with affine scheduling and tiling, and no pattern-based optimizations [30]; ‚Ä¢ POLLYPAR: Same as above with auto-parallelization; ‚Ä¢ POLYGEIST: Our flow with Pluto and extra transforms; ‚Ä¢ POLYGEISTPAR: Same as above but with -parallel Pluto schedule, Polygeist parallelization and reductions. Running between source and LLVM IR levels, we expect Polygeist to benefit from both worlds, thus getting code that is on par or better than competitors. When using Pluto, both standalone and within Polygeist, we disable the emission of vectorization hints and loop unrolling to make sure both transformations are fully controlled by the LLVM optimizer, which also runs in Polly flows. We run Polly in the latest stage of Clang compilation, using -mllvm -polly and additional flags to enable affine scheduling, tiling and parallelization as required. Polly is taken at the same LLVM commit as Clang. We disable pattern-based optimizations [30] that are not available elsewhere. Figures 11 and12 summarize the results for sequential and parallel flows, respectively. Êàë‰ª¨Â∞ÜPolygeist‰∏éÊ∫ê‰ª£Á†ÅÁ∫ßÂíå‰∏≠Èó¥Ë°®Á§∫Á∫ß‰ºòÂåñÂô®ÔºàPlutoÂíåPollyÔºâËøõË°åÊØîËæÉÔºåÈÖçÁΩÆÂ¶Ç‰∏ãÔºö PLUTOÔºö‰ΩøÁî®-polycc 3Âèä-noparallelÂíå-tileÊ†áÂøóÁöÑPlutoÁºñËØëÂô®Ëá™Âä®ËΩ¨Êç¢Ôºõ PLUTOPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜ‰ΩøÁî®-parallelÊ†áÂøóÔºõ POLLYÔºöPolly [7]ÁöÑLLVMÈÄöÈÅìÔºåÂÖ∑Êúâ‰ªøÂ∞ÑË∞ÉÂ∫¶ÂíåÂàáÁâáÔºåÊ≤°ÊúâÂü∫‰∫éÊ®°ÂºèÁöÑ‰ºòÂåñ [30]Ôºõ POLLYPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜËøõË°å‰∫ÜËá™Âä®Âπ∂Ë°åÂåñÔºõ POLYGEISTÔºöÊàë‰ª¨ÁöÑÂ∑•‰ΩúÊµÅÔºåÁªìÂêà‰∫ÜPlutoÂíåÈ¢ùÂ§ñÁöÑÂèòÊç¢Ôºõ POLYGEISTPARÔºö‰∏é‰∏äËø∞Áõ∏ÂêåÔºå‰ΩÜ‰ΩøÁî®-parallelÁöÑPlutoË∞ÉÂ∫¶ÔºåPolygeistÂπ∂Ë°åÂåñÂíåÂΩíÁ∫¶„ÄÇ Âú®Ê∫ê‰ª£Á†ÅÂíåLLVM IRÁ∫ßÂà´‰πãÈó¥ËøêË°åÊó∂ÔºåÊàë‰ª¨ÊúüÊúõPolygeistËÉΩÂ§ü‰ªéËøô‰∏§ËÄÖÁöÑ‰ºòÁÇπ‰∏≠ÂèóÁõäÔºå‰ªéËÄåÁîüÊàêÁöÑ‰ª£Á†ÅËÉΩÂ§ü‰∏éÁ´û‰∫âÂØπÊâãÁõ∏Â™≤ÁæéÊàñÊõ¥‰ºò„ÄÇÂú®‰ΩøÁî®PlutoÊó∂ÔºåÊó†ËÆ∫ÊòØÁã¨Á´ãÂú∞ËøòÊòØÂú®Polygeist‰∏≠ÔºåÊàë‰ª¨ÈÉΩ‰ºöÁ¶ÅÁî®ÂêëÈáèÂåñÊèêÁ§∫ÂíåÂæ™ÁéØÂ±ïÂºÄÁöÑÂèëÂá∫Ôºå‰ª•Á°Æ‰øùËøô‰∏§ÁßçÂèòÊç¢ÈÉΩÂÆåÂÖ®Áî±LLVM‰ºòÂåñÂô®ÊéßÂà∂ÔºåËØ•‰ºòÂåñÂô®‰πüÂú®PollyÊµÅÁ®ã‰∏≠ËøêË°å„ÄÇÊàë‰ª¨Âú®ClangÁºñËØëÁöÑÊúÄÊñ∞Èò∂ÊÆµËøêË°åPollyÔºå‰ΩøÁî®-mllvm -pollyÂèäÂÖ∂‰ªñÊ†áÂøó‰ª•ÂêØÁî®‰ªøÂ∞ÑË∞ÉÂ∫¶„ÄÅÂàáÁâáÂíåÂπ∂Ë°åÂåñ„ÄÇPolly‰∏éClang‰ΩøÁî®Áõ∏ÂêåÁöÑLLVMÊèê‰∫§ÁâàÊú¨„ÄÇÊàë‰ª¨Á¶ÅÁî®Âú®ÂÖ∂‰ªñÂú∞Êñπ‰∏çÂèØÁî®ÁöÑÂü∫‰∫éÊ®°ÂºèÁöÑ‰ºòÂåñ [30]„ÄÇÂõæ11ÂíåÂõæ12ÂàÜÂà´ÊÄªÁªì‰∫ÜÈ°∫Â∫èÂíåÂπ∂Ë°åÊµÅÁ®ãÁöÑÁªìÊûú„ÄÇ # A. Benchmarking The transformation of reduction loops, in particular parallelization, may result in a different order of partial result accumulation. This is not allowed under IEEE 754 semantics, but is supported by compilers with -ffast-math option. We found that Polybench allocation function hinders Clang/LLVM alias analysis, negatively affecting performance 2 LLVM commit 20d5c42e0ef5d252b434bcb610b04f1cb79fe771 3 Pluto commit dae26e77b94b2624a540c08ec7128f20cd7b7985 in, e.g., adi. Therefore, we modified all benchmarks to use malloc that is known to produce non-aliasing pointers. Èôç‰ΩéÂæ™ÁéØÁöÑËΩ¨Êç¢ÔºåÁâπÂà´ÊòØÂπ∂Ë°åÂåñÔºåÂèØËÉΩ‰ºöÂØºËá¥ÈÉ®ÂàÜÁªìÊûúÁ¥ØÁßØÁöÑÈ°∫Â∫èÂèëÁîüÂèòÂåñ„ÄÇËøôÂú® IEEE 754 ËØ≠‰πâ‰∏ãÊòØ‰∏çÂÖÅËÆ∏ÁöÑÔºå‰ΩÜ‰ΩøÁî® -ffast-math ÈÄâÈ°πÁöÑÁºñËØëÂô®ÊîØÊåÅËøôÁßçÊÉÖÂÜµ„ÄÇÊàë‰ª¨ÂèëÁé∞ÔºåPolybench ÁöÑÂàÜÈÖçÂáΩÊï∞‰ºöÂ¶®Á¢ç Clang/LLVM ÁöÑÂà´ÂêçÂàÜÊûêÔºå‰ªéËÄåÂØπÊÄßËÉΩ‰∫ßÁîüË¥üÈù¢ÂΩ±Âìç 2 LLVM Êèê‰∫§ 20d5c42e0ef5d252b434bcb610b04f1cb79fe771 3 Pluto Êèê‰∫§ dae26e77b94b2624a540c08ec7128f20cd7b7985Ôºå‰∏æ‰æãÊù•ËØ¥ÔºåÂú® adi ‰∏≠„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨‰øÆÊîπ‰∫ÜÊâÄÊúâÂü∫ÂáÜÊµãËØïÔºå‰ΩøÁî®Â∑≤Áü•‰ºö‰∫ßÁîüÈùûÂà´ÂêçÊåáÈíàÁöÑ malloc„ÄÇ # B. Baseline Comparison We did not observe a significant difference between the runtimes of CLANG and CLANGSING configurations, with a geometric mean of 0.43% symmetric difference 4 across benchmarks. Therefore, we only consider CLANG as baseline throughout the remainder of this paper. We did not observe a significant difference between the runtimes of CLANG and MLIR-CLANG configurations either, with a geometric mean of 0.24% symmetric difference. We found a variation in runtimes of short-running benchmarks, in particular jacobi-1d. This can be attributed to the interaction with the data initialization and benchmarking code, and with other OS processes. Excluding the benchmarks running in under 0.05s (jacobi-1d, gesummv, atax, bicg) from the analysis, we obtain 0.32% and 0.17% geomean symmetric differences respectively for the two comparisons above. These results suggest that our flow has no unexplained (dis)advantages over the baseline. Êàë‰ª¨Ê≤°ÊúâËßÇÂØüÂà∞CLANGÂíåCLANGSINGÈÖçÁΩÆ‰πãÈó¥ÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÊòæËëóÂ∑ÆÂºÇÔºåÂú®Âü∫ÂáÜÊµãËØï‰∏≠ÔºåÂÆÉ‰ª¨ÁöÑÂá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.43%„ÄÇÂõ†Ê≠§ÔºåÂú®Êú¨ÊñáÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜ‰∏≠ÔºåÊàë‰ª¨‰ªÖËÄÉËôëCLANG‰Ωú‰∏∫Âü∫Á∫ø„ÄÇÂêåÊ†∑ÔºåÊàë‰ª¨‰πüÊ≤°ÊúâËßÇÂØüÂà∞CLANGÂíåMLIR-CLANGÈÖçÁΩÆ‰πãÈó¥ÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÊòæËëóÂ∑ÆÂºÇÔºåÂÖ∂Âá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.24%„ÄÇ Êàë‰ª¨ÂèëÁé∞Áü≠ËøêË°åÂü∫ÂáÜÁöÑËøêË°åÊó∂Èó¥Â≠òÂú®ÂèòÂä®ÔºåÁâπÂà´ÊòØÂú®jacobi-1d‰∏ä„ÄÇËøôÂèØ‰ª•ÂΩíÂõ†‰∫éÊï∞ÊçÆÂàùÂßãÂåñÂíåÂü∫ÂáÜÊµãËØï‰ª£Á†Å‰πãÈó¥ÁöÑÁõ∏‰∫í‰ΩúÁî®Ôºå‰ª•ÂèäÂÖ∂‰ªñÊìç‰ΩúÁ≥ªÁªüËøõÁ®ãÁöÑÂΩ±Âìç„ÄÇ‰ªéÂàÜÊûê‰∏≠ÊéíÈô§ËøêË°åÊó∂Èó¥Â∞ë‰∫é0.05ÁßíÁöÑÂü∫ÂáÜÔºàÂ¶Çjacobi-1d„ÄÅgesummv„ÄÅatax„ÄÅbicgÔºâÔºåÊàë‰ª¨ÂàÜÂà´Ëé∑Âæó‰∏äËø∞‰∏§‰∏™ÊØîËæÉÁöÑÂá†‰ΩïÂπ≥ÂùáÂØπÁß∞Â∑Æ‰∏∫0.32%Âíå0.17%„ÄÇËøô‰∫õÁªìÊûúË°®ÊòéÔºåÊàë‰ª¨ÁöÑÊµÅÁ®ãÂú®Âü∫Á∫ø‰πã‰∏äÊ≤°ÊúâÊú™Ëß£ÈáäÁöÑÔºà‰∏çÔºâ‰ºòÂäø„ÄÇ # C. Performance Differences in Sequential Code Overall, Polygeist leads to larger speedups, with 2.53√ó geometric mean, than both Pluto (2.34√ó) and Polly (1.41√ó), although improvements are not systematic. Some difference between Polygeist and Polly is due to the employed polyhedral schedulers, e.g., in lu and mvt. Polygeist produces code faster tha both Pluto and Polly in 2mm, 3mm and others thanks to statement splitting, see Section V-E. Given identical statements and schedules, codegen-level optimization accounts for other performance difference. seidel-2d is the clearest example: Pluto executes 2.7‚Ä¢10 11 more integer instructions than Polygeist. Assuming these to be index/address computations, a mix of add (throughput 1/2 or 1/4) and imul/shl (thoughput 1), we can expect a ‚âà 59s difference at 3GHz, consistent with experimental observations. Polygeist optimizes away a part of those in its post-optimization phase and emits homogeneous address computation from memref with proper machine size type, enabling more aggressive bound analysis and simplification in the downstream compiler. Conversely, jacobi-2d has poorer performance because Polygeist gives up on simplifying CLooG code, with up to 75 statement copies in 40 branches, for compiler performance reasons, as opposed to Clang that takes up to 5s to process it but results in better vectorization. Further work is necessary to address this issue by emitting vector instructions directly from Polygeist. Êï¥‰ΩìËÄåË®ÄÔºåPolygeist Áõ∏ËæÉ‰∫é PlutoÔºà2.34√óÔºâÂíå PollyÔºà1.41√óÔºâÊèê‰æõ‰∫ÜÊõ¥Â§ßÁöÑÂä†ÈÄüÔºåÂá†‰ΩïÂπ≥ÂùáÂÄº‰∏∫ 2.53√óÔºåÂ∞ΩÁÆ°ÊîπËøõÂπ∂‰∏çÊòØÁ≥ªÁªüÊÄßÁöÑ„ÄÇPolygeist Âíå Polly ‰πãÈó¥ÁöÑ‰∏Ä‰∫õÂ∑ÆÂºÇÊòØÁî±‰∫éÊâÄÈááÁî®ÁöÑÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®Ôºå‰æãÂ¶ÇÂú® lu Âíå mvt ‰∏≠„ÄÇÂæóÁõä‰∫éËØ≠Âè•ÂàÜÂâ≤ÔºåPolygeist Âú® 2mm„ÄÅ3mm ÂèäÂÖ∂‰ªñÊüê‰∫õÊÉÖÂÜµ‰∏ãÁîüÊàêÁöÑ‰ª£Á†ÅÈÄüÂ∫¶Ë∂ÖËøá‰∫Ü Pluto Âíå PollyÔºåËØ¶ËßÅÁ¨¨ V-E ËäÇ„ÄÇ Âú®ÁªôÂÆöÁõ∏ÂêåËØ≠Âè•ÂíåË∞ÉÂ∫¶ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰ª£Á†ÅÁîüÊàêÂ±ÇÈù¢ÁöÑ‰ºòÂåñÊòØÈÄ†ÊàêÂÖ∂‰ªñÊÄßËÉΩÂ∑ÆÂºÇÁöÑÂéüÂõ†„ÄÇseidel-2d ÊòØÊúÄÊòéÊòæÁöÑ‰æãÂ≠êÔºöPluto ÊâßË°åÁöÑÊï¥Êï∞Êåá‰ª§ÊØî Polygeist Â§öÂá∫ 2.7‚Ä¢10^11 Ê¨°„ÄÇÂÅáËÆæËøô‰∫õÊåá‰ª§ÈÉΩÊòØÁ¥¢Âºï/Âú∞ÂùÄËÆ°ÁÆóÔºåÊ∑∑Âêà‰∫Ü addÔºàÂêûÂêêÈáè‰∏∫ 1/2 Êàñ 1/4ÔºâÂíå imul/shlÔºàÂêûÂêêÈáè‰∏∫ 1ÔºâÔºåÊàë‰ª¨ÂèØ‰ª•È¢ÑËÆ°Âú® 3GHz ‰∏ã‰ºöÊúâ ‚âà 59 ÁßíÁöÑÂ∑ÆÂºÇÔºåËøô‰∏éÂÆûÈ™åËßÇÂØüÁªìÊûú‰∏ÄËá¥„ÄÇPolygeist Âú®ÂÖ∂Âêé‰ºòÂåñÈò∂ÊÆµ‰ºòÂåñÊéâ‰∫Ü‰∏ÄÈÉ®ÂàÜÊåá‰ª§ÔºåÂπ∂‰ªé memref ÂèëÂá∫ÈÄÇÂΩìÊú∫Âô®Â§ßÂ∞èÁ±ªÂûãÁöÑÂùáÂåÄÂú∞ÂùÄËÆ°ÁÆóÔºå‰Ωø‰∏ãÊ∏∏ÁºñËØëÂô®ËÉΩÂ§üËøõË°åÊõ¥ÊøÄËøõÁöÑÁïåÈôêÂàÜÊûêÂíåÁÆÄÂåñ„ÄÇÁõ∏ÂèçÔºåÁî±‰∫é Polygeist ‰∏∫‰∫ÜÁºñËØëÂô®ÊÄßËÉΩÂéüÂõ†ÊîæÂºÉ‰∫ÜÂØπ CLooG ‰ª£Á†ÅÁöÑÁÆÄÂåñÔºåjacobi-2d ÁöÑÊÄßËÉΩËæÉÂ∑ÆÔºåÂú® 40 ‰∏™ÂàÜÊîØ‰∏≠ÊúâÂ§öËææ 75 ‰∏™ËØ≠Âè•ÂâØÊú¨ÔºåËÄå Clang Â§ÑÁêÜËøô‰∫õ‰ª£Á†ÅÈúÄËÄóÊó∂Â§öËææ 5 ÁßíÔºå‰ΩÜÂÖ∂ÁªìÊûúÂç¥ÂÆûÁé∞‰∫ÜÊõ¥Â•ΩÁöÑÂêëÈáèÂåñ„ÄÇÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÁöÑÂ∑•‰ΩúÊù•Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåÈÄöËøáÁõ¥Êé•‰ªé Polygeist ÂèëÂá∫ÂêëÈáèÊåá‰ª§„ÄÇ # D. Performance Differences In Parallel Code Similarly to sequential code, some performance differences are due to different schedulers. For example, in cholesky and lu, both Pluto and Polygeist outperform Polly, and the remaining gap can be attributed to codegen-level differences. Conversely, in gemver and mvt Polly has a benefit over both Fig. 10. Mean and 95% confidence intervals (log scale) of program run time across 5 runs of Polybench in CLANG, CLANGSING and MLIR-CLANG configurations, lower is better. The run times of code produced by Polygeist without optimization is comparable to that of Clang. No significant variation is observed between single and double optimization. Short-running jacobi-1d shows high intra-group variation. Fig. 11. Median speedup over CLANG for sequential configurations (log scale), higher is better. Polygeist outperforms (2.53√ó geomean speedup) both Pluto (2.34√ó) and Polly (1.41√ó) on average. Pluto can't process adi, which is therefore excluded from summary statistics. Fig. 12. Median speedup over CLANG for parallel configurations (log scale), higher is better. Polygeist outperforms (9.47√ó geomean speedup) both Pluto (7.54√ó) and Polly (3.26√ó) on average. Pluto can't process adi, which is therefore excluded from summary statistics. Pluto and Polygeist. On ludcmp and syr(2)k, SSA-level optimizations let Polygeist produce code which is faster than Pluto and at least as fast as Polly. These results demonstrate that Polygeist indeed leverages the benefits of both the affine and SSA-based optimizations. Polygeist is the only flow that obtains speedup on deriche (6.9√ó) and symm (7.7√ó). Examining the output code, we observe that only Polygeist manages to parallelize these two benchmarks. Considering the input code in Figure 13, one can observe that the i loop reuses the ym1 variable, which is in-terpreted as parallelism-preventing loop-carried dependency by polyhedral schedulers. Polygeist performs its own parallelism analysis after promoting ym1 to an SSA register (carried by the j loop) whose use-def range does not prevent parallelization. Similarly, the Polygeist parallelizer identifies two benchmarks with parallel reduction loops that are not contained in other parallel loops: gramschmidt and durbin. gramschmidt benefits from a 56√ó speedup with Polygeist, compared to 34√ó with Polly and 54√ó with Pluto. durbin sees a 6√ó slowdown since the new parallel loop has relatively for (i=0; if64 { %0=affine.load %y1[%i,%j] // ... affine.yield %0 }} Fig. 13. Excerpt from the deriche benchmark. The outer loop reuses ym1 which makes it appear non-parallel to affine schedulers (left). Polygeist detects parallelism thanks to its mem2reg optimization, reduction-like loop-carried %ym1 value detection and late parallelization (right). few iterations and is nested inside a sequential loop, leading to synchronization costs that outweigh the parallelism benefit. Section V-F explores the durbin benchmark in more detail. Polybench is a collection of codes (mostly) known to be parallel and, as such, has little need for reduction parallelization on CPU where one degree of parallelism is sufficient. When targeting inherently target architectures as GPUs, however, exploiting reduction parallelism could be vital for achieving peak performance [31], [24]. ÂêåÊ†∑ÔºåÂØπ‰∫éÂπ∂Ë°å‰ª£Á†ÅÔºåÊüê‰∫õÊÄßËÉΩÂ∑ÆÂºÇÊòØÁî±‰∫é‰∏çÂêåÁöÑË∞ÉÂ∫¶Âô®„ÄÇ‰æãÂ¶ÇÔºåÂú® cholesky Âíå lu ‰∏≠ÔºåPluto Âíå Polygeist ÁöÑÊÄßËÉΩÈÉΩ‰ºò‰∫é PollyÔºåÂâ©‰ΩôÁöÑÂ∑ÆË∑ùÂèØ‰ª•ÂΩíÂõ†‰∫é‰ª£Á†ÅÁîüÊàêÁ∫ßÂà´ÁöÑÂ∑ÆÂºÇ„ÄÇÁõ∏ÂèçÔºåÂú® gemver Âíå mvt ‰∏≠ÔºåPolly Áõ∏ËæÉ‰∫é‰∏§ËÄÖÁöÜÊúâ‰ºòÂäø„ÄÇ Âõæ 10 ÊòæÁ§∫‰∫ÜÂú® CLANG„ÄÅCLANGSING Âíå MLIR-CLANG ÈÖçÁΩÆ‰∏ãÔºåPolybench ÁöÑ‰∫îÊ¨°ËøêË°å‰∏≠Á®ãÂ∫èËøêË°åÊó∂Èó¥ÁöÑÂùáÂÄºÂíå 95% ÁΩÆ‰ø°Âå∫Èó¥ÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂ä‰ΩéË∂äÂ•Ω„ÄÇÁî± Polygeist ‰∫ßÁîüÁöÑÊú™‰ºòÂåñ‰ª£Á†ÅÁöÑËøêË°åÊó∂Èó¥‰∏é Clang ÁöÑËøêË°åÊó∂Èó¥Áõ∏ÂΩì„ÄÇ‰∏çÂêåÁ®ãÂ∫¶ÁöÑÂçïÈáçÂíåÂèåÈáç‰ºòÂåñ‰πãÈó¥Ê≤°ÊúâËßÇÂØüÂà∞ÊòæËëóÂ∑ÆÂºÇ„ÄÇËøêË°åÊó∂Èó¥ËæÉÁü≠ÁöÑ jacobi-1d ÊòæÁ§∫Âá∫È´òÁöÑÁªÑÂÜÖÂèòÂºÇÊÄß„ÄÇ Âõæ 11 ÊòæÁ§∫‰∫ÜÂú®È°∫Â∫èÈÖçÁΩÆ‰∏ãÁõ∏ÂØπ‰∫é CLANG ÁöÑ‰∏≠‰ΩçÊï∞Âä†ÈÄüÊØîÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂äÈ´òË∂äÂ•Ω„ÄÇPolygeist Âú®Âπ≥ÂùáÊÉÖÂÜµ‰∏ãÁöÑÂä†ÈÄüÊØîÔºàÂá†‰ΩïÂùáÂÄºÂä†ÈÄüÊØî‰∏∫ 2.53√óÔºâ‰ºò‰∫é PlutoÔºà2.34√óÔºâÂíå PollyÔºà1.41√óÔºâ„ÄÇPluto Êó†Ê≥ïÂ§ÑÁêÜ adiÔºåÂõ†Ê≠§ËØ•Ê°à‰æãË¢´ÊéíÈô§Âú®ÊÄªÁªìÁªüËÆ°‰πãÂ§ñ„ÄÇ Âõæ 12 ÊòæÁ§∫‰∫ÜÂú®Âπ∂Ë°åÈÖçÁΩÆ‰∏ãÁõ∏ÂØπ‰∫é CLANG ÁöÑ‰∏≠‰ΩçÊï∞Âä†ÈÄüÊØîÔºàÂØπÊï∞Â∞∫Â∫¶ÔºâÔºåÂÄºË∂äÈ´òË∂äÂ•Ω„ÄÇPolygeist Âú®Âπ≥ÂùáÊÉÖÂÜµ‰∏ãÁöÑÂä†ÈÄüÊØîÔºàÂá†‰ΩïÂùáÂÄºÂä†ÈÄüÊØî‰∏∫ 9.47√óÔºâ‰ºò‰∫é PlutoÔºà7.54√óÔºâÂíå PollyÔºà3.26√óÔºâ„ÄÇPluto Êó†Ê≥ïÂ§ÑÁêÜ adiÔºåÂõ†Ê≠§ËØ•Ê°à‰æã‰πüË¢´ÊéíÈô§Âú®ÊÄªÁªìÁªüËÆ°‰πãÂ§ñ„ÄÇ Âú® ludcmp Âíå syr(2)k ‰∏≠ÔºåSSA Á∫ßÂà´ÁöÑ‰ºòÂåñ‰ΩøÂæó Polygeist ÁîüÊàêÁöÑ‰ª£Á†ÅÊØî Pluto Êõ¥Âø´ÔºåÂπ∂‰∏îËá≥Â∞ë‰∏é Polly ÂêåÊ†∑Âø´„ÄÇËøô‰∫õÁªìÊûúË°®ÊòéÔºåPolygeist Á°ÆÂÆûÂà©Áî®‰∫Ü‰ªøÂ∞Ñ‰ºòÂåñÂíå SSA Âü∫Á°Ä‰ºòÂåñÁöÑ‰ºòÁÇπ„ÄÇ Polygeist ÊòØÂîØ‰∏ÄÂú® dericheÔºàÂä†ÈÄüÊØî 6.9√óÔºâÂíå symmÔºàÂä†ÈÄüÊØî 7.7√óÔºâ‰∏äÂÆûÁé∞Âä†ÈÄüÁöÑÁºñËØëÊµÅÁ®ã„ÄÇÈÄöËøáÊ£ÄÊü•ËæìÂá∫‰ª£Á†ÅÔºåÊàë‰ª¨ËßÇÂØüÂà∞Âè™Êúâ Polygeist ÊàêÂäüÂú∞ÂØπËøô‰∏§‰∏™Âü∫ÂáÜËøõË°å‰∫ÜÂπ∂Ë°åÂåñ„ÄÇËÄÉËôëÂà∞Âõæ 13 ‰∏≠ÁöÑËæìÂÖ•‰ª£Á†ÅÔºåÂèØ‰ª•ËßÇÂØüÂà∞ i Âæ™ÁéØÈáçÁî®‰∫Ü ym1 ÂèòÈáèÔºåËøôË¢´‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®Ëß£Èáä‰∏∫Â¶®Á¢çÂπ∂Ë°åÂåñÁöÑÂæ™ÁéØÊê∫Â∏¶‰æùËµñ„ÄÇPolygeist Âú®Â∞Ü ym1 ÊèêÂçá‰∏∫‰∏Ä‰∏™Áî± j Âæ™ÁéØÊê∫Â∏¶ÁöÑ SSA ÂØÑÂ≠òÂô®ÂêéÔºåËøõË°åËá™Â∑±ÁöÑÂπ∂Ë°åÊÄßÂàÜÊûêÔºåÂÖ∂‰ΩøÁî®ÂÆö‰πâËåÉÂõ¥‰∏çÂ¶®Á¢çÂπ∂Ë°åÂåñ„ÄÇ Á±ª‰ººÂú∞ÔºåPolygeist ÁöÑÂπ∂Ë°åÂåñÂô®ËØÜÂà´Âá∫‰∏§‰∏™ÂÖ∑ÊúâÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØÁöÑÂü∫ÂáÜÔºåËøô‰∫õÂæ™ÁéØ‰∏çÂåÖÂê´Âú®ÂÖ∂‰ªñÂπ∂Ë°åÂæ™ÁéØ‰∏≠Ôºögramschmidt Âíå durbin„ÄÇÁõ∏ÊØî‰∫é Polly ÁöÑ 34√ó Âíå Pluto ÁöÑ 54√óÔºågramschmidt Âú® Polygeist ÁöÑÂ∏ÆÂä©‰∏ãËé∑Âæó‰∫Ü 56√ó ÁöÑÂä†ÈÄü„ÄÇdurbin ÂàôÂá∫Áé∞‰∫Ü 6√ó ÁöÑÂáèÈÄüÔºåÂõ†‰∏∫Êñ∞ÁöÑÂπ∂Ë°åÂæ™ÁéØËø≠‰ª£Ê¨°Êï∞Áõ∏ÂØπËæÉÂ∞ëÔºåÂπ∂‰∏îÂµåÂ•óÂú®‰∏Ä‰∏™È°∫Â∫èÂæ™ÁéØÂÜÖÔºåÂØºËá¥ÂêåÊ≠•ÊàêÊú¨Ë∂ÖËøá‰∫ÜÂπ∂Ë°åÂåñÂ∏¶Êù•ÁöÑÂ•ΩÂ§Ñ„ÄÇÁ¨¨ V-F ËäÇÂ∞ÜÊõ¥ËØ¶ÁªÜÂú∞Êé¢ËÆ® durbin Âü∫ÂáÜ„ÄÇ Polybench ÊòØ‰∏ÄÁªÑÔºàÂ§ßÂ§öÊï∞Â∑≤Áü•ÔºâÂÖ∑ÊúâÂπ∂Ë°åÁâπÊÄßÁöÑ‰ª£Á†ÅÔºåÂõ†Ê≠§Âú® CPU ‰∏äËøõË°åÂΩíÁ∫¶Âπ∂Ë°åÂåñÁöÑÈúÄÊ±Ç‰∏çÂ§ßÔºåÂõ†‰∏∫Âè™Êúâ‰∏ÄÂ∫¶ÁöÑÂπ∂Ë°åÊÄßÂ∞±Â∑≤Ë∂≥Â§ü„ÄÇÁÑ∂ËÄåÔºåÂΩìÈíàÂØπÂõ∫ÊúâÁöÑÁõÆÊ†áÊû∂ÊûÑÂ¶Ç GPU Êó∂ÔºåÂà©Áî®ÂΩíÁ∫¶Âπ∂Ë°åÊÄßÂèØËÉΩÂØπ‰∫éÂÆûÁé∞Â≥∞ÂÄºÊÄßËÉΩËá≥ÂÖ≥ÈáçË¶Å [31], [24]„ÄÇ # E. Case Study: Statement Splitting We identified 5 benchmarks where the statement splitting heuristic applied: 2mm, 3mm, correlation, covariance and trmm. To assess the effect of the transformation, we executed these benchmarks with statement splitting disabled, suffixed with -nosplit in Figure 14. In sequential versions, 2mm is 4.1% slower (3.13s vs 3.26s), but the other benchmarks see speedups of 25%, 50%, 51% and 27%, respectively. For parallel versions, the speedups are of 36%, 20%, 44%, 40% and -9% respectively. Examination of polyhedral scheduler outputs demonstrates that it indeed produced the desired schedules. For example, in the correlation benchmark which had the statement A[i][j] += B[k][i] * B[k][j] Polygeist was able to find the (k, i, j) loop order after splitting. Using hardware performance counters on sequential code we confirm that the overall cache miss ratio has indeed decreased by 75%, 50%, 20%, 27%, and -26%, respectively. However, the memory traffic estimated by the number of bus cycles has increased by 9% for 2mm, and decreased by 18%, 32%, 32%, and 21% for the other benchmarks. This metric strongly correlates with the observed performance difference in the same run (r = 0.99, p = 3 ‚Ä¢ 10 -11 ). This behavior is likely due to the scheduler producing a different fusion structure, e.g., not fusing outermost loops in 2mm, which also affects locality. Similar results can be observed for parallel code. Further research is necessary to exploit the statement splitting opportunities, created by Polygeist, and interplay with fusion. E. Ê°à‰æãÁ†îÁ©∂ÔºöËØ≠Âè•ÊãÜÂàÜ Êàë‰ª¨Á°ÆÂÆö‰∫Ü 5 ‰∏™Âü∫ÂáÜÊµãËØïÔºåÂÖ∂‰∏≠Â∫îÁî®‰∫ÜËØ≠Âè•ÊãÜÂàÜÂêØÂèëÂºèÊñπÊ≥ïÔºö2mm„ÄÅ3mm„ÄÅÁõ∏ÂÖ≥ÊÄß„ÄÅÂçèÊñπÂ∑ÆÂíå trmm„ÄÇ‰∏∫‰∫ÜËØÑ‰º∞ÂèòÊç¢ÁöÑÊïàÊûúÔºåÊàë‰ª¨ÊâßË°å‰∫ÜËøô‰∫õÂü∫ÂáÜÊµãËØïÔºåÂπ∂Á¶ÅÁî®‰∫ÜËØ≠Âè•ÊãÜÂàÜÔºåÁî® -nosplit ÂêéÁºÄÊ†áËÆ∞ÔºåÂ¶ÇÂõæ 14 ÊâÄÁ§∫„ÄÇÂú®È°∫Â∫èÁâàÊú¨‰∏≠Ôºå2mm ÁöÑÈÄüÂ∫¶ÊÖ¢‰∫Ü 4.1%Ôºà3.13 ÁßíÂØπÊØî 3.26 ÁßíÔºâÔºå‰ΩÜÂÖ∂‰ªñÂü∫ÂáÜÊµãËØïÂàÜÂà´ÁúãÂà∞‰∫Ü 25%„ÄÅ50%„ÄÅ51% Âíå 27% ÁöÑÂä†ÈÄü„ÄÇÂØπ‰∫éÂπ∂Ë°åÁâàÊú¨ÔºåÈÄüÂ∫¶ÊèêÂçáÂàÜÂà´‰∏∫ 36%„ÄÅ20%„ÄÅ44%„ÄÅ40% Âíå -9%„ÄÇ ÂØπÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ËæìÂá∫ÁöÑÊ£ÄÊü•Ë°®ÊòéÔºåÂÆÉÁ°ÆÂÆûÁîüÊàê‰∫ÜÈ¢ÑÊúüÁöÑË∞ÉÂ∫¶„ÄÇ‰æãÂ¶ÇÔºåÂú®Áõ∏ÂÖ≥ÊÄßÂü∫ÂáÜ‰∏≠ÔºåËØ≠Âè• A[i][j] += B[k][i] * B[k][j] Polygeist ËÉΩÂ§üÂú®ÊãÜÂàÜÂêéÊâæÂà∞ (k, i, j) ÁöÑÂæ™ÁéØÈ°∫Â∫è„ÄÇÈÄöËøáÂú®È°∫Â∫è‰ª£Á†Å‰∏ä‰ΩøÁî®Á°¨‰ª∂ÊÄßËÉΩËÆ°Êï∞Âô®ÔºåÊàë‰ª¨Á°ÆËÆ§Êï¥‰ΩìÁºìÂ≠òÁº∫Â§±ÁéáÁ°ÆÂÆûÂàÜÂà´Èôç‰Ωé‰∫Ü 75%„ÄÅ50%„ÄÅ20%„ÄÅ27% Âíå -26%„ÄÇÁÑ∂ËÄåÔºåÁî±ÊÄªÂå£Âë®Êúü‰º∞ÁÆóÁöÑÂÜÖÂ≠òÊµÅÈáèÂú® 2mm ‰∏≠Â¢ûÂä†‰∫Ü 9%ÔºåËÄåÂÖ∂‰ªñÂü∫ÂáÜÊµãËØïÂàôÂàÜÂà´ÂáèÂ∞ë‰∫Ü 18%„ÄÅ32%„ÄÅ32% Âíå 21%„ÄÇËØ•ÊåáÊ†á‰∏éÂêå‰∏ÄËøêË°å‰∏≠ËßÇÂØüÂà∞ÁöÑÊÄßËÉΩÂ∑ÆÂºÇÂº∫Áõ∏ÂÖ≥Ôºàr = 0.99Ôºåp = 3 ‚Ä¢ 10 -11Ôºâ„ÄÇËøôÁßçË°å‰∏∫ÂèØËÉΩÊòØÁî±‰∫éË∞ÉÂ∫¶Âô®‰∫ßÁîü‰∫Ü‰∏çÂêåÁöÑËûçÂêàÁªìÊûÑÔºå‰æãÂ¶ÇÔºåÂú® 2mm ‰∏≠Ê≤°ÊúâËûçÂêàÊúÄÂ§ñÂ±ÇÁöÑÂæ™ÁéØÔºåËøô‰πüÂΩ±Âìç‰∫ÜÂ±ÄÈÉ®ÊÄß„ÄÇÂπ∂Ë°å‰ª£Á†Å‰∏≠‰πüÂèØ‰ª•ËßÇÂØüÂà∞Á±ª‰ººÁöÑÁªìÊûú„ÄÇËøõ‰∏ÄÊ≠•ÁöÑÁ†îÁ©∂ÊúâÂøÖË¶ÅÂà©Áî® Polygeist ÂàõÈÄ†ÁöÑËØ≠Âè•ÊãÜÂàÜÊú∫‰ºöÔºåÂπ∂‰∏éËûçÂêàËøõË°åÁõ∏‰∫í‰ΩúÁî®„ÄÇ # F. Case Study: Reduction Parallelization in durbin In this benchmark, Polygeist uses its reduction optimization to create a parallel loop that other tools cannot. For the relatively small input run by default, N = 4000 iterations inside another sequential loop with N iterations, the overall performance decreases. We hypothesize that the cost of creating parallel threads and synchronizing them outweighs the benefit of the additional parallelism and test our hypothesis by increasing N . Considering the results in Figure 15, one observes that Polygeist starts yielding speedups (> 1) for N ‚â• 16000 whereas Polly only does so at N ‚â• 224000, and to a much lesser extent: 6.62√ó vs 1.01√ó. Without reduction parallelization, Polygeist follows the same trajectory as Polly. Pluto fails to parallelize any innermost loop and shows no speedup. This evidences in favor of our hypothesis and highlights the importance of being able to parallelize reductions. F. Ê°à‰æãÁ†îÁ©∂ÔºöDurbin‰∏≠ÁöÑÂΩíÁ∫¶Âπ∂Ë°åÂåñ Âú®Ëøô‰∏™Âü∫ÂáÜÊµãËØï‰∏≠ÔºåPolygeistÂà©Áî®ÂÖ∂ÂΩíÁ∫¶‰ºòÂåñÂàõÂª∫‰∫Ü‰∏Ä‰∏™ÂÖ∂‰ªñÂ∑•ÂÖ∑Êó†Ê≥ïÂÆûÁé∞ÁöÑÂπ∂Ë°åÂæ™ÁéØ„ÄÇÂØπ‰∫éÈªòËÆ§ËøêË°åÁöÑÁõ∏ÂØπËæÉÂ∞èÁöÑËæìÂÖ•ÔºåN = 4000ÁöÑËø≠‰ª£ÂµåÂ•óÂú®Âè¶‰∏Ä‰∏™ÂÖ∑ÊúâNÊ¨°Ëø≠‰ª£ÁöÑÈ°∫Â∫èÂæ™ÁéØ‰∏≠ÔºåÊï¥‰ΩìÊÄßËÉΩÂá∫Áé∞‰∏ãÈôç„ÄÇÊàë‰ª¨ÂÅáËÆæÂàõÂª∫Âπ∂Ë°åÁ∫øÁ®ãÂíåÂêåÊ≠•ÂÆÉ‰ª¨ÁöÑÊàêÊú¨Ë∂ÖËøá‰∫ÜÈ¢ùÂ§ñÂπ∂Ë°åÊÄßÂ∏¶Êù•ÁöÑÊî∂ÁõäÔºåÂπ∂ÈÄöËøáÂ¢ûÂä†NÊù•È™åËØÅÊàë‰ª¨ÁöÑÂÅáËÆæ„ÄÇÊ†πÊçÆÂõæ15‰∏≠ÁöÑÁªìÊûúÔºåÂèØ‰ª•ËßÇÂØüÂà∞ÔºåPolygeistÂú®N ‚â• 16000Êó∂ÂºÄÂßã‰∫ßÁîüÂä†ÈÄüÊïàÊûúÔºà> 1ÔºâÔºåËÄåPolly‰ªÖÂú®N ‚â• 224000Êó∂Êâç‰ºöÂ¶ÇÊ≠§ÔºåÂπ∂‰∏îÂπÖÂ∫¶Ë¶ÅÂ∞èÂæóÂ§öÔºö6.62√óÂØπÊØî1.01√ó„ÄÇÂú®Ê≤°ÊúâÂΩíÁ∫¶Âπ∂Ë°åÂåñÁöÑÊÉÖÂÜµ‰∏ãÔºåPolygeistÁöÑË°®Áé∞‰∏éPollyÁõ∏Âêå„ÄÇPlutoÊú™ËÉΩÂØπ‰ªª‰ΩïÊúÄÂÜÖÂ±ÇÂæ™ÁéØËøõË°åÂπ∂Ë°åÂåñÔºåÂπ∂‰∏îÊòæÁ§∫Ê≤°ÊúâÂä†ÈÄü„ÄÇËøôÊîØÊåÅ‰∫ÜÊàë‰ª¨ÁöÑÂÅáËÆæÔºåÂπ∂Âº∫Ë∞É‰∫ÜËÉΩÂ§üÂπ∂Ë°åÂåñÂΩíÁ∫¶ÁöÑÈáçË¶ÅÊÄß„ÄÇ # VI. RELATED WORK a) MLIR Frontends: Since the adoption of MLIR under the LLVM umbrella, several frontends have been created for generating MLIR from domain-specific languages. Teckyl [2] connects the productivity-oriented Tensor Comprehensions [1] notation to MLIR's Linalg dialect. Flang-the LLVM's Fortran frontend-models Fortran-specific constructs using the FIR dialect [32]. COMET, a domain-specific compiler for chemistry, introduces an MLIR-targeting domain-specific frontend from a tensor-based language [33]. NPComp aims at providing the necessary infrastructure to compile numerical Python and PyTorch programs taking advantage of the MLIR infrastructure [34]. PET-to-MLIR converts a subset of polyhedral C code to MLIR's Affine dialect by parsing pet's internal represen-tation. In addition to currently not handling specific constructs (ifs, symbolic bounds, and external function calls), parsing pet's representation limits the frontend's usability as it cannot interface with non-polyhedral code such as initialization, verification, or printing routines [35]. In contrast, Polygeist generates MLIR from non-polyhedral code (though not necessarily in the Affine dialect). CIRCT is a new project under the LLVM umbrella that aims to apply MLIR development methodology to the electronic design automation industry [17]. Stripe uses MLIR Affine dialect as a substrate for loop transformations in machine learning models, including tiling and vectorization, and accepts a custom DSL as input [36]. VI. Áõ∏ÂÖ≥Â∑•‰Ωú a) MLIRÂâçÁ´ØÔºöËá™‰ªéMLIRË¢´Á∫≥ÂÖ•LLVMÊ°ÜÊû∂ÂêéÔºåÂ∑≤ÁªèÂàõÂª∫‰∫ÜÂ§ö‰∏™ÂâçÁ´ØÁî®‰∫é‰ªéÁâπÂÆöÈ¢ÜÂüüËØ≠Ë®ÄÁîüÊàêMLIR„ÄÇTeckyl [2] Â∞ÜÈù¢ÂêëÁîü‰∫ßÂäõÁöÑÂº†ÈáèÁêÜËß£ [1] Á¨¶Âè∑ËøûÊé•Âà∞MLIRÁöÑLinalgÊñπË®Ä„ÄÇFlangÔºåLLVMÁöÑFortranÂâçÁ´ØÔºå‰ΩøÁî®FIRÊñπË®ÄÂª∫Ê®°FortranÁâπÂÆöÁöÑÊûÑÈÄ† [32]„ÄÇCOMETÔºå‰∏Ä‰∏™ÈíàÂØπÂåñÂ≠¶È¢ÜÂüüÁöÑÁâπÂÆöÈ¢ÜÂüüÁºñËØëÂô®ÔºåÂºïÂÖ•‰∫Ü‰∏Ä‰∏™‰ªéÂü∫‰∫éÂº†ÈáèÁöÑËØ≠Ë®ÄÂà∞MLIRÁöÑÁâπÂÆöÈ¢ÜÂüüÂâçÁ´Ø [33]„ÄÇNPCompÊó®Âú®Êèê‰æõÂøÖË¶ÅÁöÑÂü∫Á°ÄËÆæÊñΩ‰ª•‰æøÁºñËØëÊï∞ÂÄºPythonÂíåPyTorchÁ®ãÂ∫èÔºå‰ªéËÄåÂà©Áî®MLIRÂü∫Á°ÄËÆæÊñΩ [34]„ÄÇPET-to-MLIRÈÄöËøáËß£ÊûêpetÁöÑÂÜÖÈÉ®Ë°®Á§∫ÔºåÂ∞Ü‰∏ÄÈÉ®ÂàÜÂ§öÈù¢‰ΩìC‰ª£Á†ÅËΩ¨Êç¢‰∏∫MLIRÁöÑAffineÊñπË®Ä„ÄÇÈô§‰∫ÜÂΩìÂâç‰∏çÂ§ÑÁêÜÁâπÂÆöÊûÑÈÄ†ÔºàÂ¶ÇifËØ≠Âè•„ÄÅÁ¨¶Âè∑ËæπÁïåÂíåÂ§ñÈÉ®ÂáΩÊï∞Ë∞ÉÁî®ÔºâÂ§ñÔºåËß£ÊûêpetÁöÑË°®Á§∫ÈôêÂà∂‰∫ÜÂâçÁ´ØÁöÑÂèØÁî®ÊÄßÔºåÂõ†‰∏∫ÂÆÉÊó†Ê≥ï‰∏éÈùûÂ§öÈù¢‰Ωì‰ª£Á†ÅÔºàÂ¶ÇÂàùÂßãÂåñ„ÄÅÈ™åËØÅÊàñÊâìÂç∞‰æãÁ®ãÔºâÊé•Âè£ [35]„ÄÇÁõ∏ÂØπËÄåË®ÄÔºåPolygeistËÉΩÂ§ü‰ªéÈùûÂ§öÈù¢‰Ωì‰ª£Á†ÅÁîüÊàêMLIRÔºàÂ∞ΩÁÆ°‰∏ç‰∏ÄÂÆöÂú®AffineÊñπË®Ä‰∏≠Ôºâ„ÄÇCIRCTÊòØ‰∏Ä‰∏™Êñ∞ÁöÑÈ°πÁõÆÔºåÊó®Âú®Â∞ÜMLIRÂºÄÂèëÊñπÊ≥ïÂ∫îÁî®‰∫éÁîµÂ≠êËÆæËÆ°Ëá™Âä®ÂåñË°å‰∏öÔºåÈö∂Â±û‰∫éLLVMÊ°ÜÊû∂ [17]„ÄÇStripe‰ΩøÁî®MLIRÁöÑAffineÊñπË®Ä‰Ωú‰∏∫Êú∫Âô®Â≠¶‰π†Ê®°Âûã‰∏≠ÁöÑÂæ™ÁéØÂèòÊç¢ÁöÑÂü∫Á°ÄÔºåÂåÖÊã¨ÊãÜÂàÜÂíåÂêëÈáèÂåñÔºåÂπ∂Êé•ÂèóËá™ÂÆö‰πâDSL‰Ωú‰∏∫ËæìÂÖ• [36]„ÄÇ # b) Compilers Leveraging Multiple Representations: The SUIF compiler infrastructure pioneered a combined internal representation that supports higher-level transformations, including loop optimization and parallelization [37] and, in particular, reduction parallelization [38]. Polygeist leverages MLIR abstractions unavailable in SUIF: regular and affine for loops, OpenMP reduction constructs, etc. It also benefits from the SSA+regions form, which is only available as external extension in SUIF [39], for IR simplification. PIPS supports loop transformations and inter-procedural optimization when targeting OpenMP [40], [41]. Polygeist differs from both by emitting machine code rather than source code, which allows it to emit parallel runtime and other directives that have no representation in the source language such as C. c) Combining \"Classical\" and Polyhedral Flows: Few papers have focused on combining \"classical\", mostly ASTlevel, and polyhedral transformations. PolyAST pioneered the approach by combining an affine scheduler with ASTlevel heuristics for fusion and tiling [42], although similar results were demonstrated with only polyhedral transformations [43]. An analogous approach was experimented in CUDA-CHiLL [44]. Arguably, many automated polyhedral flows perform loop fusion and/or tiling as a separate step that can be assimilated to classical transformations. Pluto [11] uses several \"syntactic\" postprocessing passes to exploit spatial locality and parallelism in stencils [45]. Several tools have been proposed to drive polyhedral loop transformations with scripts using classical loop transformations such as fusion and permutation as operations, including URUK [46], CHiLL [47] and Clay [48]. Polygeist differs from all of these because it preserves the results of such transformations in its IR along with polyhedral constructs and enables interaction between different levels of abstraction. d) Additional (Post-)Polyhedral Transformations: Support for handling reduction loops was proposed in Polly [25], but the code generation is not implemented. At the syntactic level, reduction support was added to PET via manual annotation with PENCIL directives [24]. R-Stream reportedly uses a variant of statement splitting to affect scheduler's behavior and optimize memory consumption [49]. POLYSIMD uses variable renaming around PPCG polyhedral flow to improve vectorization [50]. Polygeist automates these leveraging both SSA and polyhedral information. b) Âà©Áî®Â§öÁßçË°®Á§∫ÁöÑÁºñËØëÂô®ÔºöSUIFÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩÂºÄÂàõ‰∫Ü‰∏ÄÁßçÁªÑÂêàÂÜÖÈÉ®Ë°®Á§∫ÔºåÊîØÊåÅÊõ¥È´òÁ∫ßÁöÑËΩ¨Êç¢ÔºåÂåÖÊã¨Âæ™ÁéØ‰ºòÂåñÂíåÂπ∂Ë°åÂåñ [37]ÔºåÂ∞§ÂÖ∂ÊòØÂΩíÁ∫¶Âπ∂Ë°åÂåñ [38]„ÄÇPolygeistÂà©Áî®SUIF‰∏≠‰∏çÂèØÁî®ÁöÑMLIRÊäΩË±°ÔºöÂ∏∏ËßÑÂíå‰ªøÂ∞ÑÂæ™ÁéØÔºåOpenMPÂΩíÁ∫¶ÊûÑÈÄ†Á≠â„ÄÇÂÆÉËøòÂèóÁõä‰∫é‰ªÖ‰Ωú‰∏∫Â§ñÈÉ®Êâ©Â±ïÂ≠òÂú®‰∫éSUIF‰∏≠ÁöÑSSA+Âå∫ÂüüÂΩ¢Âºè [39]ÔºåÂèØ‰ª•Áî®‰∫é‰∏≠Èó¥Ë°®Á§∫ÁöÑÁÆÄÂåñ„ÄÇPIPSÂú®ÈíàÂØπOpenMPÊó∂ÊîØÊåÅÂæ™ÁéØËΩ¨Êç¢ÂíåËøáÁ®ãÈó¥‰ºòÂåñ [40]Ôºå[41]„ÄÇPolygeist‰∏éËøô‰∏§ËÄÖÁöÑ‰∏çÂêå‰πãÂ§ÑÂú®‰∫éÂÆÉÂèëÂá∫Êú∫Âô®‰ª£Á†ÅËÄå‰∏çÊòØÊ∫ê‰ª£Á†ÅÔºå‰ªéËÄåËÉΩÂ§üÂèëÂá∫Âπ∂Ë°åËøêË°åÊó∂ÂíåÂÖ∂‰ªñÂú®Ê∫êËØ≠Ë®ÄÔºàÂ¶ÇCÔºâ‰∏≠Ê≤°ÊúâË°®Á§∫ÁöÑÊåá‰ª§„ÄÇ c) ÁªìÂêà‚ÄúÁªèÂÖ∏‚ÄùÂíåÂ§öÈù¢‰ΩìÊµÅÁ®ãÔºöÂ∞ëÊï∞ËÆ∫ÊñáÂÖ≥Ê≥®‰∫éÂ∞Ü‚ÄúÁªèÂÖ∏‚ÄùÁöÑ„ÄÅÂ§ßÂ§öÊï∞ÊòØASTÁ∫ßÂà´ÁöÑËΩ¨Âåñ‰∏éÂ§öÈù¢‰ΩìËΩ¨ÂåñÁªìÂêàËµ∑Êù•„ÄÇPolyASTÈÄöËøáÁªìÂêà‰ªøÂ∞ÑË∞ÉÂ∫¶Âô®‰∏éASTÁ∫ßÂà´ÁöÑÂêØÂèëÂºèÊñπÊ≥ïËøõË°åËûçÂêàÂíåÂàáÁâá [42]ÔºåÂºÄÂàõ‰∫ÜËøôÁßçÊñπÊ≥ïÔºåÂ∞ΩÁÆ°‰ªÖ‰ΩøÁî®Â§öÈù¢‰ΩìËΩ¨Âåñ‰πüÂ±ïÁ§∫‰∫ÜÁ±ª‰ººÁöÑÁªìÊûú [43]„ÄÇCUDA-CHiLL [44] ‰πüÂÆûÈ™å‰∫Ü‰∏ÄÁßçÁ±ª‰ººÁöÑÊñπÊ≥ï„ÄÇÂèØ‰ª•ËØ¥ÔºåËÆ∏Â§öËá™Âä®ÂåñÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ãÂ∞ÜÂæ™ÁéØËûçÂêàÂíå/ÊàñÂàáÁâá‰Ωú‰∏∫‰∏Ä‰∏™Áã¨Á´ãÊ≠•È™§Êù•ÊâßË°åÔºåËøôÂèØ‰ª•Ë¢´ËÆ§‰∏∫ÊòØ‰∏ÄÁßçÁªèÂÖ∏ËΩ¨Âåñ„ÄÇPluto [11] ‰ΩøÁî®Âá†‰∏™‚ÄúËØ≠Ê≥ï‚ÄùÂêéÂ§ÑÁêÜËøáÁ®ãÊù•Âà©Áî®Ê®°Êùø‰∏≠ÁöÑÁ©∫Èó¥Â±ÄÈÉ®ÊÄßÂíåÂπ∂Ë°åÊÄß [45]„ÄÇÂ∑≤ÊèêÂá∫Â§ö‰∏™Â∑•ÂÖ∑Ôºå‰ª•ÁªèÂÖ∏Âæ™ÁéØËΩ¨ÂåñÂ¶ÇËûçÂêàÂíåÊéíÂàó‰Ωú‰∏∫Êìç‰ΩúÔºåÈ©±Âä®Â§öÈù¢‰ΩìÂæ™ÁéØËΩ¨ÂåñÔºåÂåÖÊã¨URUK [46]„ÄÅCHiLL [47] ÂíåClay [48]„ÄÇPolygeist‰∏éËøô‰∫õÂ∑•ÂÖ∑ÁöÑ‰∏çÂêå‰πãÂ§ÑÂú®‰∫éÂÆÉÂú®ÂÖ∂IR‰∏≠‰øùÁïô‰∫ÜÊ≠§Á±ªËΩ¨ÂåñÁöÑÁªìÊûúÔºåÂπ∂‰∏î‰∏éÂ§öÈù¢‰ΩìÊûÑÈÄ†‰∏ÄËµ∑ÔºåÂÖÅËÆ∏‰∏çÂêåÊäΩË±°Â±ÇÊ¨°‰πãÈó¥ÁöÑ‰∫§‰∫í„ÄÇ d) È¢ùÂ§ñÁöÑÔºàÂêéÔºâÂ§öÈù¢‰ΩìËΩ¨ÂåñÔºöPolly [25] ÊèêÂá∫‰∫ÜÂ§ÑÁêÜÂΩíÁ∫¶Âæ™ÁéØÁöÑÊîØÊåÅÔºå‰ΩÜÂπ∂Êú™ÂÆûÁé∞‰ª£Á†ÅÁîüÊàê„ÄÇÂú®ËØ≠Ê≥ïÂ±ÇÈù¢ÔºåÈÄöËøáÊâãÂä®Ê≥®Èáä‰ΩøÁî®PENCILÊåá‰ª§ÂêëPETÊ∑ªÂä†‰∫ÜÂΩíÁ∫¶ÊîØÊåÅ [24]„ÄÇÊçÆÊä•ÈÅìÔºåR-Stream‰ΩøÁî®‰∫Ü‰∏ÄÁßçÂèò‰ΩìÁöÑËØ≠Âè•ÊãÜÂàÜ‰ª•ÂΩ±ÂìçË∞ÉÂ∫¶Âô®ÁöÑË°å‰∏∫Âπ∂‰ºòÂåñÂÜÖÂ≠òÊ∂àËÄó [49]„ÄÇPOLYSIMDÂú®PPCGÂ§öÈù¢‰ΩìÊµÅÁ®ãÂë®Âõ¥‰ΩøÁî®ÂèòÈáèÈáçÂëΩÂêç‰ª•ÊîπÂñÑÂêëÈáèÂåñ [50]„ÄÇPolygeistÂà©Áî®SSAÂíåÂ§öÈù¢‰Ωì‰ø°ÊÅØËá™Âä®ÂåñËøô‰∫õÊìç‰Ωú„ÄÇ # e) Integration of Polyhedral Optimizers into Compilers: Polyhedral optimization passes are available in production (GCC [8], LLVM [7], IBM XL [51]) and research (R-Stream [49], ROSE [52]) compilers. In most cases, the polyhedral abstraction must be extracted from a lower-level representation before being transformed and lowered in a dedicated code generation step [13], [14]. This extraction process is not guaranteed and may fail to recover high-level information available at the source level [9]. Furthermore, common compiler optimizations such as LICM are known to interfere with it [10]. Polygeist maintains a sufficient amount of high-level information, in particular loop and n-D array structure, to circumvent these problems by design. Source-to-source polyhedral compilers such as Pluto [11] and PPCG [5] operate on a C or C++ level. They lack interaction with other compiler optimizations and a global vision of the code, which prevents, e.g., constant propagation and inlining that could improve the results of polyhedral optimization. Being positioned between the AST and LLVM IR levels, Polygeist enables the interaction between higherand lower-level abstractions that is otherwise reduced to compiler pragmas, i.e. mere optimization hints. Furthermore, Polygeist can rely on MLIR's progressive raising [53] to target abstractions higher level than C code with less effort than polyhedral frameworks [54]. e) ËÅöÂêà‰ºòÂåñÂô®‰∏éÁºñËØëÂô®ÁöÑÈõÜÊàê: ËÅöÂêà‰ºòÂåñ‰º†ÈÄíÂú®Áîü‰∫ßÔºàGCC [8]ÔºåLLVM [7]ÔºåIBM XL [51]ÔºâÂíåÁ†îÁ©∂ÔºàR-Stream [49]ÔºåROSE [52]ÔºâÁºñËØëÂô®‰∏≠ÂèØÁî®„ÄÇÂú®Â§ßÂ§öÊï∞ÊÉÖÂÜµ‰∏ãÔºåÂøÖÈ°ª‰ªé‰ΩéÁ∫ßË°®Á§∫‰∏≠ÊèêÂèñËÅöÂêàÊäΩË±°ÔºåÁÑ∂ÂêéÂú®‰∏ìÈó®ÁöÑ‰ª£Á†ÅÁîüÊàêÊ≠•È™§‰∏≠ËøõË°åËΩ¨Êç¢ÂíåÈôçÁ∫ß [13]Ôºå[14]„ÄÇËøô‰∏™ÊèêÂèñËøáÁ®ãÂπ∂‰∏çÊòØ‰øùËØÅÊàêÂäüÁöÑÔºåÂèØËÉΩÊó†Ê≥ïÊÅ¢Â§çÊ∫êÁ∫ßÂà´‰∏äÂèØÁî®ÁöÑÈ´òÁ∫ß‰ø°ÊÅØ [9]„ÄÇÊ≠§Â§ñÔºåÂ∏∏ËßÅÁöÑÁºñËØëÂô®‰ºòÂåñÔºå‰æãÂ¶ÇLICMÔºåÂ∑≤Áü•‰ºöÂØπÊ≠§‰∫ßÁîüÂπ≤Êâ∞ [10]„ÄÇPolygeist ÈÄöËøáËÆæËÆ°Áª¥Êä§Ë∂≥Â§üÁöÑÈ´òÁ∫ß‰ø°ÊÅØÔºåÂ∞§ÂÖ∂ÊòØÂæ™ÁéØÂíåÂ§öÁª¥Êï∞ÁªÑÁªìÊûÑÔºå‰ª•ËßÑÈÅøËøô‰∫õÈóÆÈ¢ò„ÄÇ Ê∫êÂà∞Ê∫êÁöÑËÅöÂêàÁºñËØëÂô®ÔºåÂ¶ÇPluto [11] ÂíåPPCG [5]ÔºåÂú®CÊàñC++Á∫ßÂà´‰∏äËøêË°å„ÄÇÂÆÉ‰ª¨Áº∫‰πè‰∏éÂÖ∂‰ªñÁºñËØëÂô®‰ºòÂåñÁöÑ‰∫§‰∫íÔºå‰ª•ÂèäÂØπ‰ª£Á†ÅÁöÑÂÖ®Â±ÄËßÜËßíÔºåËøôÈòªÁ¢ç‰∫Ü‰æãÂ¶ÇÂ∏∏Èáè‰º†Êí≠ÂíåÂÜÖËÅîÁ≠âÂèØËÉΩÊîπÂñÑËÅöÂêà‰ºòÂåñÁªìÊûúÁöÑËøáÁ®ã„ÄÇPolygeist‰Ωç‰∫éASTÂíåLLVM IRÁ∫ßÂà´‰πãÈó¥Ôºå‰ΩøÂæóÊõ¥È´òÁ∫ßÂà´Âíå‰ΩéÁ∫ßÂà´ÊäΩË±°‰πãÈó¥ÁöÑ‰∫§‰∫íÊàê‰∏∫ÂèØËÉΩÔºåËÄåËøôÁßç‰∫§‰∫íÂú®ÂÖ∂‰ªñÊÉÖÂÜµ‰∏ã‰ªÖÈôê‰∫éÁºñËØëÂô®ÊåáÁ§∫ÔºåÂç≥‰ªÖ‰ªÖÊòØ‰ºòÂåñÊèêÁ§∫„ÄÇÊ≠§Â§ñÔºåPolygeistÂèØ‰ª•‰æùÈù†MLIRÁöÑÈÄêÊ≠•ÊèêÂçá [53]Ôºå‰ª•ÊØîËÅöÂêàÊ°ÜÊû∂ [54] Êõ¥Â∞ëÁöÑÂä™ÂäõÔºåÈíàÂØπÊõ¥È´ò‰∫éC‰ª£Á†ÅÁöÑÊäΩË±°„ÄÇ # VII. DISCUSSION A. Limitations a) Frontend: While Polygeist could technically accept any valid C or C++ thanks to building off Clang, it has the following limitations. Only structs with values of the same type or are used within specific functions (such as FILE within fprintf) are supported due to the lack of a struct-type in high-level MLIR dialects. All functions that allocate memory must be compiled with Polygeist and not a C++ compiler to ensure that a memref is emitted rather than a pointer. b) Optimizer: The limitations of the optimizer are inherited from those of the tools involved. In particular, the MLIR affine value categorization results in all-or-nothing modeling, degrading any loop to non-affine if it contains even one nonaffine access or a negative step. Running Polygeist's backend on code not generated by Polygeist's frontend, which reverses loops with negative steps, is limited to loops with positive indices. Finally, MLIR does not yet provide extensive support for non-convex sets (typically expressed as unions). Work is ongoing within MLIR to address such issues. c) Experiments: While our experiments clearly demonstrate the benefits of the techniques implemented in Polygeist-statement splitting and late (reduction) parallelization -non-negligible effects are due to scheduler difference: Pluto in Polygeist and isl in Polly. The version of Polly using Pluto 5 is not compatible with modern LLVM necessary to leverage MLIR. Connecting isl scheduler to Polygeist may have yielded results closer to Polly, but still not comparable more directly because of the interplay between SCoP detection, statement formation and affine scheduling. VII. ËÆ®ËÆ∫ A. ÈôêÂà∂a) ÂâçÁ´ØÔºöÂ∞ΩÁÆ°PolygeistÊäÄÊúØ‰∏äÂèØ‰ª•Êé•Âèó‰ªª‰ΩïÊúâÊïàÁöÑCÊàñC++‰ª£Á†ÅÔºåÂõ†‰∏∫ÂÆÉÊòØÂü∫‰∫éClangÊûÑÂª∫ÁöÑÔºå‰ΩÜ‰ªçÁÑ∂Â≠òÂú®‰ª•‰∏ãÈôêÂà∂„ÄÇÁî±‰∫éÈ´òÂ±ÇÊ¨°MLIRÊñπË®Ä‰∏≠Áº∫‰πèÁªìÊûÑÁ±ªÂûãÔºå‰ªÖÊîØÊåÅÂÄºÁ±ªÂûãÁõ∏ÂêåÁöÑÁªìÊûÑ‰ΩìÔºåÊàñÂú®ÁâπÂÆöÂáΩÊï∞ÂÜÖÔºàÂ¶Çfprintf‰∏≠ÁöÑFILEÔºâ‰ΩøÁî®ÁöÑÁªìÊûÑ‰Ωì„ÄÇÊâÄÊúâÂàÜÈÖçÂÜÖÂ≠òÁöÑÂáΩÊï∞ÂøÖÈ°ª‰ΩøÁî®PolygeistÁºñËØëÔºåËÄå‰∏çÊòØ‰ΩøÁî®C++ÁºñËØëÂô®ÔºåËøôÊ†∑ÊâçËÉΩÁ°Æ‰øùÁîüÊàêÁöÑÊòØmemrefËÄåÈùûÊåáÈíà„ÄÇb) ‰ºòÂåñÂô®Ôºö‰ºòÂåñÂô®ÁöÑÈôêÂà∂Ê∫êËá™‰∫éÊâÄÊ∂âÂèäÂ∑•ÂÖ∑ÁöÑÈôêÂà∂„ÄÇÁâπÂà´ÊòØÔºåMLIRÁöÑ‰ªøÂ∞ÑÂÄºÂàÜÁ±ªÂØºËá¥‰∫ÜÂÖ®ÊúâÊàñÂÖ®Êó†ÁöÑÂª∫Ê®°ÔºåÂ¶ÇÊûú‰ªª‰ΩïÂæ™ÁéØ‰∏≠ÂåÖÂê´‰∏Ä‰∏™Èùû‰ªøÂ∞ÑËÆøÈóÆÊàñË¥üÊ≠•ÈïøÔºåÂ∞±‰ºöÂ∞ÜËØ•Âæ™ÁéØÈôçÁ∫ß‰∏∫Èùû‰ªøÂ∞Ñ„ÄÇÂØπ‰∏çÊòØÁî±PolygeistÂâçÁ´ØÁîüÊàêÁöÑ‰ª£Á†Å‰ΩøÁî®PolygeistÁöÑÂêéÁ´ØËøêË°åÊó∂ÔºåÂ∞ÜÈôêÂà∂Âú®ÂÖ∑ÊúâÊ≠£Á¥¢ÂºïÁöÑÂæ™ÁéØ‰∏ä„ÄÇÊúÄÂêéÔºåMLIRÁõÆÂâçÂ∞öÊú™Êèê‰æõÂØπÈùûÂá∏ÈõÜÂêàÁöÑÂπøÊ≥õÊîØÊåÅÔºàÈÄöÂ∏∏‰ª•Âπ∂ÈõÜÁöÑÂΩ¢ÂºèË°®Á§∫Ôºâ„ÄÇMLIRÂÜÖÈÉ®Ê≠£Âú®ËøõË°åÁõ∏ÂÖ≥Â∑•‰Ωú‰ª•Ëß£ÂÜ≥Ê≠§Á±ªÈóÆÈ¢ò„ÄÇc) ÂÆûÈ™åÔºöÂ∞ΩÁÆ°Êàë‰ª¨ÁöÑÂÆûÈ™åÊ∏ÖÊ•öÂú∞Â±ïÁ§∫‰∫ÜÂú®Polygeist‰∏≠ÂÆûÁé∞ÁöÑÊäÄÊúØÁöÑÂ•ΩÂ§Ñ‚Äî‚ÄîËØ≠Âè•ÊãÜÂàÜÂíåÂêéÊúüÔºàÂΩíÁ∫¶ÔºâÂπ∂Ë°åÂåñ‚Äî‚Äî‰ΩÜ‰ªçÊúâ‰∏çÂÆπÂøΩËßÜÁöÑÊïàÊûúÊòØÁî±‰∫éË∞ÉÂ∫¶Âô®ÁöÑÂ∑ÆÂºÇÔºöPolygeist‰∏≠ÁöÑPlutoÂíåPolly‰∏≠ÁöÑisl„ÄÇ‰ΩøÁî®Pluto 5ÁöÑPollyÁâàÊú¨‰∏éÁé∞‰ª£LLVM‰∏çÂÖºÂÆπÔºåËÄåÂêéËÄÖÂèàÊòØÂà©Áî®MLIRÊâÄÂøÖÈúÄÁöÑ„ÄÇÂ∞ÜislË∞ÉÂ∫¶Âô®ËøûÊé•Âà∞PolygeistÂèØËÉΩ‰ºö‰ΩøÁªìÊûúÊõ¥Êé•ËøëPollyÔºå‰ΩÜ‰ªçÁÑ∂Êó†Ê≥ïÊõ¥Áõ¥Êé•Âú∞ËøõË°åÊØîËæÉÔºåÂõ†‰∏∫SCoPÊ£ÄÊµã„ÄÅËØ≠Âè•ÂΩ¢ÊàêÂíå‰ªøÂ∞ÑË∞ÉÂ∫¶‰πãÈó¥ÁöÑÁõ∏‰∫í‰ΩúÁî®„ÄÇ # B. Opportunities and Future Work Connecting MLIR to existing polyhedral flows opens numerous avenues for compiler optimization research, connecting polyhedral and conventional SSA-based compiler transformations. This gives polyhedral schedulers access to important analyses such as aliasing and useful information such as precise data layout and target machine description. Arguably, this information is already leveraged by Polly, but the representational mismatch between LLVM IR and affine loops makes it difficult to exploit them efficiently. MLIR exposes similar information at a sufficiently high level to make it usable in affine transformations. By mixing abstractions in a single module, MLIR provides finer-grain control over the entire transformation process. An extension of Polygeist can, e.g., ensure loop vectorization by directly emitting vector instructions instead of relying on pragmas, which are often merely a recommendation for the compiler. The flow can also control lower-level mechanisms like prefetching or emit specialized hardware instructions. Conversely, polyhedral analyses can guarantee downstream passes that, e.g., address computation never produces out-ofbounds accesses and other information. Future work is necessary on controlling statement granularity made possible by Polygeist. Beyond affecting affine schedules, this technique enables easy rematerialization and local transposition buffers, crucial on GPUs [55], as well as software pipelining; all without having to produce C source which is known to be complex [56]. On the other hand, this may have an effect on the compilation time as the number of statements is an important factor in the complexity bound of the dependence analysis and scheduling algorithms. Â∞ÜMLIR‰∏éÁé∞ÊúâÁöÑÂ§öÈù¢‰ΩìÊµÅÁ®ãËøûÊé•Ëµ∑Êù•Ôºå‰∏∫ÁºñËØëÂô®‰ºòÂåñÁ†îÁ©∂ÂºÄËæü‰∫ÜËÆ∏Â§öÊñ∞ÈÄîÂæÑÔºåËøûÊé•‰∫ÜÂ§öÈù¢‰ΩìÂíå‰º†ÁªüÁöÑÂü∫‰∫éSSAÁöÑÁºñËØëÂô®ËΩ¨Êç¢„ÄÇËøô‰ΩøÂæóÂ§öÈù¢‰ΩìË∞ÉÂ∫¶Âô®ÂèØ‰ª•ËÆøÈóÆ‰∏Ä‰∫õÈáçË¶ÅÁöÑÂàÜÊûê‰ø°ÊÅØÔºåÂ¶ÇÂà´ÂêçÂàÜÊûê‰ª•ÂèäÁ≤æÁ°ÆÁöÑÊï∞ÊçÆÂ∏ÉÂ±ÄÂíåÁõÆÊ†áÊú∫Âô®ÊèèËø∞Á≠âÊúâÁî®‰ø°ÊÅØ„ÄÇÂèØ‰ª•ËØ¥ÔºåËøô‰∫õ‰ø°ÊÅØÂ∑≤ÁªèË¢´PollyÂà©Áî®Ôºå‰ΩÜLLVM IRÂíå‰ªøÂ∞ÑÂæ™ÁéØ‰πãÈó¥ÁöÑË°®Á§∫‰∏çÂåπÈÖç‰ΩøÂæóÈ´òÊïàÂà©Áî®Ëøô‰∫õ‰ø°ÊÅØÂèòÂæóÂõ∞Èöæ„ÄÇMLIR‰ª•Ë∂≥Â§üÈ´òÁöÑÊäΩË±°Â±ÇÁ∫ßÊö¥Èú≤‰∫ÜÁ±ª‰ººÁöÑ‰ø°ÊÅØÔºå‰ΩøÂÖ∂ÂèØÁî®‰∫é‰ªøÂ∞ÑÂèòÊç¢„ÄÇ ÈÄöËøáÂú®Âçï‰∏™Ê®°Âùó‰∏≠Ê∑∑Âêà‰∏çÂêåÁöÑÊäΩË±°ÔºåMLIRÂØπÊï¥‰∏™ËΩ¨Êç¢ËøáÁ®ãÊèê‰æõ‰∫ÜÊõ¥ÁªÜÁ≤íÂ∫¶ÁöÑÊéßÂà∂„ÄÇPolygeistÁöÑÊâ©Â±ïÂèØ‰ª•Á°Æ‰øùÈÄöËøáÁõ¥Êé•ÂèëÂá∫ÂêëÈáèÊåá‰ª§Êù•ÂÆûÁé∞Âæ™ÁéØÂêëÈáèÂåñÔºåËÄå‰∏çÊòØ‰æùËµñ‰∫éÂ∏∏Â∏∏Âè™ÊòØÁºñËØëÂô®Âª∫ËÆÆÁöÑpragmaÊåá‰ª§„ÄÇËØ•ÊµÅÁ®ãËøòÂèØ‰ª•ÊéßÂà∂Êõ¥‰ΩéÂ±ÇÊ¨°ÁöÑÊú∫Âà∂ÔºåÂ¶ÇÈ¢ÑÂèñÊàñÂèëÂá∫‰∏ìÁî®ÁöÑÁ°¨‰ª∂Êåá‰ª§„ÄÇÂèç‰πãÔºåÂ§öÈù¢‰ΩìÂàÜÊûêÂèØ‰ª•Á°Æ‰øù‰∏ãÊ∏∏ÁöÑÂ§ÑÁêÜËøáÁ®ãÔºå‰æãÂ¶ÇÔºåÂú∞ÂùÄËÆ°ÁÆóÊ∞∏Ëøú‰∏ç‰ºöÂØºËá¥Ë∂äÁïåËÆøÈóÆÔºå‰ª•ÂèäÂÖ∂‰ªñ‰ø°ÊÅØ„ÄÇ Âú®PolygeistÁöÑÊîØÊåÅ‰∏ãÔºåÊéßÂà∂ËØ≠Âè•Á≤íÂ∫¶ÁöÑÊú™Êù•Â∑•‰ΩúÊòØÂøÖË¶ÅÁöÑ„ÄÇÈô§‰∫ÜÂΩ±Âìç‰ªøÂ∞ÑË∞ÉÂ∫¶Â§ñÔºåËØ•ÊäÄÊúØËøò‰ΩøÂæóËΩªÊùæÁöÑÈáçÊñ∞Áâ©ÂåñÂíåÂ±ÄÈÉ®ËΩ¨ÁΩÆÁºìÂÜ≤Êàê‰∏∫ÂèØËÉΩÔºåËøôÂú®GPU‰∏äÊòØËá≥ÂÖ≥ÈáçË¶ÅÁöÑ[55]Ôºå‰ª•ÂèäËΩØ‰ª∂ÊµÅÊ∞¥Á∫øÂåñÔºõÊâÄÊúâËøô‰∫õÈÉΩ‰∏çÈúÄË¶ÅÁîüÊàêÂ∑≤Áü•Â§çÊùÇÁöÑCÊ∫ê‰ª£Á†Å[56]„ÄÇÂè¶‰∏ÄÊñπÈù¢ÔºåËØ≠Âè•Êï∞ÈáèÂèØËÉΩ‰ºöÂØπÁºñËØëÊó∂Èó¥‰∫ßÁîüÂΩ±ÂìçÔºåÂõ†‰∏∫ËØ≠Âè•Êï∞ÈáèÊòØ‰æùËµñÂàÜÊûêÂíåË∞ÉÂ∫¶ÁÆóÊ≥ïÂ§çÊùÇÊÄßËæπÁïåÁöÑÈáçË¶ÅÂõ†Á¥†„ÄÇ # C. Alternatives Instead of allowing polyhedral tools to parse and generate MLIR, one could emit C (or C++) code from MLIR 6 and use C-based polyhedral tools on the C source, but this approach decreases the expressiveness of the flow. Some MLIR constructs, such as parallel reduction loops, can be directly expressed in the polyhedral model, whereas they would require a non-trivial and non-guaranteed raising step in C. Some other constructs, such as prevectorized affine memory operations, cannot be expressed in C at all. Polygeist enables transparent handling of such constructs in MLIR-to-MLIR flows, but we leave the details of such handling for future work. The Polygeist flow can be similarly connected to other polyhedral formats, in particular isl. We choose OpenScop for this work because it is supported by a wider variety of tools. isl uses schedule trees [57] to represent the initial and transformed program schedule. Schedule trees are sufficiently close to the nested-operation IR model making the conversion straightforward: \"for\" loops correspond to band nodes (one loop per band dimension), \"if\" conditionals correspond to filter nodes, function-level constants can be included into the context node. The tree structure remains the same as that of MLIR regions. The inverse conversion can be obtained using isl's AST generation facility [14]. Êõø‰ª£ÊñπÊ°à ‰∏éÂÖ∂ËÆ©Â§öÈù¢‰ΩìÂ∑•ÂÖ∑Ëß£ÊûêÂπ∂ÁîüÊàêMLIRÔºå‰∏çÂ¶ÇÁõ¥Êé•‰ªéMLIRÂèëÂá∫CÔºàÊàñC++Ôºâ‰ª£Á†ÅÔºåÂπ∂Âú®CÊ∫ê‰ª£Á†Å‰∏ä‰ΩøÁî®Âü∫‰∫éCÁöÑÂ§öÈù¢‰ΩìÂ∑•ÂÖ∑Ôºå‰ΩÜËøôÁßçÊñπÊ≥ïÈôç‰Ωé‰∫ÜÁºñËØëÊµÅÁ®ãÁöÑË°®ËææËÉΩÂäõ„ÄÇ‰∏Ä‰∫õMLIRÊûÑÈÄ†Ôºå‰æãÂ¶ÇÂπ∂Ë°åÂΩíÁ∫¶Âæ™ÁéØÔºåÂèØ‰ª•Áõ¥Êé•Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠Ë°®ËææÔºåËÄåÂú®C‰∏≠Âç¥ÈúÄË¶Å‰∏Ä‰∏™Â§çÊùÇ‰∏î‰∏ç‰øùËØÅÂèØË°åÁöÑÊèêÂçáÊ≠•È™§„ÄÇÂè¶‰∏Ä‰∫õÊûÑÈÄ†Ôºå‰æãÂ¶ÇÈ¢ÑÂêëÈáèÂåñÁöÑ‰ªøÂ∞ÑÂÜÖÂ≠òÊìç‰ΩúÔºåÂàôÊ†πÊú¨Êó†Ê≥ïÂú®C‰∏≠Ë°®Ëææ„ÄÇPolygeistÊîØÊåÅÂú®MLIRÂà∞MLIRÁöÑÊµÅÁ®ã‰∏≠ÈÄèÊòéÂú∞Â§ÑÁêÜËøô‰∫õÊûÑÈÄ†Ôºå‰ΩÜÊàë‰ª¨Â∞ÜÊ≠§Á±ªÂ§ÑÁêÜÁöÑÁªÜËäÇÁïôÂæÖÊú™Êù•Á†îÁ©∂„ÄÇ PolygeistÊµÅÁ®ã‰πüÂèØ‰ª•‰∏éÂÖ∂‰ªñÂ§öÈù¢‰ΩìÊ†ºÂºèÁõ∏ËøûÊé•ÔºåÁâπÂà´ÊòØ‰∏éislÁõ∏Ëøû„ÄÇÊàë‰ª¨ÈÄâÊã©OpenScop‰Ωú‰∏∫Êú¨Á†îÁ©∂ÁöÑÂØπË±°ÔºåÂõ†‰∏∫ÂÆÉÂæóÂà∞Êõ¥Â§öÂ∑•ÂÖ∑ÁöÑÊîØÊåÅ„ÄÇisl‰ΩøÁî®Ë∞ÉÂ∫¶Ê†ëÊù•Ë°®Á§∫ÂàùÂßãÂíåËΩ¨ÂåñÂêéÁöÑÁ®ãÂ∫èË∞ÉÂ∫¶„ÄÇË∞ÉÂ∫¶Ê†ë‰∏éÂµåÂ•óÊìç‰ΩúÁöÑIRÊ®°ÂûãÈùûÂ∏∏Êé•ËøëÔºå‰ΩøÂæóËΩ¨Êç¢ÂèòÂæóÁÆÄÂçïÔºöforÂæ™ÁéØÂØπÂ∫î‰∫éÂ∏¶ËäÇÁÇπÔºàÊØè‰∏™Â∏¶Áª¥Â∫¶‰∏Ä‰∏™Âæ™ÁéØÔºâÔºåifÊù°‰ª∂ÂØπÂ∫î‰∫éËøáÊª§ËäÇÁÇπÔºåÂáΩÊï∞Á∫ßÂ∏∏ÈáèÂèØ‰ª•ÂåÖÂê´Âú®‰∏ä‰∏ãÊñáËäÇÁÇπ‰∏≠„ÄÇÊ†ëÁªìÊûÑ‰∏éMLIRÂå∫Âüü‰øùÊåÅ‰∏ÄËá¥„ÄÇÈÄÜÂêëËΩ¨Êç¢ÂèØ‰ª•ÈÄöËøáislÁöÑASTÁîüÊàêÂ∑•ÂÖ∑Ëé∑Âæó„ÄÇ # VIII. CONCLUSION Part-1 We present Polygeist, a compilation workflow for importing existing C or C++ code into MLIR and allows polyhedral tools, such as Pluto, to optimize MLIR programs. This enables MLIR to benefit from decades of research in polyhedral compilation. We demonstrate that the code generated by Polygeist has comparable performance with Clang, enabling unbiased comparisons between transformations built for MLIR and existing polyhedral frameworks. Finally, we demonstrate the optimization opportunities enabled by Polygeist considering two complementary transformations: statement splitting and reduction parallelization. In both cases, Polygeist achieves better performance than state-of-the-art polyhedral compiler and source-to-source optimizer. comments regarding how this may need to be modified to run on a system with hardware or software configuration that is distinct from what we used. As expected, the command description mirrors much of the content of the docker file. While a docker file is certainly more convenient and a good way of getting the compiler set up, similar changes to expectations of how many cores the system has in the evaluation will be required even with Docker. To compile Polygeist, one must first compile several of its dependencies. We ran our experiments on an AWS c5.metal instance based on Ubuntu 20.04. We've tailored our build instructions to such a system. While many of the instructions are general and independent of machine, or OS, some steps may not be (and we describe what locations they may occur below). $ sudo apt update $ sudo apt install apt-utils $ sudo apt install tzdata build-essential \\ libtool autoconf pkg-config flex bison \\ libgmp-dev clang-9 libclang-9-dev texinfo \\ cmake ninja-build git texlive-full numactl # Change default compilers to make Pluto happy $ sudo update-alternatives --install \\ /usr/bin/llvm-config llvm-config \\ /usr/bin/llvm-config-9 100 $ sudo update-alternatives --install \\ /usr/bin/FileCheck FileCheck-9 \\ /usr/bin/FileCheck 100 $ sudo update-alternatives --install \\ /usr/bin/clang clang \\ /usr/bin/clang-9 100 $ sudo update-alternatives --install \\ /usr/bin/clang++ clang++ \\ /usr/bin/clang++-9 100 To begin, let us download a utility repository, which will contain several scripts and other files useful for compilation and benchmarking: $ cd $ git clone \\ https://github.com/wsmoses/Polygeist-Script\\ scripts One can now compile and build Pluto as shown below: Êàë‰ª¨ÊèêÂá∫‰∫ÜPolygeistÔºå‰∏ÄÁßçÂ∞ÜÁé∞ÊúâCÊàñC++‰ª£Á†ÅÂØºÂÖ•MLIRÁöÑÁºñËØëÂ∑•‰ΩúÊµÅÁ®ãÔºåÂπ∂ÂÖÅËÆ∏Â§öÈù¢‰ΩìÂ∑•ÂÖ∑ÔºàÂ¶ÇPlutoÔºâÂØπMLIRÁ®ãÂ∫èËøõË°å‰ºòÂåñ„ÄÇËøô‰ΩøÂæóMLIRËÉΩÂ§üÂèóÁõä‰∫éÊï∞ÂçÅÂπ¥Êù•Âú®Â§öÈù¢‰ΩìÁºñËØëÊñπÈù¢ÁöÑÁ†îÁ©∂„ÄÇÊàë‰ª¨ËØÅÊòé‰∫ÜPolygeistÁîüÊàêÁöÑ‰ª£Á†ÅÂú®ÊÄßËÉΩ‰∏ä‰∏éClangÁõ∏ÂΩìÔºå‰ªéËÄåÂÆûÁé∞‰∫ÜÈíàÂØπMLIRÊûÑÂª∫ÁöÑÂèòÊç¢‰∏éÁé∞ÊúâÂ§öÈù¢‰ΩìÊ°ÜÊû∂‰πãÈó¥ÁöÑÂÖ¨Ê≠£ÊØîËæÉ„ÄÇÊúÄÂêéÔºåÊàë‰ª¨Â±ïÁ§∫‰∫ÜPolygeistÊâÄÂ∏¶Êù•ÁöÑ‰ºòÂåñÊú∫‰ºöÔºåËÄÉËôë‰∫Ü‰∏§Áßç‰∫íË°•ÁöÑÂèòÊç¢ÔºöËØ≠Âè•ÊãÜÂàÜÂíåÂΩíÁ∫¶Âπ∂Ë°åÂåñ„ÄÇÂú®Ëøô‰∏§ÁßçÊÉÖÂÜµ‰∏ãÔºåPolygeistÁöÑÊÄßËÉΩÂùá‰ºò‰∫éÊúÄÂÖàËøõÁöÑÂ§öÈù¢‰ΩìÁºñËØëÂô®ÂíåÊ∫êÂà∞Ê∫ê‰ºòÂåñÂô®„ÄÇ ÂÖ≥‰∫éÂ¶Ç‰ΩïÂú®Á°¨‰ª∂ÊàñËΩØ‰ª∂ÈÖçÁΩÆ‰∏éÊàë‰ª¨ÊâÄ‰ΩøÁî®ÁöÑ‰∏çÂêåÁöÑÁ≥ªÁªü‰∏äËøêË°åÔºåËøôÂèØËÉΩÈúÄË¶Å‰øÆÊîπÁöÑËØÑËÆ∫„ÄÇÂ¶ÇÈ¢ÑÊúüÁöÑÈÇ£Ê†∑ÔºåÂëΩ‰ª§ÊèèËø∞‰∏édockerÊñá‰ª∂ÁöÑÂÜÖÂÆπÁõ∏‰ºº„ÄÇËôΩÁÑ∂dockerÊñá‰ª∂Êó†ÁñëÊõ¥Êñπ‰æøÔºåÊòØËÆæÁΩÆÁºñËØëÂô®ÁöÑÂ•ΩÊñπÊ≥ïÔºå‰ΩÜÂç≥‰æø‰ΩøÁî®DockerÔºåÂØπ‰∫éËØÑ‰º∞Á≥ªÁªüÁöÑÊ†∏ÂøÉÊï∞ÈáèÁöÑÊúüÊúõ‰πüÈúÄË¶ÅÁ±ª‰ººÁöÑÊõ¥Êîπ„ÄÇ Ë¶ÅÁºñËØëPolygeistÔºåÈ¶ñÂÖàÈúÄË¶ÅÁºñËØëÂÖ∂Ëã•Âπ≤‰æùËµñÈ°π„ÄÇÊàë‰ª¨Âú®Âü∫‰∫éUbuntu 20.04ÁöÑAWS c5.metalÂÆû‰æã‰∏äËøêË°å‰∫ÜÂÆûÈ™å„ÄÇÊàë‰ª¨Ê†πÊçÆËØ•Á≥ªÁªüË∞ÉÊï¥‰∫ÜÊûÑÂª∫ËØ¥Êòé„ÄÇËôΩÁÑ∂ËÆ∏Â§öËØ¥ÊòéÊòØÈÄöÁî®ÁöÑÔºå‰∏éÊú∫Âô®ÊàñÊìç‰ΩúÁ≥ªÁªüÊó†ÂÖ≥Ôºå‰ΩÜÊüê‰∫õÊ≠•È™§ÂèØËÉΩÂπ∂ÈùûÂ¶ÇÊ≠§ÔºàÊàë‰ª¨Â∞ÜÂú®‰∏ãÊñá‰∏≠ÊèèËø∞ÂÆÉ‰ª¨ÂèØËÉΩÂá∫Áé∞ÁöÑ‰ΩçÁΩÆÔºâ„ÄÇ $ sudo apt update $ sudo apt install apt-utils $ sudo apt install tzdata build-essential \\ libtool autoconf pkg-config flex bison \\ libgmp-dev clang-9 libclang-9-dev texinfo \\ cmake ninja-build git texlive-full numactl # Êõ¥ÊîπÈªòËÆ§ÁºñËØëÂô®‰ª•‰ΩøPlutoÊ≠£Â∏∏Â∑•‰Ωú $ sudo update-alternatives --install \\ /usr/bin/llvm-config llvm-config \\ /usr/bin/llvm-config-9 100 $ sudo update-alternatives --install \\ /usr/bin/FileCheck FileCheck-9 \\ /usr/bin/FileCheck 100 $ sudo update-alternatives --install \\ /usr/bin/clang clang \\ /usr/bin/clang-9 100 $ sudo update-alternatives --install \\ /usr/bin/clang++ clang++ \\ /usr/bin/clang++-9 100 È¶ñÂÖàÔºåËÆ©Êàë‰ª¨‰∏ãËΩΩ‰∏Ä‰∏™ÂÆûÁî®Â∑•ÂÖ∑Â∫ìÔºåÂÖ∂‰∏≠Â∞ÜÂåÖÂê´‰∏Ä‰∫õÁºñËØëÂíåÂü∫ÂáÜÊµãËØïÊâÄÈúÄÁöÑËÑöÊú¨ÂíåÂÖ∂‰ªñÊñá‰ª∂Ôºö $ cd $ git clone \\ https://github.com/wsmoses/Polygeist-Script\\ scripts Áé∞Âú®ÂèØ‰ª•ÊåâÁÖß‰∏ãÈù¢ÁöÑÊ≠•È™§ÁºñËØëÂíåÊûÑÂª∫PlutoÔºö # VIII. CONCLUSION Part-2 $ cd $ git clone \\ https://github.com/bondhugula/pluto $ cd pluto/ $ git checkout e5a039096547e0a3d34686295c $ git submodule init $ git submodule update $ ./autogen.sh $ ./configure $ make -jnproc«∏ ext one can build LLVM, MLIR, and the frontend by performing the following: From here, we need to modify omp.h by copying the version from the scripts repository and replacing the version we just built. 8$ cd $ export OMP_FILE=find \\ $HOME/mlir-clang/build -iname omp.h$ cp $HOME/scripts/omp.h $OMP_FILE Let us now build the MLIR polyhedral analyses, along with the specific version of LLVM it requires. We shall begin by downloading the requisite code and building its dependencies. $ cd $ git clone --recursive \\ https://github.com/kumasento/polymer -b pact $ cd polymer/ $ cd llvm/ $ mkdir build $ cd build/ $ cmake ../llvm \\ -DLLVM_ENABLE_PROJECTS=\"llvm;clang;mlir\" \\ -DLLVM_TARGETS_TO_BUILD=\"host\" \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_INSTALL_UTILS=ON \\ -G Ninja $ ninja -jnproc$ ninja check-mlir We can now build the MLIR polyhedral analyses and export the corresponding build artifacts. $ cd ~/polymer $ mkdir build $ cd build $ export BUILD=$PWD/../llvm/build $ cmake .. \\ -DCMAKE_BUILD_TYPE=DEBUG \\ -DMLIR_DIR=$BUILD/lib/cmake/mlir \\ -DLLVM_DIR=$BUILD/lib/cmake/llvm \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DLLVM_EXTERNAL_LIT=$BUILD/bin/llvm-lit \\ -G Ninja $ ninja -jnproc$ export LD_LIBRARY_PATH= \\ pwd/pluto/lib:$LD_LIBRARY_PATH $ ninja check-polymer Finally, we are ready to begin benchmarking. We begin by running a script that disables turbo boost & hyperthreading and remaining nonessential services on the machine. The script is specific to both the number of cores on the AWS instance (all cores except the non hyperthreaded cores on the first socket were disabled), as well as the image used (all nonessential services still present on the image were disabled) and thus may require modification if intending to be used on a different machine. $ cd ~/scripts/ $ sudo bash ./hyper.sh $ cd $ git clone \\ https://github.com/bondhugula/pluto $ cd pluto/ $ git checkout e5a039096547e0a3d34686295c $ git submodule init $ git submodule update $ ./autogen.sh $ ./configure $ make -jnproc Êé•‰∏ãÊù•ÔºåÂèØ‰ª•ÈÄöËøáÊâßË°å‰ª•‰∏ãÊìç‰ΩúÊù•ÊûÑÂª∫LLVM„ÄÅMLIRÂíåÂâçÁ´ØÔºö ‰ªéËøôÈáåÂºÄÂßãÔºåÊàë‰ª¨ÈúÄË¶ÅÈÄöËøáÂ§çÂà∂ËÑöÊú¨Â∫ì‰∏≠ÁöÑÁâàÊú¨Âπ∂ÊõøÊç¢Êàë‰ª¨ÂàöÂàöÊûÑÂª∫ÁöÑÁâàÊú¨Êù•‰øÆÊîπomp.h„ÄÇ $ cd $ export OMP_FILE=find \\ $HOME/mlir-clang/build -iname omp.h $ cp $HOME/scripts/omp.h $OMP_FILE Áé∞Âú®ËÆ©Êàë‰ª¨ÊûÑÂª∫MLIRÂ§öÈù¢‰ΩìÂàÜÊûêÔºå‰ª•ÂèäÂÆÉÊâÄÈúÄÁöÑÁâπÂÆöÁâàÊú¨ÁöÑLLVM„ÄÇÊàë‰ª¨Â∞ÜÂºÄÂßã‰∏ãËΩΩÊâÄÈúÄÁöÑ‰ª£Á†ÅÂπ∂ÊûÑÂª∫ÂÖ∂‰æùËµñÈ°π„ÄÇ $ cd $ git clone --recursive \\ https://github.com/kumasento/polymer -b pact $ cd polymer/ $ cd llvm/ $ mkdir build $ cd build/ $ cmake ../llvm \\ -DLLVM_ENABLE_PROJECTS=\"llvm;clang;mlir\" \\ -DLLVM_TARGETS_TO_BUILD=\"host\" \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_INSTALL_UTILS=ON \\ -G Ninja $ ninja -jnproc $ ninja check-mlir Áé∞Âú®Êàë‰ª¨ÂèØ‰ª•ÊûÑÂª∫MLIRÂ§öÈù¢‰ΩìÂàÜÊûêÂπ∂ÂØºÂá∫Áõ∏Â∫îÁöÑÊûÑÂª∫‰∫ßÁâ©„ÄÇ $ cd ~/polymer $ mkdir build $ cd build $ export BUILD=$PWD/../llvm/build $ cmake .. \\ -DCMAKE_BUILD_TYPE=DEBUG \\ -DMLIR_DIR=$BUILD/lib/cmake/mlir \\ -DLLVM_DIR=$BUILD/lib/cmake/llvm \\ -DLLVM_ENABLE_ASSERTIONS=ON \\ -DLLVM_EXTERNAL_LIT=$BUILD/bin/llvm-lit \\ -G Ninja $ ninja -jnproc $ export LD_LIBRARY_PATH= \\ pwd/pluto/lib:$LD_LIBRARY_PATH $ ninja check-polymer ÊúÄÂêéÔºåÊàë‰ª¨ÂáÜÂ§áÂºÄÂßãÂü∫ÂáÜÊµãËØï„ÄÇÊàë‰ª¨È¶ñÂÖàËøêË°å‰∏Ä‰∏™ËÑöÊú¨ÔºåÁ¶ÅÁî®Ê∂°ËΩÆÊèêÂçáÂíåË∂ÖÁ∫øÁ®ãÔºåÂπ∂ÂÖ≥Èó≠Êú∫Âô®‰∏ä‰ªçÁÑ∂‰∏çÂøÖË¶ÅÁöÑÊúçÂä°„ÄÇËØ•ËÑöÊú¨ÁâπÂÆö‰∫éAWSÂÆû‰æã‰∏äÁöÑÊ†∏ÂøÉÊï∞ÈáèÔºàÊâÄÊúâÊ†∏ÂøÉ‰∏≠Èô§Á¨¨‰∏Ä‰∏™ÊèíÊßΩ‰∏äÁöÑÈùûË∂ÖÁ∫øÁ®ãÊ†∏ÂøÉÂ§ñÂùáË¢´Á¶ÅÁî®ÔºâÔºå‰ª•Âèä‰ΩøÁî®ÁöÑÈïúÂÉèÔºàÈïúÂÉè‰∏ä‰ªçÂ≠òÂú®ÁöÑÊâÄÊúâ‰∏çÂøÖË¶ÅÊúçÂä°Ë¢´Á¶ÅÁî®ÔºâÔºåÂõ†Ê≠§Â¶ÇÊûúÊâìÁÆóÂú®ÂÖ∂‰ªñÊú∫Âô®‰∏ä‰ΩøÁî®ÔºåÂèØËÉΩÈúÄË¶ÅËøõË°å‰øÆÊîπ„ÄÇ $ cd ~/scripts/ $ sudo bash ./hyper.sh # VIII. CONCLUSION Part-3 We can now run the benchmarking script. The script itself has assumptions about cores and layout (setting taskset -c 1-8 numactl -i all for example). If using a different machine, these settings may need to be tweaked as appropriate. cd ~/scripts/ $ cd polybench-c-4.2.1-beta/ $ ./run.sh # Output comes through stdout The output of this script will contain the runtime of each trial, describing what compilation setting was used, as well as which benchmark was run. Êàë‰ª¨Áé∞Âú®ÂèØ‰ª•ËøêË°åÂü∫ÂáÜÊµãËØïËÑöÊú¨„ÄÇËØ•ËÑöÊú¨Êú¨Ë∫´ÂØπÊ†∏ÂøÉÂíåÂ∏ÉÂ±ÄÊúâ‰∏Ä‰∫õÂÅáËÆæÔºà‰æãÂ¶ÇÔºåËÆæÁΩÆ taskset -c 1-8 numactl -i allÔºâ„ÄÇÂ¶ÇÊûú‰ΩøÁî®‰∏çÂêåÁöÑÊú∫Âô®ÔºåÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥Ëøô‰∫õËÆæÁΩÆ„ÄÇ cd ~/scripts/ $ cd polybench-c-4.2.1-beta/ $ ./run.sh # ËæìÂá∫ÈÄöËøáÊ†áÂáÜËæìÂá∫ÁîüÊàê ËØ•ËÑöÊú¨ÁöÑËæìÂá∫Â∞ÜÂåÖÂê´ÊØèÊ¨°ËØïÈ™åÁöÑËøêË°åÊó∂Èó¥ÔºåÊèèËø∞ÊâÄ‰ΩøÁî®ÁöÑÁºñËØëËÆæÁΩÆ‰ª•ÂèäËøêË°å‰∫ÜÂì™‰∏™Âü∫ÂáÜÊµãËØï„ÄÇ # The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the United States Air Force or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation herein. Êú¨Êñá‰ª∂‰∏≠ÂåÖÂê´ÁöÑËßÇÁÇπÂíåÁªìËÆ∫ÊòØ‰ΩúËÄÖÁöÑËßÇÁÇπÔºå‰∏çÂ∫îË¢´Ëß£ËØª‰∏∫‰ª£Ë°®ÁæéÂõΩÁ©∫ÂÜõÊàñÁæéÂõΩÊîøÂ∫úÁöÑÂÆòÊñπÊîøÁ≠ñÔºåÊó†ËÆ∫ÊòØÊòéÁ§∫ËøòÊòØÊöóÁ§∫„ÄÇÁæéÂõΩÊîøÂ∫úË¢´ÊéàÊùÉ‰∏∫‰∫ÜÊîøÂ∫úÁõÆÁöÑÂ§çÂç∞ÂíåÂàÜÂèëËØ•Êñá‰ª∂ÁöÑÂç∞Âà∑Êú¨ÔºåÂ∞ΩÁÆ°ËøôÈáåÊúâ‰ªª‰ΩïÁâàÊùÉËØ¥Êòé„ÄÇ # APPENDIX In this artifact appendix, we describe how to build Polygeist and evaluate its performance (as well as baseline compilers) on the Polybench benchmark suite. We provide two mechanisms for artifact evaluation: a Docker container 7 , and a commandby-command description of the installation process, along with Âú®Êú¨ÈôÑÂΩï‰∏≠ÔºåÊàë‰ª¨ÊèèËø∞‰∫ÜÂ¶Ç‰ΩïÊûÑÂª∫PolygeistÂπ∂ËØÑ‰º∞ÂÖ∂Âú®PolybenchÂü∫ÂáÜÊµãËØïÂ•ó‰ª∂‰∏äÁöÑÊÄßËÉΩÔºà‰ª•ÂèäÂü∫ÂáÜÁºñËØëÂô®Ôºâ„ÄÇÊàë‰ª¨Êèê‰æõ‰∫Ü‰∏§ÁßçËâ∫ÊúØÂìÅËØÑ‰º∞Êú∫Âà∂Ôºö‰∏Ä‰∏™DockerÂÆπÂô®‰ª•ÂèäÈÄêÊ≠•ÂëΩ‰ª§ÊèèËø∞ÁöÑÂÆâË£ÖËøáÁ®ãÔºåËøûÂêå "},"Learn/LearnPolygeist/Note.html":{"url":"Learn/LearnPolygeist/Note.html","title":"Note","keywords":"","body":"Polygeist: Raising C to Polyhedral MLIR Published in: 2021 30th International Conference on Parallel Architectures and Compilation Techniques (PACT) ÂèëË°®‰∫éÔºö2021 Âπ¥Á¨¨ 30 Â±äÂõΩÈôÖÂπ∂Ë°åÊû∂ÊûÑ‰∏éÁºñËØëÊäÄÊúØ‰ºöËÆÆÔºàPACTÔºâ Abstract: ÊëòË¶ÅÔºö We present Polygeist, a new compilation flow that connects the MLIR compiler infrastructure to cutting edge polyhedral optimization tools. It consists of a C and C++ frontend capable of converting a broad range of existing codes into MLIR suitable for polyhedral transformation and a bi-directional conversion between MLIR and OpenScop exchange format. The Polygeist/MLIR intermediate representation featuring high-level (affine) loop constructs and n-D arrays embedded into a single static assignment (SSA) substrate enables an unprecedented combination of SSA-based and polyhedral optimizations. We illustrate this by proposing and implementing two extra transformations: statement splitting and reduction parallelization. Our evaluation demonstrates that Polygeist outperforms on average both an LLVM IR-level optimizer (Polly) and a source-to-source state-of-the-art polyhedral compiler (Pluto) when exercised on the Polybench/C benchmark suite in sequential (2.53x vs 1.41x, 2.34x) and parallel mode (9.47x vs 3.26x, 7.54x) thanks to the new representation and transformations. Êàë‰ª¨‰ªãÁªç PolygeistÔºåËøôÊòØ‰∏ÄÁßçÊñ∞ÁöÑÁºñËØëÊµÅÁ®ãÔºåÂÆÉÂ∞Ü MLIR ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ‰∏éÂâçÊ≤øÁöÑÂ§öÈù¢‰Ωì‰ºòÂåñÂ∑•ÂÖ∑ËøûÊé•Ëµ∑Êù•„ÄÇÂÆÉÂåÖÊã¨‰∏Ä‰∏™ C Âíå C++ÂâçÁ´ØÔºåËÉΩÂ§üÂ∞ÜÂπøÊ≥õÁé∞ÊúâÁöÑ‰ª£Á†ÅËΩ¨Êç¢‰∏∫ÈÄÇÁî®‰∫éÂ§öÈù¢‰ΩìÂèòÊç¢ÁöÑ MLIRÔºåÂπ∂ÂÆûÁé∞ MLIR ‰∏é OpenScop ‰∫§Êç¢Ê†ºÂºèÁöÑÂèåÂêëËΩ¨Êç¢„ÄÇÂÖ∑ÊúâÈ´òÁ∫ßÔºà‰ªøÂ∞ÑÔºâÂæ™ÁéØÊûÑÈÄ†ÂíåÂµåÂÖ•Âà∞Âçï‰∏™ÈùôÊÄÅËµãÂÄºÔºàSSAÔºâÂü∫Â∫ïÁöÑ Polygeist/MLIR ‰∏≠Èó¥Ë°®Á§∫ÔºåÂÆûÁé∞‰∫ÜÂü∫‰∫é SSA ÂíåÂ§öÈù¢‰Ωì‰ºòÂåñÁöÑÂâçÊâÄÊú™ÊúâÁöÑÁªÑÂêà„ÄÇÊàë‰ª¨ÈÄöËøáÊèêÂá∫Âπ∂ÂÆûÁé∞‰∏§‰∏™È¢ùÂ§ñÁöÑËΩ¨Êç¢Êù•Â±ïÁ§∫Ëøô‰∏ÄÁÇπÔºöËØ≠Âè•ÊãÜÂàÜÂíåÂáèÂ∞ëÂπ∂Ë°åÂåñ„ÄÇÊàë‰ª¨ÁöÑËØÑ‰º∞Ë°®ÊòéÔºåÂú® Polybench/C Âü∫ÂáÜÊµãËØïÂ•ó‰ª∂‰∏äÔºåPolygeist Âú®È°∫Â∫èÔºà2.53 ÂÄç vs 1.41 ÂÄçÔºå2.34 ÂÄçÔºâÂíåÂπ∂Ë°åÊ®°ÂºèÔºà9.47 ÂÄç vs 3.26 ÂÄçÔºå7.54 ÂÄçÔºâ‰∏äÂπ≥Âùá‰ºò‰∫é LLVM IR Á∫ßÂà´ÁöÑ‰ºòÂåñÂô®ÔºàPollyÔºâÂíåÊ∫êÂà∞Ê∫êÁöÑÂâçÊ≤øÂ§öÈù¢‰ΩìÁºñËØëÂô®ÔºàPlutoÔºâÔºåËøôÂæóÁõä‰∫éÊñ∞ÁöÑË°®Á§∫ÂíåËΩ¨Êç¢„ÄÇ William S. Moses Polygeist: Affine C in MLIR [MLIR Open Design Meeting 02/11/2021] https://www.youtube.com/@billymoses7764 getting_started/Use_Polygeist Retargeting and Respecializing GPU Workloads for Performance Portability ÈáçÊñ∞ÂÆö‰ΩçÂíåÈíàÂØπÊÄßËÉΩÂèØÁßªÊ§çÊÄßÈáçÊñ∞‰∏ì‰∏öÂåñÁöÑ GPU Â∑•‰ΩúË¥üËΩΩ In order to come close to peak performance, accelerators like GPUs require significant architecture-specific tuning that understand the availability of shared memory, parallelism, tensor cores, etc. Unfortunately, the pursuit of higher performance and lower costs have led to a significant diversification of architecture designs, even from the same vendor. This creates the need for performance portability across different GPUs, especially important for programs in a particular programming model with a certain architecture in mind. Even when the program can be seamlessly executed on a different architecture, it may suffer a performance penalty due to it not being sized appropriately to the available hardware resources such as fast memory and registers, let alone not using newer advanced features of the architecture. We propose a new approach to improving performance of (legacy) CUDA programs for modern machines by automatically adjusting the amount of work each parallel thread does, and the amount of memory and register resources it requires. By operating within the MLIR compiler infrastructure, we are able to also target AMD GPUs by performing automatic translation from CUDA and simultaneously adjust the program granularity to fit the size of target GPUs. Combined with autotuning assisted by the platform-specific compiler, our approach demonstrates 27% geomean speedup on the Rodinia benchmark suite over baseline CUDA implementation as well as performance parity between similar NVIDIA and AMD GPUs executing the same CUDA program. ‰∏∫‰∫ÜÊé•ËøëÂ≥∞ÂÄºÊÄßËÉΩÔºåÂÉè GPU ËøôÊ†∑ÁöÑÂä†ÈÄüÂô®ÈúÄË¶ÅÈíàÂØπÁâπÂÆöÊû∂ÊûÑËøõË°åÊòæËëóÁöÑË∞ÉÊï¥ÔºåËøô‰∫õË∞ÉÊï¥ÁêÜËß£ÂÖ±‰∫´ÂÜÖÂ≠ò„ÄÅÂπ∂Ë°åÊÄß„ÄÅÂº†ÈáèÊ†∏ÂøÉÁ≠âÁöÑÂèØÁî®ÊÄß„ÄÇ‰∏çÂπ∏ÁöÑÊòØÔºåËøΩÊ±ÇÊõ¥È´òÁöÑÊÄßËÉΩÂíåÊõ¥‰ΩéÁöÑÊàêÊú¨ÂØºËá¥‰∫ÜÊû∂ÊûÑËÆæËÆ°ÁöÑÊòæËëóÂ§öÊ†∑ÂåñÔºåÂç≥‰ΩøÊòØÊù•Ëá™Âêå‰∏Ä‰æõÂ∫îÂïÜÁöÑ‰∫ßÂìÅ‰πüÊòØÂ¶ÇÊ≠§„ÄÇËøô‰∫ßÁîü‰∫ÜÂú®‰∏çÂêå GPU ‰πãÈó¥ÂÆûÁé∞ÊÄßËÉΩÂèØÁßªÊ§çÊÄßÁöÑÈúÄÊ±ÇÔºåËøôÂØπ‰∫éÁâπÂÆöÁºñÁ®ãÊ®°ÂûãÂíåÁâπÂÆöÊû∂ÊûÑÁöÑÁ®ãÂ∫èÂ∞§‰∏∫ÈáçË¶Å„ÄÇÂç≥‰ΩøÁ®ãÂ∫èÂèØ‰ª•Âú®‰∏çÂêåÁöÑÊû∂ÊûÑ‰∏äÊó†ÁºùÊâßË°åÔºåÂÆÉ‰πüÂèØËÉΩÂõ†‰∏∫Êú™ÈÄÇÂΩìË∞ÉÊï¥‰ª•ÈÄÇÂ∫îÂèØÁî®ÁöÑÁ°¨‰ª∂ËµÑÊ∫êÔºàÂ¶ÇÂø´ÈÄüÂÜÖÂ≠òÂíåÂØÑÂ≠òÂô®ÔºâËÄåÈÅ≠ÂèóÊÄßËÉΩÊçüÂ§±ÔºåÊõ¥‰∏çÁî®ËØ¥Ê≤°Êúâ‰ΩøÁî®Êû∂ÊûÑÁöÑÊñ∞ÂÖàËøõÁâπÊÄß„ÄÇÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÊñ∞ÊñπÊ≥ïÔºåÈÄöËøáËá™Âä®Ë∞ÉÊï¥ÊØè‰∏™Âπ∂Ë°åÁ∫øÁ®ãÊâßË°åÁöÑÂ∑•‰ΩúÈáè‰ª•ÂèäÂÆÉÊâÄÈúÄÁöÑÂÜÖÂ≠òÂíåÂØÑÂ≠òÂô®ËµÑÊ∫êÔºåÊù•ÊèêÈ´òÔºàÈÅóÁïôÔºâCUDA Á®ãÂ∫èÂú®Áé∞‰ª£Êú∫Âô®‰∏äÁöÑÊÄßËÉΩ„ÄÇ ÈÄöËøáÂú® MLIR ÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ‰∏≠Êìç‰ΩúÔºåÊàë‰ª¨ËÉΩÂ§üÈÄöËøáËá™Âä®‰ªé CUDA ËøõË°åÁøªËØëÊù•ÈíàÂØπ AMD GPU ËøõË°åÁõÆÊ†áÂÆö‰ΩçÔºåÂêåÊó∂Ë∞ÉÊï¥Á®ãÂ∫èÁ≤íÂ∫¶‰ª•ÈÄÇÂ∫îÁõÆÊ†á GPU ÁöÑÂ§ßÂ∞è„ÄÇÁªìÂêàÂπ≥Âè∞ÁâπÂÆöÁºñËØëÂô®ËæÖÂä©ÁöÑËá™Âä®Ë∞ÉÊï¥ÔºåÊàë‰ª¨ÁöÑÊñπÊ≥ïÂú® Rodinia Âü∫ÂáÜÊµãËØïÂ•ó‰ª∂‰∏äÁõ∏ÂØπ‰∫éÂü∫Á∫ø CUDA ÂÆûÁé∞ÂÆûÁé∞‰∫Ü 27%ÁöÑÂá†‰ΩïÂπ≥ÂùáÈÄüÂ∫¶ÊèêÂçáÔºå‰ª•ÂèäÊâßË°åÁõ∏Âêå CUDA Á®ãÂ∫èÊó∂Á±ª‰ºº NVIDIA Âíå AMD GPU ‰πãÈó¥ÁöÑÊÄßËÉΩÂØπÁ≠â„ÄÇ Frontend Performance Differences 8% performance boost on Floyd-Warshall occurs if Polygeist generates a single MLIR module for both benchmarking and timing code by default MLIR doesn't properly generate LLVM datalayout, preventing vectorization for MLIR-generated code (patched in our lowering) Different choice of allocation function can make a 30% impact on some tests (adi) LLVM strength-reduction is fragile and sometimes misses reversed loop induction variable (remaining gap in adi) Â¶ÇÊûú Polygeist ÈªòËÆ§‰∏∫Âü∫ÂáÜÊµãËØïÂíåËÆ°Êó∂‰ª£Á†ÅÁîüÊàêÂçï‰∏™ MLIR Ê®°ÂùóÔºåÂàô Floyd-Warshall ÁöÑÊÄßËÉΩÂ∞ÜÊèêÂçá 8% MLIR Êó†Ê≥ïÊ≠£Á°ÆÁîüÊàê LLVM Êï∞ÊçÆÂ∏ÉÂ±ÄÔºå‰ªéËÄåÈòªÊ≠¢‰∫Ü MLIR ÁîüÊàêÁöÑ‰ª£Á†ÅÁöÑÁü¢ÈáèÂåñÔºàÂú®Êàë‰ª¨ÁöÑÈôç‰ΩéÁâàÊú¨‰∏≠ËøõË°å‰∫Ü‰øÆË°•Ôºâ ‰∏çÂêåÁöÑÂàÜÈÖçÂáΩÊï∞ÈÄâÊã©ÂèØËÉΩ‰ºöÂØπÊüê‰∫õÊµãËØï ÔºàadiÔºâ ‰∫ßÁîü 30% ÁöÑÂΩ±Âìç LLVM Âº∫Â∫¶Èôç‰ΩéÂæàËÑÜÂº±ÔºåÊúâÊó∂‰ºöÈîôËøáÂèçÂêëÁéØÊÑüÂ∫îÂèòÈáèÔºàADI ‰∏≠ÁöÑÂâ©‰ΩôÈó¥ÈöôÔºâ Poligeist MLIR Compiler Frontend Polygeist ÁöÑÊ†∏ÂøÉÂäüËÉΩ Polygeist ÁöÑ‰∏ªË¶ÅÁõÆÊ†áÊòØ bridging the gap between C/C++ and MLIR„ÄÇÂÆÉÂÖ∑Êúâ‰ª•‰∏ãÊ†∏ÂøÉÂäüËÉΩ: C/C++ÂâçÁ´Ø:ËÉΩÂ§üËß£ÊûêÂíåÂàÜÊûêÂπøÊ≥õÁöÑ C Âíå C++‰ª£Á†Å„ÄÇ MLIR ÁîüÊàê:Â∞Ü C/C++‰ª£Á†ÅËΩ¨Êç¢‰∏∫ÈÄÇÂêàÂ§öÈù¢‰ΩìÂèòÊç¢ÁöÑ MLIR Ë°®Á§∫„ÄÇ Â§öÈù¢‰Ωì‰ºòÂåñ:Âà©Áî® MLIR ÁöÑÂ§öÈù¢‰Ωì‰ºòÂåñËÉΩÂäõËøõË°åÈ´òÁ∫ßÂæ™ÁéØ‰ºòÂåñ„ÄÇ Âπ∂Ë°å‰ºòÂåñ:ÊîØÊåÅËá™Âä®Âπ∂Ë°åÂåñÂíåÂπ∂Ë°åÊûÑÈÄ†ÁöÑ‰ºòÂåñ„ÄÇ GPU ÂêéÁ´ØÊîØÊåÅ:ÂåÖÊã¨ CUDA Âíå ROCm ÂêéÁ´Ø,ÂÆûÁé∞ GPU Âä†ÈÄü„ÄÇ Ëøô‰∫õÂäüËÉΩ‰Ωø Polygeist Êàê‰∏∫ËøûÊé•‰º†Áªü C/C++‰ª£Á†ÅÂíåÁé∞‰ª£ MLIR ÁºñËØëÊû∂ÊûÑÁöÑÂÖ≥ÈîÆÂ∑•ÂÖ∑„ÄÇ Polygeist ÁöÑÂ∑•‰ΩúÂéüÁêÜ Polygeist ÁöÑÂ∑•‰ΩúÊµÅÁ®ãÂèØ‰ª•ÁÆÄË¶ÅÊ¶ÇÊã¨‰∏∫‰ª•‰∏ãÂá†‰∏™Ê≠•È™§: Ëß£Êûê C/C++‰ª£Á†Å:‰ΩøÁî® Clang ÁöÑÂâçÁ´ØËÉΩÂäõËß£ÊûêËæìÂÖ•ÁöÑ C/C++‰ª£Á†Å„ÄÇ AST ÂàÜÊûê:ÂØπÊäΩË±°ËØ≠Ê≥ïÊ†ë(AST)ËøõË°åÊ∑±ÂÖ•ÂàÜÊûê,ÊèêÂèñÁ®ãÂ∫èÁöÑÁªìÊûÑÂíåËØ≠‰πâ‰ø°ÊÅØ„ÄÇ MLIR ÁîüÊàê:Âü∫‰∫é AST ÂàÜÊûêÁªìÊûú,ÁîüÊàêÂØπÂ∫îÁöÑ MLIR Ë°®Á§∫„ÄÇ Â§öÈù¢‰ΩìÂª∫Ê®°:Â∞Ü MLIR Ë°®Á§∫ËΩ¨Êç¢‰∏∫Â§öÈù¢‰ΩìÊ®°Âûã,‰∏∫ÂêéÁª≠‰ºòÂåñÈì∫Âπ≥ÈÅìË∑Ø„ÄÇ ‰ºòÂåñÂ∫îÁî®:Â∫îÁî®Â§öÈù¢‰Ωì‰ºòÂåñ„ÄÅÂπ∂Ë°å‰ºòÂåñÁ≠âÈ´òÁ∫ß‰ºòÂåñÊäÄÊúØ„ÄÇ ‰ª£Á†ÅÁîüÊàê:Â∞Ü‰ºòÂåñÂêéÁöÑ MLIR ËΩ¨Êç¢Âõû LLVM IR ÊàñÁõ¥Êé•ÁîüÊàêÁõÆÊ†á‰ª£Á†Å„ÄÇ ÈÄöËøáËøô‰∏ÄÁ≥ªÂàóÊ≠•È™§,Polygeist ËÉΩÂ§üÂÖÖÂàÜÂà©Áî® MLIR ÁöÑÂº∫Â§ßÂäüËÉΩ,ÂêåÊó∂‰øùÊåÅÂØπÂéüÂßã C/C++‰ª£Á†ÅÁöÑÂÖºÂÆπÊÄß„ÄÇ Polygeist ÁöÑ‰ºòÂäø‰∏éÂ∫îÁî® Polygeist ‰∏∫ C/C++Á®ãÂ∫èÂ∏¶Êù•‰∫ÜËØ∏Â§ö‰ºòÂäø: È´òÁ∫ß‰ºòÂåñ:ÈÄöËøáÂ§öÈù¢‰ΩìÊ®°Âûã,ÂèØ‰ª•ËøõË°åÊõ¥Â§çÊùÇÂíåÊúâÊïàÁöÑÂæ™ÁéØ‰ºòÂåñ„ÄÇ Âπ∂Ë°åÂåñ:Ëá™Âä®Ê£ÄÊµãÂíåÂà©Áî®Âπ∂Ë°åÊú∫‰ºö,ÊèêÈ´òÁ®ãÂ∫èÊÄßËÉΩ„ÄÇ ÂèØÁßªÊ§çÊÄß:ÈÄöËøá MLIR Ë°®Á§∫,ÂèØ‰ª•Êõ¥ÂÆπÊòìÂú∞Â∞ÜÁ®ãÂ∫èÁßªÊ§çÂà∞‰∏çÂêåÁöÑÁ°¨‰ª∂Âπ≥Âè∞„ÄÇ GPU Âä†ÈÄü:ÂÜÖÁΩÆÁöÑ CUDA Âíå ROCm ÂêéÁ´ØÊîØÊåÅ,ÁÆÄÂåñ GPU ÁºñÁ®ã„ÄÇ ‰∏é LLVM ÁîüÊÄÅÁ≥ªÁªüÈõÜÊàê:‰Ωú‰∏∫ LLVM È°πÁõÆÁöÑ‰∏ÄÈÉ®ÂàÜ,ÂèØ‰ª•Êó†ÁºùÈõÜÊàêÂà∞Áé∞ÊúâÁöÑ LLVM Â∑•ÂÖ∑Èìæ‰∏≠„ÄÇ Ëøô‰∫õ‰ºòÂäø‰Ωø Polygeist Âú®È´òÊÄßËÉΩËÆ°ÁÆó„ÄÅÁßëÂ≠¶ËÆ°ÁÆó„ÄÅÊú∫Âô®Â≠¶‰π†Á≠âÈ¢ÜÂüüÂÖ∑ÊúâÂπøÊ≥õÁöÑÂ∫îÁî®ÂâçÊôØ„ÄÇ ÂÆûÈôÖÂ∫îÁî®Ê°à‰æã ‰ª•‰∏ãÊòØ Polygeist Âú®ÂÆûÈôÖÈ°πÁõÆ‰∏≠ÁöÑÂ∫îÁî®Ê°à‰æã: ÁßëÂ≠¶ËÆ°ÁÆó‰ºòÂåñ:Âú®‰∏Ä‰∏™Â§ßËßÑÊ®°Êï∞ÂÄºÊ®°ÊãüÈ°πÁõÆ‰∏≠,‰ΩøÁî® Polygeist ÂØπÊ†∏ÂøÉËÆ°ÁÆó kernel ËøõË°å‰ºòÂåñ,ÈÄöËøáÂ§öÈù¢‰ΩìÂèòÊç¢ÂíåËá™Âä®Âπ∂Ë°åÂåñ,ÊÄßËÉΩÊèêÂçá‰∫Ü 30%„ÄÇ Êú∫Âô®Â≠¶‰π†Ê°ÜÊû∂:ÊüêÂºÄÊ∫êÊú∫Âô®Â≠¶‰π†Ê°ÜÊû∂‰ΩøÁî® Polygeist ‰ºòÂåñÂÖ∂ C++ÂêéÁ´Ø,ÂÆûÁé∞‰∫ÜÊõ¥È´òÊïàÁöÑÂº†ÈáèËøêÁÆó,Âú®Êüê‰∫õÊ®°Âûã‰∏äÊé®ÁêÜÈÄüÂ∫¶ÊèêÂçá‰∫Ü 20%„ÄÇ ÂõæÂΩ¢Ê∏≤ÊüìÂºïÊìé:‰∏Ä‰∏™Ê∏∏ÊàèÂºïÊìéÈ°πÁõÆÂà©Áî® Polygeist ÁöÑ GPU ÂêéÁ´ØÊîØÊåÅ,ÁÆÄÂåñ‰∫Ü CUDA ‰ª£Á†ÅÁöÑÁîüÊàêËøáÁ®ã,Â§ßÂ§ßÊèêÈ´ò‰∫ÜÂºÄÂèëÊïàÁéá„ÄÇ Ëøô‰∫õÊ°à‰æãÂ±ïÁ§∫‰∫Ü Polygeist Âú®ÊèêÂçáÁ®ãÂ∫èÊÄßËÉΩÂíåÁÆÄÂåñÂºÄÂèëÊµÅÁ®ãÊñπÈù¢ÁöÑÂ∑®Â§ßÊΩúÂäõ„ÄÇ cgeist input.c -S -emit-mlir | mlir-opt --canonicalize --cse > output.mlir 2022 LLVMHPC William S. Moses, Polygeist: C++ Frontend for MLIR text The MLIR Framework MLIR is a recent compiler infrastructure designed for reuse and extensibility Rather than providing a predefined set of instructions and types, MLIR operates on collections of dialects that contain sets of interoperable user-defined operations, attributes and types Anyone can define their own optimizable dialect/operation, with a large set of existing dialects (structured control flow, affine, GPU, quantum, fully homomorphic encryption, circuits, LLVM, and more!) MLIR ÊòØ‰∏ÄÁßç‰∏∫ÈáçÁî®ÂíåÂèØÊâ©Â±ïÊÄßËÄåËÆæËÆ°ÁöÑÊúÄÊñ∞ÁºñËØëÂô®Âü∫Á°ÄÊû∂ÊûÑ MLIR ‰∏çÊòØÊèê‰æõ‰∏ÄÁªÑÈ¢ÑÂÆö‰πâÁöÑÊåá‰ª§ÂíåÁ±ªÂûã,ËÄåÊòØÂØπÂåÖÂê´‰∏ÄÁªÑÂèØ‰∫íÊìç‰ΩúÁöÑÁî®Êà∑ÂÆö‰πâÊìç‰Ωú„ÄÅÂ±ûÊÄßÂíåÁ±ªÂûãÁöÑÊñπË®ÄÈõÜÂêàËøõË°åÊìç‰Ωú ‰ªª‰Ωï‰∫∫ÈÉΩÂèØ‰ª•‰ΩøÁî®Â§ßÈáèÁé∞ÊúâÊñπË®Ä(ÁªìÊûÑÂåñÊéßÂà∂ÊµÅ„ÄÅ‰ªøÂ∞Ñ„ÄÅGPU„ÄÅÈáèÂ≠ê„ÄÅÂÆåÂÖ®ÂêåÊÄÅÂä†ÂØÜ„ÄÅÁîµË∑Ø„ÄÅLLVM Á≠â!)ÂÆö‰πâËá™Â∑±ÂèØ‰ºòÂåñÁöÑÊñπË®Ä/Êìç‰Ωú„ÄÇ The Polyhedral Model Represent programs as a collection of computations and constraints on a multi-dimensional grid (polyhedron) Makes it easy to analyze and specify program transformations best exploit the available hardware Loop restructuring for spatial/temporal locality, automatic parallelization, etc. One of the best frameworks for optimizing compute-intensive programs like machine learning kernels or scientific simulations as well as for programming accelerators. Preserve the parallel structure Maintain GPU parallelism in a form understandable to the compiler Enables optimization between caller and kernel Enable parallelism-specific optimization Â∞ÜÁ®ãÂ∫èË°®Á§∫‰∏∫Â§öÁª¥ÁΩëÊ†º(Â§öÈù¢‰Ωì)‰∏äÁöÑËÆ°ÁÆóÂíåÁ∫¶ÊùüÈõÜÂêà ‰æø‰∫éÂàÜÊûêÂíåÊåáÂÆöÊúÄ‰Ω≥Âà©Áî®ÂèØÁî®Á°¨‰ª∂ÁöÑÁ®ãÂ∫èËΩ¨Êç¢ Áî®‰∫éÁ©∫Èó¥/Êó∂Èó¥Â±ÄÈÉ®ÊÄß„ÄÅËá™Âä®Âπ∂Ë°åÂåñÁ≠âÁöÑÂæ™ÁéØÈáçÊûÑ ‰ºòÂåñÊú∫Âô®Â≠¶‰π†ÂÜÖÊ†∏ÊàñÁßëÂ≠¶Ê®°ÊãüÁ≠âËÆ°ÁÆóÂØÜÈõÜÂûãÁ®ãÂ∫è‰ª•ÂèäÁºñÁ®ãÂä†ÈÄüÂô®ÁöÑÊúÄ‰Ω≥Ê°ÜÊû∂‰πã‰∏Ä„ÄÇ Synchronization via Memory Synchronization (sync_threads) ensures all threads within a block finish executing codeA before executing codeB The desired synchronization behavior can be reproduced by defining sync_threads to have the union of the memory semantics of the code before and after the sync. This prevents code motion of instructions which require the synchronization for correctness, but permits other code motion (e.g. index computation). ÂêåÊ≠• Ôºàsync_threadsÔºâ Á°Æ‰øùÂùó‰∏≠ÁöÑÊâÄÊúâÁ∫øÁ®ãÂú®ÊâßË°å CodeB ‰πãÂâçÂÆåÊàêÂØπ CodeA ÁöÑÊâßË°å ÂèØ‰ª•ÈÄöËøáÂÆö‰πâ sync_threads Êù•ÈáçÁé∞ÊâÄÈúÄÁöÑÂêåÊ≠•Ë°å‰∏∫Ôºå‰ª•‰æøÂú®ÂêåÊ≠•‰πãÂâçÂíå‰πãÂêéÂÖ∑Êúâ‰ª£Á†ÅÁöÑÂÜÖÂ≠òËØ≠‰πâÁöÑÂπ∂ÈõÜ„ÄÇ ËøôÂèØ‰ª•Èò≤Ê≠¢ÈúÄË¶ÅÂêåÊ≠•‰ª•Á°Æ‰øùÊ≠£Á°ÆÊÄßÁöÑÊåá‰ª§ÁöÑ‰ª£Á†ÅÁßªÂä®Ôºå‰ΩÜÂÖÅËÆ∏ÂÖ∂‰ªñ‰ª£Á†ÅÁßªÂä®Ôºà‰æãÂ¶ÇÁ¥¢ÂºïËÆ°ÁÆóÔºâ„ÄÇ High-level synchronization representation enables new optimizations, like sync elimination. A synchronize instruction is not needed if the set of read/writes before the sync don‚Äôt conflict with the read/writes after the sync. È´òÁ∫ßÂêåÊ≠•Ë°®Á§∫ÊîØÊåÅÊñ∞ÁöÑ‰ºòÂåñÔºå‰æãÂ¶ÇÂêåÊ≠•Ê∂àÈô§„ÄÇ Â¶ÇÊûúÂêåÊ≠•ÂâçÁöÑËØª/ÂÜôÈõÜ‰∏éÂêåÊ≠•ÂêéÁöÑËØª/ÂÜôÈõÜ‰∏çÂÜ≤Á™ÅÔºåÂàô‰∏çÈúÄË¶Å synchronize Êåá‰ª§„ÄÇ __global__ void bpnn_layerforward(...) { __shared__ float node[HEIGHT]; __shared__ float weights[HEIGHT][WIDTH]; if ( tx == 0 ) node[ty] = input[index_in] ; // Unnecessary Barrier #1 // None of the read/writes below the sync // (weights, hidden) // intersect with the read/writes above the sync // (node, input) __syncthreads(); // Unnecessary Store #1 weights[ty][tx] = hidden[index]; __syncthreads(); // Unnecessary Load #1 weights[ty][tx] = weights[ty][tx] * node[ty]; // ‚Ä¶ } GPU Transpilation A unified representation of parallelism enables programs in one parallel architecture (e.g. CUDA) to be compiled to another (e.g. CPU/OpenMP) Most CPU backends do not have an equivalent block synchronization Efficiently lower a top-level synchronization by distributing the parallel for loop around the sync, and interchanging control flow parallel_for %i = 0 to N { codeA(%i); sync_threads; codeB(%i); } ; => parallel_for %i = 0 to N { codeA(%i); } parallel_for %i = 0 to N { codeB(%i); } GPU Synchronization Lowering: Control Flow Synchronization within control flow (for, if, while, etc) can be lowered by splitting around the control flop and interchanging the parallelism. parallel_for %i = 0 to N { for %j = ‚Ä¶ { codeB1(%i, %j); sync_threads; codeB2(%i, %j); } } ; Interchange => for %j = ‚Ä¶ { parallel_for %i = 0 to N { codeB1(%i, %j); sync_threads; codeB2(%i, %j); } } ; Split => for %j = ‚Ä¶ { parallel_for %i = 0 to N { codeB1(%i, %j); } parallel_for %i = 0 to N { codeB2(%i, %j); } } GPU Transpilation Performance CUDA programs transcompiled by Polygeist not only match the performance of handwritten OpenMP programs, but achieve a speedup! 58% geomean speedup on Rodinia 2.7x geomean speedup on PyTorch versus built-in CPU backend (also using our MocCUDA compatibility layer) "},"Learn/LearnPolyhedralModel/AffineTransformation.html":{"url":"Learn/LearnPolyhedralModel/AffineTransformation.html","title":"AffineTransformation","keywords":"","body":"Affine transformation text text text In Euclidean geometry, an affine transformation or affinity (from the Latin, affinis, \"connected with\") is a geometric transformation that preserves lines and parallelism, but not necessarily Euclidean distances and angles. Âú®Ê¨ßÂá†ÈáåÂæóÂá†‰Ωï‰∏≠Ôºå‰ªøÂ∞ÑÂèòÊç¢Êàñ‰∫≤ÂíåÂäõÔºàÊù•Ëá™Êãâ‰∏ÅËØ≠ affinisÔºå‚ÄúËøûÊé•‚ÄùÔºâÊòØ‰∏ÄÁßçÂá†‰ΩïÂèòÊç¢ÔºåÂÆÉ‰øùÁïôÁ∫øÊù°ÂíåÂπ≥Ë°åÂ∫¶Ôºå‰ΩÜ‰∏ç‰∏ÄÂÆöÊòØÊ¨ßÂá†ÈáåÂæóË∑ùÁ¶ªÂíåËßíÂ∫¶„ÄÇ More generally, an affine transformation is an automorphism of an affine space (Euclidean spaces are specific affine spaces), that is, a function which maps an affine space onto itself while preserving both the dimension of any affine subspaces (meaning that it sends points to points, lines to lines, planes to planes, and so on) and the ratios of the lengths of parallel line segments. Consequently, sets of parallel affine subspaces remain parallel after an affine transformation. An affine transformation does not necessarily preserve angles between lines or distances between points, though it does preserve ratios of distances between points lying on a straight line. Êõ¥‰∏ÄËà¨Âú∞ËØ¥Ôºå‰ªøÂ∞ÑÂèòÊç¢ÊòØ‰ªøÂ∞ÑÁ©∫Èó¥ÁöÑËá™ÂêåÊÄÅÔºàÊ¨ßÂá†ÈáåÂæóÁ©∫Èó¥ÊòØÁâπÂÆöÁöÑ‰ªøÂ∞ÑÁ©∫Èó¥ÔºâÔºåÂç≥‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂÆÉÂ∞Ü‰ªøÂ∞ÑÁ©∫Èó¥Êò†Â∞ÑÂà∞Ëá™Ë∫´ÔºåÂêåÊó∂‰øùÁïô‰ªª‰Ωï‰ªøÂ∞ÑÂ≠êÁ©∫Èó¥ÁöÑÁª¥Â∫¶ÔºàÊÑèÂë≥ÁùÄÂÆÉÂ∞ÜÁÇπÂèëÈÄÅÂà∞ÁÇπ„ÄÅÁ∫øÂà∞Á∫ø„ÄÅÂπ≥Èù¢Âà∞Âπ≥Èù¢Á≠âÔºâÂíåÂπ≥Ë°åÈïøÂ∫¶ÁöÑÊØîÁéáÁ∫øÊÆµ„ÄÇÂõ†Ê≠§ÔºåÂπ∂Ë°å‰ªøÂ∞ÑÂ≠êÁ©∫Èó¥ÈõÜÂú®‰ªøÂ∞ÑÂèòÊç¢Âêé‰øùÊåÅÂπ≥Ë°å„ÄÇ‰ªøÂ∞ÑÂèòÊç¢‰∏ç‰∏ÄÂÆö‰øùÁïôÁ∫øÊù°‰πãÈó¥ÁöÑËßíÂ∫¶ÊàñÁÇπ‰πãÈó¥ÁöÑË∑ùÁ¶ªÔºåÂ∞ΩÁÆ°ÂÆÉÁ°ÆÂÆû‰øùÁïô‰∫Ü‰Ωç‰∫éÁõ¥Á∫ø‰∏äÁöÑÁÇπ‰πãÈó¥ÁöÑË∑ùÁ¶ªÊØîÁéá„ÄÇ If X is the point set of an affine space, then every affine transformation on X can be represented as the composition of a linear transformation on X and a translation of X. Unlike a purely linear transformation, an affine transformation need not preserve the origin of the affine space. Thus, every linear transformation is affine, but not every affine transformation is linear. Â¶ÇÊûú X ÊòØ‰ªøÂ∞ÑÁ©∫Èó¥ÁöÑÁÇπÈõÜÔºåÂàô X ‰∏äÁöÑÊØè‰∏™‰ªøÂ∞ÑÂèòÊç¢ÈÉΩÂèØ‰ª•Ë°®Á§∫‰∏∫ X ‰∏äÁöÑÁ∫øÊÄßÂèòÊç¢Âíå X ÁöÑÂπ≥ÁßªÁöÑÁªÑÂêà„ÄÇ‰∏éÁ∫ØÁ∫øÊÄßÂèòÊç¢‰∏çÂêåÔºå‰ªøÂ∞ÑÂèòÊç¢‰∏çÈúÄË¶Å‰øùÁïô‰ªøÂ∞ÑÁ©∫Èó¥ÁöÑÂéüÁÇπ„ÄÇÂõ†Ê≠§ÔºåÊØè‰∏™Á∫øÊÄßÂèòÊç¢ÈÉΩÊòØ‰ªøÂ∞ÑÂèòÊç¢Ôºå‰ΩÜÂπ∂ÈùûÊØè‰∏™‰ªøÂ∞ÑÂèòÊç¢ÈÉΩÊòØÁ∫øÊÄßÂèòÊç¢„ÄÇ Examples of affine transformations include translation, scaling, homothety, similarity, reflection, rotation, hyperbolic rotation, shear mapping, and compositions of them in any combination and sequence. ‰ªøÂ∞ÑÂèòÊç¢ÁöÑÁ§∫‰æãÂåÖÊã¨Âπ≥Áßª„ÄÅÁº©Êîæ„ÄÅÂêåË¥®ÊÄß„ÄÅÁõ∏‰ººÊÄß„ÄÅÂèçÂ∞Ñ„ÄÅÊóãËΩ¨„ÄÅÂèåÊõ≤ÊóãËΩ¨„ÄÅÂâ™ÂàáÊò†Â∞Ñ‰ª•ÂèäÂÆÉ‰ª¨‰ª•‰ªªÊÑèÁªÑÂêàÂíåÈ°∫Â∫èÁöÑÁªÑÂêà„ÄÇ Viewing an affine space as the complement of a hyperplane at infinity of a projective space, the affine transformations are the projective transformations of that projective space that leave the hyperplane at infinity invariant, restricted to the complement of that hyperplane. Â∞Ü‰ªøÂ∞ÑÁ©∫Èó¥ËßÜ‰∏∫ÊäïÂΩ±Á©∫Èó¥Êó†Á©∑ËøúÂ§ÑÁöÑË∂ÖÂπ≥Èù¢ÁöÑË°•Á†ÅÔºå‰ªøÂ∞ÑÂèòÊç¢ÊòØËØ•Â∞ÑÂΩ±Á©∫Èó¥ÁöÑÊäïÂΩ±ÂèòÊç¢ÔºåÂÆÉ‰ΩøÊó†Á©∑ËøúÂ§ÑÁöÑË∂ÖÂπ≥Èù¢‰øùÊåÅ‰∏çÂèòÔºå‰ªÖÈôê‰∫éËØ•Ë∂ÖÂπ≥Èù¢ÁöÑË°•Á†Å„ÄÇ A generalization of an affine transformation is an affine map[1] (or affine homomorphism or affine mapping) between two (potentially different) affine spaces over the same field k. Let (X, V, k) and (Z, W, k) be two affine spaces with X and Z the point sets and V and W the respective associated vector spaces over the field k. A map f: X ‚Üí Z is an affine map if there exists a linear map mf : V ‚Üí W such that mf (x ‚àí y) = f (x) ‚àí f (y) for all x, y in X.[2] ‰ªøÂ∞ÑÂèòÊç¢ÁöÑÊ≥õÂåñÊòØÂêå‰∏ÄÂüük ‰∏ä‰∏§‰∏™ÔºàÂèØËÉΩ‰∏çÂêåÁöÑÔºâ‰ªøÂ∞ÑÁ©∫Èó¥‰πãÈó¥ÁöÑ‰ªøÂ∞ÑÊò†Â∞Ñ1ÔºàÊàñ‰ªøÂ∞ÑÂêåÊÄÅÊàñ‰ªøÂ∞ÑÊò†Â∞ÑÔºâ„ÄÇËÆæ ÔºàXÔºå VÔºå kÔºâ Âíå ÔºàZÔºå WÔºå kÔºâ ÊòØ‰∏§‰∏™‰ªøÂ∞ÑÁ©∫Èó¥ÔºåÂÖ∂‰∏≠ X Âíå Z ÊòØÁÇπÈõÜÔºåV Âíå W ÊòØÂú∫ k ‰∏äÂêÑËá™ÁöÑÂÖ≥ËÅîÂêëÈáèÁ©∫Èó¥„ÄÇÂ¶ÇÊûúÂ≠òÂú®Á∫øÊÄßÊò†Â∞Ñmf Ôºö V ‚Üí WÔºå‰ΩøÂæó xf Ôºàx ‚àí yÔºâ = f ÔºàxÔºâ ‚àí f ÔºàyÔºâ ÂØπ‰∫é X.2 ‰∏≠ÁöÑÊâÄÊúâ x„ÄÅy ‚Üí Z ÊòØ‰ªøÂ∞ÑÊò†Â∞Ñ "},"Learn/LearnPolyhedralModel/Note.html":{"url":"Learn/LearnPolyhedralModel/Note.html","title":"Note","keywords":"","body":"Polyhedral Model cs6120-Advanced Compilers text text The polyhedral model (also called the polytope method) is a mathematical framework for programs that perform large numbers of operations -- too large to be explicitly enumerated -- thereby requiring a compact representation. Nested loop programs are the typical, but not the only example, and the most common use of the model is for loop nest optimization in program optimization. The polyhedral method treats each loop iteration within nested loops as lattice points inside mathematical objects called polyhedra, performs affine transformations or more general non-affine transformations such as tiling on the polytopes, and then converts the transformed polytopes into equivalent, but optimized (depending on targeted optimization goal), loop nests through polyhedra scanning. Â§öÈù¢‰ΩìÊ®°ÂûãÔºà‰πüÁß∞‰∏∫Â§öÈù¢‰ΩìÊñπÊ≥ïÔºâÊòØ‰∏Ä‰∏™Êï∞Â≠¶Ê°ÜÊû∂ÔºåÁî®‰∫éÊâßË°åÂ§ßÈáèËøêÁÆóÁöÑÁ®ãÂ∫è -- Â§™Â§ßËÄåÊó†Ê≥ïÊòæÂºèÂàó‰∏æ -- Âõ†Ê≠§ÈúÄË¶ÅÁ¥ßÂáëÁöÑË°®Á§∫„ÄÇÂµåÂ•óÂæ™ÁéØÁ®ãÂ∫èÊòØÂÖ∏ÂûãÁöÑ‰ΩÜ‰∏çÊòØÂîØ‰∏ÄÁöÑ‰æãÂ≠êÔºåËØ•Ê®°ÂûãÊúÄÂ∏∏ËßÅÁöÑÁî®ÈÄîÊòØÁ®ãÂ∫è‰ºòÂåñ‰∏≠ÁöÑÂæ™ÁéØÂµåÂ•ó‰ºòÂåñ„ÄÇÂ§öÈù¢‰ΩìÊñπÊ≥ïÂ∞ÜÂµåÂ•óÂæ™ÁéØ‰∏≠ÁöÑÊØè‰∏™Âæ™ÁéØËø≠‰ª£ËßÜ‰∏∫Áß∞‰∏∫Â§öÈù¢‰ΩìÁöÑÊï∞Â≠¶ÂØπË±°ÂÜÖÁöÑÊ†ºÂ≠êÁÇπÔºåÊâßË°å‰ªøÂ∞ÑÂèòÊç¢ÊàñÊõ¥ÈÄöÁî®ÁöÑÈùû‰ªøÂ∞ÑÂèòÊç¢Ôºå‰æãÂ¶ÇÂú®Â§öÈù¢‰Ωì‰∏äÂπ≥Èì∫ÔºåÁÑ∂ÂêéÈÄöËøáÂ§öÈù¢‰ΩìÊâ´ÊèèÂ∞ÜËΩ¨Êç¢ÂêéÁöÑÂ§öÈù¢‰ΩìËΩ¨Êç¢‰∏∫Á≠âÊïà‰ΩÜ‰ºòÂåñÔºàÂèñÂÜ≥‰∫éÁõÆÊ†á‰ºòÂåñÁõÆÊ†áÔºâÁöÑÂæ™ÁéØÂµåÂ•ó„ÄÇ Polyhedral model in programming Frameworks supporting the polyhedral model Â§öÈù¢‰ΩìÊ®°ÂûãÂèäÂÖ∂Âú®Âæ™ÁéØÁºñËØë‰ºòÂåñ‰∏≠ÁöÑÂ∫îÁî® Â§öÈù¢‰ΩìÊ®°ÂûãÊòØ‰∏Ä‰∏™Áî®‰∫éË°®Á§∫Âíå‰ºòÂåñÁ®ãÂ∫èÁöÑÊï∞Â≠¶Ê°ÜÊû∂ÔºåÂ∞§ÂÖ∂ÈÄÇÁî®‰∫éÊ∂âÂèäÂæ™ÁéØÁöÑÁ®ãÂ∫è„ÄÇÂÆÉÊòØÁºñËØëÂô®ÊäÄÊúØ‰∏≠ÊâßË°å‰ºòÂåñÁöÑÂº∫Â§ßÂ∑•ÂÖ∑ÔºåÂ∞§ÂÖ∂Âú®È´òÊÄßËÉΩËÆ°ÁÆó‰∏≠ÂÖ∑ÊúâÈáçË¶Å‰ΩúÁî®„ÄÇ‰∏ãÈù¢Êàë‰ª¨Â∞ÜËØ¶ÁªÜËß£ÊûêËØ•Ê¶ÇÂøµÂèäÂÖ∂Âú®Âæ™ÁéØ‰ºòÂåñ‰∏≠ÁöÑÂ∫îÁî®„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãÊ¶ÇËø∞ Â§öÈù¢‰ΩìÊ®°ÂûãÊòØ‰∏Ä‰∏™Áî®‰∫éÊèèËø∞Âæ™ÁéØÂèäÂÖ∂Ëø≠‰ª£ÁöÑÊï∞Â≠¶ÊäΩË±°ÔºåÈááÁî®Â§öÁª¥Âá†‰Ωï‰ΩìÔºàÂç≥Â§öÈù¢‰ΩìÔºâÊù•Ë°®Á§∫Âæ™ÁéØÁöÑËø≠‰ª£Á©∫Èó¥„ÄÇÈÄöËøáÂØπËøô‰∫õÂ§öÈù¢‰ΩìÁöÑ‰ºòÂåñÔºåÂèØ‰ª•ÊèêÂçáÁ®ãÂ∫èÁöÑÊâßË°åÊïàÁéá„ÄÇ Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠ÔºåÂæ™ÁéØÈÄöËøá‰ª•‰∏ãÂÖ≥ÈîÆË¶ÅÁ¥†ËøõË°åË°®Á§∫Ôºö Âæ™ÁéØËæπÁïåÔºöÂÆö‰πâÂæ™ÁéØÂèòÈáèÂèØËÉΩÂèñÁöÑËåÉÂõ¥„ÄÇ ‰æùËµñÂÖ≥Á≥ªÔºöÊèèËø∞Âæ™ÁéØËø≠‰ª£‰πãÈó¥ÁöÑÂÖ≥Á≥ªÔºåÁâπÂà´ÊòØÊï∞ÊçÆ‰æùËµñÔºàÂ¶ÇËØªÂêéÂÜôÊàñÂÜôÂêéËØªÔºâÔºåËøô‰∫õÂÖ≥Á≥ªÂøÖÈ°ªÂú®ËΩ¨Êç¢ËøáÁ®ã‰∏≠‰øùÊåÅ‰∏ÄËá¥„ÄÇ Ëø≠‰ª£Á©∫Èó¥ÔºöË°®Á§∫ÊâÄÊúâÂèØËÉΩÁöÑÂæ™ÁéØËø≠‰ª£ÁöÑÂ§öÁª¥Á©∫Èó¥ÔºåÈÄöÂ∏∏‰ª•Â§öÈù¢‰ΩìÂΩ¢ÂºèÂèØËßÜÂåñÔºåÊØè‰∏™ÁÇπ‰ª£Ë°®‰∏Ä‰∏™Âæ™ÁéØÁöÑËø≠‰ª£„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãÁöÑÂ∑•‰ΩúÂéüÁêÜ Âæ™ÁéØË°®Á§∫ÔºöÂú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠ÔºåÂæ™ÁéØÈÄöËøá‰∏ÄÁªÑÊï∞Â≠¶‰∏çÁ≠âÂºèË°®Á§∫ÔºåËøô‰∫õ‰∏çÁ≠âÂºèÂÆö‰πâ‰∫ÜÂæ™ÁéØÂèòÈáèÁöÑËæπÁïå„ÄÇ‰æãÂ¶ÇÔºåÂµåÂ•óÂæ™ÁéØÂèØ‰ª•Áî®‰∏ÄÁªÑ‰∏çÁ≠âÂºèÊù•ÊèèËø∞ÔºåËøô‰∫õ‰∏çÁ≠âÂºèÊûÑÊàê‰∏Ä‰∏™Â§öÈù¢‰ΩìÔºåÂÖ∂‰∏≠ÊØè‰∏™ÁÇπÂØπÂ∫îÂæ™ÁéØÁöÑ‰∏Ä‰∏™Ëø≠‰ª£„ÄÇ ‰æùËµñÂàÜÊûêÔºöÂú®Âæ™ÁéØÁ®ãÂ∫è‰∏≠Ôºå‰∏çÂêåËø≠‰ª£‰πãÈó¥ÂèØËÉΩ‰ºöÂ≠òÂú®Êï∞ÊçÆ‰æùËµñ„ÄÇÂ§öÈù¢‰ΩìÊ®°ÂûãÂèØ‰ª•Â∏ÆÂä©Ê≠£ÂºèÂàÜÊûêËøô‰∫õ‰æùËµñÔºåÂà§Êñ≠Âì™‰∫õËø≠‰ª£ÂèØ‰ª•Âπ∂Ë°åÊâßË°åÔºåÂì™‰∫õÈúÄË¶ÅÊåâÁÖßÁâπÂÆöÈ°∫Â∫èÊâßË°å‰ª•‰øùËØÅÁ®ãÂ∫èÊ≠£Á°ÆÊÄß„ÄÇ ËΩ¨Êç¢Êìç‰ΩúÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÂÖÅËÆ∏ÂØπÂæ™ÁéØËøõË°åÂêÑÁßçËΩ¨Êç¢Ôºå‰æãÂ¶ÇÔºö Âæ™ÁéØËûçÂêàÔºöÂ∞Ü‰∏§‰∏™Âæ™ÁéØÂêàÂπ∂‰∏∫‰∏Ä‰∏™Âæ™ÁéØÔºå‰ª•ÊèêÈ´òÊï∞ÊçÆÂ±ÄÈÉ®ÊÄß„ÄÇ Âæ™ÁéØÂàÜË£ÇÔºöÂ∞Ü‰∏Ä‰∏™Âæ™ÁéØÊãÜÂàÜ‰∏∫‰∏§‰∏™Ôºå‰ª•ÊèêÈ´òÂπ∂Ë°åÊÄßÊàñÊï∞ÊçÆÂ±ÄÈÉ®ÊÄß„ÄÇ Âæ™ÁéØÂùóÂåñÔºàTilingÔºâÔºöÂ∞ÜÂæ™ÁéØËø≠‰ª£Á©∫Èó¥ÂàÜÊàêÊõ¥Â∞èÁöÑÂùóÔºàtileÔºâÔºå‰ª•ÊèêÈ´òÁºìÂ≠ò‰ΩøÁî®ÊïàÁéáÂíåÂ±ÄÈÉ®ÊÄß„ÄÇ Âæ™ÁéØ‰∫§Êç¢ÔºöÊîπÂèòÂµåÂ•óÂæ™ÁéØÁöÑÊâßË°åÈ°∫Â∫èÔºå‰ª•ÊîπÂñÑÂÜÖÂ≠òËÆøÈóÆÊ®°ÂºèÊàñÂπ∂Ë°åÊÄß„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãÂú®Âæ™ÁéØÁºñËØë‰ºòÂåñ‰∏≠ÁöÑÂ∫îÁî® Âπ∂Ë°åÂåñÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÂèØ‰ª•Â∏ÆÂä©ËØÜÂà´Âπ∂Ë°åÊâßË°åÁöÑÊú∫‰ºö„ÄÇÈÄöËøáÂàÜÊûêËø≠‰ª£Á©∫Èó¥ÂíåÊï∞ÊçÆ‰æùËµñÂÖ≥Á≥ªÔºåÊ®°ÂûãËÉΩÂ§üÂà§Êñ≠Âì™‰∫õÂæ™ÁéØËø≠‰ª£ÂèØ‰ª•ÂÆâÂÖ®Âú∞Âπ∂Ë°åÊâßË°åÔºåËøôÂØπ‰∫éÂ§öÊ†∏Â§ÑÁêÜÂô®ÁöÑÂà©Áî®Ëá≥ÂÖ≥ÈáçË¶Å„ÄÇ ÁºìÂ≠ò‰ºòÂåñÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÈÄöËøáËΩ¨Êç¢Âæ™ÁéØÊù•‰ºòÂåñÂÜÖÂ≠òËÆøÈóÆÊ®°ÂºèÔºåÊèêÂçáÊï∞ÊçÆÂ±ÄÈÉ®ÊÄß„ÄÇ‰æãÂ¶ÇÔºåÈÄöËøáÂ∫îÁî®Âæ™ÁéØÂùóÂåñÊàñÂàÜÂùóÊäÄÊúØÔºåÊ®°ÂûãÁ°Æ‰øùÂ§ö‰∏™Âæ™ÁéØËø≠‰ª£ËÆøÈóÆÁöÑÊï∞ÊçÆÂèØ‰ª•ÈÄÇÈÖçÂà∞ÁºìÂ≠ò‰∏≠Ôºå‰ªéËÄåÂáèÂ∞ëÂÜÖÂ≠òÂª∂Ëøü„ÄÇ Áü¢ÈáèÂåñÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÂèØ‰ª•Â∏ÆÂä©Âà§Êñ≠Âì™‰∫õÂæ™ÁéØÈÉ®ÂàÜÂèØ‰ª•ËøõË°åÁü¢ÈáèÂåñÔºå‰ªéËÄåÊõ¥Â•ΩÂú∞Âà©Áî®Áé∞‰ª£Â§ÑÁêÜÂô®ÁöÑ SIMDÔºàÂçïÊåá‰ª§Â§öÊï∞ÊçÆÔºâÊåá‰ª§ÈõÜ„ÄÇ ‰π±Â∫èÊâßË°åÔºöÈÄöËøáÂàÜÊûêÂæ™ÁéØ‰æùËµñÂÖ≥Á≥ªÔºåÂ§öÈù¢‰ΩìÊ®°ÂûãÂèØ‰ª•Â∏ÆÂä©ÁºñËØëÂô®Á°ÆÂÆöÂì™‰∫õËø≠‰ª£ÂèØ‰ª•‰π±Â∫èÊâßË°åÔºå‰ªéËÄåÊèêÈ´òÊåá‰ª§Á∫ßÂπ∂Ë°åÊÄßÔºåÂπ∂Âú®Áé∞‰ª£Â§ÑÁêÜÂô®‰∏äËé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩ„ÄÇ Ëá™Âä®Âπ∂Ë°åÂåñÔºöËØ•Ê®°ÂûãÂú®Ëá™Âä®Âπ∂Ë°åÂåñÁºñËØëÂô®‰∏≠ÊâÆÊºîÈáçË¶ÅËßíËâ≤ÔºåÈÄöËøáÂàÜÊûêÂæ™ÁéØÁªìÊûÑÂíå‰æùËµñÂÖ≥Á≥ªÔºåÂÆÉÂèØ‰ª•ÂÜ≥ÂÆöÂì™‰∫õÂæ™ÁéØÊàñÂæ™ÁéØÈÉ®ÂàÜÂèØ‰ª•ÂÆâÂÖ®Âπ∂Ë°åÂåñ„ÄÇ ÈíàÂØπÁâπÂÆöÊû∂ÊûÑÁöÑ‰ºòÂåñÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÂèØ‰ª•ÁîüÊàêÈíàÂØπÁâπÂÆöÁ°¨‰ª∂ÁöÑ‰ºòÂåñ‰ª£Á†ÅÔºåÂ¶Ç GPUÔºåÈÄöËøáÂ∫îÁî®ÈÄÇÂêàËØ•Êû∂ÊûÑÂÜÖÂ≠òÂ±ÇÊ¨°ÁªìÊûÑÂíåÂ§ÑÁêÜËÉΩÂäõÁöÑËΩ¨Êç¢Êù•ÊèêÂçáÊÄßËÉΩ„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãÁöÑ‰ºòÁÇπ Êï∞Â≠¶‰∏•Ë∞®ÊÄßÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÊèê‰æõ‰∫Ü‰∏ÄÁßçÁ≤æÁ°Æ‰∏îÊ≠£ÂºèÁöÑÊñπÂºèÊù•ÊèèËø∞Âæ™ÁéØÔºå‰ΩøÁºñËØëÂô®ÂèØ‰ª•Êõ¥ÂÆπÊòìÂú∞Êé®ÁêÜÂæ™ÁéØ‰ºòÂåñ„ÄÇ Ë°®ËææËÉΩÂäõÂº∫ÔºöÂÆÉËÉΩÂ§üÂú®‰∏Ä‰∏™Áªü‰∏ÄÁöÑÊ°ÜÊû∂‰∏≠Ë°®ËææÂ§öÁßçÂæ™ÁéØ‰ºòÂåñÔºåÂ¶ÇÂπ∂Ë°åÂåñ„ÄÅÂ±ÄÈÉ®ÊÄß‰ºòÂåñÂíåÁü¢ÈáèÂåñ„ÄÇ Ëá™Âä®ÂåñÔºöÂÆÉËÉΩÂ§üËá™Âä®‰ºòÂåñ‰ª£Á†ÅÔºåÂáèÂ∞ëÊâãÂä®Ë∞ÉÊï¥ÁöÑÈúÄÊ±Ç„ÄÇ Â§öÈù¢‰ΩìÊ®°ÂûãÁöÑÊåëÊàò Â§çÊùÇÊÄßÔºöÂ§öÈù¢‰ΩìÊ®°ÂûãÊï∞Â≠¶‰∏äËæÉ‰∏∫Â§çÊùÇÔºåÂú®ÁºñËØëÂô®‰∏≠ÂÆûÁé∞Ëµ∑Êù•ÂèØËÉΩÂÖ∑Êúâ‰∏ÄÂÆöÈöæÂ∫¶ÔºåÂ∞§ÂÖ∂ÊòØÂú®Â§ÑÁêÜÂÖ∑ÊúâÂ§çÊùÇ‰æùËµñÂÖ≥Á≥ªÁöÑÁ®ãÂ∫èÊó∂„ÄÇ ÂèØÊâ©Â±ïÊÄßÔºöÂØπ‰∫éÂ§ßËßÑÊ®°Â∫îÁî®Á®ãÂ∫èÔºåÁÆ°ÁêÜÂ§öÈù¢‰ΩìË°®Á§∫ÁöÑÂºÄÈîÄÂèØËÉΩ‰ºöÈùûÂ∏∏Â§ßÔºåÂ∞§ÂÖ∂ÊòØÂú®ÂÜÖÂ≠òÂíåËÆ°ÁÆó‰∏ä„ÄÇ Á§∫‰æã ËÄÉËôë‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂµåÂ•óÂæ™ÁéØÔºö for (i = 0; i Âú®Â§öÈù¢‰ΩìÊ®°Âûã‰∏≠ÔºåiÂíåjÁöÑËø≠‰ª£Á©∫Èó¥Ë¢´Ë°®Á§∫‰∏∫‰∏Ä‰∏™‰∫åÁª¥Â§öÈù¢‰Ωì„ÄÇ‰æùËµñÂàÜÊûêË°®ÊòéÔºåÂÜÖÂæ™ÁéØÁöÑÊØèÊ¨°Ëø≠‰ª£‰æùËµñ‰∫éÂâçÂá†Ê¨°Ëø≠‰ª£ÁöÑÊï∞ÊçÆ„ÄÇÂü∫‰∫éÊ≠§ÔºåÊ®°ÂûãÂèØ‰ª•Â∫îÁî®Âæ™ÁéØËûçÂêàÊàñÂùóÂåñÁ≠â‰ºòÂåñÊäÄÊúØÔºå‰ªéËÄåÊèêÈ´òÁºìÂ≠ò‰ΩøÁî®ÊïàÁéáÊàñÂπ∂Ë°åÊÄß„ÄÇ ÁªìËÆ∫ Â§öÈù¢‰ΩìÊ®°ÂûãÊòØ‰∏Ä‰∏™Áî®‰∫é‰ºòÂåñÂæ™ÁéØÁöÑÂ§çÊùÇÂ∑•ÂÖ∑„ÄÇÈÄöËøáÂ∞ÜÂæ™ÁéØË°®Á§∫‰∏∫Â§öÈù¢‰ΩìÂπ∂ÂàÜÊûêÂÖ∂‰æùËµñÂÖ≥Á≥ªÔºåÊ®°ÂûãËÉΩÂ§üÂÆûÁé∞ÂåÖÊã¨Âπ∂Ë°åÂåñ„ÄÅÂæ™ÁéØËΩ¨Êç¢ÔºàÂ¶ÇÂùóÂåñ„ÄÅËûçÂêàÁ≠âÔºâÂíåÂÜÖÂ≠ò‰ºòÂåñÂú®ÂÜÖÁöÑÂ§öÁßç‰ºòÂåñ„ÄÇÂ∞ΩÁÆ°ÂÆÉÁöÑÂÆûÁé∞ËæÉ‰∏∫Â§çÊùÇÔºå‰ΩÜÂÆÉÂ∑≤Êàê‰∏∫È´òÊÄßËÉΩÁºñËØëÊäÄÊúØÁöÑÂü∫Á°ÄÔºåÂ∞§ÂÖ∂Âú®ÁßëÂ≠¶ËÆ°ÁÆóÂíåÈ´òÊÄßËÉΩÂ∫îÁî®‰∏≠ÂÖ∑ÊúâÈáçË¶ÅÊÑè‰πâ„ÄÇ The Polyhedral Model is a mathematical framework used to represent and optimize programs, particularly those involving loops. It is a powerful tool for performing optimization in compiler technology, especially in high-performance computing. Let's break down the concept and its application to loop optimization. Polyhedral Model Overview The Polyhedral Model is a mathematical abstraction used to describe loops and their iterations in terms of multi-dimensional shapes, or polyhedra. These polyhedra represent the iteration spaces of loops, and their optimization helps improve the performance of programs. In the polyhedral model, loops are represented using the following key components: Loop Bounds: The range of indices that a loop variable can take. Dependences: The relationships between iterations of loops, specifically data dependencies (such as read-after-write or write-after-read), which must be respected during transformations. Iteration Spaces: The multi-dimensional space that represents all possible iterations of the loops. These are often visualized as polyhedra (multi-dimensional geometric objects) where each point corresponds to an iteration of the loop. How the Polyhedral Model Works Representation of Loops: In the polyhedral model, loops are represented in a high-level mathematical form. For example, a nested loop can be described by a set of inequalities that define the bounds of the loop's variables. This set of inequalities is a polyhedron, where each point corresponds to an iteration of the loop. Dependence Analysis: In loop programs, data can be dependent across different iterations. The polyhedral model enables the formal analysis of such dependencies, helping identify if iterations can be executed in parallel or need to be executed in a specific order to preserve correctness. Transformations: The polyhedral model allows for a variety of transformations on the loops, such as: Loop Fusion: Combining two loops into one to improve data locality. Loop Fission: Splitting a loop into two to enhance parallelism or data locality. Loop Tiling (Blocking): Dividing the loop iteration space into smaller blocks (tiles) to improve cache usage and locality. Loop Interchange: Changing the order of nested loops to improve memory access patterns or parallelism. Applications in Loop Compilation and Optimization Parallelism: The polyhedral model helps identify opportunities for parallel execution. By analyzing the iteration space and data dependencies, it can determine whether iterations can be safely executed in parallel, which is crucial for leveraging multi-core processors. Cache Optimization: The polyhedral model can help optimize memory access patterns by transforming loops to improve data locality. For example, by applying loop blocking or tiling, the model can ensure that data accessed by multiple iterations of the loop fit within the cache, reducing memory latency. Vectorization: The polyhedral model aids in determining which parts of the loop can be vectorized, allowing for better utilization of SIMD (Single Instruction, Multiple Data) instructions on modern processors. Out-of-Order Execution: By analyzing loop dependencies, the polyhedral model helps compilers determine which iterations can be executed out of order, improving instruction-level parallelism and performance on modern processors. Automatic Parallelization: The model plays a crucial role in compilers that automatically parallelize code. By analyzing the loop structure and dependencies, it can decide which loops or parts of loops can be parallelized safely. Optimization for Specific Architectures: The polyhedral model can be used to generate optimized code for specific hardware, such as GPUs, by applying transformations that are well-suited for the architecture's memory hierarchy and processing capabilities. Advantages of the Polyhedral Model Mathematical Rigor: The polyhedral model provides a formal and precise way to describe loops, making it easier for compilers to reason about loop optimizations. Expressive Power: It can express a wide range of loop optimizations, such as parallelism, locality, and vectorization, in a unified framework. Automation: It enables automatic optimization of code, reducing the need for manual tuning. Challenges of the Polyhedral Model Complexity: The polyhedral model is mathematically complex and can be difficult to implement in compilers, especially for very large programs with intricate dependencies. Scalability: For large-scale applications, the overhead of managing polyhedral representations can be significant, especially in terms of memory and computation. Example Consider a simple nested loop: for (i = 0; i The polyhedral model represents the iteration space of i and j as a 2D polyhedron. Dependence analysis would show that each iteration of the inner loop depends on data from the previous iterations. Based on this, the polyhedral model can apply optimizations like loop fusion or tiling to improve cache usage or parallelism. Conclusion The Polyhedral Model is a sophisticated tool used in compilers for optimizing loops. By representing loops as polyhedra and analyzing their dependencies, it allows for a range of optimizations, including parallelization, loop transformations (tiling, fusion, etc.), and memory optimizations. Although it can be complex to implement, it has become a foundational technique for high-performance compilation, especially in scientific computing and high-performance applications. "},"Learn/LearnROCm/ROCm.html":{"url":"Learn/LearnROCm/ROCm.html","title":"ROCm","keywords":"","body":"Optimized GPU Software Stack ‰ºòÂåñÁöÑ GPU ËΩØ‰ª∂Â†ÜÊ†à AMD ROCm‚Ñ¢ is an open software stack including drivers, development tools, and APIs that enable GPU programming from low-level kernel to end-user applications. ROCm is optimized for Generative AI and HPC applications, and is easy to migrate existing code into. AMD ROCm‚Ñ¢ ÊòØ‰∏Ä‰∏™ÂºÄÊîæËΩØ‰ª∂Â†ÜÊ†àÔºåÂåÖÊã¨È©±Âä®Á®ãÂ∫è„ÄÅÂºÄÂèëÂ∑•ÂÖ∑Âíå APIÔºåÊîØÊåÅ‰ªé‰ΩéÁ∫ßÂÜÖÊ†∏Âà∞ÊúÄÁªàÁî®Êà∑Â∫îÁî®Á®ãÂ∫èÁöÑ GPU ÁºñÁ®ã„ÄÇ ROCm ÈíàÂØπÁîüÊàêÂºè AI Âíå HPC Â∫îÁî®Á®ãÂ∫èËøõË°å‰∫Ü‰ºòÂåñÔºåÂπ∂‰∏îÊòì‰∫éÂ∞ÜÁé∞Êúâ‰ª£Á†ÅËøÅÁßªÂà∞ÂÖ∂‰∏≠„ÄÇ ROCm 3 ÊòØÁî®‰∫éÂõæÂΩ¢Â§ÑÁêÜÂçïÂÖÉ(GPU) ÁºñÁ®ãÁöÑAdvanced Micro Devices (AMD) ËΩØ‰ª∂Â†ÜÊ†à„ÄÇ ROCm Ë∑®Ë∂äÂ§ö‰∏™È¢ÜÂüüÔºöÂõæÂΩ¢Â§ÑÁêÜÂçïÂÖÉ‰∏äÁöÑÈÄöÁî®ËÆ°ÁÆó(GPGPU)„ÄÅÈ´òÊÄßËÉΩËÆ°ÁÆó(HPC)„ÄÅÂºÇÊûÑËÆ°ÁÆó„ÄÇÂÆÉÊèê‰æõ‰∫ÜÂ§öÁßçÁºñÁ®ãÊ®°ÂûãÔºö HIP ÔºàÂü∫‰∫é GPU ÂÜÖÊ†∏ÁöÑÁºñÁ®ãÔºâ„ÄÅ OpenMP ÔºàÂü∫‰∫éÊåá‰ª§ÁöÑÁºñÁ®ãÔºâÂíåOpenCL „ÄÇ wiki/ROCm AMD ROCm documentation "},"Learn/LearnROS/ROS-Packages.html":{"url":"Learn/LearnROS/ROS-Packages.html","title":"ROS-Packages","keywords":"","body":"ROS Packages Package Purpose learn_turtlesim You gotta start somewhere. learn_arduino Poking at the real world. learn_rviz Static visualisations of robot models. learn_tf Dynamic visualisations of robot models. learn_joy Interactive visualisations of robot models. learn_imu WIP - Read and display data from an IMU. learn_webcam Stream video from a USB webcam. learn_kinect Stream video and more from an Xbox 360 Kinect. jaws_description The first Jaws modelled as a URDF. jaws_visualization WIP - A visual demonstration of Jaws. "},"Learn/LearnROS/ROS.html":{"url":"Learn/LearnROS/ROS.html","title":"ROS","keywords":"","body":"ROS: Robot Operating System index.ros.org wiki.ros: Tutorials wiki.ros: cn Introduction github: ros-infrastructure github: ROS core stacks github: ros-gbp rep: learn-ros blog: ros-tutorials ROSÔºàÊú∫Âô®‰∫∫Êìç‰ΩúÁ≥ªÁªüÔºâÊèê‰æõÂ∫ìÂíåÂ∑•ÂÖ∑Êù•Â∏ÆÂä©ËΩØ‰ª∂ÂºÄÂèë‰∫∫ÂëòÂàõÂª∫Êú∫Âô®‰∫∫Â∫îÁî®Á®ãÂ∫è„ÄÇÂÆÉÊèê‰æõÁ°¨‰ª∂ÊäΩË±°„ÄÅËÆæÂ§áÈ©±Âä®Á®ãÂ∫è„ÄÅÂ∫ì„ÄÅÂèØËßÜÂåñÂ∑•ÂÖ∑„ÄÅÊ∂àÊÅØ‰º†ÈÄí„ÄÅÂåÖÁÆ°ÁêÜÁ≠â„ÄÇ ROS Releases/Distributions ros: Distributions ros2: Releases ros - os version match ROS: ROS Box Turtle 2010.03.02 ROS C Turtle 2010.08.02 ROS Diamondback 2011.03.01 ROS Electric Emys 2011.08.30 ROS Fuerte Turtle 2012.04.23 ROS Groovy Galapagos 2012.12.31 ROS Hydro Medusa 2013.09.04 ROS Indigo Igloo 2014.07.22 ROS Jade Turtle 2015.05.23 ROS Kinetic Kame 2016.05.23 ROS Lunar Loggerhead 2017.05.23 ROS Melodic Morenia 2018.05.23 ROS Noetic Ninjemys 2020.05.23 ROS2: ROS 2 Ardent Apalone 2017.12.08 ROS 2 Bouncy Bolson 2018.05.31 ROS 2 Crystal Clemmys 2018.12.12 ROS 2 Dashing Diademata 2019.05.31 ROS 2 Eloquent Elusor 2019.12.12 ROS 2 Foxy Fitzroy 2020.06.05 ROS 2 Galactic Geochelone 2021.05.23 ROS 2 Humble Hawksbill 2022.05.23 ROS 2 Iron Irwini 2023.05.23 ROS 2 Jazzy Jalisco 2024.05.23 There is a new ROS 2 distribution released yearly on May 23rd (World Turtle Day). ROS Noetic Ninjemys wiki ROS Noetic Ninjemys is the thirteenth ROS distribution release. It was released on May 23rd, 2020. Concepts REP: ROS Enhancement Proposals REPs are documents that define standards, conventions, and best practices for the ROS ecosystem. They are similar to RFCs (Request for Comments) in the internet protocol community or PEPs (Python Enhancement Proposals) in the Python community. Filesystem Level Packages Metapackages Package Manifests Repositories Message (msg) types: Message Description, stored in my_package/msg/MyMessageType.msg Service (srv) types: Service Description, stored in my_package/srv/MyServiceType.srv Graph Level Nodes: process that performs computation Master: provides name registration and lookup to the rest of the Computation Graph Parameter Server: allows data to be stored by key in a central location Messages: data structure for communication Topics: messages are routed via a transport system with publish/subscribe semantics a node sends a message by publishing it to a given topic a node receives a message by subscribing to the appropriate topic Services: request/reply is done via a service a node offers a service under a specific name a client uses the service by sending the request message and awaiting the reply Bags: a format for saving and playing back ROS message data mechanism for storing ROS message data, such as sensor data Community Level Distributions Repositories ROS Wiki ... names: Package Resource Names and Graph Resource Names Graph Resource Names: provides a hierarchical naming structure that is used for all resources in ROS Computation Graph Graph Resource Names are an important mechanism in ROS for providing encapsulation. Each resource is defined within a namespace, which it may share with many other resources. In general, resources can create resources within their namespace and they can access resources within or above their own namespace. Connections can be made between resources in distinct namespaces, but this is generally done by integration code above both namespaces. This encapsulation isolates different portions of the system from accidentally grabbing the wrong named resource or globally hijacking names. ÊØè‰∏™ËµÑÊ∫êÈÉΩÂú®‰∏Ä‰∏™ÂëΩÂêçÁ©∫Èó¥‰∏≠ÂÆö‰πâÔºåËØ•ÂëΩÂêçÁ©∫Èó¥ÂèØ‰ª•‰∏éËÆ∏Â§öÂÖ∂‰ªñËµÑÊ∫êÂÖ±‰∫´„ÄÇ ÈÄöÂ∏∏ÔºåËµÑÊ∫êÂèØ‰ª•Âú®ÂÖ∂ÂëΩÂêçÁ©∫Èó¥‰∏≠ÂàõÂª∫ËµÑÊ∫êÔºåÂπ∂‰∏îÂèØ‰ª•ËÆøÈóÆÂÖ∂Ëá™Â∑±ÁöÑÂëΩÂêçÁ©∫Èó¥ÂÜÖÊàñ‰πã‰∏äÁöÑËµÑÊ∫ê„ÄÇ ÂèØ‰ª•Âú®‰∏çÂêåÂëΩÂêçÁ©∫Èó¥‰∏≠ÁöÑËµÑÊ∫ê‰πãÈó¥Âª∫Á´ãËøûÊé•Ôºå‰ΩÜËøôÈÄöÂ∏∏ÊòØÈÄöËøá‰∏§‰∏™ÂëΩÂêçÁ©∫Èó¥‰∏äÊñπÁöÑÈõÜÊàê‰ª£Á†ÅÂÆåÊàêÁöÑ„ÄÇ ËøôÁßçÂ∞ÅË£ÖÂ∞ÜÁ≥ªÁªüÁöÑ‰∏çÂêåÈÉ®ÂàÜ‰∏éÊÑèÂ§ñËé∑ÂèñÈîôËØØÁöÑÂëΩÂêçËµÑÊ∫êÊàñÂÖ®Â±ÄÂä´ÊåÅÂêçÁß∞ÈöîÁ¶ªÂºÄÊù•„ÄÇ /: global namespace four types of Graph Resource Names: base, relative, global, and private base relative/name /global/name ~private/name Package Resource Names \"std_msgs/String\" refers to the \"String\" message type in the \"std_msgs\" Package. Higher-Level Concepts wiki Coordinate Frames/Transforms The tf package provides a distributed, ROS-based framework for calculating the positions of multiple coordinate frames over time. Actions/Tasks The actionlib package defines a common, topic-based interface for preemptible tasks in ROS. Message Ontology common_msgs stack provides a set of common message types for interacting with robots. actionlib_msgs: messages for representing actions diagnostic_msgs: messages for sending diagnostic data. geometry_msgs: messages for representing common geometric primitives. nav_msgs: messages for navigation. sensor_msgs: messages for representing sensor data. Plugins pluginlib package provides tools for writing and dynamically loading plugins using the ROS build system. Filters filters package provides a set of filters for processing data streams. Robot Model The urdf package defines an XML format for representing a robot model and provides a C++ parser. Client Libraries A ROS client library is a collection of code that eases the job of the ROS programmer. It takes many of the ROS concepts and makes them accessible via code. In general, these libraries let you write ROS nodes, publish and subscribe to topics, write and call services, and use the Parameter Server. Such a library can be implemented in any programming language, though the current focus is on providing robust C++ and Python support. ROS ÂÆ¢Êà∑Á´ØÂ∫ìÊòØÁÆÄÂåñ ROS Á®ãÂ∫èÂëòÂ∑•‰ΩúÁöÑ‰ª£Á†ÅÈõÜÂêà„ÄÇÂÆÉÈááÁî®‰∫ÜËÆ∏Â§ö ROS Ê¶ÇÂøµÔºåÂπ∂‰ΩøÂÖ∂ÂèØ‰ª•ÈÄöËøá‰ª£Á†ÅËÆøÈóÆ„ÄÇÈÄöÂ∏∏ÔºåËøô‰∫õÂ∫ìÂÖÅËÆ∏ÊÇ®ÁºñÂÜô ROS ËäÇÁÇπ„ÄÅÂèëÂ∏ÉÂíåËÆ¢ÈòÖ‰∏ªÈ¢ò„ÄÅÁºñÂÜôÂíåË∞ÉÁî®ÊúçÂä°‰ª•Âèä‰ΩøÁî® Parameter Server„ÄÇËøôÊ†∑ÁöÑÂ∫ìÂèØ‰ª•Áî®‰ªª‰ΩïÁºñÁ®ãËØ≠Ë®ÄÂÆûÁé∞ÔºåÂ∞ΩÁÆ°ÁõÆÂâçÁöÑÈáçÁÇπÊòØÊèê‰æõÂº∫Â§ßÁöÑ C++ Âíå Python ÊîØÊåÅ„ÄÇ roscpp rospy roslisp ... Technical Overview Tools rosdep rosdep is a command-line tool for installing system dependencies. # install sudo apt-get install python3-rosdep # or pip install rosdep # source install git clone https://github.com/ros-infrastructure/rosdep cd rosdep source setup.sh # init rosdep, needs to call only once after installation sudo rosdep init # update rosdep update # install system dependencies # install dependency of a package rosdep install AMAZING_PACKAGE # install dependency of all packages in the workspace # cd into the catkin workspace, run: rosdep install --from-paths src --ignore-src -r -y catkin Low-level build system macros and infrastructure for ROS. wiki.ros: catkin wiki.ros: catkin conceptual overview catkin ros: rep-0128 catkin is the official build system of ROS and the successor to the original ROS build system, rosbuild. catkin combines CMake macros and Python scripts to provide some functionality on top of CMake's normal workflow. catkin was designed to be more conventional than rosbuild, allowing for better distribution of packages, better cross-compiling support, and better portability. catkin's workflow is very similar to CMake's but adds support for automatic 'find package' infrastructure and building multiple, dependent projects at the same time. catkin ÊòØ ROS ÁöÑÂÆòÊñπÊûÑÂª∫Á≥ªÁªüÔºå‰πüÊòØÂéüÂßã ROS ÊûÑÂª∫Á≥ªÁªü rosbuild ÁöÑÁªßÊâøËÄÖ„ÄÇcatkin ÁªìÂêà‰∫Ü CMake ÂÆèÂíå Python ËÑöÊú¨ÔºåÂú® CMake ÁöÑÊ≠£Â∏∏Â∑•‰ΩúÊµÅÁ®ã‰πã‰∏äÊèê‰æõ‰∫Ü‰∏Ä‰∫õÂäüËÉΩ„ÄÇCatkin ÁöÑËÆæËÆ°ÊØî rosbuild Êõ¥‰º†ÁªüÔºåÂÖÅËÆ∏Êõ¥Â•ΩÁöÑÂåÖÂàÜÂèë„ÄÅÊõ¥Â•ΩÁöÑ‰∫§ÂèâÁºñËØëÊîØÊåÅÂíåÊõ¥Â•ΩÁöÑÂèØÁßªÊ§çÊÄß„ÄÇcatkin ÁöÑÂ∑•‰ΩúÊµÅÁ®ã‰∏é CMake ÁöÑÂ∑•‰ΩúÊµÅÁ®ãÈùûÂ∏∏Áõ∏‰ººÔºå‰ΩÜÂ¢ûÂä†‰∫ÜÂØπËá™Âä®‚ÄúÊü•ÊâæÂåÖ‚ÄùÂü∫Á°ÄËÆæÊñΩÁöÑÊîØÊåÅÔºåÂπ∂ÂêåÊó∂ÊûÑÂª∫Â§ö‰∏™‰æùËµñÁöÑÈ°πÁõÆ„ÄÇ # debian 12 bookworm catkin/stable 0.8.10-9 all # python3 python3-catkin/stable,now 0.8.10-9 al Usage: cd path/to/your/catkin_workspace # will build any packages in /catkin_workspace/src catkin_make # equivalent to cd path/to/your/catkin_workspace cd src catkin_init_workspace cd .. mkdir build cd build cmake ../src -DCMAKE_INSTALL_PREFIX=../install -DCATKIN_DEVEL_PREFIX=../devel make # build specific package catkin_make -DCATKIN_WHITELIST_PACKAGES=\"package1;package2\" # revert back to building all packages: catkin_make -DCATKIN_WHITELIST_PACKAGES=\"\" # generate build and devel dir under workspace root # install catkin_make install # specific source catkin_make --source my_src catkin_make install --source my_src rosinstall_generator generattes .rosinstall files containing information about repositories with ROS packages/stacks. # usage rosinstall_generator PACKAGE DEPENDENCY1 DEPENDENCY2 > PACKAGE.rosinstall # example rosinstall_generator desktop --rosdistro noetic --deps --tar > noetic-desktop.rosinstall vcstool Command-line tools for maintaining a workspace of projects from multiple version-control systems. vcstool provides commands to manage several local SCM repositories (supports git, mercurial, subversion, bazaar) based on a single workspace definition file (.repos or .rosinstall). vcs help # example vcs import --input noetic-desktop.rosinstall ./src "},"Learn/LearnROS/ROS2.html":{"url":"Learn/LearnROS/ROS2.html","title":"ROS2","keywords":"","body":"text text https://github.com/pokusew/ros2-build Install ROS2 HUMBLE on debian12 bookworm Source installation ROS 2 Humble vcstool catkin_pkg pyparsing pip install empy==3.3.2 # 4.2 has error when compiling lark conda install pytest colcon - collective construction?? https://colcon.readthedocs.io/en/released/ vcstool https://wiki.ros.org/vcstool "},"Learn/LearnROS/ROS2_debian12.html":{"url":"Learn/LearnROS/ROS2_debian12.html","title":"ROS2_debian12","keywords":"","body":"To install ROS 2 Humble Hawksbill on Debian 12, follow this detailed step-by-step guide: 1. Add the ROS 2 Package Repository a. Configure your sources list Open a terminal and add the ROS 2 repository to your system‚Äôs sources list: sudo sh -c 'echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" > /etc/apt/sources.list.d/ros2-latest.list' Note: Since Debian is not officially supported by ROS 2, you might need to replace $(lsb_release -cs) with the equivalent Ubuntu codename for the target ROS 2 Humble distribution (e.g., jammy for Ubuntu 22.04). b. Add the GPG key Import the GPG key used to sign the ROS 2 packages: sudo apt update sudo apt install -y curl gnupg2 lsb-release curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg > /dev/null 2. Install ROS 2 Humble a. Update package index Update your local package index to include the ROS 2 repository: sudo apt update b. Install ROS 2 Install the ROS 2 Humble desktop full package: sudo apt install ros-humble-desktop If you want a lighter installation, you can use one of the following commands instead: For the base packages:sudo apt install ros-humble-ros-base For specific tools or packages, list available ROS 2 packages:apt search ros-humble 3. Set Up the Environment a. Source the ROS 2 setup file Add the ROS 2 setup script to your shell configuration file (.bashrc or .zshrc): echo \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc source ~/.bashrc If you use zsh, modify .zshrc: echo \"source /opt/ros/humble/setup.zsh\" >> ~/.zshrc source ~/.zshrc b. Verify the installation Check the ROS 2 version: ros2 --version 4. Install Additional Tools (Optional) a. ROS 2 Command Line Tools Install development tools and utilities for building and debugging: sudo apt install python3-colcon-common-extensions python3-rosdep python3-argcomplete b. Initialize rosdep Set up rosdep for managing dependencies: sudo rosdep init rosdep update 5. Test the Installation a. Launch the ROS 2 demo Run the talker and listener example to ensure ROS 2 is working: Open a terminal and start a talker:ros2 run demo_nodes_cpp talker Open another terminal and start a listener:ros2 run demo_nodes_cpp listener You should see messages being published by the talker and received by the listener. 6. Troubleshooting If ros2 commands are not recognized, check if ROS 2 is correctly sourced:source /opt/ros/humble/setup.bash If any dependencies are missing, use rosdep to install them:rosdep install --from-paths src --ignore-src -r -y This should allow you to successfully install and configure ROS 2 Humble on Debian 12! The error occurs because the ROS 2 Humble binaries are built for Ubuntu 22.04 (jammy), which relies on certain dependencies (like libpython3.10) that are not available in Debian 12 (bookworm) by default. To resolve this issue, you can try the following approaches: Option 1: Use Docker for ROS 2 Using Docker is the easiest and cleanest way to run ROS 2 on Debian 12 without dealing with compatibility issues. Install Docker: sudo apt update sudo apt install -y docker.io sudo usermod -aG docker $USER Pull the ROS 2 Humble Docker image: docker pull osrf/ros:humble-desktop Run the Docker container: docker run -it --rm osrf/ros:humble-desktop This method isolates ROS 2 from your system, ensuring all dependencies work seamlessly. Option 2: Build ROS 2 Humble from Source If you need ROS 2 natively installed, you can build it from source with the following steps: 1. Install Required Tools sudo apt update sudo apt install -y build-essential cmake git python3-colcon-common-extensions python3-rosdep python3-vcstool wget 2. Install ROS 2 Dependencies sudo rosdep init rosdep update 3. Clone the ROS 2 Humble Source Code Create a workspace and clone the ROS 2 repositories: mkdir -p ~/ros2_humble/src cd ~/ros2_humble wget https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos vcs import src 4. Resolve Dependencies Install all required dependencies: rosdep install --from-paths src --ignore-src --rosdistro humble -y --skip-keys \"libpython3.10 libopencv-core4.5d libpcl-common1.12\" 5. Build ROS 2 Build the workspace: colcon build --symlink-install 6. Source the ROS 2 Setup Add the setup script to your shell configuration: echo \"source ~/ros2_humble/install/setup.bash\" >> ~/.bashrc source ~/.bashrc Option 3: Manually Add Missing Dependencies Manually resolving dependency issues can be complex but may work in some cases: Enable Debian Backports or Experimental Repositories: sudo nano /etc/apt/sources.list Add the following line: deb http://deb.debian.org/debian bookworm-backports main contrib non-free Install libpython3.10: Download the necessary package from Ubuntu's jammy repository and install it manually. Example: wget http://archive.ubuntu.com/ubuntu/pool/main/p/python3.10/libpython3.10_3.10.6-1_amd64.deb sudo dpkg -i libpython3.10_3.10.6-1_amd64.deb Repeat for Other Dependencies: Identify the missing dependencies and manually download and install them. Recommendation The most reliable option for running ROS 2 Humble on Debian 12 is using Docker. Building from source is feasible but requires more effort to resolve all dependency issues. Let me know if you'd like assistance with a specific approach! "},"Learn/LearnROS/SourceInstall.html":{"url":"Learn/LearnROS/SourceInstall.html","title":"SourceInstall","keywords":"","body":"Install ROS from source ROS Noetic on Debian 12 Install from source: wiki.ros: Installation csdn blog: Debian12 ÈÄöËøáÊ∫êÁ†ÅÂÆâË£Ö ros-noetic Compiling ros1 noetic from source on Ubuntu 22.04 Debian 12, Bookworm Dependencies: # use apt or pip to install: python3- rosdep rosinstall-generator vcstools vcstool # init rosdep sudo rosdep init rosdep update # use apt build-essential libboost1.74-all-dev # ÁâàÊú¨‰∏çËÉΩÂ§™È´ò, debian12 bookworm default v1.0.0 liblog4cxx10v5_0.10.0 liblog4cxx-dev_0.10.0 # need lower version -> v1.11.2, can download from pkgs.org libogre-1.12-dev ogre-1.12-tools liburdfdom-tools liburdfdom-headers-dev liburdfdom-dev libbz2-dev libgpgme-dev liborocos-kdl-dev/stable 1.5.1-2+b4 amd64 Kinematics and Dynamics Library development files liborocos-kdl1.5/stable,now 1.5.1-2+b4 amd64 [installed,automatic] Kinematics and Dynamics Library runtime Installation: # create catkin workspace mkdir ~/ros_catkin_ws cd ~/ros_catkin_ws # download source code for ros noetic, use vcstool, build all od Desktop # generates rosinstall file for noetic-desktop rosinstall_generator desktop --rosdistro noetic --deps --tar > noetic-desktop.rosinstall mkdir src # use vcs to download all source code base on xx.rosinstall vcs import --input noetic-desktop.rosinstall ./src # resolve dependencies (in official doc) # in debian 12 bookworm, please manually install the dependencies in the former section rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro noetic -y # build, use catkin_make_isolate ./src/catkin/bin/catkin_make_isolated --install \\ -DCMAKE_BUILD_TYPE=Release \\ -DPYTHON_EXECUTABLE=/usr/bin/python3 # use your python3 path --install-space path/to/install # default is ~/ros_catkin_ws/install_isolated # after build success, all files have been installed in ~/ros_catkin_ws/install_isolated # source the setup.sh file, or add it to your ~/.bashrc source ~/ros_catkin_ws/install_isolated/setup.sh Other problems: roscore # if stack on roscore, do: pip uninstall rosgraph sudo apt-get install python3-rosgraph python3-rosgraph-msgs "},"Learn/LearnRust/LifetimeExample.html":{"url":"Learn/LearnRust/LifetimeExample.html","title":"LifetimeExample","keywords":"","body":"Lifetime Example Problem rust: Â¶Ç‰∏ãÁ®ãÂ∫èÁöÑÁîüÂëΩÂë®Êúü'input ÁöÑÂê´‰πâÊòØ‰ªÄ‰πàÔºåÊ†áÊ≥®‰∫Ü‰ºöÊÄé‰πàÊ†∑ÔºåÂ¶ÇÊûú‰∏çÊ†áÊ≥®‰ºöÊÄé‰πàÊ†∑ÔºåËØ∑‰∏æ‰æãËØ¥Êòé. pub enum ExprSymbol { NumSymbol(&'input str), Op(Box>, Opcode, Box>), Error, } GPT Âú®‰Ω†ÁöÑ‰ª£Á†Å‰∏≠ÔºåÁîüÂëΩÂë®ÊúüÊ†áÊ≥® 'input ÁöÑÊÑè‰πâÂú®‰∫éÂÆÉÈôêÂà∂‰∫ÜÊûö‰∏æ ExprSymbol ÁöÑÂÆû‰æã‰∏≠ÂºïÁî®ÁöÑÂ≠óÁ¨¶‰∏≤ÔºàÊàñÂÖ∂‰ªñÂ∏¶ÊúâÁîüÂëΩÂë®ÊúüÁöÑÈÉ®ÂàÜÔºâÁöÑÁîüÂëΩÂë®Êúü„ÄÇÂÖ∑‰ΩìÊù•ËØ¥Ôºö Âê´‰πâ ÁîüÂëΩÂë®Êúü 'input ÊòØÁî®Êù•Ë°®ÊòéÔºö ExprSymbol Á±ªÂûã‰∏≠ÁöÑÊâÄÊúâÂ∏¶ÊúâÁîüÂëΩÂë®ÊúüÁöÑÂ≠óÊÆµÔºåÂÖ∂ÁîüÂëΩÂë®ÊúüÂøÖÈ°ª‰∏é 'input ÂåπÈÖç„ÄÇ ÂÖ∑‰ΩìÊù•ËØ¥ÔºåNumSymbol(&'input str) ÁöÑÂ≠óÁ¨¶‰∏≤ÂºïÁî®ÂøÖÈ°ªÂ≠òÂú®Ëá≥Â∞ë‰∏é ExprSymbol ÁöÑÁîüÂëΩÂë®Êúü‰∏ÄÊ†∑Èïø„ÄÇ Â¶ÇÊûúÊ†áÊ≥®ÁîüÂëΩÂë®Êúü ÁîüÂëΩÂë®Êúü 'input ÁöÑÊ†áÊ≥®ÂèØ‰ª•ÊòéÁ°ÆÊåáÂÆöËøô‰∏™Êûö‰∏æ‰∏≠ÂºïÁî®Êï∞ÊçÆÁöÑÂÖ≥Á≥ªÔºå‰ΩøÂæóÁºñËØëÂô®ËÉΩÂ§üËøΩË∏™Êï∞ÊçÆÁöÑÁîüÂëΩÂë®ÊúüÂπ∂Èò≤Ê≠¢ÊÇ¨Á©∫ÂºïÁî®Á≠âÈóÆÈ¢ò„ÄÇ ‰æãÂ¶ÇÔºö fn parse_expr(input: &'a str) -> ExprSymbol { ExprSymbol::NumSymbol(input) // Á°Æ‰øù `input` ÁöÑÁîüÂëΩÂë®Êúü‰∏éËøîÂõûÂÄº‰∏ÄËá¥ } Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºö parse_expr ËøîÂõûÁöÑ ExprSymbol ÁªìÊûÑ‰Ωì‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂºïÁî® &'a str ÁöÑÁîüÂëΩÂë®Êúü‰∏é‰º†ÂÖ•ÁöÑ input ‰∏ÄËá¥„ÄÇ Â¶ÇÊûúÂú®Ë∞ÉÁî® parse_expr Âêé input Ë¢´ÈáäÊîæÔºåÂàô‰ºöÂØºËá¥ÁºñËØëÈîôËØØÔºåÂõ†‰∏∫ ExprSymbol ‰∏≠‰ªçÁÑ∂Â≠òÂÇ®‰∫ÜÂØπ input ÁöÑÂºïÁî®„ÄÇ Â¶ÇÊûú‰∏çÊ†áÊ≥®ÁîüÂëΩÂë®Êúü Â¶ÇÊûú‰∏çÊ†áÊ≥®ÁîüÂëΩÂë®ÊúüÔºåRust ÁºñËØëÂô®‰ºöÊó†Ê≥ïÊé®Êñ≠ ExprSymbol ‰∏≠Â≠óÁ¨¶‰∏≤ÂºïÁî®ÁöÑÁîüÂëΩÂë®Êúü„ÄÇËøô‰ºöÂØºËá¥‰ª•‰∏ãÊÉÖÂÜµÔºö Â¶ÇÊûú ExprSymbol ÁöÑÊâÄÊúâÊàêÂëò‰∏≠‰∏çÂåÖÂê´ÂºïÁî®ÔºåÂàôÂèØ‰ª•ÁßªÈô§ÁîüÂëΩÂë®ÊúüÊ†áÊ≥®ÔºåRust ‰ºöËÆ§‰∏∫ÂÆÉÊ≤°Êúâ‰ªª‰Ωï‰æùËµñÁîüÂëΩÂë®ÊúüÁöÑÊï∞ÊçÆÔºåÁºñËØëÊ≠£Â∏∏„ÄÇ Â¶ÇÊûúÊúâÂºïÁî®ÔºàÂ¶Ç &strÔºâÔºåÁºñËØëÂô®‰ºöÊä•ÈîôÔºåÂõ†‰∏∫ÂÆÉÈúÄË¶ÅÊòæÂºèÁöÑÁîüÂëΩÂë®ÊúüÊù•ÊèèËø∞Êï∞ÊçÆÂºïÁî®ÁöÑÁîüÂëΩÂë®ÊúüÂÖ≥Á≥ª„ÄÇ ‰æãÂ¶ÇÔºö pub enum ExprSymbol { NumSymbol(&str), // ÁºñËØëÂô®‰ºöÊä•ÈîôÔºöÈúÄË¶ÅÊòæÂºèÁîüÂëΩÂë®Êúü Op(Box, Opcode, Box), Error, } ÁºñËØëÂô®‰ºöÊèêÁ§∫Á±ª‰ººÈîôËØØÔºö error[E0106]: missing lifetime specifier --> src/main.rs:2:17 | 2 | NumSymbol(&str), | ^ expected named lifetime parameter ÂéüÂõ†ÊòØ Rust Êó†Ê≥ïËá™Âä®Êé®Êñ≠ &str ÁöÑÁîüÂëΩÂë®Êúü„ÄÇ ‰∏æ‰æãËØ¥Êòé Ê†áÊ≥®ÁîüÂëΩÂë®Êúü fn example(input: &'a str) -> ExprSymbol { ExprSymbol::NumSymbol(input) } fn main() { let input = String::from(\"123\"); let symbol = example(&input); // input ÁöÑÁîüÂëΩÂë®ÊúüÂíå symbol ‰øùÊåÅ‰∏ÄËá¥ println!(\"{:?}\", symbol); // input Âíå symbol ÁîüÂëΩÂë®Êúü‰∏ÄËá¥ÔºåÂõ†Ê≠§Âú® input ÈáäÊîæÂâç symbol ÊòØÊúâÊïàÁöÑ } ‰∏çÊ†áÊ≥®ÁîüÂëΩÂë®ÊúüÔºàÂ∞ùËØïÁßªÈô§Ôºâ pub enum ExprSymbol { NumSymbol(&str), // ÈîôËØØÔºöÁº∫Â∞ëÁîüÂëΩÂë®ÊúüÊ†áÊ≥® Op(Box, Opcode, Box), Error, } ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÁºñËØëÂô®‰ºöË¶ÅÊ±ÇÊ∑ªÂä†ÁîüÂëΩÂë®ÊúüÊ†áÊ≥®ÔºåÂõ†‰∏∫ÂÆÉÈúÄË¶ÅÁ°Æ‰øù &str ÁöÑÁîüÂëΩÂë®Êúü‰∏ÄËá¥ÔºåÈÅøÂÖçÊÇ¨Á©∫ÂºïÁî®ÊàñÂÜÖÂ≠òÂÆâÂÖ®ÈóÆÈ¢ò„ÄÇ ÊÄªÁªì Ê†áÊ≥®ÁîüÂëΩÂë®Êúü ÊòØ‰∏∫‰∫ÜÊòéÁ°ÆÁ±ªÂûã‰∏≠ÁöÑÂºïÁî®‰∏éÂÖ∂ÁîüÂëΩÂë®ÊúüÁöÑÂÖ≥Á≥ªÔºåËÆ© Rust ÁºñËØëÂô®ËÉΩÂ§üÁ°Æ‰øùÂÜÖÂ≠òÂÆâÂÖ®„ÄÇ Â¶ÇÊûú‰∏çÊ†áÊ≥®ÁîüÂëΩÂë®ÊúüÔºåRust Êó†Ê≥ïÊé®Êñ≠Â∏¶ÊúâÂºïÁî®ÁöÑÁªìÊûÑ‰ΩìÁöÑÁîüÂëΩÂë®ÊúüÔºå‰ºöÂØºËá¥ÁºñËØëÈîôËØØ„ÄÇ Âú®‰Ω†ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÁîüÂëΩÂë®Êúü 'input Á°Æ‰øù‰∫Ü ExprSymbol ‰∏≠ÁöÑÊâÄÊúâÂ≠óÁ¨¶‰∏≤ÂºïÁî®ÂøÖÈ°ª‰∏é 'input ÁîüÂëΩÂë®Êúü‰∏ÄËá¥Ôºå‰ªéËÄåÈÅøÂÖçÂú® ExprSymbol Ê¥ªË∑ÉÊó∂Â∫ïÂ±ÇÊï∞ÊçÆË¢´ÈáäÊîæÁöÑÈóÆÈ¢ò„ÄÇ "},"Learn/LearnRust/Problems_Solutions.html":{"url":"Learn/LearnRust/Problems_Solutions.html","title":"Problems_Solutions","keywords":"","body":"Problems and Solutions "},"Learn/LearnRust/Resources.html":{"url":"Learn/LearnRust/Resources.html","title":"Resources","keywords":"","body":"Rust Resources Rust The Rust Reference Rust Ref: zh ~~ The Rust Programming Language The Rust Programming Language: Experiment Type Rust Á®ãÂ∫èËÆæËÆ°ËØ≠Ë®Ä (zh) - 2022 Rust Á®ãÂ∫èËÆæËÆ°ËØ≠Ë®Ä (zh) - 2024-05-02 ~~ effective rust: 35 Specific Ways to Improve Your Rust Code effective-rust-cn ~~ The Rustonomicon: The Dark Arts of Unsafe Rust Rust ËØ≠Ë®ÄÂú£Áªè(Rust Course) rust-by-example The Cargo Book The Little Book of Rust Macros ~~ Rust RFCs - RFC Book ~~ releases github releases ~~ Rust ËØ≠Ë®Ä‰∏≠ÊñáÁ§æÂå∫ clippy Rust Design Patterns Newtype Index Pattern Embrace the newtype pattern -- Effective Rust Idiomatic tree and graph like structures in Rust Rust Compiler cranelift: a fast, secure, relatively simple and innovative compiler backend rustc_codegen_cranelift wasmtime: About A lightweight WebAssembly runtime that is fast, secure, and standards-compliant Rust OS NUDT-OS-Book rcore-os rCore-Tutorial-Book-v3 haibo_chen Others rust-for-linux ‰∏ÄÊñáËØªÊáÇ‰ªÄ‰πàÊòØËøõÁ®ã„ÄÅÁ∫øÁ®ã„ÄÅÂçèÁ®ã rust-cli Joel on Software git submodule update --init --recursive Commands # rustup: Install, manage, and update Rust toolchains. rustup install/default/update/show rustup self uninstall # cargo: Rust's package manager and build system. cargo new # create a new Rust project cargo build # build the current package cargo run # build and run the current package cargo check # check the current package for errors without building cargo test # run the tests in the current package cargo fmt # check formatting of the current package cargo build --release # build the current package with optimizations cargo doc --open # build all dependences doc and open in broswer RUST_BACKTRACE=1 cargo run # checkout backtrace OwnerShip Rust ‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÂÄºÈÉΩÊúâ‰∏Ä‰∏™ ÊâÄÊúâËÄÖ Ôºà owner Ôºâ„ÄÇ ÂÄºÂú®‰ªª‰∏ÄÊó∂ÂàªÊúâ‰∏îÂè™Êúâ‰∏Ä‰∏™ÊâÄÊúâËÄÖ„ÄÇ ÂΩìÊâÄÊúâËÄÖÔºàÂèòÈáèÔºâÁ¶ªÂºÄ‰ΩúÁî®ÂüüÔºåËøô‰∏™ÂÄºÂ∞ÜË¢´‰∏¢ÂºÉ„ÄÇ ÂºïÁî® Âú®‰ªªÊÑèÁªôÂÆöÊó∂Èó¥ÔºåË¶Å‰πà Âè™ËÉΩÊúâ‰∏Ä‰∏™ÂèØÂèòÂºïÁî®ÔºåË¶Å‰πà Âè™ËÉΩÊúâÂ§ö‰∏™‰∏çÂèØÂèòÂºïÁî®„ÄÇ ÂºïÁî®ÂøÖÈ°ªÊÄªÊòØÊúâÊïàÁöÑ„ÄÇ Slice Á±ªÂûã slice ÂÖÅËÆ∏‰Ω†ÂºïÁî®ÈõÜÂêà‰∏≠‰∏ÄÊÆµËøûÁª≠ÁöÑÂÖÉÁ¥†Â∫èÂàóÔºåËÄå‰∏çÁî®ÂºïÁî®Êï¥‰∏™ÈõÜÂêà„ÄÇslice ÊòØ‰∏ÄÁßçÂºïÁî®ÔºåÊâÄ‰ª•ÂÆÉÊ≤°ÊúâÊâÄÊúâÊùÉ„ÄÇ fn first_word(s: &String) -> &str { let bytes = s.as_bytes(); for (i, &item) in bytes.iter().enumerate() { if item == b' ' { return &s[0..i]; } } &s[..] } fn main() { let my_string = String::from(\"hello world\"); // `first_word` ÈÄÇÁî®‰∫é `String`ÔºàÁöÑ sliceÔºâÔºåÈÉ®ÂàÜÊàñÂÖ®ÈÉ® let word = first_word(&my_string[0..6]); let word = first_word(&my_string[..]); // `first_word` ‰πüÈÄÇÁî®‰∫é `String` ÁöÑÂºïÁî®Ôºå // ËøôÁ≠â‰ª∑‰∫éÊï¥‰∏™ `String` ÁöÑ slice let word = first_word(&my_string); let my_string_literal = \"hello world\"; // `first_word` ÈÄÇÁî®‰∫éÂ≠óÁ¨¶‰∏≤Â≠óÈù¢ÂÄºÔºåÈÉ®ÂàÜÊàñÂÖ®ÈÉ® let word = first_word(&my_string_literal[0..6]); let word = first_word(&my_string_literal[..]); // Âõ†‰∏∫Â≠óÁ¨¶‰∏≤Â≠óÈù¢ÂÄºÂ∑≤Áªè **ÊòØ** Â≠óÁ¨¶‰∏≤ slice ‰∫ÜÔºå // Ëøô‰πüÊòØÈÄÇÁî®ÁöÑÔºåÊó†ÈúÄ slice ËØ≠Ê≥ïÔºÅ let word = first_word(my_string_literal); } Struct Â≠óÊÆµÂàùÂßãÂåñÁÆÄÂÜôËØ≠Ê≥ïÔºàfield init shorthandÔºâ fn build_user(email: String, username: String) -> User { User { active: true, username, email, sign_in_count: 1, } } ÁªìÊûÑ‰ΩìÊõ¥Êñ∞ËØ≠Ê≥ïÔºàstruct update syntaxÔºâ ‰ΩøÁî®ÊóßÂÆû‰æãÁöÑÂ§ßÈÉ®ÂàÜÂÄº‰ΩÜÊîπÂèòÂÖ∂ÈÉ®ÂàÜÂÄºÊù•ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁªìÊûÑ‰ΩìÂÆû‰æã fn main() { // --snip-- let user2 = User { email: String::from(\"another@example.com\"), ..user1 }; } Á§∫‰æã 5-7 ‰∏≠ÁöÑ‰ª£Á†Å‰πüÂú® user2 ‰∏≠ÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÂÆû‰æãÔºå‰ΩÜËØ•ÂÆû‰æã‰∏≠ email Â≠óÊÆµÁöÑÂÄº‰∏é user1 ‰∏çÂêåÔºåËÄå username„ÄÅ active Âíå sign_in_count Â≠óÊÆµÁöÑÂÄº‰∏é user1 Áõ∏Âêå„ÄÇ..user1 ÂøÖÈ°ªÊîæÂú®ÊúÄÂêéÔºå‰ª•ÊåáÂÆöÂÖ∂‰ΩôÁöÑÂ≠óÊÆµÂ∫î‰ªé user1 ÁöÑÁõ∏Â∫îÂ≠óÊÆµ‰∏≠Ëé∑ÂèñÂÖ∂ÂÄºÔºå‰ΩÜÊàë‰ª¨ÂèØ‰ª•ÈÄâÊã©‰ª•‰ªª‰ΩïÈ°∫Â∫è‰∏∫‰ªªÊÑèÂ≠óÊÆµÊåáÂÆöÂÄºÔºåËÄå‰∏çÁî®ËÄÉËôëÁªìÊûÑ‰ΩìÂÆö‰πâ‰∏≠Â≠óÊÆµÁöÑÈ°∫Â∫è„ÄÇ ËØ∑Ê≥®ÊÑèÔºåÁªìÊûÑÊõ¥Êñ∞ËØ≠Ê≥ïÂ∞±ÂÉèÂ∏¶Êúâ = ÁöÑËµãÂÄºÔºåÂõ†‰∏∫ÂÆÉÁßªÂä®‰∫ÜÊï∞ÊçÆÔºåÂ∞±ÂÉèÊàë‰ª¨Âú®‚ÄúÂèòÈáè‰∏éÊï∞ÊçÆ‰∫§‰∫íÁöÑÊñπÂºèÔºà‰∏ÄÔºâÔºöÁßªÂä®‚ÄùÈÉ®ÂàÜËÆ≤Âà∞ÁöÑ‰∏ÄÊ†∑„ÄÇÂú®Ëøô‰∏™‰æãÂ≠ê‰∏≠ÔºåÊÄª‰Ωì‰∏äËØ¥Êàë‰ª¨Âú®ÂàõÂª∫ user2 ÂêéÂ∞±‰∏çËÉΩÂÜç‰ΩøÁî® user1 ‰∫ÜÔºåÂõ†‰∏∫ user1 ÁöÑ username Â≠óÊÆµ‰∏≠ÁöÑ String Ë¢´ÁßªÂà∞ user2 ‰∏≠„ÄÇÂ¶ÇÊûúÊàë‰ª¨Áªô user2 ÁöÑ email Âíå username ÈÉΩËµã‰∫àÊñ∞ÁöÑ String ÂÄºÔºå‰ªéËÄåÂè™‰ΩøÁî® user1 ÁöÑ active Âíå sign_in_count ÂÄºÔºåÈÇ£‰πà user1 Âú®ÂàõÂª∫ user2 Âêé‰ªçÁÑ∂ÊúâÊïà„ÄÇactive Âíå sign_in_count ÁöÑÁ±ªÂûãÊòØÂÆûÁé∞ Copy trait ÁöÑÁ±ªÂûãÔºåÊâÄ‰ª•Êàë‰ª¨Âú®‚ÄúÂèòÈáè‰∏éÊï∞ÊçÆ‰∫§‰∫íÁöÑÊñπÂºèÔºà‰∫åÔºâÔºöÂÖãÈöÜ‚Äù ÈÉ®ÂàÜËÆ®ËÆ∫ÁöÑË°å‰∏∫ÂêåÊ†∑ÈÄÇÁî®„ÄÇ ÂÖÉÁªÑÁªìÊûÑ‰ΩìÔºàtuple structsÔºâ struct Color(i32, i32, i32); struct Point(i32, i32, i32); fn main() { let black = Color(0, 0, 0); let origin = Point(0, 0, 0); } Á±ªÂçïÂÖÉÁªìÊûÑ‰ΩìÔºàunit-like structsÔºâ Ê≤°Êúâ‰ªª‰ΩïÂ≠óÊÆµÁöÑÁªìÊûÑ‰Ωì Á±ªÂçïÂÖÉÁªìÊûÑ‰ΩìÂ∏∏Â∏∏Âú®‰Ω†ÊÉ≥Ë¶ÅÂú®Êüê‰∏™Á±ªÂûã‰∏äÂÆûÁé∞ trait ‰ΩÜ‰∏çÈúÄË¶ÅÂú®Á±ªÂûã‰∏≠Â≠òÂÇ®Êï∞ÊçÆÁöÑÊó∂ÂÄôÂèëÊå•‰ΩúÁî®„ÄÇ struct AlwaysEqual; fn main() { let subject = AlwaysEqual; } sdsd dsd "},"Learn/LearnRust/RustBook.html":{"url":"Learn/LearnRust/RustBook.html","title":"RustBook","keywords":"","body":"Rust Book Rust ‰πü‰∏∫Á≥ªÁªüÁºñÁ®ã‰∏ñÁïåÂ∏¶Êù•‰∫ÜÁé∞‰ª£ÂåñÁöÑÂºÄÂèëÂ∑•ÂÖ∑Ôºö Cargo ÊòØÂÜÖÁΩÆÁöÑ‰æùËµñÁÆ°ÁêÜÂô®ÂíåÊûÑÂª∫Â∑•ÂÖ∑ÔºåÂÆÉËÉΩËΩªÊùæÂ¢ûÂä†„ÄÅÁºñËØëÂíåÁÆ°ÁêÜ‰æùËµñÔºåÂπ∂‰Ωø‰æùËµñÂú® Rust ÁîüÊÄÅÁ≥ªÁªü‰∏≠‰øùÊåÅ‰∏ÄËá¥„ÄÇ Rustfmt Ê†ºÂºèÂåñÂ∑•ÂÖ∑Á°Æ‰øùÂºÄÂèëËÄÖÈÅµÂæ™‰∏ÄËá¥ÁöÑ‰ª£Á†ÅÈ£éÊ†º„ÄÇ rust-analyzer ‰∏∫ÈõÜÊàêÂºÄÂèëÁéØÂ¢ÉÔºàIDEÔºâÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑ‰ª£Á†ÅË°•ÂÖ®ÂíåÂÜÖËÅîÈîôËØØ‰ø°ÊÅØÂäüËÉΩ„ÄÇ rustup ‰∏ãËΩΩ RustÔºåËøôÊòØ‰∏Ä‰∏™ÁÆ°ÁêÜ Rust ÁâàÊú¨ÂíåÁõ∏ÂÖ≥Â∑•ÂÖ∑ÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ "},"Learn/LearnRust/RustLanRef.html":{"url":"Learn/LearnRust/RustLanRef.html","title":"RustLanRef","keywords":"","body":"Rust Language Reference Ref Traits ÁâπÊÄß unsafe? trait IDENTIFIER GenericParams? ( : TypeParamBounds? )? WhereClause? { InnerAttribute* AssociatedItem* } A trait describes an abstract interface that types can implement. This interface consists of associated items, which come in three varieties. Trait declaration defines a trait in the type namespace of the module or block where it is located. Associated items are defined as members of the trait within their respective namespaces. Associated types are defined in the type namespace. Associated constants and associated functions are defined in the value namespace. All traits define an implicit type parameter Self that refers to ‚Äúthe type that is implementing this interface‚Äù. Traits may also contain additional type parameters. These type parameters, including Self, may be constrained by other traits and so forth as usual. Traits are implemented for specific types through separate implementations. Trait functions may omit the function body by replacing it with a semicolon. This indicates that the implementation must define the function. If the trait function defines a body, this definition acts as a default for any implementation which does not override it. Similarly, associated constants may omit the equals sign and expression to indicate implementations must define the constant value. Associated types must never define the type, the type may only be specified in an implementation. Trait functions are not allowed to be const. trait ÊèèËø∞‰∫Ü‰∏Ä‰∏™Á±ªËÉΩÂÆûÁé∞ÁöÑÊäΩË±°Êé•Âè£„ÄÇ Ëøô‰∏™ Êé•Âè£Áî±‰∏Ä‰∫õ Áõ∏ÂÖ≥È°πÁõÆÊûÑÊàêÔºåÂåÖÊã¨Ôºö functions ÂáΩÊï∞ types Á±ªÂûã constants Â∏∏Êï∞ trait ÁöÑÂ£∞ÊòéÂú®ËØ•Â£∞ÊòéÊâÄÂú®ÁöÑ module Êàñ block ‰∏≠ÁöÑÂëΩÂêçÁ©∫Èó¥ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ trait ÊâÄÊúâÁâπÂæÅÈÉΩÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÈöêÂºèÁ±ªÂûãÂèÇÊï∞ Self ÔºåÂÆÉÊåáÁöÑÊòØ‚ÄúÂÆûÁé∞ËØ•Êé•Âè£ÁöÑÁ±ªÂûã‚Äù„ÄÇÁâπÂæÅËøòÂèØËÉΩÂåÖÂê´ÂÖ∂‰ªñÁ±ªÂûãÂèÇÊï∞„ÄÇËøô‰∫õÁ±ªÂûãÂèÇÊï∞ÔºåÂåÖÊã¨ Self ÔºåÂèØËÉΩ‰ºöÂÉèÂæÄÂ∏∏‰∏ÄÊ†∑ÂèóÂà∞ÂÖ∂‰ªñÁâπÂæÅÁ≠âÁöÑÁ∫¶Êùü„ÄÇ ÂØπ‰∏Ä‰∏™ÁâπÂÆöÁ±ªÂûãÁöÑ trait ÂÆûÁé∞ÊòØ‰∏é trait ÁöÑÂÆö‰πâÁõ∏ÂàÜÂºÄÁöÑ ÁâπÂæÅÂáΩÊï∞ÂèØ‰ª•ÈÄöËøáÁî®ÂàÜÂè∑ÊõøÊç¢Êù•ÁúÅÁï•ÂáΩÊï∞‰Ωì„ÄÇËøôË°®ÊòéÂÆûÁé∞ÂøÖÈ°ªÂÆö‰πâËØ•ÂáΩÊï∞„ÄÇ Â¶ÇÊûúÁâπÂæÅÂáΩÊï∞ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞‰ΩìÔºåÂàôÊ≠§ÂÆö‰πâÂ∞ÜÂÖÖÂΩì‰ªª‰Ωï‰∏çË¶ÜÁõñÂÆÉÁöÑÂÆûÁé∞ÁöÑÈªòËÆ§ÂÄº„ÄÇ Á±ª‰ººÂú∞ÔºåÂÖ≥ËÅîÁöÑÂ∏∏ÈáèÂèØ‰ª•ÁúÅÁï•Á≠âÂè∑ÂíåË°®ËææÂºè‰ª•ÊåáÁ§∫ÂÆûÁé∞ÂøÖÈ°ªÂÆö‰πâÂ∏∏ÈáèÂÄº„ÄÇ ÂÖ≥ËÅîÁ±ªÂûãÁªù‰∏çËÉΩÂÆö‰πâËØ•Á±ªÂûãÔºåËØ•Á±ªÂûãÂè™ËÉΩÂú®ÂÆûÁé∞‰∏≠ÊåáÂÆö„ÄÇ trait function ‰∏çËÉΩ‰∏∫ const Ôºü // Examples of associated trait items with and without definitions. trait Example { const CONST_NO_DEFAULT: i32; const CONST_WITH_DEFAULT: i32 = 99; type TypeNoDefault; fn method_without_default(&self); fn method_with_default(&self) {} } Trait bounds Ê≥õÂûãÈ°πÂèØËÉΩ‰ºö‰ΩøÁî® traits ‰Ωú‰∏∫ type parameters ÁöÑÈôêÂà∂ÔºàboundsÔºâ„ÄÇ Trait and lifetime bounds Trait and lifetime bounds provide a way for generic items to restrict which types and lifetimes are used as their parameters. Bounds can be provided on any type in a where clause. There are also shorter forms for certain common cases: ÁâπÂæÅÂíåÁîüÂëΩÂë®ÊúüÁïåÈôê‰∏∫ÈÄöÁî®È°πÊèê‰æõ‰∫Ü‰∏ÄÁßçÊñπÊ≥ïÊù•ÈôêÂà∂Â∞ÜÂì™‰∫õÁ±ªÂûãÂíåÁîüÂëΩÂë®ÊúüÁî®‰ΩúÂÖ∂ÂèÇÊï∞„ÄÇÂèØ‰ª•Âú® where Â≠êÂè•‰∏≠‰∏∫‰ªª‰ΩïÁ±ªÂûãÊèê‰æõÁïåÈôê„ÄÇÂØπ‰∫éÊüê‰∫õÂ∏∏ËßÅÊÉÖÂÜµÔºåËøòÊúâÊõ¥ÁÆÄÁü≠ÁöÑÂΩ¢ÂºèÔºö Bounds written after declaring a generic parameter: fn f() {} is the same as fn f() where A: Copy {}. Â£∞ÊòéÈÄöÁî®ÂèÇÊï∞ÂêéÂÜôÂÖ•ÁöÑÁïåÈôêÔºö fn f() {} ‰∏é fn f() where A: Copy {} „ÄÇ In trait declarations as supertraits: trait Circle : Shape {} is equivalent to trait Circle where Self : Shape {}. Âú®‰Ωú‰∏∫ supertraits ÁöÑÁâπÂæÅÂ£∞Êòé‰∏≠Ôºö trait Circle : Shape {} Áõ∏ÂΩì‰∫é trait Circle where Self : Shape {} „ÄÇ In trait declarations as bounds on associated types: trait A { type B: Copy; } is equivalent to trait A where Self::B: Copy { type B; }. Âú®ÁâπÂæÅÂ£∞Êòé‰∏≠‰Ωú‰∏∫ÂÖ≥ËÅîÁ±ªÂûãÁöÑËæπÁïåÔºö trait A { type B: Copy; } Áõ∏ÂΩì‰∫é trait A where Self::B: Copy { type B; } „ÄÇ Bounds on an item must be satisfied when using the item. When type checking and borrow checking a generic item, the bounds can be used to determine that a trait is implemented for a type. For example, given Ty: Trait ‰ΩøÁî®Áâ©ÂìÅÊó∂ÂøÖÈ°ªÊª°Ë∂≥Áâ©ÂìÅÁöÑÈôêÂà∂„ÄÇÂΩìÁ±ªÂûãÊ£ÄÊü•ÂíåÂÄüÁî®Ê£ÄÊü•ÈÄöÁî®È°πÊó∂ÔºåËæπÁïåÂèØÁî®‰∫éÁ°ÆÂÆöÊòØÂê¶‰∏∫Á±ªÂûãÂÆûÁé∞‰∫ÜÁâπÂæÅ„ÄÇ‰æãÂ¶ÇÔºåÁªôÂÆö Ty: Trait In the body of a generic function, methods from Trait can be called on Ty values. Likewise associated constants on the Trait can be used. Âú®Ê≥õÂûãÂáΩÊï∞‰ΩìÂÜÖÔºåÂèØ‰ª•Âú® Ty ‰∏äË∞ÉÁî® Trait ‰∏≠ÁöÑÊñπÊ≥ï ‰ª∑ÂÄºËßÇ„ÄÇÂêåÊ†∑ÂèØ‰ª•‰ΩøÁî® Trait ‰∏äÁöÑÂÖ≥ËÅîÂ∏∏Èáè„ÄÇ Associated types from Trait can be used. ÂèØ‰ª•‰ΩøÁî® Trait ‰∏≠ÁöÑÂÖ≥ËÅîÁ±ªÂûã„ÄÇ Generic functions and types with a T: Trait bounds can be used with Ty being used for T. Â∏¶Êúâ T: Trait ËæπÁïåÂèØ‰ª•‰∏é Ty ‰∏ÄËµ∑‰ΩøÁî® Áî®‰∫é T „ÄÇ Trait objects ÁâπÊÄßÂØπË±° A trait object is an opaque value of another type that implements a set of traits. The set of traits is made up of an object safe base trait plus any number of auto traits. ÁâπÂæÅÂØπË±°ÊòØÂÆûÁé∞‰∏ÄÁªÑÁâπÂæÅÁöÑÂè¶‰∏ÄÁßçÁ±ªÂûãÁöÑ‰∏çÈÄèÊòéÂÄº„ÄÇËØ•ÁâπÂæÅÈõÜÁî± ÂØπË±°ÂÆâÂÖ®Âü∫Êú¨ÁâπÂæÅ(object safe base trait)Âä†‰∏ä‰ªªÊÑèÊï∞ÈáèÁöÑ Ëá™Âä®ÁâπÂæÅ (auto traits)ÁªÑÊàê„ÄÇ Trait objects implement the base trait, its auto traits, and any supertraits of the base trait. Trait ÂØπË±°ÂÆûÁé∞Âü∫Êú¨ÁâπÂæÅ„ÄÅÂÖ∂Ëá™Âä®ÁâπÂæÅÂíå‰ªª‰ΩïÂü∫Êú¨ÁâπÂæÅÁöÑË∂ÖÁ∫ßÁâπÂæÅ„ÄÇ Trait objects are written as the keyword dyn followed by a set of trait bounds, but with the following restrictions on the trait bounds. All traits except the first trait must be auto traits, there may not be more than one lifetime, and opt-out bounds (e.g. ?Sized) are not allowed. Furthermore, paths to traits may be parenthesized. Trait ÂØπË±°Ë¢´ÁºñÂÜô‰∏∫ÂÖ≥ÈîÆÂ≠ó dyn ÂêéË∑ü‰∏ÄÁªÑ ÁâπÂæÅËæπÁïåÔºå‰ΩÜÂØπÁâπÂæÅËæπÁïåÊúâ‰ª•‰∏ãÈôêÂà∂„ÄÇ Èô§Á¨¨‰∏Ä‰∏™ÁâπÂæÅ‰πãÂ§ñÁöÑÊâÄÊúâÁâπÂæÅÈÉΩÂøÖÈ°ªÊòØËá™Âä®ÁâπÂæÅÔºå‰∏çËÉΩÊúâË∂ÖËøá‰∏Ä‰∏™ÁîüÂëΩÂë®ÊúüÔºåÂπ∂‰∏î‰∏çÂÖÅËÆ∏ÈÄâÊã©ÈÄÄÂá∫ËæπÁïåÔºà‰æãÂ¶Ç?Sized Ôºâ„ÄÇ Ê≠§Â§ñÔºåÁâπÂæÅÁöÑË∑ØÂæÑÂèØ‰ª•Áî®Êã¨Âè∑Êã¨Ëµ∑Êù•„ÄÇ For example, given a trait Trait, the following are all trait objects:‰æãÂ¶ÇÔºåÁªôÂÆö‰∏Ä‰∏™ÁâπÂæÅ Trait Ôºå‰ª•‰∏ãÈÉΩÊòØÁâπÂæÅÂØπË±°Ôºö dyn Trait dyn Trait + Send dyn Trait + Send + Sync dyn Trait + 'static dyn Trait + Send + 'static dyn Trait + dyn 'static + Trait. dyn (Trait) Two trait object types alias each other if the base traits alias each other and if the sets of auto traits are the same and the lifetime bounds are the same. For example, dyn Trait + Send + UnwindSafe is the same as dyn Trait + UnwindSafe + Send. Due to the opaqueness of which concrete type the value is of, trait objects are dynamically sized types. Like all DSTs, trait objects are used behind some type of pointer; for example &dyn SomeTrait or Box. Each instance of a pointer to a trait object includes: Áî±‰∫éÂÄºÂ±û‰∫éÂì™ÁßçÂÖ∑‰ΩìÁ±ªÂûãÁöÑ‰∏çÈÄèÊòéÊÄßÔºåÁâπÂæÅÂØπË±°ÊòØ Âä®ÊÄÅË∞ÉÊï¥Â§ßÂ∞èÁöÑÁ±ªÂûã„ÄÇÂÉèÊâÄÊúâ DSTs ‰∏ÄÊ†∑ ÔºåÁâπÂæÅÂØπË±°Áî®Âú®ÊüêÁßçÁ±ªÂûãÁöÑÊåáÈíàÂêéÈù¢Ôºõ‰æãÂ¶Ç &dyn SomeTraitÊàñ Box „ÄÇÊåáÂêëÁâπÂæÅÂØπË±°ÁöÑÊåáÈíàÁöÑÊØè‰∏™ÂÆû‰æãÂåÖÊã¨Ôºö a pointer to an instance of a type T that implements SomeTrait ÊåáÂêëÂÆûÁé∞ SomeTraitÁöÑÁ±ªÂûã TÂÆû‰æãÁöÑÊåáÈíà a virtual method table , often just called a vtable , which contains, for each method of SomeTrait and its supertraits that T implements, a pointer to T‚Äôs implementation (i.e. a function pointer). ËôöÊãüÊñπÊ≥ïË°®ÔºåÈÄöÂ∏∏ÁÆÄÁß∞‰∏∫ vtable ÔºåÂÖ∂‰∏≠ÂåÖÂê´ T ÂÆûÁé∞ÁöÑ SomeTrait ÂèäÂÖ∂Ë∂ÖÁâπÂæÅÁöÑÊØè‰∏™ÊñπÊ≥ïÔºå‰∏Ä‰∏™ÊåáÂêë T ÂÆûÁé∞ÁöÑÊåáÈíàÔºàÂç≥ÂáΩÊï∞ÊåáÈíàÔºâ„ÄÇ The purpose of trait objects is to permit ‚Äúlate binding‚Äù of methods. Calling a method on a trait object results in virtual dispatch at runtime: that is, a function pointer is loaded from the trait object vtable and invoked indirectly. The actual implementation for each vtable entry can vary on an object-by-object basis. ÁâπÂæÅÂØπË±°ÁöÑÁõÆÁöÑÊòØÂÖÅËÆ∏ÊñπÊ≥ïÁöÑ‚ÄúÂêéÊúüÁªëÂÆö‚Äù„ÄÇÂú®ÁâπÂæÅÂØπË±°‰∏äË∞ÉÁî®ÊñπÊ≥ï‰ºöÂØºËá¥ËøêË°åÊó∂ËôöÊãüÂàÜÊ¥æÔºö‰πüÂ∞±ÊòØËØ¥Ôºå‰ªéÁâπÂæÅÂØπË±° vtable Âä†ËΩΩÂáΩÊï∞ÊåáÈíàÂπ∂Èó¥Êé•Ë∞ÉÁî®„ÄÇÊØè‰∏™ vtable Êù°ÁõÆÁöÑÂÆûÈôÖÂÆûÁé∞ÂèØËÉΩÂõ†ÂØπË±°ËÄåÂºÇ„ÄÇ An example of a trait object: trait Printable { fn stringify(&self) -> String; } impl Printable for i32 { fn stringify(&self) -> String { self.to_string() } } fn print(a: Box) { println!(\"{}\", a.stringify()); } fn main() { print(Box::new(10) as Box); } In this example, the trait Printable occurs as a trait object in both the type signature of print, and the cast expression in main. Âú®Ê≠§Á§∫‰æã‰∏≠ÔºåÁâπÂæÅ Printable ‰Ωú‰∏∫ÁâπÂæÅÂØπË±°Âá∫Áé∞Âú® print ÁöÑÁ±ªÂûãÁ≠æÂêçÂíå main ‰∏≠ÁöÑÂº∫Âà∂ËΩ¨Êç¢Ë°®ËææÂºè‰∏≠„ÄÇ Trait Object Lifetime Bounds ÁâπÂæÅÂØπË±°ÁîüÂëΩÂë®ÊúüÁïåÈôê Since a trait object can contain references, the lifetimes of those references need to be expressed as part of the trait object. This lifetime is written as Trait + 'a. There are defaults that allow this lifetime to usually be inferred with a sensible choice. Áî±‰∫éÁâπÂæÅÂØπË±°ÂèØ‰ª•ÂåÖÂê´ÂºïÁî®ÔºåÂõ†Ê≠§Ëøô‰∫õÂºïÁî®ÁöÑÁîüÂëΩÂë®Êúü ÈúÄË¶ÅË°®Ëææ‰∏∫ÁâπÂæÅÂØπË±°ÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇÊ≠§ lifetime ÂèØÂÜô‰∏∫ Trait + 'a .Êúâ‰∏Ä‰∫õÈªòËÆ§ÂÄºÂÖÅËÆ∏ÈÄöÂ∏∏ÈÄöËøáÊòéÊô∫ÁöÑÈÄâÊã©Êù•Êé®Êñ≠Ê≠§ÁîüÂëΩÂë®Êúü„ÄÇ Attributes Â±ûÊÄß attributes // inner attribute #![Attr] // outer attribute #[Arrt] An attribute is a general, free-form metadatum that is interpreted according to name, convention, language, and compiler version. Attributes are modeled on Attributes in ECMA-335, with the syntax coming from ECMA-334 (C#). Inner attributes , written with a bang (!) after the hash (#), apply to the item that the attribute is declared within. Outer attributes , written without the bang after the hash, apply to the thing that follows the attribute. The attribute consists of a path to the attribute, followed by an optional delimited token tree whose interpretation is defined by the attribute. Attributes other than macro attributes also allow the input to be an equals sign (=) followed by an expression. See the meta item syntax below for more details. An attribute may be unsafe to apply. To avoid undefined behavior when using these attributes, certain obligations that cannot be checked by the compiler must be met. To assert these have been, the attribute is wrapped in unsafe(..), e.g. #[unsafe(no_mangle)]. The following attributes are unsafe: export_name link_section no_mangle Attributes can be classified into the following kinds: Built-in attributes Macro attributes Derive macro helper attributes Tool attributes Attributes may be applied to many things in the language: All item declarations accept outer attributes while external blocks, functions, implementations, and modules accept inner attributes. Most statements accept outer attributes (see Expression Attributes for limitations on expression statements). Block expressions accept outer and inner attributes, but only when they are the outer expression of an expression statement or the final expression of another block expression. Enum variants and struct and union fields accept outer attributes. Match expression arms accept outer attributes. Generic lifetime or type parameter accept outer attributes. Expressions accept outer attributes in limited situations, see Expression Attributes for details. Function, closure and function pointer parameters accept outer attributes. This includes attributes on variadic parameters denoted with ... in function pointers and external blocks. Examples: // General metadata applied to the enclosing module or crate. #![crate_type = \"lib\"] // A function marked as a unit test #[test] fn test_foo() { /* ... */ } // A conditionally-compiled module #[cfg(target_os = \"linux\")] mod bar { /* ... */ } // A lint attribute used to suppress a warning/error #[allow(non_camel_case_types)] type int8_t = i8; // Inner attribute applies to the entire function. fn some_unused_variables() { #![allow(unused_variables)] let x = (); let y = (); let z = (); } Built-in attributes index The following is an index of all built-in attributes. Conditional compilation cfg ‚Äî Controls conditional compilation. cfg_attr ‚Äî Conditionally includes attributes. Testing test ‚Äî Marks a function as a test. ignore ‚Äî Disables a test function. should_panic ‚Äî Indicates a test should generate a panic. Derive derive ‚Äî Automatic trait implementations. automatically_derived ‚Äî Marker for implementations created by derive. Macros macro_export ‚Äî Exports a macro_rules macro for cross-crate usage. macro_use ‚Äî Expands macro visibility, or imports macros from other crates. proc_macro ‚Äî Defines a function-like macro. proc_macro_derive ‚Äî Defines a derive macro. proc_macro_attribute ‚Äî Defines an attribute macro. Diagnostics allow, expect, warn, deny, forbid ‚Äî Alters the default lint level. deprecated ‚Äî Generates deprecation notices. must_use ‚Äî Generates a lint for unused values. diagnostic::on_unimplemented ‚Äî Hints the compiler to emit a certain error message if a trait is not implemented. ABI, linking, symbols, and FFI link ‚Äî Specifies a native library to link with an extern block. link_name ‚Äî Specifies the name of the symbol for functions or statics in an extern block. link_ordinal ‚Äî Specifies the ordinal of the symbol for functions or statics in an extern block. no_link ‚Äî Prevents linking an extern crate. repr ‚Äî Controls type layout. crate_type ‚Äî Specifies the type of crate (library, executable, etc.). no_main ‚Äî Disables emitting the main symbol. export_name ‚Äî Specifies the exported symbol name for a function or static. link_section ‚Äî Specifies the section of an object file to use for a function or static. no_mangle ‚Äî Disables symbol name encoding. used ‚Äî Forces the compiler to keep a static item in the output object file. crate_name ‚Äî Specifies the crate name. Code generation inline ‚Äî Hint to inline code. cold ‚Äî Hint that a function is unlikely to be called. no_builtins ‚Äî Disables use of certain built-in functions. target_feature ‚Äî Configure platform-specific code generation. track_caller - Pass the parent call location to std::panic::Location::caller(). instruction_set - Specify the instruction set used to generate a functions code Documentation doc ‚Äî Specifies documentation. See The Rustdoc Book for more information. Doc comments are transformed into doc attributes. Preludes no_std ‚Äî Removes std from the prelude. no_implicit_prelude ‚Äî Disables prelude lookups within a module. Modules path ‚Äî Specifies the filename for a module. Limits recursion_limit ‚Äî Sets the maximum recursion limit for certain compile-time operations. type_length_limit ‚Äî Sets the maximum size of a polymorphic type. Runtime panic_handler ‚Äî Sets the function to handle panics. global_allocator ‚Äî Sets the global memory allocator. windows_subsystem ‚Äî Specifies the windows subsystem to link with. Features feature ‚Äî Used to enable unstable or experimental compiler features. See The Unstable Book for features implemented in rustc. Type System non_exhaustive ‚Äî Indicate that a type will have more fields/variants added in future. Debugger debugger_visualizer ‚Äî Embeds a file that specifies debugger output for a type. collapse_debuginfo ‚Äî Controls how macro invocations are encoded in debuginfo. Derive Ê¥æÁîü derivable-traits deriveÂ±ûÊÄßÂÖÅËÆ∏‰∏∫Êï∞ÊçÆÁªìÊûÑËá™Âä®ÁîüÊàêÊñ∞ÁöÑÁ®ãÂ∫èÈ°π„ÄÇÂÆÉ‰ΩøÁî® MetaListPathsÂÖÉÈ°πÂ±ûÊÄßÂè•Ê≥ïÔºà‰∏∫Á®ãÂ∫èÈ°πÔºâÊåáÂÆö‰∏ÄÁ≥ªÂàóË¶ÅÂÆûÁé∞ÁöÑ trait ÊàñÊåáÂÆöË¶ÅÊâßË°åÁöÑÊ¥æÁîüÂÆèÁöÑË∑ØÂæÑ„ÄÇ ‰æãÂ¶ÇÔºå‰∏ãÈù¢ÁöÑÊ¥æÁîüÂ±ûÊÄßÂ∞Ü‰∏∫ÁªìÊûÑ‰Ωì Foo ÂàõÂª∫‰∏Ä‰∏™ÂÆûÁé∞ PartialEq trait Âíå Clone trait ÁöÑÂÆûÁé∞(impl item)ÔºåÁ±ªÂûãÂèÇÊï∞ T Â∞ÜË¢´Ê¥æÁîüÂá∫ÁöÑÂÆûÁé∞(impl)Âä†‰∏ä PartialEq Êàñ^1^ Clone Á∫¶ÊùüÔºö #[test] #[should_panic(expected = \"values don't match\")] fn mytest() { assert_eq!(1, 2, \"values don't match\"); } 1„ÄÅËá™Âä®Ê¥æÁîüÂ∏∏Áî®ÁöÑ traitsÔºö Rust Êèê‰æõ‰∫Ü‰∏Ä‰∫õÂ∏∏Áî®ÁöÑ traitsÔºåÂèØ‰ª•ÈÄöËøá #[derive()] Â±ûÊÄßËá™Âä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÂÆûÁé∞Ëøô‰∫õ traits„ÄÇ‰∏Ä‰∫õÂ∏∏ËßÅÁöÑÂèØÊ¥æÁîü traits ÂåÖÊã¨Ôºö DebugÔºöÈÄöËøáÂÆûÁé∞ Debug traitÔºåÂèØ‰ª•‰ΩøÁî® println!(\"{:?}\", my_struct) Êù•ÊâìÂç∞ÁªìÊûÑ‰ΩìÁöÑË∞ÉËØï‰ø°ÊÅØ„ÄÇ CloneÔºöÈÄöËøáÂÆûÁé∞ Clone traitÔºåÂèØ‰ª•‰ΩøÁî® my_struct.clone() ÂàõÂª∫ÁªìÊûÑ‰ΩìÁöÑÂÖãÈöÜÂâØÊú¨„ÄÇ PartialEq Âíå EqÔºöÈÄöËøáÂÆûÁé∞ PartialEq traitÔºåÂèØ‰ª•ËøõË°åÁªìÊûÑ‰ΩìÁöÑÈÉ®ÂàÜÁõ∏Á≠âÊÄßÊØîËæÉÔºåËÄå Eq trait ÂàôÂÆûÁé∞‰∫ÜÂÆåÂÖ®Áõ∏Á≠âÊÄßÊØîËæÉ„ÄÇ PartialOrd Âíå OrdÔºöÈÄöËøáÂÆûÁé∞ PartialOrd traitÔºåÂèØ‰ª•ÂØπÁªìÊûÑ‰ΩìËøõË°åÈÉ®ÂàÜÊúâÂ∫èÊÄßÊØîËæÉÔºåËÄå Ord trait ÂÆûÁé∞‰∫ÜÂÆåÂÖ®ÊúâÂ∫èÊÄßÊØîËæÉ„ÄÇ 2„ÄÅËá™ÂÆö‰πâ traits ÁöÑËá™Âä®Ê¥æÁîüÔºö Èô§‰∫ÜÊ¥æÁîüÂ∏∏ËßÅÁöÑ traitsÔºåÊÇ®ËøòÂèØ‰ª•Ëá™ÂÆö‰πâ traitsÔºåÂπ∂‰ΩøÁî® #[derive()] Â±ûÊÄß‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æËá™Âä®ÁîüÊàêÂÆûÁé∞‰ª£Á†Å„ÄÇ‰æãÂ¶ÇÔºåÂ¶ÇÊûúÊÇ®ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫ MyTrait ÁöÑËá™ÂÆö‰πâ traitÔºåÂπ∂Â∏åÊúõ‰∏∫ÁªìÊûÑ‰ΩìËá™Âä®ÂÆûÁé∞ÂÆÉÔºåÂèØ‰ª•ËøôÊ†∑ÂÜôÔºö trait MyTrait { // trait ÊñπÊ≥ïÂÆö‰πâ } #[derive(MyTrait)] struct MyStruct { // ÁªìÊûÑ‰ΩìÂ≠óÊÆµ } Ê≥®ÊÑèÔºåÂØπ‰∫éËá™ÂÆö‰πâ traits ÁöÑÊ¥æÁîüÔºåÊÇ®ÈúÄË¶ÅÂú®ÁºñÂÜô MyTrait trait Êó∂ÊâãÂä®ÂÆûÁé∞ #[derive(MyTrait)] ÁöÑÈÄªËæëÔºåÊàñËÄÖ‰ΩøÁî®Á¨¨‰∏âÊñπÂ∫ìÊèê‰æõÁöÑÊ¥æÁîüÂÆè„ÄÇ 3„ÄÅÊâãÂä®ÂÆûÁé∞ traitsÔºö Êüê‰∫õ traits Êó†Ê≥ïÈÄöËøá #[derive()] Â±ûÊÄßËá™Âä®Ê¥æÁîüÔºåÂõ†‰∏∫ÂÆÉ‰ª¨ÂèØËÉΩÈúÄË¶ÅÊõ¥Â§öÁöÑ‰ø°ÊÅØÊàñËá™ÂÆö‰πâÂÆûÁé∞„ÄÇÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÈúÄË¶ÅÊâãÂä®‰∏∫ÁªìÊûÑ‰ΩìÊàñÊûö‰∏æÂÆûÁé∞Ëøô‰∫õ traits„ÄÇÊâãÂä®ÂÆûÁé∞ traits ÈÄöÂ∏∏Ê∂âÂèä‰∏∫ÊØè‰∏™ trait ÊñπÊ≥ïÊèê‰æõÂÖ∑‰ΩìÁöÑÂÆûÁé∞‰ª£Á†Å„ÄÇ‰ª•‰∏ãÊòØÊâãÂä®ÂÆûÁé∞ MyTrait trait ÁöÑÁ§∫‰æãÔºö trait MyTrait { // trait ÊñπÊ≥ïÂÆö‰πâ } struct MyStruct { // ÁªìÊûÑ‰ΩìÂ≠óÊÆµ } impl MyTrait for MyStruct { // MyTrait ÊñπÊ≥ïÁöÑÂÖ∑‰ΩìÂÆûÁé∞ } #[derive[Debug]] #[derive(Debug)] struct Rectangle { width: u32, height: u32, } fn main() { let rect1 = Rectangle { width: 30, height: 50, }; println!(\"rect1 is {rect1:?}\"); } Âú® {} ‰∏≠Âä†ÂÖ• :? ÊåáÁ§∫Á¨¶ÂëäËØâ println! Êàë‰ª¨ÊÉ≥Ë¶Å‰ΩøÁî®Âè´ÂÅö Debug ÁöÑËæìÂá∫Ê†ºÂºè„ÄÇDebug ÊòØ‰∏Ä‰∏™ traitÔºåÂÆÉÂÖÅËÆ∏Êàë‰ª¨‰ª•‰∏ÄÁßçÂØπÂºÄÂèëËÄÖÊúâÂ∏ÆÂä©ÁöÑÊñπÂºèÊâìÂç∞ÁªìÊûÑ‰ΩìÔºå‰ª•‰æøÂΩìÊàë‰ª¨Ë∞ÉËØï‰ª£Á†ÅÊó∂ËÉΩÁúãÂà∞ÂÆÉÁöÑÂÄº„ÄÇ ÂΩìÊàë‰ª¨Êúâ‰∏Ä‰∏™Êõ¥Â§ßÁöÑÁªìÊûÑ‰ΩìÊó∂ÔºåËÉΩÊúâÊõ¥ÊòìËØª‰∏ÄÁÇπÁöÑËæìÂá∫Â∞±Â•Ω‰∫ÜÔºå‰∏∫Ê≠§ÂèØ‰ª•‰ΩøÁî® {:#?} ÊõøÊç¢ println! Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑ {:?}„ÄÇÂú®Ëøô‰∏™‰æãÂ≠ê‰∏≠‰ΩøÁî® {:#?} È£éÊ†ºÂ∞Ü‰ºöËæìÂá∫Â¶Ç‰∏ãÔºö $ cargo run Compiling rectangles v0.1.0 (file:///projects/rectangles) Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s Running `target/debug/rectangles` rect1 is Rectangle { width: 30, height: 50, } Âè¶‰∏ÄÁßç‰ΩøÁî® Debug Ê†ºÂºèÊâìÂç∞Êï∞ÂÄºÁöÑÊñπÊ≥ïÊòØ‰ΩøÁî® dbg! ÂÆè„ÄÇdbg! ÂÆèÊé•Êî∂‰∏Ä‰∏™Ë°®ËææÂºèÁöÑÊâÄÊúâÊùÉÔºà‰∏é println! ÂÆèÁõ∏ÂèçÔºåÂêéËÄÖÊé•Êî∂ÁöÑÊòØÂºïÁî®ÔºâÔºåÊâìÂç∞Âá∫‰ª£Á†Å‰∏≠Ë∞ÉÁî® dbg! ÂÆèÊó∂ÊâÄÂú®ÁöÑÊñá‰ª∂ÂíåË°åÂè∑Ôºå‰ª•ÂèäËØ•Ë°®ËææÂºèÁöÑÁªìÊûúÂÄºÔºåÂπ∂ËøîÂõûËØ•ÂÄºÁöÑÊâÄÊúâÊùÉ„ÄÇ Ê≥®ÊÑèÔºöË∞ÉÁî® dbg! ÂÆè‰ºöÊâìÂç∞Âà∞Ê†áÂáÜÈîôËØØÊéßÂà∂Âè∞ÊµÅÔºàstderrÔºâÔºå‰∏é println! ‰∏çÂêåÔºåÂêéËÄÖ‰ºöÊâìÂç∞Âà∞Ê†áÂáÜËæìÂá∫ÊéßÂà∂Âè∞ÊµÅÔºàstdoutÔºâ„ÄÇ #[derive(Debug)] struct Rectangle { width: u32, height: u32, } fn main() { let scale = 2; let rect1 = Rectangle { width: dbg!(30 * scale), height: 50, }; dbg!(&rect1); } $ cargo run Compiling rectangles v0.1.0 (file:///projects/rectangles) Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s Running `target/debug/rectangles` [src/main.rs:10:16] 30 * scale = 60 [src/main.rs:14:5] &rect1 = Rectangle { width: 60, height: 50, } Method and Impl #[derive(Debug)] struct Rectangle { width: u32, height: u32, } impl Rectangle { fn area(&self) -> u32 { self.width * self.height } } fn main() { let rect1 = Rectangle { width: 30, height: 50, }; println!( \"The area of the rectangle is {} square pixels.\", rect1.area() ); } ‰∏∫‰∫Ü‰ΩøÂáΩÊï∞ÂÆö‰πâ‰∫é Rectangle ÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÔºåÊàë‰ª¨ÂºÄÂßã‰∫Ü‰∏Ä‰∏™ impl ÂùóÔºàimpl ÊòØ implementation ÁöÑÁº©ÂÜôÔºâÔºåËøô‰∏™ impl Âùó‰∏≠ÁöÑÊâÄÊúâÂÜÖÂÆπÈÉΩÂ∞Ü‰∏é Rectangle Á±ªÂûãÁõ∏ÂÖ≥ËÅî„ÄÇÊé•ÁùÄÂ∞Ü area ÂáΩÊï∞ÁßªÂä®Âà∞ impl Â§ßÊã¨Âè∑‰∏≠ÔºåÂπ∂Â∞ÜÁ≠æÂêç‰∏≠ÁöÑÁ¨¨‰∏Ä‰∏™ÔºàÂú®ËøôÈáå‰πüÊòØÂîØ‰∏Ä‰∏Ä‰∏™ÔºâÂèÇÊï∞ÂíåÂáΩÊï∞‰Ωì‰∏≠ÂÖ∂‰ªñÂú∞ÊñπÁöÑÂØπÂ∫îÂèÇÊï∞ÊîπÊàê self„ÄÇÁÑ∂ÂêéÂú® main ‰∏≠Â∞ÜÊàë‰ª¨ÂÖàÂâçË∞ÉÁî® area ÊñπÊ≥ïÂπ∂‰º†ÈÄí rect1 ‰Ωú‰∏∫ÂèÇÊï∞ÁöÑÂú∞ÊñπÔºåÊîπÊàê‰ΩøÁî® ÊñπÊ≥ïËØ≠Ê≥ï Ôºà method syntax ÔºâÂú® Rectangle ÂÆû‰æã‰∏äË∞ÉÁî® area ÊñπÊ≥ï„ÄÇÊñπÊ≥ïËØ≠Ê≥ïËé∑Âèñ‰∏Ä‰∏™ÂÆû‰æãÂπ∂Âä†‰∏ä‰∏Ä‰∏™ÁÇπÂè∑ÔºåÂêéË∑üÊñπÊ≥ïÂêç„ÄÅÂúÜÊã¨Âè∑‰ª•Âèä‰ªª‰ΩïÂèÇÊï∞„ÄÇ Âú® area ÁöÑÁ≠æÂêç‰∏≠Ôºå‰ΩøÁî® &self Êù•Êõø‰ª£ rectangle: &RectangleÔºå&self ÂÆûÈôÖ‰∏äÊòØ self: &Self ÁöÑÁº©ÂÜô„ÄÇÂú®‰∏Ä‰∏™ impl Âùó‰∏≠ÔºåSelf Á±ªÂûãÊòØ impl ÂùóÁöÑÁ±ªÂûãÁöÑÂà´Âêç„ÄÇÊñπÊ≥ïÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÂøÖÈ°ªÊúâ‰∏Ä‰∏™Âêç‰∏∫ self ÁöÑ Self Á±ªÂûãÁöÑÂèÇÊï∞ÔºåÊâÄ‰ª• Rust ËÆ©‰Ω†Âú®Á¨¨‰∏Ä‰∏™ÂèÇÊï∞‰ΩçÁΩÆ‰∏äÂè™Áî® self Ëøô‰∏™ÂêçÂ≠óÊù•ÁÆÄÂåñ„ÄÇÊ≥®ÊÑèÔºåÊàë‰ª¨‰ªçÁÑ∂ÈúÄË¶ÅÂú® self ÂâçÈù¢‰ΩøÁî® & Êù•Ë°®Á§∫Ëøô‰∏™ÊñπÊ≥ïÂÄüÁî®‰∫Ü Self ÂÆû‰æãÔºåÂ∞±ÂÉèÊàë‰ª¨Âú® rectangle: &Rectangle ‰∏≠ÂÅöÁöÑÈÇ£Ê†∑„ÄÇÊñπÊ≥ïÂèØ‰ª•ÈÄâÊã©Ëé∑Âæó self ÁöÑÊâÄÊúâÊùÉÔºåÊàñËÄÖÂÉèÊàë‰ª¨ËøôÈáå‰∏ÄÊ†∑‰∏çÂèØÂèòÂú∞ÂÄüÁî® selfÔºåÊàñËÄÖÂèØÂèòÂú∞ÂÄüÁî® selfÔºåÂ∞±Ë∑üÂÖ∂‰ªñÂèÇÊï∞‰∏ÄÊ†∑„ÄÇ ËøôÈáåÈÄâÊã© &self ÁöÑÁêÜÁî±Ë∑üÂú®ÂáΩÊï∞ÁâàÊú¨‰∏≠‰ΩøÁî® &Rectangle ÊòØÁõ∏ÂêåÁöÑÔºöÊàë‰ª¨Âπ∂‰∏çÊÉ≥Ëé∑ÂèñÊâÄÊúâÊùÉÔºåÂè™Â∏åÊúõËÉΩÂ§üËØªÂèñÁªìÊûÑ‰Ωì‰∏≠ÁöÑÊï∞ÊçÆÔºåËÄå‰∏çÊòØÂÜôÂÖ•„ÄÇÂ¶ÇÊûúÊÉ≥Ë¶ÅÂú®ÊñπÊ≥ï‰∏≠ÊîπÂèòË∞ÉÁî®ÊñπÊ≥ïÁöÑÂÆû‰æãÔºåÈúÄË¶ÅÂ∞ÜÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞Êîπ‰∏∫ &mut self„ÄÇÈÄöËøá‰ªÖ‰ªÖ‰ΩøÁî® self ‰Ωú‰∏∫Á¨¨‰∏Ä‰∏™ÂèÇÊï∞Êù•‰ΩøÊñπÊ≥ïËé∑ÂèñÂÆû‰æãÁöÑÊâÄÊúâÊùÉÊòØÂæàÂ∞ëËßÅÁöÑÔºõËøôÁßçÊäÄÊúØÈÄöÂ∏∏Áî®Âú®ÂΩìÊñπÊ≥ïÂ∞Ü self ËΩ¨Êç¢ÊàêÂà´ÁöÑÂÆû‰æãÁöÑÊó∂ÂÄôÔºåËøôÊó∂Êàë‰ª¨ÊÉ≥Ë¶ÅÈò≤Ê≠¢Ë∞ÉÁî®ËÄÖÂú®ËΩ¨Êç¢‰πãÂêé‰ΩøÁî®ÂéüÂßãÁöÑÂÆû‰æã„ÄÇ ‰ΩøÁî®ÊñπÊ≥ïÊõø‰ª£ÂáΩÊï∞ÔºåÈô§‰∫ÜÂèØ‰ΩøÁî®ÊñπÊ≥ïËØ≠Ê≥ïÂíå‰∏çÈúÄË¶ÅÂú®ÊØè‰∏™ÂáΩÊï∞Á≠æÂêç‰∏≠ÈáçÂ§ç self ÁöÑÁ±ªÂûã‰πãÂ§ñÔºåÂÖ∂‰∏ªË¶ÅÂ•ΩÂ§ÑÂú®‰∫éÁªÑÁªáÊÄß„ÄÇÊàë‰ª¨Â∞ÜÊüê‰∏™Á±ªÂûãÂÆû‰æãËÉΩÂÅöÁöÑÊâÄÊúâ‰∫ãÊÉÖÈÉΩ‰∏ÄËµ∑ÊîæÂÖ• impl Âùó‰∏≠ÔºåËÄå‰∏çÊòØËÆ©Â∞ÜÊù•ÁöÑÁî®Êà∑Âú®Êàë‰ª¨ÁöÑÂ∫ì‰∏≠Âà∞Â§ÑÂØªÊâæ Rectangle ÁöÑÂäüËÉΩ„ÄÇ Ëá™Âä®ÂºïÁî®ÂíåËß£ÂºïÁî®Ôºà automatic referencing and dereferencingÔºâ Rust Âπ∂Ê≤°Êúâ‰∏Ä‰∏™‰∏é -> Á≠âÊïàÁöÑËøêÁÆóÁ¨¶ÔºõÁõ∏ÂèçÔºåRust Êúâ‰∏Ä‰∏™Âè´ Ëá™Âä®ÂºïÁî®ÂíåËß£ÂºïÁî® Ôºà automatic referencing and dereferencing ÔºâÁöÑÂäüËÉΩ„ÄÇÊñπÊ≥ïË∞ÉÁî®ÊòØ Rust ‰∏≠Â∞ëÊï∞Âá†‰∏™Êã•ÊúâËøôÁßçË°å‰∏∫ÁöÑÂú∞Êñπ„ÄÇ ÂÆÉÊòØËøôÊ†∑Â∑•‰ΩúÁöÑÔºöÂΩì‰ΩøÁî® object.something() Ë∞ÉÁî®ÊñπÊ≥ïÊó∂ÔºåRust ‰ºöËá™Âä®‰∏∫ object Ê∑ªÂä† &„ÄÅ&mut Êàñ * ‰ª•‰æø‰Ωø object ‰∏éÊñπÊ≥ïÁ≠æÂêçÂåπÈÖç„ÄÇ p1.distance(&p2); (&p1).distance(&p2); Á¨¨‰∏ÄË°åÁúãËµ∑Êù•ÁÆÄÊ¥ÅÁöÑÂ§ö„ÄÇËøôÁßçËá™Âä®ÂºïÁî®ÁöÑË°å‰∏∫‰πãÊâÄ‰ª•ÊúâÊïàÔºåÊòØÂõ†‰∏∫ÊñπÊ≥ïÊúâ‰∏Ä‰∏™ÊòéÁ°ÆÁöÑÊé•Êî∂ËÄÖ‚Äî‚Äî‚Äî‚Äî self ÁöÑÁ±ªÂûã„ÄÇÂú®ÁªôÂá∫Êé•Êî∂ËÄÖÂíåÊñπÊ≥ïÂêçÁöÑÂâçÊèê‰∏ãÔºåRust ÂèØ‰ª•ÊòéÁ°ÆÂú∞ËÆ°ÁÆóÂá∫ÊñπÊ≥ïÊòØ‰ªÖ‰ªÖËØªÂèñÔºà&selfÔºâÔºåÂÅöÂá∫‰øÆÊîπÔºà&mut selfÔºâÊàñËÄÖÊòØËé∑ÂèñÊâÄÊúâÊùÉÔºàselfÔºâ„ÄÇ‰∫ãÂÆû‰∏äÔºåRust ÂØπÊñπÊ≥ïÊé•Êî∂ËÄÖÁöÑÈöêÂºèÂÄüÁî®ËÆ©ÊâÄÊúâÊùÉÂú®ÂÆûË∑µ‰∏≠Êõ¥ÂèãÂ•Ω„ÄÇ ÂÖ≥ËÅîÂáΩÊï∞ ÊâÄÊúâÂú® impl Âùó‰∏≠ÂÆö‰πâÁöÑÂáΩÊï∞Ë¢´Áß∞‰∏∫ ÂÖ≥ËÅîÂáΩÊï∞ Ôºà associated functions ÔºâÔºåÂõ†‰∏∫ÂÆÉ‰ª¨‰∏é impl ÂêéÈù¢ÂëΩÂêçÁöÑÁ±ªÂûãÁõ∏ÂÖ≥„ÄÇÊàë‰ª¨ÂèØ‰ª•ÂÆö‰πâ‰∏ç‰ª• self ‰∏∫Á¨¨‰∏ÄÂèÇÊï∞ÁöÑÂÖ≥ËÅîÂáΩÊï∞ÔºàÂõ†Ê≠§‰∏çÊòØÊñπÊ≥ïÔºâÔºåÂõ†‰∏∫ÂÆÉ‰ª¨Âπ∂‰∏ç‰ΩúÁî®‰∫é‰∏Ä‰∏™ÁªìÊûÑ‰ΩìÁöÑÂÆû‰æã„ÄÇÊàë‰ª¨Â∑≤Áªè‰ΩøÁî®‰∫Ü‰∏Ä‰∏™ËøôÊ†∑ÁöÑÂáΩÊï∞ÔºöÂú® String Á±ªÂûã‰∏äÂÆö‰πâÁöÑ String::from ÂáΩÊï∞„ÄÇ ‰∏çÊòØÊñπÊ≥ïÁöÑÂÖ≥ËÅîÂáΩÊï∞ÁªèÂ∏∏Ë¢´Áî®‰ΩúËøîÂõû‰∏Ä‰∏™ÁªìÊûÑ‰ΩìÊñ∞ÂÆû‰æãÁöÑÊûÑÈÄ†ÂáΩÊï∞„ÄÇËøô‰∫õÂáΩÊï∞ÁöÑÂêçÁß∞ÈÄöÂ∏∏‰∏∫ new Ôºå‰ΩÜ new Âπ∂‰∏çÊòØ‰∏Ä‰∏™ÂÖ≥ÈîÆÂ≠ó„ÄÇ‰æãÂ¶ÇÊàë‰ª¨ÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™Âè´ÂÅö square ÂÖ≥ËÅîÂáΩÊï∞ÔºåÂÆÉÊé•Âèó‰∏Ä‰∏™Áª¥Â∫¶ÂèÇÊï∞Âπ∂‰∏îÂêåÊó∂‰Ωú‰∏∫ÂÆΩÂíåÈ´òÔºåËøôÊ†∑ÂèØ‰ª•Êõ¥ËΩªÊùæÁöÑÂàõÂª∫‰∏Ä‰∏™Ê≠£ÊñπÂΩ¢ Rectangle ËÄå‰∏çÂøÖÊåáÂÆö‰∏§Ê¨°ÂêåÊ†∑ÁöÑÂÄºÔºö impl Rectangle { fn square(size: u32) -> Self { Self { width: size, height: size, } } } ÂÖ≥ÈîÆÂ≠ó Self Âú®ÂáΩÊï∞ÁöÑËøîÂõûÁ±ªÂûã‰∏≠‰ª£ÊåáÂú® impl ÂÖ≥ÈîÆÂ≠óÂêéÂá∫Áé∞ÁöÑÁ±ªÂûãÔºåÂú®ËøôÈáåÊòØ Rectangle ‰ΩøÁî®ÁªìÊûÑ‰ΩìÂêçÂíå :: ËØ≠Ê≥ïÊù•Ë∞ÉÁî®Ëøô‰∏™ÂÖ≥ËÅîÂáΩÊï∞ÔºöÊØîÂ¶Ç let sq = Rectangle::square(3);„ÄÇËøô‰∏™ÂáΩÊï∞‰Ωç‰∫éÁªìÊûÑ‰ΩìÁöÑÂëΩÂêçÁ©∫Èó¥‰∏≠Ôºö:: ËØ≠Ê≥ïÁî®‰∫éÂÖ≥ËÅîÂáΩÊï∞ÂíåÊ®°ÂùóÂàõÂª∫ÁöÑÂëΩÂêçÁ©∫Èó¥„ÄÇÁ¨¨‰∏ÉÁ´†‰ºöËÆ≤Âà∞Ê®°Âùó„ÄÇ Option Êûö‰∏æÂíåÂÖ∂Áõ∏ÂØπ‰∫éÁ©∫ÂÄºÁöÑ‰ºòÂäø Ëøô‰∏ÄÈÉ®ÂàÜ‰ºöÂàÜÊûê‰∏Ä‰∏™ Option ÁöÑÊ°à‰æãÔºåOption ÊòØÊ†áÂáÜÂ∫ìÂÆö‰πâÁöÑÂè¶‰∏Ä‰∏™Êûö‰∏æ„ÄÇOption Á±ªÂûãÂ∫îÁî®ÂπøÊ≥õÂõ†‰∏∫ÂÆÉÁºñÁ†Å‰∫Ü‰∏Ä‰∏™ÈùûÂ∏∏ÊôÆÈÅçÁöÑÂú∫ÊôØÔºåÂç≥‰∏Ä‰∏™ÂÄºË¶Å‰πàÊúâÂÄºË¶Å‰πàÊ≤°ÂÄº„ÄÇ ‰æãÂ¶ÇÔºåÂ¶ÇÊûúËØ∑Ê±Ç‰∏Ä‰∏™ÈùûÁ©∫ÂàóË°®ÁöÑÁ¨¨‰∏ÄÈ°πÔºå‰ºöÂæóÂà∞‰∏Ä‰∏™ÂÄºÔºåÂ¶ÇÊûúËØ∑Ê±Ç‰∏Ä‰∏™Á©∫ÁöÑÂàóË°®ÔºåÂ∞±‰ªÄ‰πà‰πü‰∏ç‰ºöÂæóÂà∞„ÄÇ‰ªéÁ±ªÂûãÁ≥ªÁªüÁöÑËßíÂ∫¶Êù•Ë°®ËææËøô‰∏™Ê¶ÇÂøµÂ∞±ÊÑèÂë≥ÁùÄÁºñËØëÂô®ÈúÄË¶ÅÊ£ÄÊü•ÊòØÂê¶Â§ÑÁêÜ‰∫ÜÊâÄÊúâÂ∫îËØ•Â§ÑÁêÜÁöÑÊÉÖÂÜµÔºåËøôÊ†∑Â∞±ÂèØ‰ª•ÈÅøÂÖçÂú®ÂÖ∂‰ªñÁºñÁ®ãËØ≠Ë®Ä‰∏≠ÈùûÂ∏∏Â∏∏ËßÅÁöÑ bug„ÄÇ ÁºñÁ®ãËØ≠Ë®ÄÁöÑËÆæËÆ°ÁªèÂ∏∏Ë¶ÅËÄÉËôëÂåÖÂê´Âì™‰∫õÂäüËÉΩÔºå‰ΩÜËÄÉËôëÊéíÈô§Âì™‰∫õÂäüËÉΩ‰πüÂæàÈáçË¶Å„ÄÇRust Âπ∂Ê≤°ÊúâÂæàÂ§öÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠ÊúâÁöÑÁ©∫ÂÄºÂäüËÉΩ„ÄÇ Á©∫ÂÄº ÔºàNull ÔºâÊòØ‰∏Ä‰∏™ÂÄºÔºåÂÆÉ‰ª£Ë°®Ê≤°ÊúâÂÄº„ÄÇÂú®ÊúâÁ©∫ÂÄºÁöÑËØ≠Ë®Ä‰∏≠ÔºåÂèòÈáèÊÄªÊòØËøô‰∏§ÁßçÁä∂ÊÄÅ‰πã‰∏ÄÔºöÁ©∫ÂÄºÂíåÈùûÁ©∫ÂÄº„ÄÇ Tony HoareÔºånull ÁöÑÂèëÊòéËÄÖÔºåÂú®‰ªñ 2009 Âπ¥ÁöÑÊºîËÆ≤ ‚ÄúNull References: The Billion Dollar Mistake‚Äù ‰∏≠ÊõæÁªèËØ¥Âà∞Ôºö I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years. ÊàëÁß∞‰πã‰∏∫ÊàëÂçÅ‰∫øÁæéÂÖÉÁöÑÈîôËØØ„ÄÇÂΩìÊó∂ÔºåÊàëÂú®‰∏∫‰∏Ä‰∏™Èù¢ÂêëÂØπË±°ËØ≠Ë®ÄËÆæËÆ°Á¨¨‰∏Ä‰∏™ÁªºÂêàÊÄßÁöÑÈù¢ÂêëÂºïÁî®ÁöÑÁ±ªÂûãÁ≥ªÁªü„ÄÇÊàëÁöÑÁõÆÊ†áÊòØÈÄöËøáÁºñËØëÂô®ÁöÑËá™Âä®Ê£ÄÊü•Êù•‰øùËØÅÊâÄÊúâÂºïÁî®ÁöÑ‰ΩøÁî®ÈÉΩÂ∫îËØ•ÊòØÁªùÂØπÂÆâÂÖ®ÁöÑ„ÄÇ‰∏çËøáÊàëÊú™ËÉΩÊäµÊäó‰ΩèÂºïÂÖ•‰∏Ä‰∏™Á©∫ÂºïÁî®ÁöÑËØ±ÊÉëÔºå‰ªÖ‰ªÖÊòØÂõ†‰∏∫ÂÆÉÊòØËøô‰πàÁöÑÂÆπÊòìÂÆûÁé∞„ÄÇËøôÂºïÂèë‰∫ÜÊó†Êï∞ÈîôËØØ„ÄÅÊºèÊ¥ûÂíåÁ≥ªÁªüÂ¥©Ê∫ÉÔºåÂú®‰πãÂêéÁöÑÂõõÂçÅÂ§öÂπ¥‰∏≠ÈÄ†Êàê‰∫ÜÊï∞ÂçÅ‰∫øÁæéÂÖÉÁöÑËã¶ÁóõÂíå‰º§ÂÆ≥„ÄÇ Á©∫ÂÄºÁöÑÈóÆÈ¢òÂú®‰∫éÂΩì‰Ω†Â∞ùËØïÂÉè‰∏Ä‰∏™ÈùûÁ©∫ÂÄºÈÇ£Ê†∑‰ΩøÁî®‰∏Ä‰∏™Á©∫ÂÄºÔºå‰ºöÂá∫Áé∞ÊüêÁßçÂΩ¢ÂºèÁöÑÈîôËØØ„ÄÇÂõ†‰∏∫Á©∫ÂíåÈùûÁ©∫ÁöÑÂ±ûÊÄßÊó†Â§Ñ‰∏çÂú®ÔºåÈùûÂ∏∏ÂÆπÊòìÂá∫Áé∞ËøôÁ±ªÈîôËØØ„ÄÇ ÁÑ∂ËÄåÔºåÁ©∫ÂÄºÂ∞ùËØïË°®ËææÁöÑÊ¶ÇÂøµ‰ªçÁÑ∂ÊòØÊúâÊÑè‰πâÁöÑÔºöÁ©∫ÂÄºÊòØ‰∏Ä‰∏™Âõ†‰∏∫ÊüêÁßçÂéüÂõ†ÁõÆÂâçÊó†ÊïàÊàñÁº∫Â§±ÁöÑÂÄº„ÄÇ ÈóÆÈ¢ò‰∏çÂú®‰∫éÊ¶ÇÂøµËÄåÂú®‰∫éÂÖ∑‰ΩìÁöÑÂÆûÁé∞„ÄÇ‰∏∫Ê≠§ÔºåRust Âπ∂Ê≤°ÊúâÁ©∫ÂÄºÔºå‰∏çËøáÂÆÉÁ°ÆÂÆûÊã•Êúâ‰∏Ä‰∏™ÂèØ‰ª•ÁºñÁ†ÅÂ≠òÂú®Êàñ‰∏çÂ≠òÂú®Ê¶ÇÂøµÁöÑÊûö‰∏æ„ÄÇËøô‰∏™Êûö‰∏æÊòØ OptionÔºåËÄå‰∏îÂÆÉÂÆö‰πâ‰∫éÊ†áÂáÜÂ∫ì‰∏≠ÔºåÂ¶Ç‰∏ãÔºö enum Option { None, Some(T), } Option Êûö‰∏æÊòØÂ¶ÇÊ≠§ÊúâÁî®‰ª•Ëá≥‰∫éÂÆÉÁîöËá≥Ë¢´ÂåÖÂê´Âú®‰∫Ü prelude ‰πã‰∏≠Ôºå‰Ω†‰∏çÈúÄË¶ÅÂ∞ÜÂÖ∂ÊòæÂºèÂºïÂÖ•‰ΩúÁî®Âüü„ÄÇÂè¶Â§ñÔºåÂÆÉÁöÑÊàêÂëò‰πüÊòØÂ¶ÇÊ≠§ÔºåÂèØ‰ª•‰∏çÈúÄË¶Å Option:: ÂâçÁºÄÊù•Áõ¥Êé•‰ΩøÁî® Some Âíå None„ÄÇÂç≥‰æøÂ¶ÇÊ≠§ Option ‰πü‰ªçÊòØÂ∏∏ËßÑÁöÑÊûö‰∏æÔºåSome(T) Âíå None ‰ªçÊòØ Option ÁöÑÊàêÂëò„ÄÇ ËØ≠Ê≥ïÊòØ‰∏Ä‰∏™Êàë‰ª¨ËøòÊú™ËÆ≤Âà∞ÁöÑ Rust ÂäüËÉΩ„ÄÇÂÆÉÊòØ‰∏Ä‰∏™Ê≥õÂûãÁ±ªÂûãÂèÇÊï∞ÔºåÁ¨¨ÂçÅÁ´†‰ºöÊõ¥ËØ¶ÁªÜÁöÑËÆ≤Ëß£Ê≥õÂûã„ÄÇÁõÆÂâçÔºåÊâÄÊúâ‰Ω†ÈúÄË¶ÅÁü•ÈÅìÁöÑÂ∞±ÊòØ ÊÑèÂë≥ÁùÄ Option Êûö‰∏æÁöÑ Some ÊàêÂëòÂèØ‰ª•ÂåÖÂê´‰ªªÊÑèÁ±ªÂûãÁöÑÊï∞ÊçÆÔºåÂêåÊó∂ÊØè‰∏Ä‰∏™Áî®‰∫é T ‰ΩçÁΩÆÁöÑÂÖ∑‰ΩìÁ±ªÂûã‰ΩøÂæó Option Êï¥‰Ωì‰Ωú‰∏∫‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇËøôÈáåÊòØ‰∏Ä‰∫õÂåÖÂê´Êï∞Â≠óÁ±ªÂûãÂíåÂ≠óÁ¨¶‰∏≤Á±ªÂûã Option ÂÄºÁöÑ‰æãÂ≠êÔºö let some_number = Some(5); let some_char = Some('e'); let absent_number: Option = None; some_number ÁöÑÁ±ªÂûãÊòØ Option„ÄÇsome_char ÁöÑÁ±ªÂûãÊòØ OptionÔºåÊòØ‰∏çÂêå‰∫é some_numberÁöÑÁ±ªÂûã„ÄÇÂõ†‰∏∫Êàë‰ª¨Âú® Some ÊàêÂëò‰∏≠ÊåáÂÆö‰∫ÜÂÄºÔºåRust ÂèØ‰ª•Êé®Êñ≠ÂÖ∂Á±ªÂûã„ÄÇÂØπ‰∫é absent_numberÔºåRust ÈúÄË¶ÅÊàë‰ª¨ÊåáÂÆö Option Êï¥‰ΩìÁöÑÁ±ªÂûãÔºåÂõ†‰∏∫ÁºñËØëÂô®Âè™ÈÄöËøá None ÂÄºÊó†Ê≥ïÊé®Êñ≠Âá∫ Some ÊàêÂëò‰øùÂ≠òÁöÑÂÄºÁöÑÁ±ªÂûã„ÄÇËøôÈáåÊàë‰ª¨ÂëäËØâ Rust Â∏åÊúõ absent_number ÊòØ Option Á±ªÂûãÁöÑ„ÄÇ ÂΩìÊúâ‰∏Ä‰∏™ Some ÂÄºÊó∂ÔºåÊàë‰ª¨Â∞±Áü•ÈÅìÂ≠òÂú®‰∏Ä‰∏™ÂÄºÔºåËÄåËøô‰∏™ÂÄº‰øùÂ≠òÂú® Some ‰∏≠„ÄÇÂΩìÊúâ‰∏™ None ÂÄºÊó∂ÔºåÂú®ÊüêÁßçÊÑè‰πâ‰∏äÔºåÂÆÉË∑üÁ©∫ÂÄºÂÖ∑ÊúâÁõ∏ÂêåÁöÑÊÑè‰πâÔºöÂπ∂Ê≤°Êúâ‰∏Ä‰∏™ÊúâÊïàÁöÑÂÄº„ÄÇÈÇ£‰πàÔºåOption ‰∏∫‰ªÄ‰πàÂ∞±ÊØîÁ©∫ÂÄºË¶ÅÂ•ΩÂë¢Ôºü ÁÆÄËÄåË®Ä‰πãÔºåÂõ†‰∏∫ Option Âíå TÔºàËøôÈáå T ÂèØ‰ª•ÊòØ‰ªª‰ΩïÁ±ªÂûãÔºâÊòØ‰∏çÂêåÁöÑÁ±ªÂûãÔºåÁºñËØëÂô®‰∏çÂÖÅËÆ∏ÂÉè‰∏Ä‰∏™ËÇØÂÆöÊúâÊïàÁöÑÂÄºÈÇ£Ê†∑‰ΩøÁî® Option„ÄÇ‰æãÂ¶ÇÔºåËøôÊÆµ‰ª£Á†Å‰∏çËÉΩÁºñËØëÔºåÂõ†‰∏∫ÂÆÉÂ∞ùËØïÂ∞Ü Option ‰∏é i8 Áõ∏Âä†Ôºö let x: i8 = 5; let y: Option = Some(5); let sum = x + y; $ cargo run Compiling enums v0.1.0 (file:///projects/enums) error[E0277]: cannot add `Option` to `i8` --> src/main.rs:5:17 | 5 | let sum = x + y; | ^ no implementation for `i8 + Option` | = help: the trait `Add>` is not implemented for `i8` = help: the following other types implement trait `Add`: `&'a i8` implements `Add` `&i8` implements `Add` `i8` implements `Add` `i8` implements `Add` For more information about this error, try `rustc --explain E0277`. error: could not compile `enums` (bin \"enums\") due to 1 previous error ÂæàÂ•ΩÔºÅ‰∫ãÂÆû‰∏äÔºåÈîôËØØ‰ø°ÊÅØÊÑèÂë≥ÁùÄ Rust ‰∏çÁü•ÈÅìËØ•Â¶Ç‰ΩïÂ∞Ü Option ‰∏é i8 Áõ∏Âä†ÔºåÂõ†‰∏∫ÂÆÉ‰ª¨ÁöÑÁ±ªÂûã‰∏çÂêå„ÄÇÂΩìÂú® Rust ‰∏≠Êã•Êúâ‰∏Ä‰∏™ÂÉè i8 ËøôÊ†∑Á±ªÂûãÁöÑÂÄºÊó∂ÔºåÁºñËØëÂô®Á°Æ‰øùÂÆÉÊÄªÊòØÊúâ‰∏Ä‰∏™ÊúâÊïàÁöÑÂÄº„ÄÇÊàë‰ª¨ÂèØ‰ª•Ëá™‰ø°‰ΩøÁî®ËÄåÊó†ÈúÄÂÅöÁ©∫ÂÄºÊ£ÄÊü•„ÄÇÂè™ÊúâÂΩì‰ΩøÁî® OptionÔºàÊàñËÄÖ‰ªª‰ΩïÁî®Âà∞ÁöÑÁ±ªÂûãÔºâÁöÑÊó∂ÂÄôÈúÄË¶ÅÊãÖÂøÉÂèØËÉΩÊ≤°ÊúâÂÄºÔºåËÄåÁºñËØëÂô®‰ºöÁ°Æ‰øùÊàë‰ª¨Âú®‰ΩøÁî®ÂÄº‰πãÂâçÂ§ÑÁêÜ‰∫Ü‰∏∫Á©∫ÁöÑÊÉÖÂÜµ„ÄÇ Êç¢Âè•ËØùËØ¥ÔºåÂú®ÂØπ Option ËøõË°åËøêÁÆó‰πãÂâçÂøÖÈ°ªÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ T„ÄÇÈÄöÂ∏∏ËøôËÉΩÂ∏ÆÂä©Êàë‰ª¨ÊçïËé∑Âà∞Á©∫ÂÄºÊúÄÂ∏∏ËßÅÁöÑÈóÆÈ¢ò‰πã‰∏ÄÔºöÂÅáËÆæÊüêÂÄº‰∏ç‰∏∫Á©∫‰ΩÜÂÆûÈôÖ‰∏ä‰∏∫Á©∫ÁöÑÊÉÖÂÜµ„ÄÇ Ê∂àÈô§‰∫ÜÈîôËØØÂú∞ÂÅáËÆæ‰∏Ä‰∏™ÈùûÁ©∫ÂÄºÁöÑÈ£éÈô©Ôºå‰ºöËÆ©‰Ω†ÂØπ‰ª£Á†ÅÊõ¥Âä†Êúâ‰ø°ÂøÉ„ÄÇ‰∏∫‰∫ÜÊã•Êúâ‰∏Ä‰∏™ÂèØËÉΩ‰∏∫Á©∫ÁöÑÂÄºÔºå‰Ω†ÂøÖÈ°ªË¶ÅÊòæÂºèÁöÑÂ∞ÜÂÖ∂ÊîæÂÖ•ÂØπÂ∫îÁ±ªÂûãÁöÑ Option ‰∏≠„ÄÇÊé•ÁùÄÔºåÂΩì‰ΩøÁî®Ëøô‰∏™ÂÄºÊó∂ÔºåÂøÖÈ°ªÊòéÁ°ÆÁöÑÂ§ÑÁêÜÂÄº‰∏∫Á©∫ÁöÑÊÉÖÂÜµ„ÄÇÂè™Ë¶Å‰∏Ä‰∏™ÂÄº‰∏çÊòØ Option Á±ªÂûãÔºå‰Ω†Â∞± ÂèØ‰ª• ÂÆâÂÖ®ÁöÑËÆ§ÂÆöÂÆÉÁöÑÂÄº‰∏ç‰∏∫Á©∫„ÄÇËøôÊòØ Rust ÁöÑ‰∏Ä‰∏™ÁªèËøáÊ∑±ÊÄùÁÜüËôëÁöÑËÆæËÆ°ÂÜ≥Á≠ñÔºåÊù•ÈôêÂà∂Á©∫ÂÄºÁöÑÊ≥õÊª•‰ª•Â¢ûÂä† Rust ‰ª£Á†ÅÁöÑÂÆâÂÖ®ÊÄß„ÄÇ ÈÇ£‰πàÂΩìÊúâ‰∏Ä‰∏™ Option ÁöÑÂÄºÊó∂ÔºåÂ¶Ç‰Ωï‰ªé Some ÊàêÂëò‰∏≠ÂèñÂá∫ T ÁöÑÂÄºÊù•‰ΩøÁî®ÂÆÉÂë¢ÔºüOption Êûö‰∏æÊã•ÊúâÂ§ßÈáèÁî®‰∫éÂêÑÁßçÊÉÖÂÜµÁöÑÊñπÊ≥ïÔºö‰Ω†ÂèØ‰ª•Êü•ÁúãÂÆÉÁöÑÊñáÊ°£„ÄÇÁÜüÊÇâ Option ÁöÑÊñπÊ≥ïÂ∞ÜÂØπ‰Ω†ÁöÑ Rust ‰πãÊóÖÈùûÂ∏∏ÊúâÁî®„ÄÇ ÊÄªÁöÑÊù•ËØ¥Ôºå‰∏∫‰∫Ü‰ΩøÁî® Option ÂÄºÔºåÈúÄË¶ÅÁºñÂÜôÂ§ÑÁêÜÊØè‰∏™ÊàêÂëòÁöÑ‰ª£Á†Å„ÄÇ‰Ω†ÊÉ≥Ë¶Å‰∏Ä‰∫õ‰ª£Á†ÅÂè™ÂΩìÊã•Êúâ Some(T) ÂÄºÊó∂ËøêË°åÔºåÂÖÅËÆ∏Ëøô‰∫õ‰ª£Á†Å‰ΩøÁî®ÂÖ∂‰∏≠ÁöÑ T„ÄÇ‰πüÂ∏åÊúõ‰∏Ä‰∫õ‰ª£Á†ÅÂè™Âú®ÂÄº‰∏∫ None Êó∂ËøêË°åÔºåËøô‰∫õ‰ª£Á†ÅÂπ∂Ê≤°Êúâ‰∏Ä‰∏™ÂèØÁî®ÁöÑ T ÂÄº„ÄÇmatch Ë°®ËææÂºèÂ∞±ÊòØËøô‰πà‰∏Ä‰∏™Â§ÑÁêÜÊûö‰∏æÁöÑÊéßÂà∂ÊµÅÁªìÊûÑÔºöÂÆÉ‰ºöÊ†πÊçÆÊûö‰∏æÁöÑÊàêÂëòËøêË°å‰∏çÂêåÁöÑ‰ª£Á†ÅÔºåËøô‰∫õ‰ª£Á†ÅÂèØ‰ª•‰ΩøÁî®ÂåπÈÖçÂà∞ÁöÑÂÄº‰∏≠ÁöÑÊï∞ÊçÆ„ÄÇ PS: C/C++Â¶ÇÊûúÁ®ãÂ∫èÂëò‰∏çÂ§üÂ∞èÂøÉÊ≥®ÊÑèÔºåÂæàÂÆπÊòìÈÄ†ÊàêÊúâÁ©∫ÊåáÈíàÁöÑÊÉÖÂÜµÔºåÂπ∂‰∏îÂøò‰∫ÜÊ£ÄÊü•ÔºåÂ∞±‰ºöÂØºËá¥ÂØπÁ©∫ÊåáÈíàÁöÑ‰ΩøÁî®ÔºÅÔºÅÔºàCSC-2024 C++ ÊÉ®ÁóõÁöÑÊïôËÆ≠ - ‰æùËµñÂÖ≥Á≥ªÂàÜÊûêÈÅç‰∏≠Ê≤°ÊúâÂØπÂáΩÊï∞ÂèØËÉΩ‰º†ÂÖ•Á©∫ÊåáÈíàËøõË°åÊ£ÄÊü•ÔºåÂØºËá¥ÂØπÁ©∫ÊåáÈíàÁöÑÊìç‰ΩúÔºÅÔºâ ‰∏∫‰ªÄ‰πàË¶ÅÂºïÂÖ•Á©∫ÊåáÈíàÔºüÂ¶ÇÊûú‰∏çÂæó‰∏çÂºïÂÖ•ÊüêÁßç‰∏∫‚ÄúÁ©∫‚ÄùÁöÑÁä∂ÊÄÅÔºåÊúÄÂ•Ω wrap ‰∏Ä‰∏ãÔºÅÔºÅÂ∞±ÂÉè rust ‰∏≠ÁöÑ Option ‰∏ÄÊ†∑ÔºÅ "},"Learn/LearnRust/RustProgrammingLanguage.html":{"url":"Learn/LearnRust/RustProgrammingLanguage.html","title":"RustProgrammingLanguage","keywords":"","body":"Rust Programming Language Ch3: Common Programming Concepts Shadowing: ÈöêËóèÔºåÂÆö‰πâ‰∏Ä‰∏™‰∏é‰πãÂâçÂèòÈáèÂêåÂêçÁöÑÊñ∞ÂèòÈáèÔºåÁ¨¨‰∏Ä‰∏™ÂèòÈáèË¢´Á¨¨‰∫å‰∏™ÂèòÈáèÈöêËóè„ÄÇ Ch9: ÈîôËØØÂ§ÑÁêÜ Rust Ë¶ÅÊ±Ç‰Ω†ÊâøËÆ§ÈîôËØØÁöÑÂèØËÉΩÊÄßÔºåÂπ∂Âú®‰Ω†ÁöÑ‰ª£Á†ÅÁºñËØëÂâçÈááÂèñ‰∏Ä‰∫õË°åÂä®„ÄÇ ÂèØÊÅ¢Â§çÁöÑ recoverable: ÂêëÁî®Êà∑Êä•ÂëäÈîôËØØ ‰ΩøÁî® Result Â§ÑÁêÜ ‰∏çÂèØÊÅ¢Â§çÁöÑ unrecorverable: Á´ãÂç≥ panic ÂÅúÊ≠¢Á®ãÂ∫è ‰ΩøÁî® panic! Â§ÑÁêÜ ÈÄöËøá backtrace Êü•ÁúãË∞ÉÁî®Ê†à‰ø°ÊÅØ ‰ΩøÁî® Result Â§ÑÁêÜÂèØÊÅ¢Â§çÁöÑ (recoverable) ÈîôËØØ use std::fs::File; fn main() { let greeting_file_result = File::open(\"hello.txt\"); // Result let greeting_file = match greeting_file_result { Ok(file) => file, Err(error) => panic!(\"Problem opening the file: {error:?}\"), }; } ÂåπÈÖç‰∏çÂêåÁöÑÈîôËØØ use std::fs::File; use std::io::ErrorKind; fn main() { let greeting_file_result = File::open(\"hello.txt\"); let greeting_file = match greeting_file_result { Ok(file) => file, Err(error) => match error.kind() { ErrorKind::NotFound => match File::create(\"hello.txt\") { Ok(fc) => fc, Err(e) => panic!(\"Problem creating the file: {e:?}\"), }, other_error => { panic!(\"Problem opening the file: {other_error:?}\"); } }, }; } ‰ΩøÁî®Èó≠ÂåÖÂíå unwrap_or_else ÊñπÊ≥ï use std::fs::File; use std::io::ErrorKind; fn main() { let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| { if error.kind() == ErrorKind::NotFound { File::create(\"hello.txt\").unwrap_or_else(|error| { panic!(\"Problem creating the file: {:?}\", error); }) } else { panic!(\"Problem opening the file: {:?}\", error); } }); } Â§±Ë¥•Êó∂ panic ÁöÑÁÆÄÂÜôÔºöunwrap Âíå expect Â¶ÇÊûú Result ÂÄºÊòØÊàêÂëò OkÔºåunwrap ‰ºöËøîÂõû Ok ‰∏≠ÁöÑÂÄº„ÄÇÂ¶ÇÊûú Result ÊòØÊàêÂëò ErrÔºåunwrap ‰ºö‰∏∫Êàë‰ª¨Ë∞ÉÁî® panic! use std::fs::File; fn main() { let greeting_file = File::open(\"hello.txt\").unwrap(); } expect ‰∏é unwrap ÁöÑ‰ΩøÁî®ÊñπÂºè‰∏ÄÊ†∑ÔºöËøîÂõûÊñá‰ª∂Âè•ÊüÑÊàñË∞ÉÁî® panic! ÂÆè„ÄÇexpect Âú®Ë∞ÉÁî® panic! Êó∂‰ΩøÁî®ÁöÑÈîôËØØ‰ø°ÊÅØÂ∞ÜÊòØÊàë‰ª¨‰º†ÈÄíÁªô expect ÁöÑÂèÇÊï∞ÔºåËÄå‰∏çÂÉè unwrap ÈÇ£Ê†∑‰ΩøÁî®ÈªòËÆ§ÁöÑ panic! ‰ø°ÊÅØ„ÄÇ use std::fs::File; fn main() { let greeting_file = File::open(\"hello.txt\") .expect(\"hello.txt should be included in this project\"); } ‰º†Êí≠ÈîôËØØ propagating use std::fs::File; use std::io::{self, Read}; fn read_username_from_file() -> Result { let username_file_result = File::open(\"hello.txt\"); let mut username_file = match username_file_result { Ok(file) => file, Err(e) => return Err(e), }; let mut username = String::new(); match username_file.read_to_string(&mut username) { Ok(_) => Ok(username), Err(e) => Err(e), } } ‰º†Êí≠ÈîôËØØÁöÑÁÆÄÂÜôÔºö? ËøêÁÆóÁ¨¶ Result ÂÄº‰πãÂêéÁöÑ ? Ë¢´ÂÆö‰πâ‰∏∫‰∏éÁ§∫‰æã 9-6 ‰∏≠ÂÆö‰πâÁöÑÂ§ÑÁêÜ Result ÂÄºÁöÑ match Ë°®ËææÂºèÊúâÁùÄÂÆåÂÖ®Áõ∏ÂêåÁöÑÂ∑•‰ΩúÊñπÂºè„ÄÇÂ¶ÇÊûú Result ÁöÑÂÄºÊòØ OkÔºåËøô‰∏™Ë°®ËææÂºèÂ∞Ü‰ºöËøîÂõû Ok ‰∏≠ÁöÑÂÄºËÄåÁ®ãÂ∫èÂ∞ÜÁªßÁª≠ÊâßË°å„ÄÇÂ¶ÇÊûúÂÄºÊòØ ErrÔºåErr Â∞Ü‰Ωú‰∏∫Êï¥‰∏™ÂáΩÊï∞ÁöÑËøîÂõûÂÄºÔºåÂ∞±Â•ΩÂÉè‰ΩøÁî®‰∫Ü return ÂÖ≥ÈîÆÂ≠ó‰∏ÄÊ†∑ÔºåËøôÊ†∑ÈîôËØØÂÄºÂ∞±Ë¢´‰º†Êí≠Áªô‰∫ÜË∞ÉÁî®ËÄÖ„ÄÇ use std::fs::File; use std::io::{self, Read}; fn read_username_from_file() -> Result { let mut username_file = File::open(\"hello.txt\")?; let mut username = String::new(); username_file.read_to_string(&mut username)?; Ok(username) } ? ËøêÁÆóÁ¨¶ÊâÄ‰ΩøÁî®ÁöÑÈîôËØØÂÄºË¢´‰º†ÈÄíÁªô‰∫Ü from ÂáΩÊï∞ÔºåÂÆÉÂÆö‰πâ‰∫éÊ†áÂáÜÂ∫ìÁöÑ From trait ‰∏≠ÔºåÂÖ∂Áî®Êù•Â∞ÜÈîôËØØ‰ªé‰∏ÄÁßçÁ±ªÂûãËΩ¨Êç¢‰∏∫Âè¶‰∏ÄÁßçÁ±ªÂûã„ÄÇÂΩì ? ËøêÁÆóÁ¨¶Ë∞ÉÁî® from ÂáΩÊï∞Êó∂ÔºåÊî∂Âà∞ÁöÑÈîôËØØÁ±ªÂûãË¢´ËΩ¨Êç¢‰∏∫Áî±ÂΩìÂâçÂáΩÊï∞ËøîÂõûÁ±ªÂûãÊâÄÊåáÂÆöÁöÑÈîôËØØÁ±ªÂûã„ÄÇËøôÂú®ÂΩìÂáΩÊï∞ËøîÂõûÂçï‰∏™ÈîôËØØÁ±ªÂûãÊù•‰ª£Ë°®ÊâÄÊúâÂèØËÉΩÂ§±Ë¥•ÁöÑÊñπÂºèÊó∂ÂæàÊúâÁî®ÔºåÂç≥‰ΩøÂÖ∂ÂèØËÉΩ‰ºöÂõ†ÂæàÂ§öÁßçÂéüÂõ†Â§±Ë¥•„ÄÇ Êàë‰ª¨ÂèØ‰ª•Â∞ÜÁ§∫‰æã 9-7 ‰∏≠ÁöÑ read_username_from_file ÂáΩÊï∞‰øÆÊîπ‰∏∫ËøîÂõû‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑ OurError ÈîôËØØÁ±ªÂûã„ÄÇÂ¶ÇÊûúÊàë‰ª¨‰πüÂÆö‰πâ‰∫Ü impl From for OurError Êù•‰ªé io::Error ÊûÑÈÄ†‰∏Ä‰∏™ OurError ÂÆû‰æãÔºåÈÇ£‰πà read_username_from_file ÂáΩÊï∞‰Ωì‰∏≠ÁöÑ ? ËøêÁÆóÁ¨¶Ë∞ÉÁî®‰ºöË∞ÉÁî® from Âπ∂ËΩ¨Êç¢ÈîôËØØËÄåÊó†ÈúÄÂú®ÂáΩÊï∞‰∏≠Â¢ûÂä†‰ªª‰ΩïÈ¢ùÂ§ñÁöÑ‰ª£Á†Å„ÄÇ Êàë‰ª¨ÁîöËá≥ÂèØ‰ª•Âú® ? ‰πãÂêéÁõ¥Êé•‰ΩøÁî®ÈìæÂºèÊñπÊ≥ïË∞ÉÁî®Êù•Ëøõ‰∏ÄÊ≠•Áº©Áü≠‰ª£Á†ÅÔºåÂ¶ÇÁ§∫‰æã 9-8 ÊâÄÁ§∫Ôºö use std::fs::File; use std::io::{self, Read}; fn read_username_from_file() -> Result { let mut username = String::new(); File::open(\"hello.txt\")?.read_to_string(&mut username)?; Ok(username) } more simplify: use std::fs; use std::io; fn read_username_from_file() -> Result { fs::read_to_string(\"hello.txt\") } Âú® Option ÂÄº‰∏ä‰ΩøÁî® ? ËøêÁÆóÁ¨¶ ÈîôËØØ‰ø°ÊÅØ‰πüÊèêÂà∞ ? ‰πüÂèØÁî®‰∫é Option ÂÄº„ÄÇÂ¶ÇÂêåÂØπ Result ‰ΩøÁî® ? ‰∏ÄÊ†∑ÔºåÂè™ËÉΩÂú®ËøîÂõû Option ÁöÑÂáΩÊï∞‰∏≠ÂØπ Option ‰ΩøÁî® ?„ÄÇÂú® Option ‰∏äË∞ÉÁî® ? ËøêÁÆóÁ¨¶ÁöÑË°å‰∏∫‰∏é Result Á±ª‰ººÔºöÂ¶ÇÊûúÂÄºÊòØ NoneÔºåÊ≠§Êó∂ None ‰ºö‰ªéÂáΩÊï∞‰∏≠ÊèêÂâçËøîÂõû„ÄÇÂ¶ÇÊûúÂÄºÊòØ SomeÔºåSome ‰∏≠ÁöÑÂÄº‰Ωú‰∏∫Ë°®ËææÂºèÁöÑËøîÂõûÂÄºÂêåÊó∂ÂáΩÊï∞ÁªßÁª≠„ÄÇÁ§∫‰æã 9-11 ‰∏≠Êúâ‰∏Ä‰∏™‰ªéÁªôÂÆöÊñáÊú¨‰∏≠ËøîÂõûÁ¨¨‰∏ÄË°åÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶ÁöÑÂáΩÊï∞ÁöÑ‰æãÂ≠êÔºö fn last_char_of_first_line(text: &str) -> Option { text.lines().next()?.chars().last() } Ëøô‰∏™ÂáΩÊï∞ËøîÂõû Option Âõ†‰∏∫ÂÆÉÂèØËÉΩ‰ºöÂú®Ëøô‰∏™‰ΩçÁΩÆÊâæÂà∞‰∏Ä‰∏™Â≠óÁ¨¶Ôºå‰πüÂèØËÉΩÊ≤°ÊúâÂ≠óÁ¨¶„ÄÇËøôÊÆµ‰ª£Á†ÅËé∑Âèñ text Â≠óÁ¨¶‰∏≤ slice ‰Ωú‰∏∫ÂèÇÊï∞Âπ∂Ë∞ÉÁî®ÂÖ∂ lines ÊñπÊ≥ïÔºåËøô‰ºöËøîÂõû‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤‰∏≠ÊØè‰∏ÄË°åÁöÑËø≠‰ª£Âô®„ÄÇÂõ†‰∏∫ÂáΩÊï∞Â∏åÊúõÊ£ÄÊü•Á¨¨‰∏ÄË°åÔºåÊâÄ‰ª•Ë∞ÉÁî®‰∫ÜËø≠‰ª£Âô® next Êù•Ëé∑ÂèñËø≠‰ª£Âô®‰∏≠Á¨¨‰∏Ä‰∏™ÂÄº„ÄÇÂ¶ÇÊûú text ÊòØÁ©∫Â≠óÁ¨¶‰∏≤Ôºånext Ë∞ÉÁî®‰ºöËøîÂõû NoneÔºåÊ≠§Êó∂Êàë‰ª¨ÂèØ‰ª•‰ΩøÁî® ? Êù•ÂÅúÊ≠¢Âπ∂‰ªé last_char_of_first_line ËøîÂõû None„ÄÇÂ¶ÇÊûú text ‰∏çÊòØÁ©∫Â≠óÁ¨¶‰∏≤Ôºånext ‰ºöËøîÂõû‰∏Ä‰∏™ÂåÖÂê´ text ‰∏≠Á¨¨‰∏ÄË°åÁöÑÂ≠óÁ¨¶‰∏≤ slice ÁöÑ Some ÂÄº„ÄÇ ? ‰ºöÊèêÂèñËøô‰∏™Â≠óÁ¨¶‰∏≤ sliceÔºåÁÑ∂ÂêéÂèØ‰ª•Âú®Â≠óÁ¨¶‰∏≤ slice ‰∏äË∞ÉÁî® chars Êù•Ëé∑ÂèñÂ≠óÁ¨¶ÁöÑËø≠‰ª£Âô®„ÄÇÊàë‰ª¨ÊÑüÂÖ¥Ë∂£ÁöÑÊòØÁ¨¨‰∏ÄË°åÁöÑÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶ÔºåÊâÄ‰ª•ÂèØ‰ª•Ë∞ÉÁî® last Êù•ËøîÂõûËø≠‰ª£Âô®ÁöÑÊúÄÂêé‰∏ÄÈ°π„ÄÇËøôÊòØ‰∏Ä‰∏™ OptionÔºåÂõ†‰∏∫ÊúâÂèØËÉΩÁ¨¨‰∏ÄË°åÊòØ‰∏Ä‰∏™Á©∫Â≠óÁ¨¶‰∏≤Ôºå‰æãÂ¶Ç text ‰ª•‰∏Ä‰∏™Á©∫Ë°åÂºÄÂ§¥ËÄåÂêéÈù¢ÁöÑË°åÊúâÊñáÊú¨ÔºåÂÉèÊòØ \"\\nhi\"„ÄÇ‰∏çËøáÔºåÂ¶ÇÊûúÁ¨¨‰∏ÄË°åÊúâÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶ÔºåÂÆÉ‰ºöËøîÂõûÂú®‰∏Ä‰∏™ Some ÊàêÂëò‰∏≠„ÄÇ? ËøêÁÆóÁ¨¶‰ΩúÁî®‰∫éÂÖ∂‰∏≠Áªô‰∫ÜÊàë‰ª¨‰∏Ä‰∏™ÁÆÄÊ¥ÅÁöÑË°®ËææËøôÁßçÈÄªËæëÁöÑÊñπÂºè„ÄÇÂ¶ÇÊûúÊàë‰ª¨‰∏çËÉΩÂú® Option ‰∏ä‰ΩøÁî® ? ËøêÁÆóÁ¨¶ÔºåÂàô‰∏çÂæó‰∏ç‰ΩøÁî®Êõ¥Â§öÁöÑÊñπÊ≥ïË∞ÉÁî®ÊàñËÄÖ match Ë°®ËææÂºèÊù•ÂÆûÁé∞Ëøô‰∫õÈÄªËæë„ÄÇ Ê≥®ÊÑè‰Ω†ÂèØ‰ª•Âú®ËøîÂõû Result ÁöÑÂáΩÊï∞‰∏≠ÂØπ Result ‰ΩøÁî® ? ËøêÁÆóÁ¨¶ÔºåÂèØ‰ª•Âú®ËøîÂõû Option ÁöÑÂáΩÊï∞‰∏≠ÂØπ Option ‰ΩøÁî® ? ËøêÁÆóÁ¨¶Ôºå‰ΩÜÊòØ‰∏çÂèØ‰ª•Ê∑∑ÂêàÊê≠ÈÖç„ÄÇ? ËøêÁÆóÁ¨¶‰∏ç‰ºöËá™Âä®Â∞Ü Result ËΩ¨Âåñ‰∏∫ OptionÔºåÂèç‰πã‰∫¶ÁÑ∂ÔºõÂú®Ëøô‰∫õÊÉÖÂÜµ‰∏ãÔºåÂèØ‰ª•‰ΩøÁî®Á±ª‰ºº Result ÁöÑ ok ÊñπÊ≥ïÊàñËÄÖ Option ÁöÑ ok_or ÊñπÊ≥ïÊù•ÊòæÂºèËΩ¨Êç¢„ÄÇ Âπ∏ËøêÁöÑÊòØ main ÂáΩÊï∞‰πüÂèØ‰ª•ËøîÂõû ResultÔºåÁ§∫‰æã 9-12 ‰∏≠ÁöÑ‰ª£Á†ÅÊù•Ëá™Á§∫‰æã 9-10 ‰∏çËøá‰øÆÊîπ‰∫Ü main ÁöÑËøîÂõûÂÄº‰∏∫ Result> Âπ∂Âú®ÁªìÂ∞æÂ¢ûÂä†‰∫Ü‰∏Ä‰∏™ Ok(()) ‰Ωú‰∏∫ËøîÂõûÂÄº„ÄÇËøôÊÆµ‰ª£Á†ÅÂèØ‰ª•ÁºñËØëÔºö use std::error::Error; use std::fs::File; fn main() -> Result> { let greeting_file = File::open(\"hello.txt\")?; Ok(()) } Box Á±ªÂûãÊòØ‰∏Ä‰∏™ trait ÂØπË±°Ôºàtrait objectÔºâÁ¨¨ÂçÅÂÖ´Á´† È°æÂèä‰∏çÂêåÁ±ªÂûãÂÄºÁöÑ trait ÂØπË±°‚Äù ÈÉ®ÂàÜ‰ºöÂÅö‰ªãÁªç„ÄÇÁõÆÂâçÂèØ‰ª•Â∞Ü Box ÁêÜËß£‰∏∫ ‚Äú‰ªª‰ΩïÁ±ªÂûãÁöÑÈîôËØØ‚Äù„ÄÇÂú®ËøîÂõû Box ÈîôËØØÁ±ªÂûã main ÂáΩÊï∞‰∏≠ÂØπ Result ‰ΩøÁî® ? ÊòØÂÖÅËÆ∏ÁöÑÔºåÂõ†‰∏∫ÂÆÉÂÖÅËÆ∏‰ªª‰Ωï Err ÂÄºÊèêÂâçËøîÂõû„ÄÇÂç≥‰æø main ÂáΩÊï∞‰Ωì‰ªéÊù•Âè™‰ºöËøîÂõû std::io::Error ÈîôËØØÁ±ªÂûãÔºåÈÄöËøáÊåáÂÆö BoxÔºåËøô‰∏™Á≠æÂêç‰πü‰ªçÊòØÊ≠£Á°ÆÁöÑÔºåÁîöËá≥ÂΩì main ÂáΩÊï∞‰Ωì‰∏≠Â¢ûÂä†Êõ¥Â§öËøîÂõûÂÖ∂‰ªñÈîôËØØÁ±ªÂûãÁöÑ‰ª£Á†ÅÊó∂‰πüÊòØÂ¶ÇÊ≠§„ÄÇ ÂΩì main ÂáΩÊï∞ËøîÂõû ResultÔºåÂ¶ÇÊûú main ËøîÂõû Ok(()) ÂèØÊâßË°åÁ®ãÂ∫è‰ºö‰ª• 0 ÂÄºÈÄÄÂá∫ÔºåËÄåÂ¶ÇÊûú main ËøîÂõû Err ÂÄºÂàô‰ºö‰ª•ÈùûÈõ∂ÂÄºÈÄÄÂá∫ÔºõÊàêÂäüÈÄÄÂá∫ÁöÑÁ®ãÂ∫è‰ºöËøîÂõûÊï¥Êï∞ 0ÔºåËøêË°åÈîôËØØÁöÑÁ®ãÂ∫è‰ºöËøîÂõûÈùû 0 ÁöÑÊï¥Êï∞„ÄÇRust ‰πü‰ºö‰ªé‰∫åËøõÂà∂Á®ãÂ∫è‰∏≠ËøîÂõû‰∏éËøô‰∏™ÊÉØ‰æãÁõ∏ÂÖºÂÆπÁöÑÊï¥Êï∞„ÄÇ main ÂáΩÊï∞‰πüÂèØ‰ª•ËøîÂõû‰ªª‰ΩïÂÆûÁé∞‰∫Ü std::process::Termination trait ÁöÑÁ±ªÂûãÔºåÂÆÉÂåÖÂê´‰∫Ü‰∏Ä‰∏™ËøîÂõû ExitCode ÁöÑ report ÂáΩÊï∞„ÄÇËØ∑Êü•ÈòÖÊ†áÂáÜÂ∫ìÊñáÊ°£‰∫ÜËß£Êõ¥Â§ö‰∏∫Ëá™ÂÆö‰πâÁ±ªÂûãÂÆûÁé∞ Termination trait ÁöÑÁªÜËäÇ„ÄÇ Áé∞Âú®Êàë‰ª¨ËÆ®ËÆ∫Ëøá‰∫ÜË∞ÉÁî® panic! ÊàñËøîÂõû Result ÁöÑÁªÜËäÇÔºåÊòØÊó∂ÂÄôÂõûÂà∞ÂÆÉ‰ª¨ÂêÑËá™ÈÄÇÂêàÂì™‰∫õÂú∫ÊôØÁöÑËØùÈ¢ò‰∫Ü„ÄÇ ÂàõÂª∫Ëá™ÂÆö‰πâÁ±ªÂûãËøõË°åÊúâÊïàÊÄßÈ™åËØÅ pub struct Guess { value: i32, } impl Guess { pub fn new(value: i32) -> Guess { if value 100 { panic!(\"Guess value must be between 1 and 100, got {value}.\"); } Guess { value } } pub fn value(&self) -> i32 { self.value } } Ch10: Generic Types, Traits, and lifetimes Generic Data Types Traits: Defining Shared Behavior Validating Referenvces with Liftimes Traits trait ÂÆö‰πâ‰∫ÜÊüê‰∏™ÁâπÂÆöÁ±ªÂûãÊã•ÊúâÂèØËÉΩ‰∏éÂÖ∂‰ªñÁ±ªÂûãÂÖ±‰∫´ÁöÑÂäüËÉΩ„ÄÇÂèØ‰ª•ÈÄöËøá trait ‰ª•‰∏ÄÁßçÊäΩË±°ÁöÑÊñπÂºèÂÆö‰πâÂÖ±ÂêåË°å‰∏∫„ÄÇ ÂèØ‰ª•‰ΩøÁî® trait bounds ÊåáÂÆöÊ≥õÂûãÊòØ‰ªª‰ΩïÊã•ÊúâÁâπÂÆöË°å‰∏∫ÁöÑÁ±ªÂûã„ÄÇ ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÈôêÂà∂ÊòØÔºåÂè™ÊúâÂú® trait ÊàñÁ±ªÂûãËá≥Â∞ëÊúâ‰∏Ä‰∏™Â±û‰∫éÂΩìÂâç crate Êó∂ÔºåÊàë‰ª¨ÊâçËÉΩÂØπÁ±ªÂûãÂÆûÁé∞ËØ• trait„ÄÇ ‰æãÂ¶ÇÔºåÂèØ‰ª•‰∏∫ aggregator crate ÁöÑËá™ÂÆö‰πâÁ±ªÂûã Tweet ÂÆûÁé∞Â¶ÇÊ†áÂáÜÂ∫ì‰∏≠ÁöÑ Display traitÔºåËøôÊòØÂõ†‰∏∫ Tweet Á±ªÂûã‰Ωç‰∫é aggregator crate Êú¨Âú∞ÁöÑ‰ΩúÁî®Âüü‰∏≠„ÄÇ Á±ª‰ººÂú∞Ôºå‰πüÂèØ‰ª•Âú® aggregator crate ‰∏≠‰∏∫ Vec ÂÆûÁé∞ SummaryÔºåËøôÊòØÂõ†‰∏∫ Summary trait ‰Ωç‰∫é aggregator crate Êú¨Âú∞‰ΩúÁî®Âüü‰∏≠„ÄÇ ‰ΩÜÊòØ‰∏çËÉΩ‰∏∫Â§ñÈÉ®Á±ªÂûãÂÆûÁé∞Â§ñÈÉ® trait„ÄÇ‰æãÂ¶ÇÔºå‰∏çËÉΩÂú® aggregator crate ‰∏≠‰∏∫ Vec ÂÆûÁé∞ Display trait„ÄÇËøôÊòØÂõ†‰∏∫ Display Âíå Vec ÈÉΩÂÆö‰πâ‰∫éÊ†áÂáÜÂ∫ì‰∏≠ÔºåÂÆÉ‰ª¨Âπ∂‰∏ç‰Ωç‰∫é aggregator crate Êú¨Âú∞‰ΩúÁî®Âüü‰∏≠„ÄÇËøô‰∏™ÈôêÂà∂ÊòØË¢´Áß∞‰∏∫ Áõ∏Âπ≤ÊÄßÔºàcoherenceÔºâÁöÑÁ®ãÂ∫èÂ±ûÊÄßÁöÑ‰∏ÄÈÉ®ÂàÜÔºåÊàñËÄÖÊõ¥ÂÖ∑‰ΩìÁöÑËØ¥ÊòØ Â≠§ÂÑøËßÑÂàôÔºàorphan ruleÔºâÔºåÂÖ∂ÂæóÂêç‰∫é‰∏çÂ≠òÂú®Áà∂Á±ªÂûã„ÄÇËøôÊù°ËßÑÂàôÁ°Æ‰øù‰∫ÜÂÖ∂‰ªñ‰∫∫ÁºñÂÜôÁöÑ‰ª£Á†Å‰∏ç‰ºöÁ†¥Âùè‰Ω†‰ª£Á†ÅÔºåÂèç‰πã‰∫¶ÁÑ∂„ÄÇÊ≤°ÊúâËøôÊù°ËßÑÂàôÁöÑËØùÔºå‰∏§‰∏™ crate ÂèØ‰ª•ÂàÜÂà´ÂØπÁõ∏ÂêåÁ±ªÂûãÂÆûÁé∞Áõ∏ÂêåÁöÑ traitÔºåËÄå Rust Â∞ÜÊó†‰ªéÂæóÁü•Â∫îËØ•‰ΩøÁî®Âì™‰∏Ä‰∏™ÂÆûÁé∞„ÄÇ Validating Referenvces with Liftimes: ‰ΩøÁî®ÁîüÂëΩÂë®ÊúüÁ°Æ‰øùÂºïÁî®ÊúâÊïà ÁîüÂëΩÂë®ÊúüÈÅøÂÖç‰∫ÜÊÇ¨ÂûÇÂºïÁî® dangling reference ÂÄüÁî®Ê£ÄÊü•Âô® borrow checker: ÊØîËæÉ‰ΩúÁî®Âüü‰ª•Á°Æ‰øùÊâÄÊúâÁöÑÂÄüÁî®ÈÉΩÊòØÊúâÊïàÁöÑ ÂáΩÊï∞‰∏≠ÁöÑÊ≥õÂûãÁîüÂëΩÂë®Êúü ÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ËØ≠Ê≥ï ÂáΩÊï∞Á≠æÂêç‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ Ê∑±ÂÖ•ÁêÜËß£ÁîüÂëΩÂë®Êúü ÁªìÊûÑ‰ΩìÂÆö‰πâ‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ ÁîüÂëΩÂë®ÊúüÁúÅÁï• Lifetime Elision ÊñπÊ≥ïÂÆö‰πâ‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ ÈùôÊÄÅÁîüÂëΩÂë®Êúü ÁªìÂêàÊ≥õÂûãÁ±ªÂûãÂèÇÊï∞„ÄÅtrait bounds ÂíåÁîüÂëΩÂë®Êúü ÊÄªÁªì fn longest(x: &str, y: &str) -> &str { if x.len() > y.len() { x } else { y } } $ cargo run Compiling chapter10 v0.1.0 (file:///projects/chapter10) error[E0106]: missing lifetime specifier --> src/main.rs:9:33 | 9 | fn longest(x: &str, y: &str) -> &str { | ---- ---- ^ expected named lifetime parameter | = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y` help: consider introducing a named lifetime parameter | 9 | fn longest(x: &'a str, y: &'a str) -> &'a str { | ++++ ++ ++ ++ For more information about this error, try `rustc --explain E0106`. error: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error ÊèêÁ§∫ÊñáÊú¨Êè≠Á§∫‰∫ÜËøîÂõûÂÄºÈúÄË¶Å‰∏Ä‰∏™Ê≥õÂûãÁîüÂëΩÂë®ÊúüÂèÇÊï∞ÔºåÂõ†‰∏∫ Rust Âπ∂‰∏çÁü•ÈÅìÂ∞ÜË¶ÅËøîÂõûÁöÑÂºïÁî®ÊòØÊåáÂêë x Êàñ y„ÄÇ‰∫ãÂÆû‰∏äÊàë‰ª¨‰πü‰∏çÁü•ÈÅìÔºåÂõ†‰∏∫ÂáΩÊï∞‰Ωì‰∏≠ if ÂùóËøîÂõû‰∏Ä‰∏™ x ÁöÑÂºïÁî®ËÄå else ÂùóËøîÂõû‰∏Ä‰∏™ y ÁöÑÂºïÁî®ÔºÅ ÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ËØ≠Ê≥ï ÂáΩÊï∞Á≠æÂêç‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ Êàë‰ª¨Â∏åÊúõÂáΩÊï∞Á≠æÂêçË°®ËææÂ¶Ç‰∏ãÈôêÂà∂ÔºöËøô‰∏§‰∏™ÂèÇÊï∞ÂíåËøîÂõûÁöÑÂºïÁî®Â≠òÊ¥ªÁöÑ‰∏ÄÊ†∑‰πÖ„ÄÇÔºà‰∏§‰∏™ÔºâÂèÇÊï∞ÂíåËøîÂõûÁöÑÂºïÁî®ÁöÑÁîüÂëΩÂë®ÊúüÊòØÁõ∏ÂÖ≥ÁöÑ„ÄÇÂ∞±ÂÉèÁ§∫‰æã 10-21 ‰∏≠Âú®ÊØè‰∏™ÂºïÁî®‰∏≠ÈÉΩÂä†‰∏ä‰∫Ü 'a ÈÇ£Ê†∑„ÄÇ fn longest(x: &'a str, y: &'a str) -> &'a str { if x.len() > y.len() { x } else { y } } Áé∞Âú®ÂáΩÊï∞Á≠æÂêçË°®ÊòéÂØπ‰∫éÊüê‰∫õÁîüÂëΩÂë®Êúü 'aÔºåÂáΩÊï∞‰ºöËé∑Âèñ‰∏§‰∏™ÂèÇÊï∞ÔºåÂÆÉ‰ª¨ÈÉΩÊòØ‰∏éÁîüÂëΩÂë®Êúü 'a Â≠òÂú®ÁöÑËá≥Â∞ë‰∏ÄÊ†∑ÈïøÁöÑÂ≠óÁ¨¶‰∏≤ slice„ÄÇÂáΩÊï∞‰ºöËøîÂõû‰∏Ä‰∏™ÂêåÊ†∑‰πü‰∏éÁîüÂëΩÂë®Êúü 'a Â≠òÂú®ÁöÑËá≥Â∞ë‰∏ÄÊ†∑ÈïøÁöÑÂ≠óÁ¨¶‰∏≤ slice„ÄÇÂÆÉÁöÑÂÆûÈôÖÂê´‰πâÊòØ longest ÂáΩÊï∞ËøîÂõûÁöÑÂºïÁî®ÁöÑÁîüÂëΩÂë®Êúü‰∏éÂáΩÊï∞ÂèÇÊï∞ÊâÄÂºïÁî®ÁöÑÂÄºÁöÑÁîüÂëΩÂë®ÊúüÁöÑËæÉÂ∞èËÄÖ‰∏ÄËá¥„ÄÇËøô‰∫õÂÖ≥Á≥ªÂ∞±ÊòØÊàë‰ª¨Â∏åÊúõ Rust ÂàÜÊûê‰ª£Á†ÅÊó∂ÊâÄ‰ΩøÁî®ÁöÑ„ÄÇ ËÆ∞‰ΩèÈÄöËøáÂú®ÂáΩÊï∞Á≠æÂêç‰∏≠ÊåáÂÆöÁîüÂëΩÂë®ÊúüÂèÇÊï∞Êó∂ÔºåÊàë‰ª¨Âπ∂Ê≤°ÊúâÊîπÂèò‰ªª‰Ωï‰º†ÂÖ•ÂÄºÊàñËøîÂõûÂÄºÁöÑÁîüÂëΩÂë®ÊúüÔºåËÄåÊòØÊåáÂá∫‰ªª‰Ωï‰∏çÊª°Ë∂≥Ëøô‰∏™Á∫¶ÊùüÊù°‰ª∂ÁöÑÂÄºÈÉΩÂ∞ÜË¢´ÂÄüÁî®Ê£ÄÊü•Âô®ÊãíÁªù„ÄÇÊ≥®ÊÑè longest ÂáΩÊï∞Âπ∂‰∏çÈúÄË¶ÅÁü•ÈÅì x Âíå y ÂÖ∑‰Ωì‰ºöÂ≠òÂú®Â§ö‰πÖÔºåËÄåÂè™ÈúÄË¶ÅÁü•ÈÅìÊúâÊüê‰∏™ÂèØ‰ª•Ë¢´ 'a Êõø‰ª£ÁöÑ‰ΩúÁî®ÂüüÂ∞Ü‰ºöÊª°Ë∂≥Ëøô‰∏™Á≠æÂêç„ÄÇ ÂΩìÂú®ÂáΩÊï∞‰∏≠‰ΩøÁî®ÁîüÂëΩÂë®ÊúüÊ≥®Ëß£Êó∂ÔºåËøô‰∫õÊ≥®Ëß£Âá∫Áé∞Âú®ÂáΩÊï∞Á≠æÂêç‰∏≠ÔºåËÄå‰∏çÂ≠òÂú®‰∫éÂáΩÊï∞‰Ωì‰∏≠ÁöÑ‰ªª‰Ωï‰ª£Á†Å‰∏≠„ÄÇÁîüÂëΩÂë®ÊúüÊ≥®Ëß£Êàê‰∏∫‰∫ÜÂáΩÊï∞Á∫¶ÂÆöÁöÑ‰∏ÄÈÉ®ÂàÜÔºåÈùûÂ∏∏ÂÉèÁ≠æÂêç‰∏≠ÁöÑÁ±ªÂûã„ÄÇËÆ©ÂáΩÊï∞Á≠æÂêçÂåÖÂê´ÁîüÂëΩÂë®ÊúüÁ∫¶ÂÆöÊÑèÂë≥ÁùÄ Rust ÁºñËØëÂô®ÁöÑÂ∑•‰ΩúÂèòÂæóÊõ¥ÁÆÄÂçï‰∫Ü„ÄÇÂ¶ÇÊûúÂáΩÊï∞Ê≥®Ëß£ÊúâËØØÊàñËÄÖË∞ÉÁî®ÊñπÊ≥ï‰∏çÂØπÔºåÁºñËØëÂô®ÈîôËØØÂèØ‰ª•Êõ¥ÂáÜÁ°ÆÂú∞ÊåáÂá∫‰ª£Á†ÅÂíåÈôêÂà∂ÁöÑÈÉ®ÂàÜ„ÄÇÂ¶ÇÊûú‰∏çËøô‰πàÂÅöÁöÑËØùÔºåRust ÁºñËØë‰ºöÂØπÊàë‰ª¨ÊúüÊúõÁöÑÁîüÂëΩÂë®ÊúüÂÖ≥Á≥ªÂÅöÊõ¥Â§öÁöÑÊé®Êñ≠ÔºåËøôÊ†∑ÁºñËØëÂô®ÂèØËÉΩÂè™ËÉΩÊåáÂá∫Á¶ªÂá∫ÈóÆÈ¢òÂú∞ÊñπÂæàÂ§öÊ≠•‰πãÂ§ñÁöÑ‰ª£Á†Å„ÄÇ ÂΩìÂÖ∑‰ΩìÁöÑÂºïÁî®Ë¢´‰º†ÈÄíÁªô longest Êó∂ÔºåË¢´ 'a ÊâÄÊõø‰ª£ÁöÑÂÖ∑‰ΩìÁîüÂëΩÂë®ÊúüÊòØ x ÁöÑ‰ΩúÁî®Âüü‰∏é y ÁöÑ‰ΩúÁî®ÂüüÁõ∏ÈáçÂè†ÁöÑÈÇ£‰∏ÄÈÉ®ÂàÜ„ÄÇÊç¢‰∏ÄÁßçËØ¥Ê≥ïÂ∞±ÊòØÊ≥õÂûãÁîüÂëΩÂë®Êúü 'a ÁöÑÂÖ∑‰ΩìÁîüÂëΩÂë®ÊúüÁ≠âÂêå‰∫é x Âíå y ÁöÑÁîüÂëΩÂë®Êúü‰∏≠ËæÉÂ∞èÁöÑÈÇ£‰∏Ä‰∏™„ÄÇÂõ†‰∏∫Êàë‰ª¨Áî®Áõ∏ÂêåÁöÑÁîüÂëΩÂë®ÊúüÂèÇÊï∞ 'a Ê†áÊ≥®‰∫ÜËøîÂõûÁöÑÂºïÁî®ÂÄºÔºåÊâÄ‰ª•ËøîÂõûÁöÑÂºïÁî®ÂÄºÂ∞±ËÉΩ‰øùËØÅÂú® x Âíå y ‰∏≠ËæÉÁü≠ÁöÑÈÇ£‰∏™ÁîüÂëΩÂë®ÊúüÁªìÊùü‰πãÂâç‰øùÊåÅÊúâÊïà„ÄÇ Ê∑±ÂÖ•ÁêÜËß£ÁîüÂëΩÂë®Êúü ÂΩì‰ªéÂáΩÊï∞ËøîÂõû‰∏Ä‰∏™ÂºïÁî®ÔºåËøîÂõûÂÄºÁöÑÁîüÂëΩÂë®ÊúüÂèÇÊï∞ÈúÄË¶Å‰∏é‰∏Ä‰∏™ÂèÇÊï∞ÁöÑÁîüÂëΩÂë®ÊúüÂèÇÊï∞Áõ∏ÂåπÈÖç„ÄÇÂ¶ÇÊûúËøîÂõûÁöÑÂºïÁî® Ê≤°Êúâ ÊåáÂêë‰ªª‰Ωï‰∏Ä‰∏™ÂèÇÊï∞ÔºåÈÇ£‰πàÂîØ‰∏ÄÁöÑÂèØËÉΩÂ∞±ÊòØÂÆÉÊåáÂêë‰∏Ä‰∏™ÂáΩÊï∞ÂÜÖÈÉ®ÂàõÂª∫ÁöÑÂÄº„ÄÇÁÑ∂ËÄåÂÆÉÂ∞Ü‰ºöÊòØ‰∏Ä‰∏™ÊÇ¨ÂûÇÂºïÁî®ÔºåÂõ†‰∏∫ÂÆÉÂ∞Ü‰ºöÂú®ÂáΩÊï∞ÁªìÊùüÊó∂Á¶ªÂºÄ‰ΩúÁî®Âüü„ÄÇ Áªº‰∏äÔºåÁîüÂëΩÂë®ÊúüËØ≠Ê≥ïÊòØÁî®‰∫éÂ∞ÜÂáΩÊï∞ÁöÑÂ§ö‰∏™ÂèÇÊï∞‰∏éÂÖ∂ËøîÂõûÂÄºÁöÑÁîüÂëΩÂë®ÊúüËøõË°åÂÖ≥ËÅîÁöÑ„ÄÇ‰∏ÄÊó¶ÂÆÉ‰ª¨ÂΩ¢Êàê‰∫ÜÊüêÁßçÂÖ≥ËÅîÔºåRust Â∞±Êúâ‰∫ÜË∂≥Â§üÁöÑ‰ø°ÊÅØÊù•ÂÖÅËÆ∏ÂÜÖÂ≠òÂÆâÂÖ®ÁöÑÊìç‰ΩúÂπ∂ÈòªÊ≠¢‰ºö‰∫ßÁîüÊÇ¨ÂûÇÊåáÈíà‰∫¶ÊàñÊòØËøùÂèçÂÜÖÂ≠òÂÆâÂÖ®ÁöÑË°å‰∏∫„ÄÇ ÁªìÊûÑ‰ΩìÂÆö‰πâ‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ struct ImportantExcerpt { part: &'a str, } fn main() { let novel = String::from(\"Call me Ishmael. Some years ago...\"); let first_sentence = novel.split('.').next().unwrap(); let i = ImportantExcerpt { part: first_sentence, }; } Ëøô‰∏™ÁªìÊûÑ‰ΩìÊúâÂîØ‰∏Ä‰∏Ä‰∏™Â≠óÊÆµ partÔºåÂÆÉÂ≠òÊîæ‰∫Ü‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ sliceÔºåËøôÊòØ‰∏Ä‰∏™ÂºïÁî®„ÄÇÁ±ª‰ºº‰∫éÊ≥õÂûãÂèÇÊï∞Á±ªÂûãÔºåÂøÖÈ°ªÂú®ÁªìÊûÑ‰ΩìÂêçÁß∞ÂêéÈù¢ÁöÑÂ∞ñÊã¨Âè∑‰∏≠Â£∞ÊòéÊ≥õÂûãÁîüÂëΩÂë®ÊúüÂèÇÊï∞Ôºå‰ª•‰æøÂú®ÁªìÊûÑ‰ΩìÂÆö‰πâ‰∏≠‰ΩøÁî®ÁîüÂëΩÂë®ÊúüÂèÇÊï∞„ÄÇËøô‰∏™Ê≥®Ëß£ÊÑèÂë≥ÁùÄ ImportantExcerpt ÁöÑÂÆû‰æã‰∏çËÉΩÊØîÂÖ∂ part Â≠óÊÆµ‰∏≠ÁöÑÂºïÁî®Â≠òÂú®ÁöÑÊõ¥‰πÖ„ÄÇ ËøôÈáåÁöÑ main ÂáΩÊï∞ÂàõÂª∫‰∫Ü‰∏Ä‰∏™ ImportantExcerpt ÁöÑÂÆû‰æãÔºåÂÆÉÂ≠òÊîæ‰∫ÜÂèòÈáè novel ÊâÄÊã•ÊúâÁöÑ String ÁöÑÁ¨¨‰∏Ä‰∏™Âè•Â≠êÁöÑÂºïÁî®„ÄÇnovel ÁöÑÊï∞ÊçÆÂú® ImportantExcerpt ÂÆû‰æãÂàõÂª∫‰πãÂâçÂ∞±Â≠òÂú®„ÄÇÂè¶Â§ñÔºåÁõ¥Âà∞ ImportantExcerpt Á¶ªÂºÄ‰ΩúÁî®Âüü‰πãÂêé novel ÈÉΩ‰∏ç‰ºöÁ¶ªÂºÄ‰ΩúÁî®ÂüüÔºåÊâÄ‰ª• ImportantExcerpt ÂÆû‰æã‰∏≠ÁöÑÂºïÁî®ÊòØÊúâÊïàÁöÑ„ÄÇ ÁîüÂëΩÂë®ÊúüÁúÅÁï•ÔºàLifetime ElisionÔºâ ÁúÅÁï•ËßÑÂàôÂπ∂‰∏çÊèê‰æõÂÆåÊï¥ÁöÑÊé®Êñ≠ÔºöÂ¶ÇÊûú Rust Âú®ÊòéÁ°ÆÈÅµÂÆàËøô‰∫õËßÑÂàôÁöÑÂâçÊèê‰∏ãÂèòÈáèÁöÑÁîüÂëΩÂë®Êúü‰ªçÁÑ∂ÊòØÊ®°Ê£±‰∏§ÂèØÁöÑËØùÔºåÂÆÉ‰∏ç‰ºöÁåúÊµãÂâ©‰ΩôÂºïÁî®ÁöÑÁîüÂëΩÂë®ÊúüÂ∫îËØ•ÊòØ‰ªÄ‰πà„ÄÇÁºñËØëÂô®‰ºöÂú®ÂèØ‰ª•ÈÄöËøáÂ¢ûÂä†ÁîüÂëΩÂë®ÊúüÊ≥®Ëß£Êù•Ëß£ÂÜ≥ÈîôËØØÈóÆÈ¢òÁöÑÂú∞ÊñπÁªôÂá∫‰∏Ä‰∏™ÈîôËØØÊèêÁ§∫ÔºåËÄå‰∏çÊòØËøõË°åÊé®Êñ≠ÊàñÁåúÊµã„ÄÇ ÂáΩÊï∞ÊàñÊñπÊ≥ïÁöÑÂèÇÊï∞ÁöÑÁîüÂëΩÂë®ÊúüË¢´Áß∞‰∏∫ ËæìÂÖ•ÁîüÂëΩÂë®ÊúüÔºàinput lifetimesÔºâÔºåËÄåËøîÂõûÂÄºÁöÑÁîüÂëΩÂë®ÊúüË¢´Áß∞‰∏∫ ËæìÂá∫ÁîüÂëΩÂë®ÊúüÔºàoutput lifetimesÔºâ„ÄÇ ÁºñËØëÂô®ÈááÁî®‰∏âÊù°ËßÑÂàôÊù•Âà§Êñ≠ÂºïÁî®‰ΩïÊó∂‰∏çÈúÄË¶ÅÊòéÁ°ÆÁöÑÊ≥®Ëß£„ÄÇÁ¨¨‰∏ÄÊù°ËßÑÂàôÈÄÇÁî®‰∫éËæìÂÖ•ÁîüÂëΩÂë®ÊúüÔºåÂêé‰∏§Êù°ËßÑÂàôÈÄÇÁî®‰∫éËæìÂá∫ÁîüÂëΩÂë®Êúü„ÄÇÂ¶ÇÊûúÁºñËØëÂô®Ê£ÄÊü•ÂÆåËøô‰∏âÊù°ËßÑÂàôÂêé‰ªçÁÑ∂Â≠òÂú®Ê≤°ÊúâËÆ°ÁÆóÂá∫ÁîüÂëΩÂë®ÊúüÁöÑÂºïÁî®ÔºåÁºñËØëÂô®Â∞Ü‰ºöÂÅúÊ≠¢Âπ∂ÁîüÊàêÈîôËØØ„ÄÇËøô‰∫õËßÑÂàôÈÄÇÁî®‰∫é fn ÂÆö‰πâÔºå‰ª•Âèä impl Âùó„ÄÇ Á¨¨‰∏ÄÊù°ËßÑÂàôÊòØÁºñËØëÂô®‰∏∫ÊØè‰∏Ä‰∏™ÂºïÁî®ÂèÇÊï∞ÈÉΩÂàÜÈÖç‰∏Ä‰∏™ÁîüÂëΩÂë®ÊúüÂèÇÊï∞„ÄÇÊç¢Âè•ËØùËØ¥Â∞±ÊòØÔºåÂáΩÊï∞Êúâ‰∏Ä‰∏™ÂºïÁî®ÂèÇÊï∞ÁöÑÂ∞±Êúâ‰∏Ä‰∏™ÁîüÂëΩÂë®ÊúüÂèÇÊï∞Ôºöfn foo(x: &'a i32)ÔºåÊúâ‰∏§‰∏™ÂºïÁî®ÂèÇÊï∞ÁöÑÂáΩÊï∞Â∞±Êúâ‰∏§‰∏™‰∏çÂêåÁöÑÁîüÂëΩÂë®ÊúüÂèÇÊï∞Ôºåfn foo(x: &'a i32, y: &'b i32)Ôºå‰æùÊ≠§Á±ªÊé®„ÄÇ Á¨¨‰∫åÊù°ËßÑÂàôÊòØÂ¶ÇÊûúÂè™Êúâ‰∏Ä‰∏™ËæìÂÖ•ÁîüÂëΩÂë®ÊúüÂèÇÊï∞ÔºåÈÇ£‰πàÂÆÉË¢´Ëµã‰∫àÊâÄÊúâËæìÂá∫ÁîüÂëΩÂë®ÊúüÂèÇÊï∞Ôºöfn foo(x: &'a i32) -> &'a i32„ÄÇ Á¨¨‰∏âÊù°ËßÑÂàôÊòØÂ¶ÇÊûúÊñπÊ≥ïÊúâÂ§ö‰∏™ËæìÂÖ•ÁîüÂëΩÂë®ÊúüÂèÇÊï∞Âπ∂‰∏îÂÖ∂‰∏≠‰∏Ä‰∏™ÂèÇÊï∞ÊòØ &self Êàñ &mut selfÔºåËØ¥ÊòéÊòØ‰∏™ÂØπË±°ÁöÑÊñπÊ≥ï (method)(ËØëËÄÖÊ≥®ÔºöËøôÈáåÊ∂âÂèä rust ÁöÑÈù¢ÂêëÂØπË±°ÂèÇËßÅ 17 Á´†)ÔºåÈÇ£‰πàÊâÄÊúâËæìÂá∫ÁîüÂëΩÂë®ÊúüÂèÇÊï∞Ë¢´Ëµã‰∫à self ÁöÑÁîüÂëΩÂë®Êúü„ÄÇÁ¨¨‰∏âÊù°ËßÑÂàô‰ΩøÂæóÊñπÊ≥ïÊõ¥ÂÆπÊòìËØªÂÜôÔºåÂõ†‰∏∫Âè™ÈúÄÊõ¥Â∞ëÁöÑÁ¨¶Âè∑„ÄÇ ÊñπÊ≥ïÂÆö‰πâ‰∏≠ÁöÑÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ impl ImportantExcerpt { fn announce_and_return_part(&self, announcement: &str) -> &str { println!(\"Attention please: {announcement}\"); self.part } } ÈùôÊÄÅÁîüÂëΩÂë®Êúü 'staticÔºåÂÖ∂ÁîüÂëΩÂë®ÊúüËÉΩÂ§üÂ≠òÊ¥ª‰∫éÊï¥‰∏™Á®ãÂ∫èÊúüÈó¥„ÄÇÊâÄÊúâÁöÑÂ≠óÁ¨¶‰∏≤Â≠óÈù¢ÂÄºÈÉΩÊã•Êúâ 'static ÁîüÂëΩÂë®Êúü ÁªìÂêàÊ≥õÂûãÁ±ªÂûãÂèÇÊï∞„ÄÅtrait bounds ÂíåÁîüÂëΩÂë®Êúü use std::fmt::Display; fn longest_with_an_announcement( x: &'a str, y: &'a str, ann: T, ) -> &'a str where T: Display, { println!(\"Announcement! {ann}\"); if x.len() > y.len() { x } else { y } } Ê≥õÂûãÁ±ªÂûãÂèÇÊï∞ÊÑèÂë≥ÁùÄ‰ª£Á†ÅÂèØ‰ª•ÈÄÇÁî®‰∫é‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇtrait Âíå trait bounds ‰øùËØÅ‰∫ÜÂç≥‰ΩøÁ±ªÂûãÊòØÊ≥õÂûãÁöÑÔºåËøô‰∫õÁ±ªÂûã‰πü‰ºöÊã•ÊúâÊâÄÈúÄË¶ÅÁöÑË°å‰∏∫„ÄÇÁî±ÁîüÂëΩÂë®ÊúüÊ≥®Ëß£ÊâÄÊåáÂÆöÁöÑÂºïÁî®ÁîüÂëΩÂë®Êúü‰πãÈó¥ÁöÑÂÖ≥Á≥ª‰øùËØÅ‰∫ÜËøô‰∫õÁÅµÊ¥ªÂ§öÂèòÁöÑ‰ª£Á†Å‰∏ç‰ºöÂá∫Áé∞ÊÇ¨ÂûÇÂºïÁî®„ÄÇËÄåÊâÄÊúâÁöÑËøô‰∏ÄÂàáÂèëÁîüÂú®ÁºñËØëÊó∂ÊâÄ‰ª•‰∏ç‰ºöÂΩ±ÂìçËøêË°åÊó∂ÊïàÁéáÔºÅ Ch11: Writing Automated Tests How to write Controlling How Tests Are Run Test Orgnizations How to write tests ÁºñÂÜôÊµãËØïÂáΩÊï∞Ôºö ËÆæÁΩÆ‰ªª‰ΩïÊâÄÈúÄÁöÑÊï∞ÊçÆÊàñÁä∂ÊÄÅ ËøêË°åÈúÄË¶ÅÊµãËØïÁöÑ‰ª£Á†Å Êñ≠Ë®ÄÂÖ∂ÁªìÊûúÊòØÊàë‰ª¨ÊâÄÊúüÊúõÁöÑ Rust Êèê‰æõÁöÑÊµãËØïÂäüËÉΩÔºötest Attribute, some Macros, and should_panic Attribute. Example: pub fn add(left: usize, right: usize) -> usize { left + right } #[cfg(test)] mod tests { use super::*; #[test] fn it_works() { let result = add(2, 2); assert_eq!(result, 4); } } #[cfg(test)]: Ê†áËÆ∞Ê®°Âùó‰∏∫ÊµãËØïÊ®°ÂùóÔºåÂè™ÊúâÂú®ËøêË°å cargo test Êó∂Êâç‰ºöÁºñËØëÂíåËøêË°åÊµãËØï‰ª£Á†Å„ÄÇ use super::*;: ÂØºÂÖ•Áà∂Ê®°ÂùóÔºåËøôÊ†∑ÂèØ‰ª•Áõ¥Êé•Ë∞ÉÁî®Áà∂Ê®°Âùó‰∏≠ÁöÑÂáΩÊï∞„ÄÇ #[test]: Ê†áËÆ∞ÂáΩÊï∞‰∏∫ÊµãËØïÂáΩÊï∞ÔºåÂè™ÊúâÂú®ËøêË°å cargo test Êó∂Êâç‰ºöËøêË°åÊµãËØïÂáΩÊï∞„ÄÇ assert_eq!(result, 4);: Êñ≠Ë®ÄÂáΩÊï∞ÁöÑËøîÂõûÂÄºÁ≠â‰∫é 4„ÄÇ cargo test: ËøêË°åÊµãËØï„ÄÇ assert!(expression): Êñ≠Ë®ÄË°®ËææÂºè‰∏∫ true„ÄÇ assert_ne!(exp1, exp2): Êñ≠Ë®ÄË°®ËææÂºè exp1 != exp2„ÄÇ assert_eq!(exp1, exp2): Êñ≠Ë®ÄË°®ËææÂºè exp1 == exp2„ÄÇ assert_approx_eq!(exp1, exp2, epsilon): Êñ≠Ë®ÄË°®ËææÂºè exp1 ‰∏é exp2 Â∑ÆÂÄºÂ∞è‰∫éÁ≠â‰∫é epsilon„ÄÇ assert_ne_precise!(exp1, exp2): Êñ≠Ë®ÄË°®ËææÂºè exp1 ‰∏é exp2 Â∑ÆÂÄºÂ§ß‰∫é f32::EPSILON Êàñ f64::EPSILON„ÄÇ assert_xx(abc, def, info): Êñ≠Ë®Ä abc ‰∏é def xxÔºåinfo ‰∏∫ÈôÑÂä†Â§±Ë¥•‰ø°ÊÅØ„ÄÇ pub struct Guess { value: i32, } impl Guess { pub fn new(value: i32) -> Guess { if value 100 { panic!( \"Guess value must be greater than or equal to 1, got {value}.\" ); } Guess { value } } } #[cfg(test)] mod tests { use super::*; #[test] #[should_panic] fn greater_than_100() { Guess::new(200); } #[test] #[should_panic(expected = \"less than or equal to 100\")] fn greater_than_100_second() { Guess::new(200); } } #[should_panic]: Ê†áËÆ∞ÊµãËØïÂáΩÊï∞ÊúüÊúõ panic„ÄÇ #[should_panic(expected = \"less than or equal to 100\")]: Ê†áËÆ∞ÊµãËØïÂáΩÊï∞ÊúüÊúõ panic ‰ø°ÊÅØÂåÖÂê´ \"less than or equal to 100\"„ÄÇ Â∞Ü Result Áî®‰∫éÊµãËØï pub fn add(left: usize, right: usize) -> usize { left + right } #[cfg(test)] mod tests { use super::*; // ANCHOR: here #[test] fn it_works() -> Result { let result = add(2, 2); if result == 4 { Ok(()) } else { Err(String::from(\"two plus two does not equal four\")) } } // ANCHOR_END: here } it_works ÂáΩÊï∞ËøîÂõû Result Á±ªÂûã ÊµãËØïÂáΩÊï∞‰ΩìÂú®ÊµãËØïÈÄöËøáÊó∂ËøîÂõû Ok(())ÔºåÊµãËØïÂ§±Ë¥•Êó∂ËøîÂõû Err(String) Controlling How Tests Are Run ÂèØ‰ª•Â∞Ü‰∏ÄÈÉ®ÂàÜÂëΩ‰ª§Ë°åÂèÇÊï∞‰º†ÈÄíÁªô cargo testÔºåËÄåÂ∞ÜÂè¶Â§ñ‰∏ÄÈÉ®ÂàÜ‰º†ÈÄíÁªôÁîüÊàêÁöÑÊµãËØï‰∫åËøõÂà∂Êñá‰ª∂„ÄÇ ‰∏∫‰∫ÜÂàÜÈöîËøô‰∏§ÁßçÂèÇÊï∞ÔºåÈúÄË¶ÅÂÖàÂàóÂá∫‰º†ÈÄíÁªô cargo test ÁöÑÂèÇÊï∞ÔºåÊé•ÁùÄÊòØÂàÜÈöîÁ¨¶ --ÔºåÂÜç‰πãÂêéÊòØ‰º†ÈÄíÁªôÊµãËØï‰∫åËøõÂà∂Êñá‰ª∂ÁöÑÂèÇÊï∞„ÄÇ ËøêË°å cargo test --help ‰ºöÊèêÁ§∫ cargo test ÁöÑÊúâÂÖ≥ÂèÇÊï∞ÔºåËÄåËøêË°å cargo test -- --help ÂèØ‰ª•ÊèêÁ§∫Âú®ÂàÜÈöîÁ¨¶‰πãÂêé‰ΩøÁî®ÁöÑÊúâÂÖ≥ÂèÇÊï∞„ÄÇ Âπ∂Ë°åÊàñËøûÁª≠ÁöÑËøêË°åÊµãËØï cargo test -- --test-threads=1 ÊòæÁ§∫ÂáΩÊï∞ËæìÂá∫ cargo test -- --show-output ÈÄöËøáÊåáÂÆöÂêçÂ≠óÊù•ËøêË°åÈÉ®ÂàÜÊµãËØï cargo test one_hundred: ËøêË°åÂêç‰∏∫ one_hundred ÁöÑÊµãËØïÂáΩÊï∞ cargo test add: ÊåáÂÆöÈÉ®ÂàÜÊµãËØïÁöÑÂêçÁß∞ÔºåËøêË°åÊâÄÊúâÂêçÁß∞‰∏≠ÂåÖÂê´ add ÁöÑÊµãËØïÂáΩÊï∞ Èô§ÈùûÁâπÂà´ÊåáÂÆöÂê¶ÂàôÂøΩÁï•Êüê‰∫õÊµãËØï #[ignore]ÔºöÊ†áËÆ∞ÊµãËØïÂáΩÊï∞‰∏∫ÂøΩÁï•ÁöÑÊµãËØïÂáΩÊï∞„ÄÇ cargo test -- --ignoredÔºöËøêË°åÊâÄÊúâË¢´Ê†áËÆ∞‰∏∫ÂøΩÁï•ÁöÑÊµãËØïÂáΩÊï∞„ÄÇ cargo test -- --include-ignoredÔºöËøêË°åÊâÄÊúâÊµãËØïÂáΩÊï∞ÔºåÂåÖÊã¨Ë¢´Ê†áËÆ∞‰∏∫ÂøΩÁï•ÁöÑÊµãËØïÂáΩÊï∞„ÄÇ Ch12: An I/O Project parse cmd args read the file reconstruct: dispatch tests driver' env variables stderr ‰∫åËøõÂà∂È°πÁõÆÁöÑÂÖ≥Ê≥®ÂàÜÁ¶ª main ÂáΩÊï∞Ë¥üË¥£Â§ö‰∏™‰ªªÂä°ÁöÑÁªÑÁªáÈóÆÈ¢òÂú®ËÆ∏Â§ö‰∫åËøõÂà∂È°πÁõÆ‰∏≠ÂæàÂ∏∏ËßÅ„ÄÇÊâÄ‰ª• Rust Á§æÂå∫ÂºÄÂèëÂá∫‰∏ÄÁ±ªÂú® main ÂáΩÊï∞ÂºÄÂßãÂèòÂæóÂ∫ûÂ§ßÊó∂ËøõË°å‰∫åËøõÂà∂Á®ãÂ∫èÁöÑÂÖ≥Ê≥®ÂàÜÁ¶ªÁöÑÊåáÂØº„ÄÇËøô‰∫õËøáÁ®ãÊúâÂ¶Ç‰∏ãÊ≠•È™§Ôºö Â∞ÜÁ®ãÂ∫èÊãÜÂàÜÊàê main.rs Âíå lib.rs Âπ∂Â∞ÜÁ®ãÂ∫èÁöÑÈÄªËæëÊîæÂÖ• lib.rs ‰∏≠„ÄÇ ÂΩìÂëΩ‰ª§Ë°åËß£ÊûêÈÄªËæëÊØîËæÉÂ∞èÊó∂ÔºåÂèØ‰ª•‰øùÁïôÂú® main.rs ‰∏≠„ÄÇ ÂΩìÂëΩ‰ª§Ë°åËß£ÊûêÂºÄÂßãÂèòÂæóÂ§çÊùÇÊó∂Ôºå‰πüÂêåÊ†∑Â∞ÜÂÖ∂‰ªé main.rs ÊèêÂèñÂà∞ lib.rs ‰∏≠„ÄÇ ÁªèËøáËøô‰∫õËøáÁ®ã‰πãÂêé‰øùÁïôÂú® main ÂáΩÊï∞‰∏≠ÁöÑË¥£‰ªªÂ∫îËØ•Ë¢´ÈôêÂà∂‰∏∫Ôºö ‰ΩøÁî®ÂèÇÊï∞ÂÄºË∞ÉÁî®ÂëΩ‰ª§Ë°åËß£ÊûêÈÄªËæë ËÆæÁΩÆ‰ªª‰ΩïÂÖ∂‰ªñÁöÑÈÖçÁΩÆ Ë∞ÉÁî® lib.rs ‰∏≠ÁöÑ run ÂáΩÊï∞ Â¶ÇÊûú run ËøîÂõûÈîôËØØÔºåÂàôÂ§ÑÁêÜËøô‰∏™ÈîôËØØ Ëøô‰∏™Ê®°ÂºèÁöÑ‰∏ÄÂàáÂ∞±ÊòØ‰∏∫‰∫ÜÂÖ≥Ê≥®ÂàÜÁ¶ªÔºömain.rs Â§ÑÁêÜÁ®ãÂ∫èËøêË°åÔºåËÄå lib.rs Â§ÑÁêÜÊâÄÊúâÁöÑÁúüÊ≠£ÁöÑ‰ªªÂä°ÈÄªËæë„ÄÇÂõ†‰∏∫‰∏çËÉΩÁõ¥Êé•ÊµãËØï main ÂáΩÊï∞ÔºåËøô‰∏™ÁªìÊûÑÈÄöËøáÂ∞ÜÊâÄÊúâÁöÑÁ®ãÂ∫èÈÄªËæëÁßªÂä®Âà∞ lib.rs ÁöÑÂáΩÊï∞‰∏≠‰ΩøÂæóÊàë‰ª¨ÂèØ‰ª•ÊµãËØïÂÆÉ‰ª¨„ÄÇ‰ªÖ‰ªÖ‰øùÁïôÂú® main.rs ‰∏≠ÁöÑ‰ª£Á†ÅÂ∞ÜË∂≥Â§üÂ∞è‰ª•‰æøÈòÖËØªÂ∞±ÂèØ‰ª•È™åËØÅÂÖ∂Ê≠£Á°ÆÊÄß„ÄÇ Ch13: Functional Language Features: Iterators and Closures Closures: Anonymous Functions that capture their Environment Iterators Ch14: More about Cargo and Creates.io Ch15: Smart Pointers Using Box to Point to Data on the Heap Treating Smart Pointers Like Regular References with the Deref Trait Running Code on Cleanup with Drop Trait Rc, the Reference Counted Smart Pointer RefCell and the Interior Mutability Pattern ÂÜÖÈÉ®ÂèØÂèòÊÄßÊ®°Âºè Reference Cycles Can Leak Memory Âæ™ÁéØÂºïÁî®‰ºöÂØºËá¥ÂÜÖÂ≠òÊ≥ÑÊºè Êô∫ËÉΩÊåáÈíàÔºåÂè¶‰∏ÄÊñπÈù¢ÔºåÊòØ‰∏ÄÁßçÁ±ª‰ºº‰∫éÊåáÈíàÁöÑÊï∞ÊçÆÁªìÊûÑÔºå‰ΩÜËøòÂÖ∑ÊúâÈ¢ùÂ§ñÁöÑÂÖÉÊï∞ÊçÆÂíåÂäüËÉΩ„ÄÇÊô∫ËÉΩÊåáÈíàÁöÑÊ¶ÇÂøµÂπ∂ÈùûÁâπÊúâ‰∫é RustÔºöÊô∫ËÉΩÊåáÈíàËµ∑Ê∫ê‰∫é C++Ôºå‰πüÂ≠òÂú®‰∫éÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠„ÄÇRust Ê†áÂáÜÂ∫ì‰∏≠ÂÆö‰πâ‰∫ÜÂêÑÁßçÊô∫ËÉΩÊåáÈíàÔºåÂÆÉ‰ª¨Êèê‰æõÁöÑÂäüËÉΩË∂ÖË∂ä‰∫ÜÂºïÁî®ÊâÄËÉΩÊèê‰æõÁöÑ„ÄÇ‰∏∫‰∫ÜÊé¢ËÆ®‰∏ÄËà¨Ê¶ÇÂøµÔºåÊàë‰ª¨Â∞ÜÊü•ÁúãÂá†‰∏™‰∏çÂêåÁöÑÊô∫ËÉΩÊåáÈíàÁ§∫‰æãÔºåÂåÖÊã¨ÂºïÁî®ËÆ°Êï∞Êô∫ËÉΩÊåáÈíàÁ±ªÂûã„ÄÇÊ≠§ÊåáÈíàÂÖÅËÆ∏ÊÇ®ÈÄöËøáË∑üË∏™ÊâÄÊúâËÄÖÁöÑÊï∞ÈáèÊù•ÂÖÅËÆ∏Êï∞ÊçÆÊúâÂ§ö‰∏™ÊâÄÊúâËÄÖÔºåÂΩìÊ≤°ÊúâÊâÄÊúâËÄÖÊó∂ÔºåÊ∏ÖÁêÜÊï∞ÊçÆ„ÄÇ Rust Êã•ÊúâÊâÄÊúâÊùÉÂíåÂÄüÁî®Ê¶ÇÂøµÔºåÂú®ÂºïÁî®ÂíåÊô∫ËÉΩÊåáÈíà‰πãÈó¥ÊúâÈ¢ùÂ§ñÁöÑÂå∫Âà´ÔºöÂºïÁî®‰ªÖÂÄüÁî®Êï∞ÊçÆÔºåËÄåÂú®ËÆ∏Â§öÊÉÖÂÜµ‰∏ãÔºåÊô∫ËÉΩÊåáÈíàÊã•ÊúâÂÆÉ‰ª¨ÊâÄÊåáÂêëÁöÑÊï∞ÊçÆ„ÄÇ Êô∫ËÉΩÊåáÈíàÈÄöÂ∏∏‰ΩøÁî®ÁªìÊûÑ‰ΩìÂÆûÁé∞„ÄÇÊô∫ËÉΩÊåáÈíà‰∏çÂêå‰∫éÁªìÊûÑ‰ΩìÁöÑÂú∞ÊñπÂú®‰∫éÂÖ∂ÂÆûÁé∞‰∫Ü Deref Âíå Drop trait„ÄÇDeref trait ÂÖÅËÆ∏Êô∫ËÉΩÊåáÈíàÁªìÊûÑ‰ΩìÂÆû‰æãË°®Áé∞ÁöÑÂÉèÂºïÁî®‰∏ÄÊ†∑ÔºåËøôÊ†∑Â∞±ÂèØ‰ª•ÁºñÂÜôÊó¢Áî®‰∫éÂºïÁî®„ÄÅÂèàÁî®‰∫éÊô∫ËÉΩÊåáÈíàÁöÑ‰ª£Á†Å„ÄÇDrop trait ÂÖÅËÆ∏Êàë‰ª¨Ëá™ÂÆö‰πâÂΩìÊô∫ËÉΩÊåáÈíàÁ¶ªÂºÄ‰ΩúÁî®ÂüüÊó∂ËøêË°åÁöÑ‰ª£Á†Å„ÄÇ ËøôÈáåÂ∞Ü‰ºöËÆ≤Âà∞ÁöÑÊòØÊù•Ëá™Ê†áÂáÜÂ∫ì‰∏≠ÊúÄÂ∏∏Áî®ÁöÑ‰∏Ä‰∫õÔºö BoxÔºåÁî®‰∫éÂú®Â†Ü‰∏äÂàÜÈÖçÂÄº RcÔºå‰∏Ä‰∏™ÂºïÁî®ËÆ°Êï∞Á±ªÂûãÔºåÂÖ∂Êï∞ÊçÆÂèØ‰ª•ÊúâÂ§ö‰∏™ÊâÄÊúâËÄÖ Ref Âíå RefMutÔºåÈÄöËøá RefCell ËÆøÈóÆ„ÄÇÔºà RefCell ÊòØ‰∏Ä‰∏™Âú®ËøêË°åÊó∂ËÄå‰∏çÊòØÂú®ÁºñËØëÊó∂ÊâßË°åÂÄüÁî®ËßÑÂàôÁöÑÁ±ªÂûãÔºâ„ÄÇ Âè¶Â§ñÊàë‰ª¨‰ºöÊ∂âÂèä ÂÜÖÈÉ®ÂèØÂèòÊÄßÔºàinterior mutabilityÔºâÊ®°ÂºèÔºåËøôÊòØ‰∏çÂèØÂèòÁ±ªÂûãÊö¥Èú≤Âá∫ÊîπÂèòÂÖ∂ÂÜÖÈÉ®ÂÄºÁöÑ API„ÄÇ Êàë‰ª¨‰πü‰ºöËÆ®ËÆ∫ ÂºïÁî®Âæ™ÁéØÔºàreference cyclesÔºâ‰ºöÂ¶Ç‰ΩïÊ≥ÑÊºèÂÜÖÂ≠òÔºå‰ª•ÂèäÂ¶Ç‰ΩïÈÅøÂÖç„ÄÇ Box Box Á±ªÂûãÊòØ‰∏Ä‰∏™Êô∫ËÉΩÊåáÈíàÔºåÂõ†‰∏∫ÂÆÉÂÆûÁé∞‰∫Ü Deref traitÔºåÂÆÉÂÖÅËÆ∏ Box ÂÄºË¢´ÂΩì‰ΩúÂºïÁî®ÂØπÂæÖ„ÄÇÂΩì Box ÂÄºÁ¶ªÂºÄ‰ΩúÁî®ÂüüÊó∂ÔºåÁî±‰∫é Box Á±ªÂûã Drop trait ÁöÑÂÆûÁé∞Ôºåbox ÊâÄÊåáÂêëÁöÑÂ†ÜÊï∞ÊçÆ‰πü‰ºöË¢´Ê∏ÖÈô§„ÄÇËøô‰∏§‰∏™ trait ÂØπ‰∫éÂú®Êú¨Á´†‰Ωô‰∏ãËÆ®ËÆ∫ÁöÑÂÖ∂‰ªñÊô∫ËÉΩÊåáÈíàÊâÄÊèê‰æõÁöÑÂäüËÉΩ‰∏≠ÔºåÂ∞Ü‰ºöÊõ¥‰∏∫ÈáçË¶Å„ÄÇËÆ©Êàë‰ª¨Êõ¥ËØ¶ÁªÜÁöÑÊé¢Á¥¢‰∏Ä‰∏ãËøô‰∏§‰∏™ trait„ÄÇ ÈÄöËøá Deref trait Â∞ÜÊô∫ËÉΩÊåáÈíàÂΩì‰ΩúÂ∏∏ËßÑÂºïÁî®Â§ÑÁêÜ ‰∏∫‰∫ÜÂêØÁî® * ËøêÁÆóÁ¨¶ÁöÑËß£ÂºïÁî®ÂäüËÉΩÔºåÈúÄË¶ÅÂÆûÁé∞ Deref trait„ÄÇ ÊØèÊ¨°ÂΩìÊàë‰ª¨Âú®‰ª£Á†Å‰∏≠‰ΩøÁî® * Êó∂Ôºå * ËøêÁÆóÁ¨¶ÈÉΩË¢´ÊõøÊç¢Êàê‰∫ÜÂÖàË∞ÉÁî® deref ÊñπÊ≥ïÂÜçÊé•ÁùÄ‰ΩøÁî® * Ëß£ÂºïÁî®ÁöÑÊìç‰ΩúÔºå‰∏îÂè™‰ºöÂèëÁîü‰∏ÄÊ¨°Ôºå‰∏ç‰ºöÂØπ * Êìç‰ΩúÁ¨¶Êó†ÈôêÈÄíÂΩíÊõøÊç¢ÔºåËß£ÂºïÁî®Âá∫‰∏äÈù¢ i32 Á±ªÂûãÁöÑÂÄºÂ∞±ÂÅúÊ≠¢‰∫ÜÔºåËøô‰∏™ÂÄº‰∏éÁ§∫‰æã 15-9 ‰∏≠ assert_eq! ÁöÑ 5 Áõ∏ÂåπÈÖç„ÄÇ ÂáΩÊï∞ÂíåÊñπÊ≥ïÁöÑÈöêÂºè Deref Âº∫Âà∂ËΩ¨Êç¢ Deref Âº∫Âà∂ËΩ¨Êç¢Ôºàderef coercionsÔºâÂ∞ÜÂÆûÁé∞‰∫Ü Deref trait ÁöÑÁ±ªÂûãÁöÑÂºïÁî®ËΩ¨Êç¢‰∏∫Âè¶‰∏ÄÁßçÁ±ªÂûãÁöÑÂºïÁî®„ÄÇ‰æãÂ¶ÇÔºåDeref Âº∫Âà∂ËΩ¨Êç¢ÂèØ‰ª•Â∞Ü &String ËΩ¨Êç¢‰∏∫ &strÔºåÂõ†‰∏∫ String ÂÆûÁé∞‰∫Ü Deref trait Âõ†Ê≠§ÂèØ‰ª•ËøîÂõû &str„ÄÇDeref Âº∫Âà∂ËΩ¨Êç¢ÊòØ Rust Âú®ÂáΩÊï∞ÊàñÊñπÊ≥ï‰º†ÂèÇ‰∏äÁöÑ‰∏ÄÁßç‰æøÂà©Êìç‰ΩúÔºåÂπ∂‰∏îÂè™ËÉΩ‰ΩúÁî®‰∫éÂÆûÁé∞‰∫Ü Deref trait ÁöÑÁ±ªÂûã„ÄÇÂΩìËøôÁßçÁâπÂÆöÁ±ªÂûãÁöÑÂºïÁî®‰Ωú‰∏∫ÂÆûÂèÇ‰º†ÈÄíÁªôÂíåÂΩ¢ÂèÇÁ±ªÂûã‰∏çÂêåÁöÑÂáΩÊï∞ÊàñÊñπÊ≥ïÊó∂Â∞ÜËá™Âä®ËøõË°å„ÄÇËøôÊó∂‰ºöÊúâ‰∏ÄÁ≥ªÂàóÁöÑ deref ÊñπÊ≥ïË¢´Ë∞ÉÁî®ÔºåÊääÊàë‰ª¨Êèê‰æõÁöÑÁ±ªÂûãËΩ¨Êç¢Êàê‰∫ÜÂèÇÊï∞ÊâÄÈúÄÁöÑÁ±ªÂûã„ÄÇ Deref Âº∫Âà∂ËΩ¨Êç¢ÁöÑÂä†ÂÖ•‰ΩøÂæó Rust Á®ãÂ∫èÂëòÁºñÂÜôÂáΩÊï∞ÂíåÊñπÊ≥ïË∞ÉÁî®Êó∂Êó†ÈúÄÂ¢ûÂä†ËøáÂ§öÊòæÂºè‰ΩøÁî® & Âíå * ÁöÑÂºïÁî®ÂíåËß£ÂºïÁî®„ÄÇËøô‰∏™ÂäüËÉΩ‰πü‰ΩøÂæóÊàë‰ª¨ÂèØ‰ª•ÁºñÂÜôÊõ¥Â§öÂêåÊó∂‰ΩúÁî®‰∫éÂºïÁî®ÊàñÊô∫ËÉΩÊåáÈíàÁöÑ‰ª£Á†Å„ÄÇ Deref Âº∫Âà∂ËΩ¨Êç¢Â¶Ç‰Ωï‰∏éÂèØÂèòÊÄß‰∫§‰∫í Á±ª‰ºº‰∫éÂ¶Ç‰Ωï‰ΩøÁî® Deref trait ÈáçËΩΩ‰∏çÂèØÂèòÂºïÁî®ÁöÑ * ËøêÁÆóÁ¨¶ÔºåRust Êèê‰æõ‰∫Ü DerefMut trait Áî®‰∫éÈáçËΩΩÂèØÂèòÂºïÁî®ÁöÑ * ËøêÁÆóÁ¨¶„ÄÇ Rust Âú®ÂèëÁé∞Á±ªÂûãÂíå trait ÂÆûÁé∞Êª°Ë∂≥‰∏âÁßçÊÉÖÂÜµÊó∂‰ºöËøõË°å Deref Âº∫Âà∂ËΩ¨Êç¢Ôºö ÂΩì T: Deref Êó∂‰ªé &T Âà∞ &U„ÄÇ ÂΩì T: DerefMut Êó∂‰ªé &mut T Âà∞ &mut U„ÄÇ ÂΩì T: Deref Êó∂‰ªé &mut T Âà∞ &U„ÄÇ Â§¥‰∏§‰∏™ÊÉÖÂÜµÈô§‰∫ÜÁ¨¨‰∫åÁßçÂÆûÁé∞‰∫ÜÂèØÂèòÊÄß‰πãÂ§ñÊòØÁõ∏ÂêåÁöÑÔºöÁ¨¨‰∏ÄÁßçÊÉÖÂÜµË°®ÊòéÂ¶ÇÊûúÊúâ‰∏Ä‰∏™ &TÔºåËÄå T ÂÆûÁé∞‰∫ÜËøîÂõû U Á±ªÂûãÁöÑ DerefÔºåÂàôÂèØ‰ª•Áõ¥Êé•ÂæóÂà∞ &U„ÄÇÁ¨¨‰∫åÁßçÊÉÖÂÜµË°®ÊòéÂØπ‰∫éÂèØÂèòÂºïÁî®‰πüÊúâÁùÄÁõ∏ÂêåÁöÑË°å‰∏∫„ÄÇ Á¨¨‰∏â‰∏™ÊÉÖÂÜµÊúâ‰∫õÂæÆÂ¶ôÔºöRust ‰πü‰ºöÂ∞ÜÂèØÂèòÂºïÁî®Âº∫ËΩ¨‰∏∫‰∏çÂèØÂèòÂºïÁî®„ÄÇ‰ΩÜÊòØÂèç‰πãÊòØ ‰∏çÂèØËÉΩ ÁöÑÔºö‰∏çÂèØÂèòÂºïÁî®Ê∞∏Ëøú‰πü‰∏çËÉΩÂº∫ËΩ¨‰∏∫ÂèØÂèòÂºïÁî®„ÄÇÂõ†‰∏∫Ê†πÊçÆÂÄüÁî®ËßÑÂàôÔºåÂ¶ÇÊûúÊúâ‰∏Ä‰∏™ÂèØÂèòÂºïÁî®ÔºåÂÖ∂ÂøÖÈ°ªÊòØËøô‰∫õÊï∞ÊçÆÁöÑÂîØ‰∏ÄÂºïÁî®ÔºàÂê¶ÂàôÁ®ãÂ∫èÂ∞ÜÊó†Ê≥ïÁºñËØëÔºâ„ÄÇÂ∞Ü‰∏Ä‰∏™ÂèØÂèòÂºïÁî®ËΩ¨Êç¢‰∏∫‰∏çÂèØÂèòÂºïÁî®Ê∞∏Ëøú‰πü‰∏ç‰ºöÊâìÁ†¥ÂÄüÁî®ËßÑÂàô„ÄÇÂ∞Ü‰∏çÂèØÂèòÂºïÁî®ËΩ¨Êç¢‰∏∫ÂèØÂèòÂºïÁî®ÂàôÈúÄË¶ÅÂàùÂßãÁöÑ‰∏çÂèØÂèòÂºïÁî®ÊòØÊï∞ÊçÆÂîØ‰∏ÄÁöÑ‰∏çÂèØÂèòÂºïÁî®ÔºåËÄåÂÄüÁî®ËßÑÂàôÊó†Ê≥ï‰øùËØÅËøô‰∏ÄÁÇπ„ÄÇÂõ†Ê≠§ÔºåRust Êó†Ê≥ïÂÅáËÆæÂ∞Ü‰∏çÂèØÂèòÂºïÁî®ËΩ¨Êç¢‰∏∫ÂèØÂèòÂºïÁî®ÊòØÂèØËÉΩÁöÑ„ÄÇ ‰ΩøÁî® Drop Trait ËøêË°åÊ∏ÖÁêÜ‰ª£Á†Å ... Rc ÂºïÁî®ËÆ°Êï∞Êô∫ËÉΩÊåáÈíà RefCell ÂíåÂÜÖÈÉ®ÂèØÂèòÊÄßÊ®°Âºè Ch16: Fearless Concurrency Ch17: Object Oriented Programming Features in Rust Èù¢ÂêëÂØπË±°ËØ≠Ë®ÄÁâπÁÇπ È°æÂèä‰∏çÂêåÁ±ªÂûãÂÄºÁöÑ trait ÂØπË±° Èù¢ÂêëÂØπË±°ËÆæËÆ°Ê®°ÂºèÁöÑÂÆûÁé∞ Ch18: Patterns and Maching Ch19: Advanced Features Ch20: Building a Multithreaded WebServer "},"Learn/PersonalWebsite/Jekyll.html":{"url":"Learn/PersonalWebsite/Jekyll.html","title":"Jekyll","keywords":"","body":"Jekyll Transform your plain text into static websites and blogs.\\ Â∞ÜÁ∫ØÊñáÊú¨ËΩ¨Êç¢‰∏∫ÈùôÊÄÅÁΩëÁ´ôÂíåÂçöÂÆ¢„ÄÇ Jekyll is a static site generator that runs on the Ruby programming language. Simple ÁÆÄÂçïÁöÑ No more databases, comment moderation, or pesky updates to install‚Äîjust your content. ‰∏çÂÜçÈúÄË¶ÅÂÆâË£ÖÊï∞ÊçÆÂ∫ì„ÄÅËØÑËÆ∫ÂÆ°Ê†∏ÊàñÁÉ¶‰∫∫ÁöÑÊõ¥Êñ∞ÔºåÂè™ÈúÄÂÆâË£ÖÊÇ®ÁöÑÂÜÖÂÆπ„ÄÇ How Jekyll works Static ÈùôÊ≠¢ÁöÑ Markdown, Liquid, HTML & CSS go in. Static sites come out ready for deployment. Âä†ÂÖ•Markdown „ÄÅ Liquid „ÄÅHTML Âíå CSS„ÄÇÈùôÊÄÅÁ´ôÁÇπÂá∫Êù•ÂêéÂç≥ÂèØÈÉ®ÁΩ≤„ÄÇ Jekyll template guide Blog-aware ÂçöÂÆ¢ÊÑèËØÜ Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Ê∞∏‰πÖÈìæÊé•„ÄÅÁ±ªÂà´„ÄÅÈ°µÈù¢„ÄÅÂ∏ñÂ≠êÂíåËá™ÂÆö‰πâÂ∏ÉÂ±ÄÂú®ËøôÈáåÈÉΩÊòØ‰∏ÄÁ≠âÂÖ¨Ê∞ë„ÄÇ Migrate your blog Running in seconds, Quickstart: # make sure satisfy the [prerequisites](https://jekyllrb.com/docs/installation/#requirements) # on Debian: sudo apt-get install ruby-full build-essential # on Ubuntu: sudo apt-get install ruby-full build-essential zlib1g-dev # Install the jekyll and bundler gems gem install bundler jekyll jekyll new my-awesome-site cd my-awesome-site bundle exec jekyll serve # --livereload # => Now browse to http://localhost:4000 Problems: gem install bundler jekyll # Error: # /usr/bin/ruby3.1 -I /usr/lib/ruby/vendor_ruby -r ./siteconf20241228-103530-c2f02s.rb extconf.rb # mkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h # Solution: sudo apt install ruby-dev # Error # sudo gem install jekyll # Net::OpenTimeout: Failed to open TCP connection to github.com:443 (Connection timed out - user specified timeout) # Solution: # network error, just use proxy. "},"Learn/PersonalWebsite/Note.html":{"url":"Learn/PersonalWebsite/Note.html","title":"Note","keywords":"","body":"Note How to Create a Static Website with Jekyll Andrej Karpathy blog - 2014 Why you (yes, you) should blog - 2017 Hexo Theme Nexmoe pages.github hhw-google-blogger Static Site Generator A static site generator builds a website using plain HTML files. When a user visits a website created by a static site generator, it is loaded no differently than if you had created a website with plain HTML. By contrast, a dynamic site running on a server side language, such as PHP, must be built every time a user visits the site. ÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®‰ΩøÁî®Á∫Ø HTML Êñá‰ª∂ÊûÑÂª∫ÁΩëÁ´ô„ÄÇÂΩìÁî®Êà∑ËÆøÈóÆÁî±ÈùôÊÄÅÁΩëÁ´ôÁîüÊàêÂô®ÂàõÂª∫ÁöÑÁΩëÁ´ôÊó∂ÔºåÂÖ∂Âä†ËΩΩÊñπÂºè‰∏éÊÇ®‰ΩøÁî®Á∫Ø HTML ÂàõÂª∫ÁΩëÁ´ôÊó∂Ê≤°Êúâ‰ªÄ‰πà‰∏çÂêå„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåÂú®ÊúçÂä°Âô®Á´ØËØ≠Ë®ÄÔºà‰æãÂ¶Ç PHPÔºâ‰∏äËøêË°åÁöÑÂä®ÊÄÅÁ´ôÁÇπÂøÖÈ°ªÂú®Áî®Êà∑ÊØèÊ¨°ËÆøÈóÆËØ•Á´ôÁÇπÊó∂ÊûÑÂª∫„ÄÇ You can treat a static site generator as a very simple sort of CMS (content management system). Instead of having to include your entire header and footer on every page, for example, you can create a header.html and footer.html and load them into each page. Instead of having to write in HTML, you can write in Markdown, which is much faster and more efficient. ÊÇ®ÂèØ‰ª•Â∞ÜÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®ËßÜ‰∏∫‰∏ÄÁßçÈùûÂ∏∏ÁÆÄÂçïÁöÑ CMSÔºàÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªüÔºâ„ÄÇ‰æãÂ¶ÇÔºåÊÇ®‰∏çÂøÖÂú®ÊØè‰∏™È°µÈù¢‰∏äÂåÖÂê´Êï¥‰∏™È°µÁúâÂíåÈ°µËÑöÔºåÊÇ®ÂèØ‰ª•ÂàõÂª∫ header.html Âíå footer.html Âπ∂Â∞ÜÂÆÉ‰ª¨Âä†ËΩΩÂà∞ÊØè‰∏™È°µÈù¢‰∏≠„ÄÇÊÇ®‰∏çÂøÖ‰ΩøÁî® HTML ÁºñÂÜôÔºåËÄåÊòØÂèØ‰ª•‰ΩøÁî® Markdown ÁºñÂÜôÔºåËøôÊ†∑Êõ¥Âø´„ÄÅÊõ¥È´òÊïà„ÄÇ Here are some of the main advantages of static site generators over dynamic sites:‰ª•‰∏ãÊòØÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®Áõ∏ÂØπ‰∫éÂä®ÊÄÅÁ´ôÁÇπÁöÑ‰∏Ä‰∫õ‰∏ªË¶Å‰ºòÁÇπÔºö Speed: your website will perform much faster, as the server does not need to parse any content. It only needs to read plain HTML. ÈÄüÂ∫¶: ÊÇ®ÁöÑÁΩëÁ´ôÂ∞ÜÊâßË°åÂæóÊõ¥Âø´ÔºåÂõ†‰∏∫ÊúçÂä°Âô®‰∏çÈúÄË¶ÅËß£Êûê‰ªª‰ΩïÂÜÖÂÆπ„ÄÇÂÆÉÂè™ÈúÄË¶ÅËØªÂèñÁ∫Ø HTML„ÄÇ Security: your website will be much less vulnerable to attacks, since there is nothing that can be exploited server side. ÂÆâÂÖ®ÊÄß: ÊÇ®ÁöÑÁΩëÁ´ôÂ∞ÜÊõ¥‰∏çÂÆπÊòìÂèóÂà∞ÊîªÂáªÔºåÂõ†‰∏∫ÊúçÂä°Âô®Á´ØÊ≤°Êúâ‰ªª‰Ωï‰∏úË•øÂèØ‰ª•Ë¢´Âà©Áî®„ÄÇ Simplicity: there are no databases or programming languages to deal with. A simple knowledge of HTML and CSS is enough. ÁÆÄÂçïÊÄß: Êó†ÈúÄÂ§ÑÁêÜÊï∞ÊçÆÂ∫ìÊàñÁºñÁ®ãËØ≠Ë®Ä„ÄÇ‰∫ÜËß£ HTML Âíå CSS ÁöÑÁÆÄÂçïÁü•ËØÜÂ∞±Ë∂≥Â§ü‰∫Ü„ÄÇ Flexibility: you know exactly how your site works, as you made it from scratch. ÁÅµÊ¥ªÊÄß: ÊÇ®Á°ÆÂàáÂú∞Áü•ÈÅìÊÇ®ÁöÑÁΩëÁ´ôÊòØÂ¶Ç‰ΩïËøê‰ΩúÁöÑÔºåÂõ†‰∏∫ÊÇ®ÊòØ‰ªéÂ§¥ÂºÄÂßãÂàõÂª∫ÁöÑ„ÄÇ Of course, dynamic sites have their advantages as well. The addition of an admin panel makes for ease of updating, especially for those who are not tech-savvy. Generally, a static site generator would not be the best idea for making a CMS for a client. Static site generators also don't have the possibility of updating with real time content. It's important to understand how both work to know what would work best for your particular project. ÂΩìÁÑ∂ÔºåÂä®ÊÄÅÁΩëÁ´ô‰πüÊúâÂÖ∂‰ºòÁÇπ„ÄÇÊ∑ªÂä†ÁÆ°ÁêÜÈù¢ÊùøÂèØ‰ª•ËΩªÊùæÊõ¥Êñ∞ÔºåÁâπÂà´ÊòØÂØπ‰∫éÈÇ£‰∫õ‰∏çÁ≤æÈÄöÊäÄÊúØÁöÑ‰∫∫Êù•ËØ¥„ÄÇ‰∏ÄËà¨Êù•ËØ¥ÔºåÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®Âπ∂‰∏çÊòØ‰∏∫ÂÆ¢Êà∑Âà∂‰Ωú CMS ÁöÑÊúÄ‰Ω≥‰∏ªÊÑè„ÄÇÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®‰πüÊó†Ê≥ïÊõ¥Êñ∞ÂÆûÊó∂ÂÜÖÂÆπ„ÄÇ‰∫ÜËß£‰∏§ËÄÖÁöÑÂ∑•‰ΩúÂéüÁêÜÈùûÂ∏∏ÈáçË¶ÅÔºåËøôÊ†∑ÊâçËÉΩÁü•ÈÅìÂì™ÁßçÊñπÊ≥ïÊúÄÈÄÇÂêàÊÇ®ÁöÑÁâπÂÆöÈ°πÁõÆ„ÄÇ Self Host Docs Wibesite gitbook: origin project no more maintain, turn into Gitbook. old still have bugs mdBook - rust math delimiters support sick text retype free plan only support 100 pages mkdocs mkdocs-material math delimiters support great, 'dollars' and 'brackets' 'dollars': $xxx$ and xxxxxxxxx 'brackets': \\(...\\) and \\[...\\] docusaurus init project stack, dont know why bookstackapp A platform to create documentation/wiki content built with PHP & Laravel Archbee like notion... hyperbook Hyperbook is a quick and easy way to build interactive workbooks, that support modern standards and runs superfast. looks like great! cant release port?? may have bugs, too small depelop group. "},"Learn/PersonalWebsite/Ruby.html":{"url":"Learn/PersonalWebsite/Ruby.html","title":"Ruby","keywords":"","body":"Ruby Ruby: A dynamic, open source programming language. RubyGems: A package manager for the Ruby programming language. Bundler: A tool for managing Ruby dependencies. Ruby A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. ‰∏ÄÁßçÂä®ÊÄÅÁöÑÂºÄÊ∫êÁºñÁ®ãËØ≠Ë®ÄÔºåÈáçÁÇπÂÖ≥Ê≥® ÁÆÄÂçïÊÄßÂíåÁîü‰∫ßÂäõ„ÄÇÂÆÉÊúâ‰∏Ä‰∏™‰ºòÈõÖÁöÑËØ≠Ê≥ïÔºö ËØªËµ∑Êù•Ëá™ÁÑ∂ÔºåÂÜôËµ∑Êù•‰πüÂÆπÊòì„ÄÇ Features: Simple syntax, Basic OO features (classes, methods, objects, and so on), Special OO features (mixins, singleton methods, renaming, and so on), Operator overloading, Exception handling, Iterators and closures, Garbage collection, Dynamic loading (depending on the architecture), High transportability (runs on various Unices, Windows, DOS, macOS, OS/2, Amiga, and so on). wikipedia: Ruby is an interpreted, high-level, general-purpose programming language. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object), including primitive data types. It was developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan. RubyÊòØ‰∏ÄÁßçËß£ÈáäÂûã„ÄÅÈ´òÁ∫ß„ÄÅÈÄöÁî®ÁºñÁ®ãËØ≠Ë®Ä„ÄÇÂÆÉÁöÑËÆæËÆ°ÈáçÁÇπÊòØÁºñÁ®ãÊïàÁéáÂíåÁÆÄÂçïÊÄß„ÄÇÂú® Ruby ‰∏≠Ôºå‰∏ÄÂàáÈÉΩÊòØÂØπË±°)ÔºåÂåÖÊã¨ÂéüÂßãÊï∞ÊçÆÁ±ªÂûã„ÄÇÂÆÉÊòØÁî±Êó•Êú¨ÊùæÊú¨Âπ∏Âºò‚ÄúMatz‚Äù‰∫é 20 ‰∏ñÁ∫™ 90 Âπ¥‰ª£‰∏≠ÊúüÂºÄÂèëÁöÑ„ÄÇ Ruby is dynamically typed and uses garbage collection) and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. According to the creator, Ruby was influenced by Perl, Smalltalk, Eiffel), Ada), BASIC, Java), and Lisp).[10]#citenote-about-10)[[3]](https://en.wikipedia.org/wiki/Ruby(programming_language)#cite_note-confreaks-3) Ruby ÊòØÂä®ÊÄÅÁ±ªÂûãÁöÑÔºåÂπ∂‰ΩøÁî®ÂûÉÂúæÊî∂ÈõÜ)ÂíåÂç≥Êó∂ÁºñËØë„ÄÇÂÆÉÊîØÊåÅÂ§öÁßçÁºñÁ®ãËåÉ‰æãÔºåÂåÖÊã¨ËøáÁ®ãÂºèÁºñÁ®ã„ÄÅÈù¢ÂêëÂØπË±°ÁºñÁ®ãÂíåÂáΩÊï∞ÂºèÁºñÁ®ã„ÄÇÊ†πÊçÆÂàõÂª∫ËÄÖÁöÑËØ¥Ê≥ïÔºåRuby ÂèóÂà∞Perl „ÄÅ Smalltalk „ÄÅ Eiffel) „ÄÅ Ada) „ÄÅ BASIC „ÄÅ Java)ÂíåLisp)ÁöÑÂΩ±Âìç„ÄÇ [ 10 ]#citenote-about-10) [[ 3 ]](https://en.wikipedia.org/wiki/Ruby(programming_language)#cite_note-confreaks-3) RubyGems wikipedia RubyGems is a package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries (in a self-contained format called a \"gem\"), a tool designed to easily manage the installation of gems, and a server for distributing them. It was created by Chad Fowler, Jim Weirich, David Alan Black, Paul Brannan and Richard Kilmer in 2004.[2] RubyGems ÊòØ Ruby ÁºñÁ®ãËØ≠Ë®ÄÁöÑÂåÖÁÆ°ÁêÜÂô®ÔºåÂÆÉÊèê‰æõ‰∫ÜÁî®‰∫éÂàÜÂèë Ruby Á®ãÂ∫èÂíåÂ∫ìÁöÑÊ†áÂáÜÊ†ºÂºèÔºà‰ª•Áß∞‰∏∫‚Äúgem‚ÄùÁöÑÁã¨Á´ãÊ†ºÂºèÔºâ„ÄÅ‰∏Ä‰∏™Êó®Âú®ËΩªÊùæÁÆ°ÁêÜ gems ÂÆâË£ÖÁöÑÂ∑•ÂÖ∑‰ª•Âèä‰∏Ä‰∏™Áî®‰∫éÂàÜÂèëÂÆÉ‰ª¨„ÄÇÂÆÉÁî± Chad Fowler „ÄÅ Jim Weirich „ÄÅ David Alan Black „ÄÅ Paul Brannan Âíå Richard Kilmer ‰∫é 2004 Âπ¥ÂàõÂª∫„ÄÇ [ 2 ]. The interface for RubyGems is a command-line tool called gem which can install and manage libraries (the gems).[3] RubyGems integrates with Ruby run-time loader to help find and load installed gems from standardized library folders. Though it is possible to use a private RubyGems repository, the public repository is most commonly used for gem management. RubyGems ÁöÑÁïåÈù¢ÊòØ‰∏Ä‰∏™Âêç‰∏∫ gem ÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ÔºåÂÆÉÂèØ‰ª•ÂÆâË£ÖÂíåÁÆ°ÁêÜÂ∫ìÔºàgemsÔºâ„ÄÇ [ 3 ] RubyGems ‰∏é Ruby ËøêË°åÊó∂Âä†ËΩΩÂô®ÈõÜÊàêÔºå‰ª•Â∏ÆÂä©‰ªéÊ†áÂáÜÂåñÂ∫ìÊñá‰ª∂Â§π‰∏≠Êü•ÊâæÂπ∂Âä†ËΩΩÂ∑≤ÂÆâË£ÖÁöÑ gem„ÄÇÂ∞ΩÁÆ°ÂèØ‰ª•‰ΩøÁî®ÁßÅÊúâ RubyGems Â≠òÂÇ®Â∫ìÔºå‰ΩÜÂÖ¨ÂÖ±Â≠òÂÇ®Â∫ìÊúÄÂ∏∏Áî®‰∫é gem ÁÆ°ÁêÜ„ÄÇ The public repository helps users find gems, resolve dependencies and install them. RubyGems is bundled with the standard Ruby package as of Ruby 1.9.[4] ÂÖ¨ÂÖ±Â≠òÂÇ®Â∫ìÂèØÂ∏ÆÂä©Áî®Êà∑Êü•Êâæ gem„ÄÅËß£ÂÜ≥‰æùËµñÂÖ≥Á≥ªÂπ∂ÂÆâË£ÖÂÆÉ‰ª¨„ÄÇ‰ªé Ruby 1.9 ÂºÄÂßãÔºåRubyGems ‰∏éÊ†áÂáÜ Ruby ÂåÖÊçÜÁªëÂú®‰∏ÄËµ∑„ÄÇ [ 4 ] Bundler Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed. Bundler ÈÄöËøáË∑üË∏™ÂíåÂÆâË£ÖÊâÄÈúÄÁöÑÁ°ÆÂàá gem ÂíåÁâàÊú¨Ôºå‰∏∫ Ruby È°πÁõÆÊèê‰æõ‰∏ÄËá¥ÁöÑÁéØÂ¢É„ÄÇ Bundler is an exit from dependency hell, and ensures that the gems you need are present in development, staging, and production. Starting work on a project is as simple as bundle install. Bundler ÊòØÊëÜËÑ±‰æùËµñÂú∞Áã±ÁöÑÂá∫Âè£ÔºåÂπ∂Á°Æ‰øùÊÇ®ÈúÄË¶ÅÁöÑ gem Â≠òÂú®‰∫éÂºÄÂèë„ÄÅÁôªÂè∞ÂíåÁîü‰∫ß‰∏≠„ÄÇÂºÄÂßãÈ°πÁõÆÂ∑•‰ΩúÂ∞±ÂÉè bundle install ‰∏ÄÊ†∑ÁÆÄÂçï„ÄÇ Ruby-101 in jekyll Gems Gems are code you can include in Ruby projects. Gems package specific functionality. You can share gems across multiple projects or with other people. Gems can perform actions like: Gems ÊòØÂèØ‰ª•ÂåÖÂê´Âú® Ruby È°πÁõÆ‰∏≠ÁöÑ‰ª£Á†Å„ÄÇ Gems Â∞ÅË£ÖÁâπÂÆöÂäüËÉΩ„ÄÇÊÇ®ÂèØ‰ª•Ë∑®Â§ö‰∏™È°πÁõÆÊàñ‰∏éÂÖ∂‰ªñ‰∫∫ÂÖ±‰∫´ gem„ÄÇ Gemfile A Gemfile is a list of gems used by your site. Every Jekyll site has a Gemfile in the main folder. Gemfile ÊòØÊÇ®ÁöÑÁ´ôÁÇπ‰ΩøÁî®ÁöÑ gem ÂàóË°®„ÄÇÊØè‰∏™ Jekyll Á´ôÁÇπÁöÑ‰∏ªÊñá‰ª∂Â§π‰∏≠ÈÉΩÊúâ‰∏Ä‰∏™ Gemfile„ÄÇ Bundler Bundler is a gem that installs all gems in your Gemfile. To install gems in your Gemfile using Bundler, run the following in the directory that has the Gemfile: bundle install bundle exec jekyll serve To bypass Bundler if you aren‚Äôt using a Gemfile, run jekyll serve. Ruby Version Manager (RVM) "},"Learn/PersonalWebsite/al-folio.html":{"url":"Learn/PersonalWebsite/al-folio.html","title":"al-folio","keywords":"","body":"al-folio running-local-al-folio - 2022 running locally: bundle exec jekyll serve --lsi Customize . ‚îú‚îÄ‚îÄ üìÇ assets/: contains the assets that are displayed in the website ‚îÇ ‚îî‚îÄ‚îÄ üìÇ json/ ‚îÇ ‚îî‚îÄ‚îÄ üìÑ resume.json: CV in JSON format (https://jsonresume.org/) ‚îú‚îÄ‚îÄ üìÇ _bibliography/ ‚îÇ ‚îî‚îÄ‚îÄ üìÑ papers.bib: bibliography in BibTeX format ‚îú‚îÄ‚îÄ üìÑ _config.yml: the configuration file of the template ‚îú‚îÄ‚îÄ üìÇ _data/: contains some of the data used in the template ‚îÇ ‚îú‚îÄ‚îÄ üìÑ cv.yml: CV in YAML format, used when assets/json/resume.json is not found ‚îÇ ‚îú‚îÄ‚îÄ üìÑ repositories.yml: users and repositories info in YAML format ‚îÇ ‚îî‚îÄ‚îÄ üìÑ socials.yml: your social media and contact info in YAML format ‚îú‚îÄ‚îÄ üìÇ _includes/: contains code parts that are included in the main HTML file ‚îÇ ‚îî‚îÄ‚îÄ üìÑ news.liquid: defines the news section layout in the about page ‚îú‚îÄ‚îÄ üìÇ _layouts/: contains the layouts to choose from in the frontmatter of the Markdown files ‚îú‚îÄ‚îÄ üìÇ _news/: the news that will appear in the news section in the about page ‚îú‚îÄ‚îÄ üìÇ _pages/: contains the pages of the website | ‚îî‚îÄ‚îÄ üìÑ 404.md: 404 page (page not found) ‚îú‚îÄ‚îÄ üìÇ _posts/: contains the blog posts ‚îú‚îÄ‚îÄ üìÇ _projects/: contains the projects ‚îî‚îÄ‚îÄ üìÇ _sass/: contains the SASS files that define the style of the website ‚îú‚îÄ‚îÄ üìÑ _base.scss: base style of the website ‚îú‚îÄ‚îÄ üìÑ _cv.scss: style of the CV page ‚îú‚îÄ‚îÄ üìÑ _distill.scss: style of the Distill articles ‚îú‚îÄ‚îÄ üìÑ _layout.scss: style of the overall layout ‚îú‚îÄ‚îÄ üìÑ _themes.scss: themes colors and a few icons ‚îî‚îÄ‚îÄ üìÑ _variables.scss: variables used in the SASS files "},"Linux/Linux.html":{"url":"Linux/Linux.html","title":"Linux","keywords":"","body":"Linux Desktop_entries "},"Linux/Display/Display.html":{"url":"Linux/Display/Display.html","title":"Display","keywords":"","body":"Great question! Let's go over each component and how they fit together. 1. GNOME GNOME (GNU Network Object Model Environment) is a desktop environment. A desktop environment provides the graphical interface that users interact with, including the desktop, windows, icons, file managers, and settings applications. GNOME is one of the most popular desktop environments for Linux and is used in Debian, Ubuntu, Fedora, and other distributions. Key components provided by GNOME include: Window management: Managing open applications and windows. Applications: Built-in utilities like the file manager, terminal, settings (i.e., gnome-control-center), and more. User interface: Consistent design and behavior for how things look and feel in the system. GNOME uses a display protocol (like X11 or Wayland) to render graphics to the screen, which brings us to the next components. 2. X11 (X Window System) X11, often called the X Window System or just X, is a display server protocol that provides the fundamental layer for graphical display on Unix-like operating systems. It was created in the 1980s and has been the standard display protocol for Linux desktops for a long time. X11‚Äôs primary responsibilities include: Managing windows (open applications) and their placement. Handling input events (mouse, keyboard). Communication between the hardware (graphics card) and applications. GNOME traditionally ran on top of X11, which would handle all the graphical processing and window management on the display. However, X11 has some limitations, particularly with modern graphics hardware, security, and handling multiple screens, which led to the development of a more modern protocol: Wayland. 3. Wayland Wayland is a newer display server protocol designed to replace X11. It was created to address some of X11‚Äôs limitations and to provide a simpler, more secure, and efficient system for rendering graphics in modern desktop environments. Wayland‚Äôs advantages over X11 include: Improved security: Each application (client) has its own display server instance, reducing security risks. Better performance: It‚Äôs designed to take advantage of modern graphics capabilities, resulting in smoother graphics and lower latency. Simplicity: Wayland‚Äôs architecture is much simpler than X11, reducing the number of potential points of failure. In Wayland, the compositor (in this case, GNOME‚Äôs compositor called Mutter) manages windows, input events, and rendering directly, whereas in X11, this was handled by a separate X server. 4. Relationship Between GNOME, X11, and Wayland GNOME is the desktop environment that users interact with. X11 or Wayland is the display protocol that GNOME uses to render graphics to the screen. GNOME can run on top of either X11 or Wayland, depending on the configuration. In a Wayland session, GNOME directly communicates with the Wayland compositor (Mutter), which manages the display. In an X11 session, GNOME interacts with the X server, which acts as a middle layer between the hardware and the applications. Each display protocol has its own strengths and weaknesses. Many Linux distributions, including Debian, have been moving towards using Wayland as the default due to its performance and security benefits. However, some applications and configurations still rely on X11, so X11 remains an option and fallback in many systems. How This Relates to Your Issue Your error message shows that gnome-control-center (the GNOME Settings app) encountered problems because it was running under Wayland but tried to interact with components in an X11 manner, resulting in a crash. This kind of error can happen when applications expect one protocol but the system defaults to another. Switching to an X11 session (or forcing the GNOME Settings app to use X11) is a workaround to avoid these incompatibilities if certain applications or configurations are unstable under Wayland. "},"Linux/Display/GNOME-Default.html":{"url":"Linux/Display/GNOME-Default.html","title":"GNOME-Default","keywords":"","body":"file explorer: nautilus See also: dolphin, caja, thunar, vifm. Launch Nautilus: nautilus Launch Nautilus as root user: nautilus admin:/ Launch Nautilus and display a specific directory: nautilus path/to/directory Launch Nautilus with a specific file or directory selected: nautilus --select path/to/file_or_directory Launch Nautilus in a separated window: nautilus --new-window Close all Nautilus instances: nautilus --quit Display help: nautilus --help settings: gnome-control-center dpkg: Debian package manager. Install a package: dpkg -i path/to/file.deb Remove a package: dpkg -r package List installed packages: dpkg -l pattern List a package's contents: dpkg -L package List contents of a local package file: dpkg -c path/to/file.deb Find out which package owns a file: dpkg -S path/to/file Current Legacy Files Nautilus Web Epiphany Text Editor Gedit Videos Totem Main Menu Alacarte Document Viewer Evince Disk Usage Analyzer Baobab Image Viewer EoG (Eye of GNOME) Passwords and Keys Seahorse GNOME Translation Editor Gtranslator outer disk mount: /media/hhw/Elements SE "},"Linux/Display/Hyprland.html":{"url":"Linux/Display/Hyprland.html","title":"Hyprland","keywords":"","body":"hyprland Github-Hyprland yprland is a 100% independent, dynamic tiling Wayland compositor that doesn't sacrifice on its looks. Hyprland ÊòØ‰∏Ä‰∏™ 100% Áã¨Á´ãÁöÑÂä®ÊÄÅÂπ≥Èì∫ Wayland ÂêàÊàêÂô®ÔºåÂÆÉ‰∏ç‰ºöÁâ∫Áâ≤ÂÖ∂Â§ñËßÇ„ÄÇ It provides the latest Wayland features, is highly customizable, has all the eyecandy, the most powerful plugins, easy IPC, much more QoL stuff than other compositors and more... ÂÆÉÊèê‰æõÊúÄÊñ∞ÁöÑ Wayland ÂäüËÉΩÔºåÈ´òÂ∫¶ÂèØÂÆöÂà∂ÔºåÊã•ÊúâÊâÄÊúâÂê∏ÂºïÁúºÁêÉ„ÄÅÊúÄÂº∫Â§ßÁöÑÊèí‰ª∂„ÄÅ ÁÆÄÂçïÁöÑ IPCÔºåÊØîÂÖ∂‰ªñÂêàÊàêÂô®Êõ¥Â§öÁöÑ QoL ‰∏úË•øÁ≠âÁ≠â...... "},"Linux/Display/Wayland.html":{"url":"Linux/Display/Wayland.html","title":"Wayland","keywords":"","body":"Wayland text text Wayland is a replacement for the X11 window system protocol and architecture with the aim to be easier to develop, extend, and maintain. Wayland ÊòØ X11 Á™óÂè£Á≥ªÁªüÂçèËÆÆÂíåÊû∂ÊûÑÁöÑÊõø‰ª£ÂìÅÔºåÊó®Âú®Êõ¥Êòì‰∫éÂºÄÂèë„ÄÅÊâ©Â±ïÂíåÁª¥Êä§„ÄÇ Wayland is the language (protocol) that applications can use to talk to a display server in order to make themselves visible and get input from the user (a person). A Wayland server is called a \"compositor\". Applications are Wayland clients. Wayland ÊòØÂ∫îÁî®Á®ãÂ∫èÂèØ‰ª•Áî®Êù•‰∏éÊòæÁ§∫ÊúçÂä°Âô®ÈÄö‰ø°ÁöÑËØ≠Ë®ÄÔºàÂçèËÆÆÔºâÔºå‰ª•‰ΩøËá™Ë∫´ÂèØËßÅÂπ∂‰ªéÁî®Êà∑Ôºà‰∏Ä‰∏™‰∫∫ÔºâÈÇ£ÈáåËé∑ÂæóËæìÂÖ•„ÄÇWayland ÊúçÂä°Âô®Áß∞‰∏∫‚ÄúÂêàÊàêÂô®‚Äù„ÄÇÂ∫îÁî®Á®ãÂ∫èÊòØ Wayland ÂÆ¢Êà∑Á´Ø„ÄÇ Wayland also refers to a system architecture. It is not just a server-client relationship between a compositor and applications. There is no single common Wayland server like Xorg is for X11, but every graphical environment brings with it one of many compositor implementations. Window management and the end user experience are often tied to the compositor rather than swappable components. Wayland ËøòÊåáÁ≥ªÁªüÊû∂ÊûÑ„ÄÇÂÆÉ‰∏ç‰ªÖ‰ªÖÊòØÂêàÊàêÂô®ÂíåÂ∫îÁî®Á®ãÂ∫è‰πãÈó¥ÁöÑÊúçÂä°Âô®-ÂÆ¢Êà∑Á´ØÂÖ≥Á≥ª„ÄÇÊ≤°ÊúâÂÉè Xorg ÈÇ£Ê†∑Áî®‰∫é X11 ÁöÑÂçï‰∏ÄÈÄöÁî® Wayland ÊúçÂä°Âô®Ôºå‰ΩÜÊØè‰∏™ÂõæÂΩ¢ÁéØÂ¢ÉÈÉΩÂ∏¶Êù•‰∫ÜËÆ∏Â§öÂêàÊàêÂô®ÂÆûÁé∞‰πã‰∏Ä„ÄÇÁ™óÂè£ÁÆ°ÁêÜÂíåÊúÄÁªàÁî®Êà∑‰ΩìÈ™åÈÄöÂ∏∏‰∏éÂêàÊàêÂô®ËÄå‰∏çÊòØÂèØ‰∫§Êç¢ÁªÑ‰ª∂Áõ∏ÂÖ≥ËÅî„ÄÇ A core part of Wayland architecture is libwayland: an inter-process communication library that translates a protocol definition in XML to a C language API. This library does not implement Wayland, it merely encodes and decodes Wayland messages. The actual implementations are in the various compositor and application toolkit projects. Wayland Êû∂ÊûÑÁöÑÊ†∏ÂøÉÈÉ®ÂàÜÊòØ libwaylandÔºö‰∏Ä‰∏™ËøõÁ®ãÈó¥ÈÄö‰ø°Â∫ìÔºåÂèØÂ∞Ü XML ‰∏≠ÁöÑÂçèËÆÆÂÆö‰πâËΩ¨Êç¢‰∏∫ C ËØ≠Ë®Ä API„ÄÇËØ•Â∫ì‰∏çÂÆûÁé∞ WaylandÔºåÂÆÉÂè™ÊòØÂØπ Wayland Ê∂àÊÅØËøõË°åÁºñÁ†ÅÂíåËß£Á†Å„ÄÇÂÆûÈôÖÂÆûÁé∞‰Ωç‰∫éÂêÑÁßçÂêàÊàêÂô®ÂíåÂ∫îÁî®Á®ãÂ∫èÂ∑•ÂÖ∑ÂåÖÈ°πÁõÆ‰∏≠„ÄÇ Wayland does not restrict where and how it is used. A Wayland compositor could be a standalone display server running on Linux kernel modesetting and evdev input devices or on many other operating systems, or a nested compositor that itself is an X11 or Wayland application (client). Wayland can even be used in application-internal communication as is done in some web browsers. Wayland ‰∏çÈôêÂà∂ÂÆÉÁöÑ‰ΩøÁî®Âú∞ÁÇπÂíåÊñπÂºè„ÄÇWayland ÂêàÊàêÂô®ÂèØ‰ª•ÊòØÂú® Linux ÂÜÖÊ†∏Ê®°ÂºèËÆæÁΩÆÂíå evdev ËæìÂÖ•ËÆæÂ§áÊàñËÆ∏Â§öÂÖ∂‰ªñÊìç‰ΩúÁ≥ªÁªü‰∏äËøêË°åÁöÑÁã¨Á´ãÊòæÁ§∫ÊúçÂä°Âô®Ôºå‰πüÂèØ‰ª•ÊòØÊú¨Ë∫´ÊòØ X11 Êàñ Wayland Â∫îÁî®Á®ãÂ∫èÔºàÂÆ¢Êà∑Á´ØÔºâÁöÑÂµåÂ•óÂêàÊàêÂô®„ÄÇWayland ÁîöËá≥ÂèØ‰ª•Áî®‰∫éÂ∫îÁî®Á®ãÂ∫èÂÜÖÈÉ®ÈÄö‰ø°ÔºåÂ∞±ÂÉèÂú®Êüê‰∫õ Web ÊµèËßàÂô®‰∏≠ÊâÄÂÅöÁöÑÈÇ£Ê†∑„ÄÇ Xwayland text Xwayland is an X server and a Wayland client. It plays the role of a proxy between legacy X clients which do not support the Wayland protocols and the Wayland server. Xwayland ÊòØ‰∏Ä‰∏™ X ÊúçÂä°Âô®Âíå‰∏Ä‰∏™ Wayland ÂÆ¢Êà∑Á´Ø„ÄÇÂÆÉÂú®‰∏çÊîØÊåÅ Wayland ÂçèËÆÆÁöÑÈÅóÁïô X ÂÆ¢Êà∑Á´ØÂíå Wayland ÊúçÂä°Âô®‰πãÈó¥ÊâÆÊºî‰ª£ÁêÜÁöÑËßíËâ≤„ÄÇ configure Debian 12 system to use Wayland for all components that support it Yes, you can configure your Debian 12 system to use Wayland for all components that support it. This might help resolve compatibility issues by ensuring everything is consistently running on Wayland without falling back to X11. Here‚Äôs how to do it: 1. Ensure GNOME is Running on Wayland By default, Debian 12 GNOME should be set to use Wayland unless it‚Äôs explicitly disabled. Here‚Äôs how to confirm or switch to a Wayland session: Log Out of your current GNOME session. On the login screen, select your username, and before logging back in, look for a gear icon near the Sign In button. Click the gear icon and select GNOME or GNOME on Wayland (not GNOME on Xorg). Log back in. If you don‚Äôt see the option for GNOME on Wayland, you may need to ensure that Wayland is enabled in the GNOME Display Manager (GDM) configuration file. 2. Enable Wayland in GDM (GNOME Display Manager) If Wayland is disabled in GDM, follow these steps to re-enable it: Open a terminal and edit the GDM configuration file: sudo nano /etc/gdm3/custom.conf Look for the line: #WaylandEnable=false Uncomment it and set it to true, or remove the line entirely to allow Wayland by default: WaylandEnable=true Save and close the file. Restart GDM to apply the changes:sudo systemctl restart gdm3 3. Set Applications to Prefer Wayland Most GNOME applications and modern GTK apps should automatically use Wayland if the system is in a Wayland session. However, some applications (especially older or custom ones) may default to X11. Here‚Äôs how to ensure that applications favor Wayland: Check environment variables: Wayland applications typically recognize WAYLAND_DISPLAY. To make sure applications use Wayland, you can set this variable globally: Open the global profile configuration:sudo nano /etc/environment Add the following line:WAYLAND_DISPLAY=wayland-0 Save and close the file. Log out and log back in for changes to take effect. Force specific applications to use Wayland: Some applications (like Firefox and Electron-based apps) have specific flags to prefer Wayland. Here are a few examples: Firefox: Run Firefox with: MOZ_ENABLE_WAYLAND=1 firefox Electron apps: For Electron apps (like Visual Studio Code), start them with: code --enable-features=UseOzonePlatform --ozone-platform=wayland 4. Verify that Everything is Running on Wayland Once you‚Äôve made these changes, you can verify that GNOME and your applications are running on Wayland: Check GNOME session: Open a terminal and run: echo $XDG_SESSION_TYPE If the output is wayland, then GNOME is running on Wayland. Check individual applications: For example, in gnome-control-center or Firefox, you can check which display protocol they‚Äôre using: In gnome-control-center: Run gnome-control-center from the terminal and see if there are any GdkX11-related warnings (which would indicate it‚Äôs trying to use X11). If no warnings appear, it‚Äôs likely running on Wayland. In Firefox: Type about:support in the address bar and look for Window Protocol under Graphics. It should say Wayland. 5. Restart the System To ensure all components pick up the changes, restart your computer: sudo reboot After this, your GNOME session and most applications should fully run on Wayland, which should help avoid issues related to mixed X11 and Wayland components. If you encounter specific applications that still don‚Äôt work well with Wayland, you might need to run them with the GDK_BACKEND=x11 flag temporarily or wait for further compatibility improvements. second Yes, it is possible to configure your system to use Wayland for all components, which would resolve the problem where your GNOME desktop environment and applications are conflicting with X11. If you want to set Wayland as the default display protocol for all components on your Debian 12 system, follow these steps: 1. Ensure Wayland is Installed First, ensure that Wayland and the necessary components for GNOME are installed. This includes the Wayland compositor and the GNOME Wayland backend. Run the following command to check if the necessary Wayland components are installed: sudo apt install wayland-protocols gnome-shell wayland 2. Ensure GNOME is Running on Wayland By default, GNOME should run on Wayland on systems that support it, unless there is a configuration forcing it to run on X11. You can verify that GNOME is using Wayland by checking the GDK_BACKEND environment variable, which should be set to wayland. Step-by-Step to Force GNOME to Use Wayland: Check Current Session To check whether GNOME is running on Wayland or X11, open a terminal and run the following command: echo $XDG_SESSION_TYPE If the output is wayland, GNOME is already using Wayland. If the output is x11, GNOME is using X11, and you‚Äôll need to configure it to use Wayland. Log Out of the Current Session Log out of your current GNOME session. Choose GNOME on Wayland (at the Login Screen) On the login screen, after entering your username, you should see a settings icon or a gear icon (usually in the lower-right corner or near the session selection). Select GNOME on Wayland. Then log back in. This will start GNOME under Wayland rather than X11. 3. Disable X11 as a Fallback Option (Optional) To make sure that your system does not fall back to X11 automatically, you can disable the ability to use X11 for GNOME. Edit the GDM Configuration: Open the file /etc/gdm3/custom.conf in a text editor with superuser privileges. For example, use nano: sudo nano /etc/gdm3/custom.conf Disable Wayland and Ensure X11 is Not Available: Find the line: #WaylandEnable=false and make sure it is commented out (no # before it). This ensures that Wayland is enabled for GNOME. Now, find the line: #WaylandEnable=false and make sure it is disabled (no # before it). Restart GDM (GNOME Display Manager): After making the changes, restart the GDM service (this controls the graphical login): sudo systemctl restart gdm3 Reboot Your System: Finally, reboot your computer to make sure everything is set properly: sudo reboot 4. Verifying the System is Using Wayland After logging back in, you can confirm that all components are using Wayland by running: echo $XDG_SESSION_TYPE It should output wayland to confirm the system is running on Wayland. 5. Check for Potential Problems with Wayland While most modern GNOME applications and components should work well under Wayland, there might still be some legacy X11-specific issues or applications that might not fully support Wayland yet. In that case: Fallback to X11 for specific apps: If you encounter issues with specific applications, you can still run them under X11 by explicitly setting the GDK_BACKEND=x11 variable for those applications only. System-wide Wayland: If you want to use Wayland across all applications and ensure that they are compatible with it, consider looking into compatibility layers or tools that support running X11 applications under Wayland. For example, you could use XWayland, which allows X11 applications to run on Wayland. Conclusion Once you've configured GNOME to use Wayland and ensured that all components are set up to run under it, your system should no longer experience the issues related to X11-compatibility. However, always be prepared for occasional compatibility issues with legacy applications, although this is becoming less of a problem over time as more software supports Wayland natively. "},"Linux/Flashback.html":{"url":"Linux/Flashback.html","title":"Flashback","keywords":"","body":"If you can't open the Settings application in Debian 12, the issue could be due to several reasons, including a missing or broken package, or a problem with the desktop environment (usually GNOME on Debian). Here are some steps to troubleshoot and fix the issue: 1. Try Opening Settings from the Terminal Sometimes, running an application from the terminal provides error messages that can help diagnose the issue. Open a terminal. Type the following command to try launching Settings:gnome-control-center If there is an error message, note it down, as it can provide clues about what is going wrong. 2. Restart GNOME Shell If gnome-control-center fails to start, it might be related to the GNOME Shell. Restarting GNOME might help: Press Alt + F2. Type r and press Enter to reload the GNOME Shell. Then try opening the Settings app again. 3. Check and Reinstall the gnome-control-center Package The Settings app in GNOME is provided by the gnome-control-center package. If it‚Äôs missing or corrupt, reinstalling it might fix the issue. Open a terminal. Run the following commands: sudo apt update sudo apt install --reinstall gnome-control-center After reinstalling, try launching the Settings app again. 4. Check for Pending Updates Outdated packages or system libraries can sometimes cause issues. Make sure your system is up-to-date: sudo apt update && sudo apt upgrade 5. Clear GNOME Settings Cache Sometimes, cache files for GNOME can get corrupted. Deleting them can reset configuration settings and fix problems. Open a terminal. Run these commands to clear the cache: rm -rf ~/.cache/gnome-control-center rm -rf ~/.config/gnome-control-center Try launching Settings again. 6. Check Logs for Errors If the above steps don‚Äôt work, checking system logs can give further hints. Open a terminal. View recent log messages related to GNOME Control Center:journalctl -xe | grep gnome-control-center Look for any errors related to gnome-control-center in the output. 7. Reboot the System As a final step, reboot the system to clear any temporary issues: sudo reboot After rebooting, try opening the Settings app again. If the problem persists, the issue may be with GNOME itself or with deeper system settings. second gnome-control-center (gnome-control-center:4566): GLib-GObject-WARNING **: 10:08:38.727: invalid cast from 'GdkWaylandToplevel' to 'GdkX11Surface' (gnome-control-center:4566): GLib-GObject-WARNING **: 10:08:38.727: invalid cast from 'GdkWaylandDisplay' to 'GdkX11Display' [1] 4566 segmentation fault gnome-control-center ans: The error messages you're seeing indicate that gnome-control-center is attempting to cast Wayland-specific objects as X11 objects, which is causing it to crash with a segmentation fault. This is a common issue when there are conflicts between X11 and Wayland components, especially if the system is running Wayland but some applications are expecting X11. Here are several ways to potentially fix this issue: 1. Start GNOME on X11 Instead of Wayland If you‚Äôre running GNOME with Wayland, you can switch to an X11 session to see if that resolves the issue. Log out of your current session. On the login screen, select your username, and before logging back in, look for a settings icon (usually a gear icon) near the login button. Choose GNOME on Xorg or GNOME on X11 instead of GNOME on Wayland. Log back in and try opening the Settings app again. 2. Force gnome-control-center to Use X11 Temporarily If you prefer to stay on Wayland but want to see if the issue is related to Wayland compatibility, you can try launching gnome-control-center with the GDK_BACKEND environment variable set to X11. Open a terminal and run: GDK_BACKEND=x11 gnome-control-center This command forces gnome-control-center to use X11, which may help it avoid the Wayland-related segmentation fault. 3. Update Your System and GNOME Packages This may be a known issue with your specific version of GNOME or Debian 12. Make sure your system and GNOME packages are fully updated. sudo apt update && sudo apt upgrade Then, try running the Settings app again. 4. Disable Wayland for GNOME (as a More Permanent Fix) If you find that gnome-control-center works well under X11, you may want to disable Wayland entirely for GNOME. Open the file /etc/gdm3/custom.conf in a text editor with superuser privileges, for example: sudo nano /etc/gdm3/custom.conf Look for the line: #WaylandEnable=false Uncomment it by removing the # so it reads: WaylandEnable=false Save the file and exit the editor. Reboot the system:sudo reboot This will disable Wayland, so GNOME will use X11 by default. After rebooting, try launching the Settings app again. 5. Reinstall Related GNOME and Wayland Packages It‚Äôs possible that some Wayland libraries or GNOME components are misconfigured or outdated. Try reinstalling them: sudo apt install --reinstall gnome-shell gnome-control-center libwayland-client0 libwayland-server0 Then restart your system and try opening Settings again. If the issue continues, it might be a deeper compatibility issue with the Wayland implementation on your system, and sticking with X11 for GNOME might be the most stable solution until updates fix the problem. "},"Linux/InputMethod.html":{"url":"Linux/InputMethod.html","title":"InputMethod","keywords":"","body":"Fcitx Setup_Fcitx_5 Áî±‰∫éÂæàÂ§ö‰∏çÂêåÂú∞ÊñπÁöÑËøáÊ∏°Èò∂ÊÆµÔºåÊ≤°ÊúâÈÄÇÂêàÊØè‰∏™Âú∞ÊñπÁöÑÂÆåÁæéËß£ÂÜ≥ÊñπÊ°à„ÄÇËØ∑Ê†πÊçÆÊÇ®ÁöÑÁéØÂ¢ÉÈÄâÊã©ÊÇ®Ëá™Â∑±ÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇÂü∫Êú¨‰∏äÔºåÊÇ®Ë¶ÅÂÅöÁöÑÊòØ‰∏∫Ê°åÈù¢‰ºöËØùËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáè„ÄÇ XMODIFIERS=@im=fcitx GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx Useful commands: fcitx-diagnose # print diagnostic information fcitx-configtool # open the configuration tool # fcitx-remote CSDN: Debian Linux Input Method debianÁ≥ªÁªüÂØπ‰∏≠ÊñáËæìÂÖ•Ê≥ïÁöÑÊîØÊåÅÂ∞ë‰πãÂèàÂ∞ëÔºåÂæàÂ§ö‰∫∫‰ºöÈÄâÊã©‰ΩøÁî®ÊêúÁãóÔºå‰ΩÜÊòØÂØπ‰∫éÂ§ßÂ§öÊï∞Êù•ËØ¥Ôºå‰ºöÊúâÂêÑÁßçÂêÑÊ†∑ÁöÑÈóÆÈ¢òÔºåÊâÄ‰ª•ËøôÈáåÂ∞Ü‰ºö‰ªãÁªç‰ΩøÁî®Á≥ªÁªüËá™Â∏¶ÁöÑfcitxËæìÂÖ•Ê≥ï„ÄÇ È¶ñÂÖàËΩØ‰ª∂Ê∫êÊõ¥Êñ∞ÔºàÈÄâÔºâÔºö 1.Âú®ÁªàÁ´Ø‰∏≠ËæìÂÖ•Ôºö sudo gedit /etc/apt/sources.list 2.Âú®ÊâìÂºÄÁöÑÊñáÊú¨‰∏≠Âà†Èô§ÂÖ®ÈÉ®ÂÜÖÂÆπÔºåÁ≤òË¥¥‰∏ä‰ª•‰∏ãÊñáÊú¨Ôºö deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib deb-src http://mirrors.163.com/debian/ jessie main non-free contrib deb-src http://mirrors.163.com/debian/ jessie-updates main non-free contrib deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib deb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib deb http://ftp.cn.debian.org/debian wheezy main contrib non-free ÔºàÊ≠§Â§ÑÂåÖÂê´163‰ª•ÂèädebianÂÆòÊñπËΩØ‰ª∂Ê∫êÔºâ 3.ÁÇπÂáª‰øùÂ≠òÔºåÂπ∂ÂÖ≥Èó≠ÔºåÂõûÂà∞ÁªàÁ´ØÔºåËøõË°åËΩØ‰ª∂Ê∫êÂêåÊ≠• ËæìÂÖ•Êåá‰ª§Ôºösudo apt-get update apt-get install fcitx-ui-classic && apt-get install fcitx-ui-light 5.ÁÇπÂáªËèúÂçïÔºåÊâæÂà∞Â∫îÁî®: ËæìÂÖ•Ê≥ïÔºåÂπ∂ÊâìÂºÄ„ÄÇ 6.Âú®Áî®Êà∑ËÆæÁΩÆ‰∏≠ ÁÇπÂáª fctixÈÄâÈ°π ÔºåÂπ∂ÁÇπÂáªÁ°ÆÂÆö„ÄÇ 7.Ê†πÊçÆËæìÂÖ•Ê≥ïÈÖçÁΩÆ‰∏≠ÁöÑÊèêÁ§∫ÔºåÊâìÂºÄÁªàÁ´ØÔºåËæìÂÖ•Êåá‰ª§ÔºàÊ†πÊçÆËá™Ë∫´Ë¶ÅÊ±ÇÈÄâÊã©ÔºâÔºö sudo apt-get install fcitx-sunpinyin fcitx-googlepinyin fcitx-pinyin ÔºàËøôÈáåÊúâ‰∏âÁßçÊãºÈü≥ËæìÂÖ•Ê≥ïÔºöfcitx-sunpinyin Ôºåfcitx-googlepinyin Âíå fcitx-pinyin Ôºå‰∏çÈúÄË¶ÅÁöÑÂèØ‰ª•Âà†ÊéâÔºâ sudo apt-get fcitx-table-wubi fcitx-table-wbpy (‰∏§Áßç‰∫îÁ¨îËæìÂÖ•Ê≥ïÔºöfcitx-table-wubi Âíåfcitx-table-wbpy) sudo apt-get fcitx-table-cangjie (ÁπÅ‰Ωì‰∏≠ÊñáËæìÂÖ•ÔºåÂè™Êúâ‰∏ÄÁßç) 8.ÂÆâË£ÖÈÄöÁî®ÁöÑËæìÂÖ•Ê≥ïÁ†ÅË°®: fcitx-table* Â•ó‰ª∂ÔºàÂøÖË£ÖÔºÅÔºâ sudo apt-get fcitx-table* 9.Â∫îÁî®Á®ãÂ∫èÊîØÊåÅÔºàÂøÖË£ÖÔºÅÔºâ sudo apt-get install fcitx-frontend-gtk2 fcitx-frontend-gtk3 fcitx-frontend-qt4 (fcitx-frontend-gtk2 Âíå fcitx-frontend-gtk3 ÂøÖË£ÖÔºåÂêåÊó∂ fcitx-frontend-qt4 ‰πüÂª∫ËÆÆ‰∏ÄËµ∑Ë£Ö‰∏ä) 10.ÊúÄÂêéÈáçÂêØÔºåÊ†πÊçÆËá™Â∑±ÁöÑÂø´Êç∑ÈîÆÂêØÂä®ËæìÂÖ•Ê≥ïÔºàÈªòËÆ§ Ctrl+Á©∫Ê†º Ôºâ Âú®Âè≥‰∏ãËÑö‰ºöÊúâÂ∞èÈîÆÁõòÔºåÂè≥ÈîÆ --ÈÖçÁΩÆ ÂèØ‰ª•ÈÄâÊã©ÂêÑÁßçËæìÂÖ•ÈÄâÈ°π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî ÁâàÊùÉÂ£∞ÊòéÔºöÊú¨Êñá‰∏∫Âçö‰∏ªÂéüÂàõÊñáÁ´†ÔºåÈÅµÂæ™ CC 4.0 BY-SA ÁâàÊùÉÂçèËÆÆÔºåËΩ¨ËΩΩËØ∑ÈôÑ‰∏äÂéüÊñáÂá∫Â§ÑÈìæÊé•ÂíåÊú¨Â£∞Êòé„ÄÇ ÂéüÊñáÈìæÊé•Ôºöhttps://blog.csdn.net/ieeso/article/details/105274943 "},"Linux/LSB.html":{"url":"Linux/LSB.html","title":"LSB","keywords":"","body":"LSB (Linux Standard Base) is a standardization effort by the Linux Foundation aimed at increasing compatibility among different Linux distributions. Its primary goal is to ensure that software applications can run on various distributions without requiring modification, promoting software interoperability. Key Concepts of LSB Standardization: LSB defines a set of standards for Linux distributions to follow, covering the core components of a Linux system, such as file system hierarchy, system libraries, and application programming interfaces (APIs). By adhering to these standards, developers can write applications that are more portable across compliant distributions. Compatibility: LSB aims to minimize the differences among distributions by providing a consistent environment. This includes defining package formats, directory structures, and other elements that help applications function uniformly across various distributions. Core Components: The LSB specification includes guidelines on system libraries, command-line utilities, file locations, and other core components necessary for application development. LSB Modules The LSB is divided into various modules, each addressing specific areas of the Linux environment. Some of the key modules include: Core Module: Defines essential libraries and utilities required for applications to run. Includes specifications for basic system libraries, such as glibc, and common command-line tools. Graphics Module: Focuses on graphics-related libraries and interfaces, ensuring compatibility for graphical applications. This module may include support for X Window System libraries and graphics rendering libraries. Desktop Module: Specifies standards for desktop environments, such as GNOME or KDE, to ensure applications can integrate seamlessly into the user interface. Includes guidelines for desktop files, menus, and application launchers. Printing Module: Addresses standards for printing in Linux, including common protocols and interfaces. Ensures that applications can interact with printers consistently across different distributions. Web Module: Defines standards for web applications, including required libraries and services. Aims to facilitate the development of web-based applications that run across various Linux environments. Implementation and Compliance Compliance Testing: Distributions that claim LSB compliance undergo testing to ensure they meet the established standards. This helps developers and users trust that their applications will work as intended on compliant systems. Packaging: Many distributions provide tools for packaging software that adheres to LSB standards, making it easier to distribute and install applications. Benefits of LSB Portability: Developers can write code that runs on any LSB-compliant distribution, reducing the need for separate versions of software. Easier Development: With a standardized environment, developers can focus on creating applications rather than dealing with the nuances of different distributions. Community Collaboration: LSB fosters collaboration among various Linux distributions, encouraging a unified approach to development and application deployment. Current Status While LSB was widely adopted in the past, its relevance has diminished somewhat as distributions have evolved and some developers have opted for alternative packaging methods (like Snap or Flatpak) that focus on containerization. Nevertheless, understanding LSB remains important for those working with Linux systems, especially in environments where compatibility and standardization are critical. "},"Linux/LinuxFamily/LinuxFamily.html":{"url":"Linux/LinuxFamily/LinuxFamily.html","title":"LinuxFamily","keywords":"","body":""},"Linux/LinuxFamily/ArchLinux.html":{"url":"Linux/LinuxFamily/ArchLinux.html","title":"ArchLinux","keywords":"","body":"text text Arch Linux ÊòØ‰∏Ä‰∏™Áã¨Á´ãÂºÄÂèëÁöÑ x86-64 ÈÄöÁî® GNU/Linux ÂèëË°åÁâàÔºåÂÆÉËá¥Âäõ‰∫éÈÄöËøáÈÅµÂæ™ÊªöÂä®ÂèëÂ∏ÉÊ®°ÂûãÊù•Êèê‰æõÂ§ßÂ§öÊï∞ËΩØ‰ª∂ÁöÑÊúÄÊñ∞Á®≥ÂÆöÁâàÊú¨„ÄÇÈªòËÆ§ÂÆâË£ÖÊòØ‰∏Ä‰∏™ÊúÄÂ∞èÁöÑÂü∫Êú¨Á≥ªÁªüÔºåÁî±Áî®Êà∑ÈÖçÁΩÆ‰∏∫‰ªÖÊ∑ªÂä†ÊúâÊÑèÈúÄË¶ÅÁöÑÂÜÖÂÆπ„ÄÇ "},"Linux/LinuxFamily/DebianFamily.html":{"url":"Linux/LinuxFamily/DebianFamily.html","title":"DebianFamily","keywords":"","body":"Debian12 bookworm Release Notes 5.1.5. Fcitx versions no longer co-installable 5.1.5. Fcitx ÁâàÊú¨‰∏çÂÜçÂèØÂÖ±ÂêåÂÆâË£Ö The packages fcitx and fcitx5 provide version 4 and version 5 of the popular Fcitx Input Method Framework. Following upstream's recommendation, they can no longer be co-installed on the same operating system. Users should determine which version of Fcitx is to be kept if they had co-installed fcitx and fcitx5 previously. ËΩØ‰ª∂ÂåÖ fcitx Âíå fcitx5 Êèê‰æõÊµÅË°åÁöÑ Fcitx ËæìÂÖ•Ê≥ïÊ°ÜÊû∂ÁöÑÁâàÊú¨ 4 ÂíåÁâàÊú¨ 5„ÄÇÊ†πÊçÆ‰∏äÊ∏∏ÁöÑÂª∫ËÆÆÔºåÂÆÉ‰ª¨‰∏çËÉΩÂÜçÂÖ±ÂêåÂÆâË£ÖÂú®Âêå‰∏Ä‰∏™Êìç‰ΩúÁ≥ªÁªü‰∏ä„ÄÇÂ¶ÇÊûúÁî®Êà∑‰πãÂâçÂ∑≤ÁªèÂÖ±ÂêåÂÆâË£Ö‰∫Ü fcitx Âíå fcitx5ÔºåÂàôÂ∫îÁ°ÆÂÆöË¶Å‰øùÁïôÂì™‰∏™ÁâàÊú¨ÁöÑ fcitx„ÄÇ Before the upgrade, users are strongly encouraged to purge all related packages for the unwanted Fcitx version (fcitx- for Fcitx 4, and fcitx5- for Fcitx 5). When the upgrade is finished, consider executing the im-config again to select the desired input method framework to be used in the system. Âú®ÂçáÁ∫ß‰πãÂâçÔºåÂº∫ÁÉàÂª∫ËÆÆÁî®Êà∑Ê∏ÖÈô§‰∏çÈúÄË¶ÅÁöÑ Fcitx ÁâàÊú¨ÁöÑÊâÄÊúâÁõ∏ÂÖ≥ËΩØ‰ª∂ÂåÖÔºàFcitx 4 ÁöÑ fcitx- Âíå Fcitx 5 ÁöÑ fcitx5-Ôºâ„ÄÇÂçáÁ∫ßÂÆåÊàêÂêéÔºåËÄÉËôëÂÜçÊ¨°ÊâßË°å im-config ÈÄâÊã©Ë¶ÅÂú®Á≥ªÁªü‰∏≠‰ΩøÁî®ÁöÑÊâÄÈúÄËæìÂÖ•Ê≥ïÊ°ÜÊû∂„ÄÇ "},"Linux/LinuxFamily/GentooLinux.html":{"url":"Linux/LinuxFamily/GentooLinux.html","title":"GentooLinux","keywords":"","body":"text "},"Linux/LinuxFamily/RedHatFamily.html":{"url":"Linux/LinuxFamily/RedHatFamily.html","title":"RedHatFamily","keywords":"","body":"sudo yum install -y httpd sudo rpm -i httpd-2.4.6-80.el7.centos.x86_64.rpm Rocky Linux 8 How To Install and Use Docker on Rocky Linux 8 How To Install Nginx on Rocky Linux 8 "},"Linux/Nautilus.html":{"url":"Linux/Nautilus.html","title":"Nautilus","keywords":"","body":"Nautilus: Debian File Manager nautilus-tips-tweaks Enable quick file preview Quick preview is rather a handy feature for a file manager. KDE‚Äôs Dolphin file manager provides it as a built-in feature. You can preview files such as PDF, text, images, audio, etc. You can scroll documents while in preview. In Nautilus, you need to install gnome-sushi to get this feature. sudo apt install gnome-sushi Now, close all instances of file manager and open it again. To see the preview, select a file and press the Space key. "},"Linux/PrintingDrivers.html":{"url":"Linux/PrintingDrivers.html","title":"PrintingDrivers","keywords":"","body":"Printing Drivers how to install hplip on ubuntu linux sudo apt install hplip hplip-data hplip-gui hplip-docDebian12 # hplip-gui: HP Linux Printing and Imaging - GUI utilities (Qt-based) sudo apt install hplip-gui # deps on: hplip: HP Linux Printing and Imaging cups: Common Unix Printing System - PPD/driver support, web interface. HPLIP is composed of: System services to handle communications with the printers HP CUPS backend driver (hp:) with bi-directional communication with HP printers (provides printer status feedback to CUPS and enhanced HPIJS functionality such as 4-side full-bleed printing support) HP CUPS backend driver for sending faxes (hpfax:) hpcups CUPS Raster driver to turn rasterized input from the CUPS filter chain into the printer's native format (PCL, LIDIL, ...). (hpcups is shipped in a separate package) HPIJS Ghostscript IJS driver to rasterize output from PostScript(tm) files or from any other input format supported by Ghostscript, and also for PostScript(tm) to fax conversion support (HPIJS is shipped in a separate package) Command line utilities to perform printer maintenance, such as ink-level monitoring or pen cleaning and calibration GUI and command line utility to download data from the photo card interfaces in MFP devices GUI and command line utilities to interface with the fax functions A GUI toolbox to access all these functions in a friendly way HPAIO SANE backend (hpaio) for flatbed and Automatic Document Feeder (ADF) scanning using MFP devices "},"Linux/UserManagement.html":{"url":"Linux/UserManagement.html","title":"UserManagement","keywords":"","body":"groups # to check groups of a user usermod -G # to add a user to a group usermod -G -d # to change the home directory of a user usermod -s # to change the shell of a user # give user sudo access sudo vim /etc/sudoers ALL=(ALL) ALL # add the line above to the end of the file # add user to sudo|wheel group sudo usermod -aG sudo su Switch shell to another user. More information: https://manned.org/su. - Switch to superuser (requires the root password): su - Switch to a given user (requires the user's password): su username - Switch to a given user and simulate a full login shell: su - username - Execute a command as another user: su - username -c \"command\" adduser User addition utility. More information: https://manned.org/adduser. - Create a new user with a default home directory and prompt the user to set a password: adduser username - Create a new user without a home directory: adduser --no-create-home username - Create a new user with a home directory at the specified path: adduser --home path/to/home username - Create a new user with the specified shell set as the login shell: adduser --shell path/to/shell username - Create a new user belonging to the specified group: adduser --ingroup group username users Display a list of logged in users. See also: useradd, userdel, usermod. More information: https://www.gnu.org/software/coreutils/users. - Print logged in usernames: users - Print logged in usernames according to a given file: users /var/log/wmtp usermod Modify a user account. See also: users, useradd, userdel. More information: https://manned.org/usermod. - Change a username: sudo usermod -l|--login new_username username - Change a user ID: sudo usermod -u|--uid id username - Change a user shell: sudo usermod -s|--shell path/to/shell username - Add a user to supplementary groups (mind the lack of whitespace): sudo usermod -a|--append -G|--groups group1,group2,... username - Change a user home directory: sudo usermod -m|--move-home -d|--home path/to/new_home username gpasswd Administer /etc/group and /etc/gshadow. More information: https://manned.org/gpasswd. - Define group administrators: sudo gpasswd -A user1,user2 group - Set the list of group members: sudo gpasswd -M user1,user2 group - Create a password for the named group: gpasswd group - Add a user to the named group: gpasswd -a user group - Remove a user from the named group: gpasswd -d user group (base) ‚ûú ~ gpasswd Usage: gpasswd [option] GROUP Options: -a, --add USER add USER to GROUP -d, --delete USER remove USER from GROUP -h, --help display this help message and exit -Q, --root CHROOT_DIR directory to chroot into -r, --remove-password remove the GROUP's password -R, --restrict restrict access to GROUP to its members -M, --members USER,... set the list of members of GROUP -A, --administrators ADMIN,... set the list of administrators for GROUP Except for the -A and -M options, the options cannot be combined. delete user In Debian 12, the deluser and userdel commands are used to delete users. However, if you can't find these commands, it might be due to a missing package or a typo. Here's how you can delete a user in Debian 12: 1. Using deluser (Recommended) The deluser command is part of the passwd package and is the preferred method for removing users in Debian. Steps: Install the passwd package (if not already installed): sudo apt update sudo apt install passwd Delete the user: sudo deluser username Replace username with the actual username you want to delete. Delete the user's home directory and mail spool (optional): sudo deluser --remove-home username 2. Using userdel The userdel command is part of the shadow-utils package and is a lower-level tool for removing users. Steps: Install the shadow-utils package (if not already installed): sudo apt update sudo apt install shadow-utils Delete the user: sudo userdel username Delete the user's home directory and mail spool (optional): sudo rm -rf /home/username sudo rm -rf /var/mail/username Troubleshooting Command not found: If you get a \"command not found\" error, ensure that the passwd or shadow-utils package is installed. Typo: Double-check the spelling of the commands (deluser and userdel). Summary Use deluser for a more user-friendly experience. Use userdel for a more manual approach. Always ensure the necessary packages are installed. Let me know if you encounter any issues! "},"Linux/apt.html":{"url":"Linux/apt.html","title":"apt","keywords":"","body":"# /etc/apt/apt.conf.d/01proxy # /etc/apt/apt.conf Acquire::http::proxy \"http://user:password@host:port/\"; Acquire { HTTP::proxy \"http://proxy_server:port/\"; HTTPS::proxy \"http://proxy_server:port/\"; } apt search --names-only apt 2.6.1 (amd64) Usage: apt-get [options] command apt-get [options] install|remove pkg1 [pkg2 ...] apt-get [options] source pkg1 [pkg2 ...] apt-get is a command line interface for retrieval of packages and information about them from authenticated sources and for installation, upgrade and removal of packages together with their dependencies. Most used commands: update - Retrieve new lists of packages upgrade - Perform an upgrade install - Install new packages (pkg is libc6 not libc6.deb) reinstall - Reinstall packages (pkg is libc6 not libc6.deb) remove - Remove packages purge - Remove packages and config files autoremove - Remove automatically all unused packages dist-upgrade - Distribution upgrade, see apt-get(8) dselect-upgrade - Follow dselect selections build-dep - Configure build-dependencies for source packages satisfy - Satisfy dependency strings clean - Erase downloaded archive files autoclean - Erase old downloaded archive files check - Verify that there are no broken dependencies source - Download source archives download - Download the binary package into the current directory changelog - Download and display the changelog for the given package apt is a commandline package manager and provides commands for searching and managing as well as querying information about packages. It provides the same functionality as the specialized APT tools, like apt-get and apt-cache, but enables options more suitable for interactive use by default. Most used commands: list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - automatically remove all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings apt-get purge docker-ce -y apt list --installed | grep docker "},"Linux/curl.html":{"url":"Linux/curl.html","title":"curl","keywords":"","body":"sudo curl -x \"http://127.0.0.1:7890\" https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc "},"Misc/Misc.html":{"url":"Misc/Misc.html","title":"Misc","keywords":"","body":""},"Misc/00_Links.html":{"url":"Misc/00_Links.html","title":"00_Links","keywords":"","body":"Useful Links Collection ‰∏áÈíüÂàô‰∏çËæ©Á§º‰πâËÄåÂèó‰πãÔºå‰∏áÈíü‰∫éÊàë‰ΩïÂä†ÁÑâÔºÅ^1 ÂØºËà™ s CS Ëá™Â≠¶ÊåáÂçó ÁΩëÁ´ôÂØºËà™ linux.do ÁΩëÁ´ôÂØºËà™ Blogs honeybadger-blog linux.cn liaoxuefeng Andrej Karpathy blog - 2014 Why you (yes, you) should blog - 2017 Hacker News Daily Tools pdf-to-txt table to markdown Tutorials GDB Ë∞ÉËØïÂ§öÁ∫øÁ®ãÁ®ãÂ∫èÁöÑÊÄªÁªì Linux 101 Courses CS615 -- System Administration Articles What Every Programmer Should Know About Memory - Traditional Chinese Misc gnu home zh The best free stock photos, royalty free images & videos shared by creators. alternativeto ToRead: zhihu - Performance and Compatibility in the HongMeng Production Microkernel zhihu - Programming Books to read Awesome Lists: Awesome-Selfhosted Radio to Txt blog: Âá†Ê¨æÂÖçË¥πÁöÑËØ≠Èü≥ËΩ¨ÊñáÂ≠óÂ∑•ÂÖ∑Êé®Ëçê È£û‰π¶Â¶ôËÆ∞ buzz: Transcribe and translate audio offline on your personal computer. Powered by OpenAI's Whisper. Online Convert onlineconvertfree caj2pdf caj2pdf gentleltd github: caj2pdf text toolsra delete all enters doc zealdocs video download yt pkgs pkgs: Packages for Linux and Unix repology: the packaging hub translation: academic.chatwithpaper github: SUSYUSTC/MathTranslate github: PDFMathTranslate logo maker actual free logo maker: ucraft logoly text white board figma Figma is a powerful, collaborative design tool for teams. Explore ideas and gather feedback, build realistic prototypes, and streamline product development with design systems. make timeline: markwhen, github harvestapp note app heynote Debug The Debugging Book very useful for debugging in python!!! DataScience: Python for Data Science Python for Data Science Online OCR: simpletex: Foemula and Document AI LLM Tools: domestic deepseek moonshot-kimi ÈòøÈáå-ÈÄö‰πâÂçÉÈóÆ Á∫≥Á±≥ NaMi AI ÁßòÂ°î AI ÊêúÁ¥¢ ËÖæËÆØÂÖÉÂÆù-Ê∑∑ÂÖÉÂ§ßÊ®°Âûã others openai-chatgpt google gemini google aistudio: very good for coding scispace: for research!! "},"Misc/01_GitHubReps.html":{"url":"Misc/01_GitHubReps.html","title":"01_GitHubReps","keywords":"","body":"docling https://ds4sd.github.io/docling/ ËøôÊòØ‰∏Ä‰∏™Áî± IBM ÂºÄÊ∫êÁöÑ Python Â∑•ÂÖ∑Ôºå‰∏ìÈó®Áî®‰∫éÂ∞ÜÂêÑÁ±ªÊñáÊ°£ËΩ¨Âåñ‰∏∫ÈÄÇÂêàÁîüÊàêÂºè AI ‰ΩøÁî®ÁöÑÂ∑•ÂÖ∑„ÄÇÂÆÉËÉΩÂ§üÂ∞Ü PDF„ÄÅDOCX„ÄÅPPTX„ÄÅÂõæÁâá„ÄÅHTML„ÄÅMarkdown Á≠âÂ§öÁßçÊµÅË°åÊñáÊ°£Ê†ºÂºèÔºåÂØºÂá∫‰∏∫ Markdown Âíå JSON Ê†ºÂºèÔºåÊîØÊåÅÂ§öÁßç OCR ÂºïÊìéÔºàPDFÔºâ„ÄÅÁªü‰∏ÄÁöÑÊñáÊ°£ÂØπË±°ÔºàDoclingDocumentÔºâÔºåËΩªÊùæÈõÜÊàêÊ£ÄÁ¥¢Â¢ûÂº∫ÁîüÊàêÔºàRAGÔºâÂíåÈóÆÁ≠îÂ∫îÁî®ÔºåÈÄÇÁî®‰∫éÈúÄË¶ÅÂ∞ÜÊñáÊ°£‰Ωú‰∏∫ÁîüÊàêÂºè AI Ê®°ÂûãËæìÂÖ•ÁöÑÂú∫ÊôØ„ÄÇ best-of-ml-python ËØ•È°πÁõÆÊèê‰æõ‰∫Ü‰∏Ä‰∏™È´òË¥®ÈáèÁöÑÊú∫Âô®Â≠¶‰π† Python Â∫ìÂàóË°®ÔºåÂåÖÂê´Ë∂ÖËøá 900 ‰∏™ÂºÄÊ∫êÈ°πÁõÆÔºåÂπ∂ÊåâÁÖßÈ°πÁõÆË¥®ÈáèËØÑÂàÜËøõË°åÊéíÂêçÔºåÊØèÂë®Êõ¥Êñ∞‰∏ÄÊ¨°„ÄÇÊâÄÊúâÂºÄÊ∫êÈ°πÁõÆË¢´ÂàÜÊàê‰∫Ü 30 Â§ö‰∏™ÂàÜÁ±ªÔºåÂåÖÊã¨Êú∫Âô®Â≠¶‰π†Ê°ÜÊû∂„ÄÅÊï∞ÊçÆÂèØËßÜÂåñ„ÄÅËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ„ÄÅOCR„ÄÅÊ®°ÂûãÂ∫èÈÉ®ÁΩ≤Á≠âÔºå‰æø‰∫é‰∏çÂêåÂ∫îÁî®È¢ÜÂüüÁöÑÂºÄÂèëËÄÖÂø´ÈÄüÊâæÂà∞ÊâÄÈúÄÁöÑÊú∫Âô®Â≠¶‰π†Â∑•ÂÖ∑ÂíåËµÑÊ∫ê„ÄÇ bananas: cross-platform screen sharing bananas ÂÆòÁΩëÔºöhttps://getbananas.net ‰∫ëÊúµÂ§á‰ªΩÂèëÂ∏ÉÂú∞ÂùÄÔºöhttps://github.com/likeflyme/cloudbak ‰∫ëÊúµÂ§á‰ªΩÂÆòÁΩëÔºöhttps://www.cloudbak.org/ ‰ΩøÁî®ÊïôÁ®ãÔºöhttps://www.cloudbak.org/use/create-session.html È≠îÈïúÔºöÈ°πÁõÆÂú∞ÂùÄhttps://github.com/idootop/MagicMirror/blob/main/docs/cn/readme.md ‰ΩúËÄÖÊèê‰æõÁöÑÂÆâË£ÖÂåÖÔºåÊèêÂèñÂØÜÁ†Å: 4ro2Ôºöhttps://del-wang.lanzout.com/b01qdt5nba ‰∏ÄÈîÆÈ©¨ËµõÂÖãÔºöhttps://github.com/Ritr/publicTools Traymond Â¢ûÂº∫ÁâàÔºöhttps://github.com/tabris17/traymond Â£πÂç∞Ôºöhttps://github.com/ggchivalrous/yiyin ‰ªøÁîüÈòÖËØªÔºöhttps://github.com/yitong2333/Bionic-Reading/blob/main/README-CN.md ebook2audiobook error when building: No such file or directory: 'mecab-config' issue "},"Misc/Bochs.html":{"url":"Misc/Bochs.html","title":"Bochs","keywords":"","body":"Bochs Ê¨¢ËøéÊù•Âà∞Bochs IA-32‰ªøÁúüÂô®È°πÁõÆ BochsÊòØ‰∏Ä‰∏™Áî®C++ÁºñÂÜôÁöÑÈ´òÂ∫¶ÂèØÁßªÊ§çÁöÑÂºÄÊ∫êIA-32(x86)PC‰ªøÁúüÂô®ÔºåÂèØ‰ª•Âú®Â§ßÂ§öÊï∞ÊµÅË°åÁöÑÂπ≥Âè∞‰∏äËøêË°å„ÄÇÂÆÉÂåÖÊã¨ÂØπËã±ÁâπÂ∞îx86 CPU„ÄÅÊôÆÈÄöI/OËÆæÂ§áÂíåËá™ÂÆö‰πâBIOSÁöÑ‰ªøÁúü„ÄÇBochsÂèØ‰ª•ÁºñËØëÊ®°ÊãüËÆ∏Â§ö‰∏çÂêåÁöÑx86 CPUÔºå‰ªéÊó©ÊúüÁöÑ386Âà∞ÊúÄÊñ∞ÁöÑx86-64Ëã±ÁâπÂ∞îÂíåAMDÂ§ÑÁêÜÂô®ÔºåÁîöËá≥ÂèØËÉΩËøòÊ≤°ÊúâËøõÂÖ•Â∏ÇÂú∫„ÄÇ BochsËÉΩÂ§üÂú®‰ªøÁúü‰∏≠ËøêË°åÂ§ßÂ§öÊï∞Êìç‰ΩúÁ≥ªÁªüÔºåÂåÖÊã¨Linux„ÄÅDOSÊàñMicrosoft Windows„ÄÇBochsÊúÄÂàùÁî±Kevin LawtonÁºñÂÜôÔºåÁõÆÂâçÁî±ËØ•È°πÁõÆÁª¥Êä§„ÄÇ BochsÂèØ‰ª•Ë¢´ÁºñËØëÂπ∂‰ª•Â§öÁßçÊ®°Âºè‰ΩøÁî®ÔºåÂÖ∂‰∏≠‰∏Ä‰∫õÊ®°Âºè‰ªçÂú®ÂºÄÂèë‰∏≠„ÄÇbochsÁöÑ \"ÂÖ∏Âûã \"Áî®ÈÄîÊòØÊèê‰æõÂÆåÊï¥ÁöÑx86 PC‰ªøÁúüÔºåÂåÖÊã¨x86Â§ÑÁêÜÂô®„ÄÅÁ°¨‰ª∂ËÆæÂ§áÂíåÂÜÖÂ≠ò„ÄÇËøôÂÖÅËÆ∏‰Ω†Âú®Â∑•‰ΩúÁ´ôÁöÑÊ®°ÊãüÂô®‰∏≠ËøêË°åÊìç‰ΩúÁ≥ªÁªüÂíåËΩØ‰ª∂ÔºåÂ∞±ÂÉè‰Ω†Âú®‰∏ÄÂè∞Êú∫Âô®‰∏≠Êã•Êúâ‰∏ÄÂè∞Êú∫Âô®‰∏ÄÊ†∑„ÄÇ‰æãÂ¶ÇÔºåÂÅáËÆæ‰Ω†ÁöÑÂ∑•‰ΩúÁ´ôÊòØ‰∏Ä‰∏™Unix/X11Â∑•‰ΩúÁ´ôÔºå‰ΩÜ‰Ω†ÊÉ≥ËøêË°åWin'95Â∫îÁî®Á®ãÂ∫è„ÄÇBochsÂ∞ÜÂÖÅËÆ∏‰Ω†Âú®Unix/X11Â∑•‰ΩúÁ´ô‰∏äËøêË°åWin'95ÂíåÁõ∏ÂÖ≥ËΩØ‰ª∂ÔºåÂú®‰Ω†ÁöÑÂ∑•‰ΩúÁ´ô‰∏äÊòæÁ§∫‰∏Ä‰∏™Á™óÂè£ÔºåÊ®°ÊãüPC‰∏äÁöÑÊòæÁ§∫Âô®„ÄÇ BochsÊòØ‰∏Ä‰∏™‰ªøÁúüÂô®ÔºàemulatorÔºâ--‰∏çÊòØËôöÊãüÂåñËΩØ‰ª∂Ôºàvirtualization softwareÔºâ„ÄÇÂÆÉÂèØ‰ª•Âú®ËÆ∏Â§öÊû∂ÊûÑ‰∏äÁßªÊ§çÔºöX86„ÄÅARM„ÄÅMIPSÁ≠â„ÄÇËøôÊÑèÂë≥ÁùÄÂÆÉÂøÖÈ°ªËÉΩÂ§üÊ®°ÊãüÊØè‰∏ÄÊù°CPUÊåá‰ª§„ÄÇ Ëøô‰ΩøBochsÂå∫Âà´‰∫éËôöÊãüÂåñËß£ÂÜ≥ÊñπÊ°àÔºå‰æãÂ¶ÇVirtualBox„ÄÅVMWareÁ≠â„ÄÇÈÇ£‰∫õÈ°πÁõÆÊèê‰æõ‰∫ÜÂæàÂ•ΩÁöÑÁî®Êà∑‰ΩìÈ™åÂíåÂø´ÈÄüÁöÑÊÄßËÉΩÔºåÂÖ∂‰ª£‰ª∑ÊòØÁ°¨‰ª∂ÈôêÂà∂„ÄÅ‰∏Ä‰∫õÈùûÁ°ÆÂÆöÊÄßÂíå‰∏Ä‰∫õÂøÖË¶ÅÁöÑÈªëÂÆ¢ÊîªÂáªÊù•‰ΩøÁ®ãÂ∫èÂ∑•‰Ωú„ÄÇ BochsÁöÑ‰ªøÁúüÊèê‰æõ‰∫Ü‰∏Ä‰∏™ÂèØÊéßÁöÑ„ÄÅÁ≤æÁ°ÆÁöÑÊâßË°åÁéØÂ¢ÉÔºå‰ΩÜ‰ª£‰ª∑ÊòØÈÄüÂ∫¶/ÊÄßËÉΩ„ÄÇËøôÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÂèØËÉΩÊòØÊúâÂà©ÁöÑÔºå‰æãÂ¶ÇÔºö Âú®ÂºÄÂèëÊìç‰ΩúÁ≥ªÁªüÊàñÂºïÂØºÁ®ãÂ∫èÊó∂ ÂΩìÂ§ÑÁêÜÈùûÂ∏∏ËÄÅÁöÑ„ÄÅÂÖ≥ÈîÆ‰ªªÂä°ÁöÑËΩØ‰ª∂Êó∂ ÂΩìÂØπÁ≥ªÁªüÁ∫ß‰ª£Á†ÅËøõË°åÈÄÜÂêëÂ∑•Á®ãÊó∂ Ê¨≤‰∫ÜËß£Êõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇËßÅÁî®Êà∑ÊåáÂçó‰∏≠ÁöÑ‰ªãÁªçÈÉ®ÂàÜ "},"Misc/Compression.html":{"url":"Misc/Compression.html","title":"Compression","keywords":"","body":"Compression Types of Compression ‰ª•‰∏ãÊòØ‰∏çÂêåÁ±ªÂûãÁöÑÂéãÁº©Êñá‰ª∂Ôºàzip„ÄÅgz„ÄÅtar.gz„ÄÅtar.bz2„ÄÅtar.xzÔºâÁöÑÂå∫Âà´ÂíåÁâπÁÇπÔºö 1. Zip Êñá‰ª∂ (.zip) Ê†ºÂºèÔºöÂçïÊñá‰ª∂ÂΩíÊ°£Ê†ºÂºèÔºåÂèØÂåÖÂê´Â§ö‰∏™Êñá‰ª∂ÂíåÁõÆÂΩï„ÄÇ ÂéãÁº©ÔºöÈªòËÆ§‰ΩøÁî® DEFLATE ÁÆóÊ≥ïÔºå‰ΩÜ‰πüÊîØÊåÅÂÖ∂‰ªñÁÆóÊ≥ï„ÄÇ Â∏∏ËßÅÁî®ÈÄîÔºöÂπøÊ≥õÁî®‰∫éË∑®Âπ≥Âè∞ÁöÑÊñá‰ª∂ÂÖ±‰∫´ÂíåÂàÜÂèë„ÄÇ ÁâπÁÇπÔºö ÊîØÊåÅÂéãÁº©ÂíåÂΩíÊ°£‰∏ÄÊ≠•ÂÆåÊàê„ÄÇ ÂÖÅËÆ∏ÈöèÊú∫ËÆøÈóÆÂçï‰∏™Êñá‰ª∂ÔºåÊó†ÈúÄËß£ÂéãÊï¥‰∏™ÂΩíÊ°£Êñá‰ª∂„ÄÇ ÊîØÊåÅÂØÜÁ†Å‰øùÊä§ÂíåÂä†ÂØÜ„ÄÇ Â∑•ÂÖ∑ÔºöUnix Á±ªÁ≥ªÁªü‰∏äÁöÑ zip Âíå unzip ÂëΩ‰ª§ÔºåÂêÑÁßçÂõæÂΩ¢Â∑•ÂÖ∑Ôºå‰ª•ÂèäËÆ∏Â§öÊìç‰ΩúÁ≥ªÁªüÁöÑÂéüÁîüÊîØÊåÅ„ÄÇ 2. Gzip Êñá‰ª∂ (.gz) Ê†ºÂºèÔºöÂçïÊñá‰ª∂ÂéãÁº©Ê†ºÂºè„ÄÇ ÂéãÁº©Ôºö‰ΩøÁî® DEFLATE ÁÆóÊ≥ï„ÄÇ Â∏∏ËßÅÁî®ÈÄîÔºöÈÄöÂ∏∏Áî®‰∫éÂéãÁº©Âçï‰∏™Êñá‰ª∂Êàñ‰∏é tar ÁªìÂêàÂéãÁº©Â§ö‰∏™Êñá‰ª∂/ÁõÆÂΩï„ÄÇ ÁâπÁÇπÔºö ÂéãÁº©ÈÄüÂ∫¶Âø´ÔºåÂéãÁº©ÊØîÂ•Ω„ÄÇ ‰∏çËÉΩÂçïÁã¨ÂΩíÊ°£Â§ö‰∏™Êñá‰ª∂ÊàñÁõÆÂΩïÔºåÈÄöÂ∏∏‰∏é tar ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ Â∑•ÂÖ∑Ôºögzip Âíå gunzip ÂëΩ‰ª§„ÄÇ 3. Â∏¶ Gzip ÂéãÁº©ÁöÑ Tar ÂåÖ (.tar.gz Êàñ .tgz) Ê†ºÂºèÔºöÁªìÂêà tarÔºàÂΩíÊ°£ÔºâÂíå gzipÔºàÂéãÁº©Ôºâ„ÄÇ ÂéãÁº©Ôºö‰ΩøÁî® gzip ËøõË°åÂéãÁº©„ÄÇ Â∏∏ËßÅÁî®ÈÄîÔºöUnix Á±ªÁ≥ªÁªü‰∏≠Â∏∏Áî®‰∫éËΩØ‰ª∂ÊâìÂåÖÂíåÂàÜÂèë„ÄÇ ÁâπÁÇπÔºö Â∞ÜÂ§ö‰∏™Êñá‰ª∂ÂíåÁõÆÂΩïÂΩíÊ°£‰∏∫‰∏Ä‰∏™Êñá‰ª∂„ÄÇ È°∫Â∫èËÆøÈóÆÔºåÈúÄË¶ÅËß£ÂéãÊï¥‰∏™ÂΩíÊ°£Êñá‰ª∂ÊâçËÉΩËÆøÈóÆÊñá‰ª∂„ÄÇ ÂπøÊ≥õÊîØÊåÅÂπ∂Áî®‰∫éËΩØ‰ª∂ÂàÜÂèë„ÄÇ Â∑•ÂÖ∑ÔºöÂ∏¶Êúâ -czvf Âíå -xzvf ÈÄâÈ°πÁöÑ tar ÂëΩ‰ª§„ÄÇ 4. Â∏¶ Bzip2 ÂéãÁº©ÁöÑ Tar ÂåÖ (.tar.bz2) Ê†ºÂºèÔºöÁªìÂêà tarÔºàÂΩíÊ°£ÔºâÂíå bzip2ÔºàÂéãÁº©Ôºâ„ÄÇ ÂéãÁº©Ôºö‰ΩøÁî® Burrows-Wheeler ÁÆóÊ≥ïÔºåÂéãÁº©ÊØîÊõ¥Â•Ω‰ΩÜÂéãÁº©ÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇ Â∏∏ËßÅÁî®ÈÄîÔºöÁî®‰∫éÂéãÁº©ÊØîÊØîÂéãÁº©ÈÄüÂ∫¶Êõ¥ÈáçË¶ÅÁöÑÂú∫ÊôØ„ÄÇ ÁâπÁÇπÔºö Â∞ÜÂ§ö‰∏™Êñá‰ª∂ÂíåÁõÆÂΩïÂΩíÊ°£‰∏∫‰∏Ä‰∏™Êñá‰ª∂„ÄÇ ÂéãÁº©ÊØîÊØî gzip Êõ¥Â•ΩÔºå‰ΩÜÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇ È°∫Â∫èËÆøÈóÆ„ÄÇ Â∑•ÂÖ∑ÔºöÂ∏¶Êúâ -cjvf Âíå -xjvf ÈÄâÈ°πÁöÑ tar ÂëΩ‰ª§„ÄÇ 5. Â∏¶ XZ ÂéãÁº©ÁöÑ Tar ÂåÖ (.tar.xz) Ê†ºÂºèÔºöÁªìÂêà tarÔºàÂΩíÊ°£ÔºâÂíå xzÔºàÂéãÁº©Ôºâ„ÄÇ ÂéãÁº©Ôºö‰ΩøÁî® LZMA2 ÁÆóÊ≥ïÔºåÊèê‰æõÈùûÂ∏∏È´òÁöÑÂéãÁº©ÊØîÂíåËâØÂ•ΩÁöÑÈÄüÂ∫¶„ÄÇ Â∏∏ËßÅÁî®ÈÄîÔºöÂú®ÈúÄË¶ÅÊúÄÂ§ßÂéãÁº©ÊØîÁöÑÊÉÖÂÜµ‰∏ãË∂äÊù•Ë∂äÂèóÊ¨¢ËøéÔºåÁî®‰∫éËΩØ‰ª∂ÂàÜÂèëÂíåÂ§á‰ªΩ„ÄÇ ÁâπÁÇπÔºö Â∞ÜÂ§ö‰∏™Êñá‰ª∂ÂíåÁõÆÂΩïÂΩíÊ°£‰∏∫‰∏Ä‰∏™Êñá‰ª∂„ÄÇ Âú®ÊèêÂà∞ÁöÑÊ†ºÂºè‰∏≠ÂéãÁº©ÊØîÊúÄÈ´ò„ÄÇ È°∫Â∫èËÆøÈóÆ„ÄÇ Â∑•ÂÖ∑ÔºöÂ∏¶Êúâ -cJvf Âíå -xJvf ÈÄâÈ°πÁöÑ tar ÂëΩ‰ª§„ÄÇ ‰∏ªË¶ÅÂå∫Âà´ ÂéãÁº©ÁÆóÊ≥ïÔºö ZipÔºöÈªòËÆ§‰ΩøÁî® DEFLATE„ÄÇ GzipÔºöDEFLATE„ÄÇ Bzip2ÔºöBurrows-Wheeler„ÄÇ XZÔºöLZMA2„ÄÇ ÂéãÁº©ÊØîÔºö ZipÔºö‰∏≠Á≠â„ÄÇ GzipÔºö‰∏≠Á≠âÂà∞Â•Ω„ÄÇ Bzip2ÔºöÈ´ò„ÄÇ XZÔºöÈùûÂ∏∏È´ò„ÄÇ ÂéãÁº©ÈÄüÂ∫¶Ôºö ZipÔºöÂø´„ÄÇ GzipÔºöÂø´„ÄÇ Bzip2ÔºöËæÉÊÖ¢„ÄÇ XZÔºöÊØî gzip ÊÖ¢‰ΩÜÊØî bzip2 Âø´„ÄÇ ÂΩíÊ°£ËÉΩÂäõÔºö ZipÔºöÊòØÔºà‰∏ÄÊ≠•ÂÆåÊàêÔºâ„ÄÇ GzipÔºöÂê¶Ôºà‰∏é tar ‰∏ÄËµ∑‰ΩøÁî®Ôºâ„ÄÇ Bzip2ÔºöÂê¶Ôºà‰∏é tar ‰∏ÄËµ∑‰ΩøÁî®Ôºâ„ÄÇ XZÔºöÂê¶Ôºà‰∏é tar ‰∏ÄËµ∑‰ΩøÁî®Ôºâ„ÄÇ Êñá‰ª∂ËÆøÈóÆÔºö ZipÔºöÈöèÊú∫ËÆøÈóÆ„ÄÇ Gzip/Tar.gzÔºöÈ°∫Â∫èËÆøÈóÆ„ÄÇ Bzip2/Tar.bz2ÔºöÈ°∫Â∫èËÆøÈóÆ„ÄÇ XZ/Tar.xzÔºöÈ°∫Â∫èËÆøÈóÆ„ÄÇ ÊÄªÁªì ZipÔºöÈÄÇÂêàÈÄöÁî®ÁöÑ„ÄÅË∑®Âπ≥Âè∞ÁöÑÊñá‰ª∂ÂÖ±‰∫´ÔºåÊîØÊåÅÈöèÊú∫ËÆøÈóÆ„ÄÇ GzipÔºöÂ∏∏Áî®‰∫éÂéãÁº©Âçï‰∏™Êñá‰ª∂Êàñ‰∏é tar ‰∏ÄËµ∑Áî®‰∫éÂ§ö‰∏™Êñá‰ª∂ÔºåÈÄüÂ∫¶ÂíåÂéãÁº©ÊØîÂπ≥Ë°°ËâØÂ•Ω„ÄÇ Tar.gzÔºöUnix Á±ªÁ≥ªÁªü‰∏≠Â∏∏ËßÅÁöÑËΩØ‰ª∂ÊâìÂåÖÊñπÂºèÔºåÂéãÁº©ÊØî‰∏≠Á≠â„ÄÇ Tar.bz2ÔºöÂéãÁº©ÊØîÊØî gzip Â•Ω‰ΩÜÈÄüÂ∫¶ËæÉÊÖ¢ÔºåÈÄÇÂêàÂØπÂéãÁº©ÊØîË¶ÅÊ±ÇÊõ¥È´òÁöÑÂú∫ÊôØ„ÄÇ Tar.xzÔºöÂéãÁº©ÊØîÊúÄÈ´òÔºåÈÄÇÂêàÈúÄË¶ÅÊúÄÂ§ßÂéãÁº©ÊØîÁöÑÂú∫ÊôØÔºåÂ∞ΩÁÆ°ÈÄüÂ∫¶ËæÉÊÖ¢„ÄÇ Ê†πÊçÆ‰Ω†ÁöÑÂÖ∑‰ΩìÈúÄÊ±ÇÈÄâÊã©ÂéãÁº©ÊØî„ÄÅÈÄüÂ∫¶ÂíåÊñá‰ª∂ËÆøÈóÆË¶ÅÊ±ÇÂêàÈÄÇÁöÑÊ†ºÂºè„ÄÇ "},"Misc/ComputationForcePlatforms.html":{"url":"Misc/ComputationForcePlatforms.html","title":"ComputationForcePlatforms","keywords":"","body":"featurize autodl "},"Misc/Copy.html":{"url":"Misc/Copy.html","title":"Copy","keywords":"","body":"To use scp to copy a directory but exclude a specific subdirectory in Debian 12, you can achieve this by combining tar with SSH. The scp command itself does not directly support excluding files or directories, but you can use the following approach as a workaround: Command: tar --exclude='dir_father/dir_child1' -cf - dir_father | ssh user@remote_host 'cd /destination/path && tar -xf -' Explanation: tar on the local machine: --exclude='dir_father/dir_child1': Skips the dir_child1 directory during the tar process. -cf - dir_father: Creates a tar archive of dir_father but writes it to standard output (-). ssh: Connects to the remote host. tar on the remote machine: cd /destination/path: Ensures the extracted files are placed in the correct destination. tar -xf -: Reads the tar archive from standard input and extracts it. Replace the following placeholders with actual values: user: Your username on the remote host. remote_host: The hostname or IP of the remote machine. /destination/path: The desired destination directory on the remote machine. Notes: Ensure you have the necessary permissions on both the local and remote directories. If your dir_child1 contains sensitive data or large files, double-check the exclusion path to avoid accidental transfer. Let me know if you need further clarification! "},"Misc/Drawing.html":{"url":"Misc/Drawing.html","title":"Drawing","keywords":"","body":"Drawing Á•ûÁªèÁΩëÁªúÁîªÂõæ gwding/draw_convnet (github.com) https://cbovar.github.io/ConvNetDraw/ Others canva: Visual Suite for Everyone can draw simple icons from words, e.g. \"NUDT SysY Compiler\" milanote: the tool for organizing creative projects "},"Misc/Flatpack.html":{"url":"Misc/Flatpack.html","title":"Flatpack","keywords":"","body":"Flatpack flatpak The future of apps on Linux. Change Sources: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo flatpak remotes --show-details # ÊòæÁ§∫flatpakÂÆòÊñπÊ∫ê flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub # run gimp flatpak run org.gimp.GIMP//stable "},"Misc/Fonts.html":{"url":"Misc/Fonts.html","title":"Fonts","keywords":"","body":"serach font on google, download the font file and install. gui managers: sudo apt install font-manager fc-cache -fv fc-list | grep \"IBM Plex Serif\" "},"Misc/FuzzTesting/FuzzTesting.html":{"url":"Misc/FuzzTesting/FuzzTesting.html","title":"FuzzTesting","keywords":"","body":"Fuzz Testing wiki: Fuzz testing In programming and software development, fuzzing or fuzz testing is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program. The program is then monitored for exceptions such as crashes) \"Crash (computing)\"), failing built-in code assertions) \"Assertion (software development)\"), or potential memory leaks. Typically, fuzzers are used to test programs that take structured inputs. This structure is specified, such as in a file format or protocol and distinguishes valid from invalid input. An effective fuzzer generates semi-valid inputs that are \"valid enough\" in that they are not directly rejected by the parser, but do create unexpected behaviors deeper in the program and are \"invalid enough\" to expose corner cases that have not been properly dealt with. Âú®ÁºñÁ®ãÂíåËΩØ‰ª∂ÂºÄÂèë‰∏≠ÔºåÊ®°Á≥äÊµãËØïÊàñÊ®°Á≥äÊµãËØïÊòØ‰∏ÄÁßçËá™Âä®ÂåñËΩØ‰ª∂ÊµãËØïÊäÄÊúØÔºåÊ∂âÂèäÊèê‰æõÊó†Êïà„ÄÅÊÑèÂ§ñÊàñÈöèÊú∫ÁöÑÊï∞ÊçÆ‰Ωú‰∏∫ËÆ°ÁÆóÊú∫Á®ãÂ∫èÁöÑËæìÂÖ•„ÄÇÁÑ∂ÂêéÔºåÂ∞ÜÁõëËßÜÁ®ãÂ∫èÊòØÂê¶Â≠òÂú®ÂºÇÂ∏∏Ôºå‰æãÂ¶ÇÂ¥©Ê∫É„ÄÅÂÜÖÁΩÆ‰ª£Á†ÅÊñ≠Ë®ÄÂ§±Ë¥•ÊàñÊΩúÂú®ÁöÑÂÜÖÂ≠òÊ≥ÑÊºè„ÄÇÈÄöÂ∏∏ÔºåÊ®°Á≥äÊµãËØïÁ®ãÂ∫èÁî®‰∫éÊµãËØïÈááÁî®ÁªìÊûÑÂåñËæìÂÖ•ÁöÑÁ®ãÂ∫è„ÄÇÊ≠§ÁªìÊûÑÊòØÊåáÂÆöÁöÑÔºå‰æãÂ¶Ç‰ª•Êñá‰ª∂Ê†ºÂºèÊàñÂçèËÆÆÊåáÂÆöÔºåÂπ∂Âå∫ÂàÜÊúâÊïàËæìÂÖ•ÂíåÊó†ÊïàËæìÂÖ•„ÄÇÊúâÊïàÁöÑÊ®°Á≥äÊµãËØïÂô®‰ºöÁîüÊàê‚ÄúË∂≥Â§üÊúâÊïà‚ÄùÁöÑÂçäÊúâÊïàËæìÂÖ•ÔºåÂõ†‰∏∫ÂÆÉ‰ª¨‰∏ç‰ºöË¢´Ëß£ÊûêÂô®Áõ¥Êé•ÊãíÁªùÔºå‰ΩÜÁ°ÆÂÆû‰ºöÂú®Á®ãÂ∫èÁöÑÊõ¥Ê∑±Â§Ñ‰∫ßÁîüÊÑèÊÉ≥‰∏çÂà∞ÁöÑË°å‰∏∫ÔºåÂπ∂‰∏î‚ÄúË∂≥Â§üÊó†Êïà‚Äù‰ª•Êö¥Èú≤Êú™Ê≠£Á°ÆÂ§ÑÁêÜÁöÑÊûÅÁ´ØÊÉÖÂÜµ„ÄÇ afl AFL: American Fuzzy Lop afl aflplusplus afl.rs rust-fuzz: AFL for Rust American fuzzy lop is a security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. This substantially improves the functional coverage for the fuzzed code. The compact synthesized corpora produced by the tool are also useful for seeding other, more labor- or resource-intensive testing regimes down the road. American fuzzy lop ÊòØ‰∏Ä‰∏™‰ª•ÂÆâÂÖ®‰∏∫ÂØºÂêëÁöÑ Ê®°Á≥äÂô®ÔºåÈááÁî®Êñ∞ÂûãÁºñËØëÊó∂Ê£ÄÊµãÂíåÈÅó‰º†ÁÆóÊ≥ïÊù•Ëá™Âä®ÂèëÁé∞Âπ≤ÂáÄ„ÄÅÊúâË∂£ÁöÑÊµãËØïÁî®‰æãÔºå‰ªéËÄåËß¶ÂèëÁõÆÊ†á‰∫åËøõÂà∂Êñá‰ª∂‰∏≠ÁöÑÊñ∞ÂÜÖÈÉ®Áä∂ÊÄÅ„ÄÇËøôÂ§ßÂ§ßÊèêÈ´ò‰∫ÜÊ®°Á≥ä‰ª£Á†ÅÁöÑÂäüËÉΩË¶ÜÁõñÁéá„ÄÇËØ•Â∑•ÂÖ∑ÁîüÊàêÁöÑÁ¥ßÂáëÁöÑÂêàÊàêËØ≠ÊñôÂ∫ì‰πüÂèØÁî®‰∫é‰∏∫Â∞ÜÊù•ÁöÑÂÖ∂‰ªñÂä≥Âä®ÊàñËµÑÊ∫êÂØÜÈõÜÂûãÊµãËØïÂà∂Â∫¶Â•†ÂÆöÂü∫Á°Ä„ÄÇ Compared to other instrumented fuzzers, afl-fuzz is designed to be practical: it has modest performance overhead, uses a variety of highly effective fuzzing strategies and effort minimization tricks, requires essentially no configuration, and seamlessly handles complex, real-world use cases - say, common image parsing or file compression libraries. ‰∏éÂÖ∂‰ªñ‰ª™Âô®ÂåñÊ®°Á≥äÂô®Áõ∏ÊØî,afl-fuzzË¢´ËÆæËÆ°‰∏∫ÂÆûÁî®:ÂÆÉÂÖ∑ÊúâÈÄÇÂ∫¶ÁöÑÊÄßËÉΩÂºÄÈîÄ,‰ΩøÁî®ÂêÑÁßçÈ´òÊïàÁöÑÊ®°Á≥äÁ≠ñÁï•ÂíåÂä™ÂäõÊúÄÂ∞èÂåñÊäÄÂ∑ß,Âü∫Êú¨‰∏ä‰∏çÈúÄË¶ÅÈÖçÁΩÆ,Âπ∂‰∏îÂèØ‰ª•Êó†ÁºùÂ§ÑÁêÜÂ§çÊùÇÁöÑÁé∞ÂÆû‰∏ñÁïåÁî®‰æã - ‰æãÂ¶Ç,Â∏∏ËßÅÁöÑÂõæÂÉèËß£ÊûêÊàñÊñá‰ª∂ÂéãÁº©Â∫ì„ÄÇ AFL.RS Fuzz testing is a software testing technique used to find security and stability issues by providing pseudo-random data as input to the software. AFLplusplus is a popular, effective, and modern fuzz testing tool based on AFL. This library, afl.rs, allows one to run AFLplusplus on code written in the Rust programming language. Ê®°Á≥äÊµãËØïÊòØ‰∏ÄÁßçËΩØ‰ª∂ÊµãËØïÊäÄÊúØÔºåÁî®‰∫éÈÄöËøáÊèê‰æõ‰º™ÈöèÊú∫Êï∞ÊçÆ‰Ωú‰∏∫ËΩØ‰ª∂ÁöÑËæìÂÖ•Êù•ÂèëÁé∞ÂÆâÂÖ®ÊÄßÂíåÁ®≥ÂÆöÊÄßÈóÆÈ¢ò„ÄÇ AFLplusplus ÊòØ‰∏ÄÁßçÂü∫‰∫é AFL ÁöÑÊµÅË°å„ÄÅÊúâÊïà„ÄÅÁé∞‰ª£ÁöÑÊ®°Á≥äÊµãËØïÂ∑•ÂÖ∑„ÄÇËøô‰∏™Â∫ì afl.rs ÂÖÅËÆ∏‰∫∫‰ª¨Âú®Áî® Rust ÁºñÁ®ãËØ≠Ë®ÄÁºñÂÜôÁöÑ‰ª£Á†Å‰∏äËøêË°å AFLplusplus„ÄÇ "},"Misc/FuzzTesting/AFL.RS.html":{"url":"Misc/FuzzTesting/AFL.RS.html","title":"AFL.RS","keywords":"","body":"AFL: American Fuzzy Lop Issue 1: Debian12 default python3.11, if use conda env python3.12, and build afl, afl need libpython3.12.so.1.0, .... solve: use python3.11 to build afl recommand: change conda base env python version to 3.11 "},"Misc/FuzzTesting/Issues_Solutions.html":{"url":"Misc/FuzzTesting/Issues_Solutions.html","title":"Issues_Solutions","keywords":"","body":"Issues and Solutions "},"Misc/GIS/GIS.html":{"url":"Misc/GIS/GIS.html","title":"GIS","keywords":"","body":"Geographic Information System GIS Software QIGS install on debian/ubuntu equatorstudios GIS Libs samgeo A Python package for segmenting geospatial data with the Segment Anything Model (SAM) doc: samgeo "},"Misc/GIS/OpenShp.html":{"url":"Misc/GIS/OpenShp.html","title":"OpenShp","keywords":"","body":"Shp File How to Open and Work with Shapefiles and GeoJSON Files To open and work with GeoJSON or Shapefiles using free and open-source software (FOSS), there are several excellent tools you can use. Here's a step-by-step guide: 1. QGIS (Quantum GIS) QGIS is one of the most popular open-source Geographic Information System (GIS) software. It fully supports Shapefiles and GeoJSON files. Steps: Download QGIS: Download and install QGIS from https://qgis.org. Open a Shapefile: Launch QGIS. Go to Layer > Add Layer > Add Vector Layer. Browse to the Shapefile (.shp) file (you'll also need its associated .dbf and .shx files). Click \"Add\" to display the Shapefile. Inspect and Edit: Use the \"Attributes Table\" to view data. Apply styling, run spatial analysis, or export the data. Open GeoJSON: Similarly, go to Layer > Add Layer > Add Vector Layer, and browse to the .geojson file. 2. GDAL/OGR Tools (Command-line) The GDAL library provides command-line tools to manipulate spatial data formats, including Shapefiles and GeoJSON. Steps: Install GDAL: For Windows, download the GDAL binaries from OSGeo4W. For Linux/Mac, use package managers (sudo apt install gdal-bin or brew install gdal). View Shapefile Info: Run ogrinfo to inspect the file:ogrinfo -al -so your_file.shp Convert Shapefile to GeoJSON: Use ogr2ogr to convert formats:ogr2ogr -f \"GeoJSON\" output.geojson input.shp 3. GeoServer GeoServer is a web-based server to visualize and share spatial data. Steps: Install GeoServer: Download it from http://geoserver.org. Run the GeoServer web interface. Upload Shapefile/GeoJSON: Create a workspace and data store. Upload the Shapefile or GeoJSON to the data store. View or Serve: Preview the data as a map. Serve it as a WMS/WFS for online use. 4. Python Libraries: GeoPandas and Fiona If you're comfortable with Python, libraries like GeoPandas and Fiona are excellent tools. Steps: Install GeoPandas and Fiona: pip install geopandas pip install fiona Read a Shapefile: import geopandas as gpd shapefile = gpd.read_file('your_file.shp') print(shapefile.head()) Read a GeoJSON: geojson = gpd.read_file('your_file.geojson') print(geojson) Plot or Analyze Data: shapefile.plot() 5. Online Tools You can use online FOSS tools like Mapshaper (for lightweight Shapefile and GeoJSON editing) at https://mapshaper.org. Steps: Visit the site and upload your file. Edit, simplify, or convert between formats directly in the browser. Summary QGIS: Best for comprehensive spatial data management. GDAL/OGR: Best for command-line and batch operations. GeoServer: Best for web-based visualization and sharing. GeoPandas/Fiona: Best for Python developers. Mapshaper: Lightweight and quick edits online. All of these options are free and open-source! "},"Misc/GRUB.html":{"url":"Misc/GRUB.html","title":"GRUB","keywords":"","body":"GRUB GRUB (GRand Unified Bootloader) is the default bootloader for most Linux distributions. It is responsible for loading the kernel and passing control to it. It can be customized to load different operating systems, different kernel versions, and even different boot configurations. To customize GRUB, you can edit the /etc/default/grub file. This file contains a list of configuration options for GRUB. You can add or remove options as needed. To make changes permanent, you can update the GRUB configuration using the update-grub command. This will generate a new /boot/grub/grub.cfg file that will be used by GRUB on the next boot. To see the current GRUB configuration, you can run the grub-editenv command. This will open an interactive shell where you can modify the GRUB environment variables. To add a new operating system to GRUB, you can create a new entry in the /etc/grub.d directory. This directory contains a series of shell scripts that are executed by GRUB in order to generate the GRUB configuration. Each script is responsible for adding a new entry to the GRUB menu. GRand Unified BootloaderÔºàÂ§ß‰∏ÄÁªüÂºïÂØºÁ®ãÂ∫èÔºâ GRUB ËØïÂõæ‰∏∫ IBM PC ÂÖºÂÆπÊú∫Êèê‰æõ‰∏Ä‰∏™ÂºïÂØºÂä†ËΩΩÁ®ãÂ∫èÔºåÂÆÉÊó¢ËÉΩ‰∏∫ÂàùÂ≠¶ËÄÖÊàñÂØπÊäÄÊúØ‰∏çÊÑüÂÖ¥Ë∂£ÁöÑÁî®Êà∑Êèê‰æõÊñπ‰æøÔºåÂèàËÉΩÁÅµÊ¥ªÂú∞Â∏ÆÂä©‰∏ìÂÆ∂Âú®‰∏çÂêåÁöÑÁéØÂ¢É‰∏≠‰ΩøÁî®„ÄÇÁõÆÂâçÔºåÂÆÉÊúÄÈÄÇÁî®‰∫éËá≥Â∞ë‰ΩøÁî®‰∏ÄÁßçÁ±ª‰ºº UNIX ÁöÑÂÖçË¥πÊìç‰ΩúÁ≥ªÁªüÁöÑÁî®Êà∑Ôºå‰ΩÜ‰πüÂèØÁî®‰∫éÂ§ßÂ§öÊï∞ PC Êìç‰ΩúÁ≥ªÁªü„ÄÇ Ëøô‰∏™È°πÁõÆÁöÑËµ∑Âõ†ÂÆûÈôÖ‰∏äÊòØÊàë‰ª¨ÊÉ≥Âú® IBM PC ÂÖºÂÆπÁ≥ªÁªüÁöÑ Mach4 ‰∏ä‰ª•Á¨¶ÂêàÂ§öÈáçÂºïÂØºÊ†áÂáÜÁöÑÊñπÂºèÂºïÂØº GNU HURD Êìç‰ΩúÁ≥ªÁªü„ÄÇÁÑ∂ÂêéÔºåÊàëÂ∞ùËØïÂú® FreeBSD ‰ΩøÁî®ÁöÑÊ†áÂáÜÂºïÂØºÂä†ËΩΩÁ®ãÂ∫è‰∏≠Ê∑ªÂä†ÂØπÈ¢ùÂ§ñÂäüËÉΩÁöÑÊîØÊåÅ„ÄÇ‰∏∫‰∫ÜËÆ©ÊâÄÊúâÂäüËÉΩÈÉΩËÉΩÊ≠£Â∏∏Â∑•‰ΩúÔºåÊàëÂøÖÈ°ªÂÅöÁöÑ‰∫ãÊÉÖË∂äÊù•Ë∂äÂ§öÔºåÁõ¥Âà∞ÊòæÁÑ∂ÊúâÂøÖË¶Å‰ªéÂ§¥ÂºÄÂßãÂè¶Ëµ∑ÁÇâÁÅ∂„ÄÇ GRUB ‰ªé‰∏ÄÂºÄÂßãÁöÑÂ§öÊ®°ÂùóÂºïÂØºÂä†ËΩΩÂô®ÂèëÂ±ïÂà∞Áé∞Âú®Â∑≤ÁªèÊúâÂæàÈïøÁöÑË∑ØË¶ÅËµ∞‰∫Ü„ÄÇÂÆÉÊâÄ‰ΩøÁî®ÁöÑ‰∏Ä‰∫õÊäÄÊúØÂú®Ëá™Áî±ËΩØ‰ª∂‰∏ñÁïå‰∏≠ÊòØÁã¨‰∏ÄÊó†‰∫åÁöÑÔºåËøòÊúâ‰∏Ä‰∫õÊäÄÊúØÊòæÁÑ∂‰πü‰ºò‰∫éÂ§ßÂ§öÊï∞‰∏ìÊúâÊìç‰ΩúÁ≥ªÁªü„ÄÇËøôÈáåÂíåÂ§öÂºïÂØºÂª∫ËÆÆ‰∏≠ÁöÑÊñáÊ°£ÂØπÊú™Êù•ÁöÑÊìç‰ΩúÁ≥ªÁªüÂíå PC ÂºïÂØºÂä†ËΩΩÁ®ãÂ∫èÁºñÂÜôËÄÖÂ∫îËØ•ÈùûÂ∏∏ÊúâÁî®„ÄÇ grub ÂëΩ‰ª§ grub ÂëΩ‰ª§ÁöÑÂäüËÉΩÊòØÁî®‰∫é‰∫§‰∫íÂºèÂú∞ÁÆ°ÁêÜ GRUB ÂºïÂØºÁ®ãÂ∫è„ÄÇGRUB ÊòØ‰∏Ä‰∏™Á≥ªÁªüÂºïÂØºÁ®ãÂ∫èÔºåÂèØ‰ª•ÊúçÂä°‰∫é Linux„ÄÅWindows„ÄÅFreeBSD Á≠âÂ∏∏ËßÅÊìç‰ΩúÁ≥ªÁªüÔºåÈÖçÁΩÆÊñπÂºèÂàÜ‰∏∫‰∫§‰∫íÂºèÂíåÈùû‰∫§‰∫íÂºè‰∏§ÁßçÊ®°ÂºèÔºåÁî®Êà∑Âè™ÈúÄË¶ÅÈîÆÂÖ• grub ÂëΩ‰ª§Âç≥ÂèØËøõÂÖ•Âà∞‚Äúgrub>‚ÄùÊèêÁ§∫Áä∂ÊÄÅÔºåÁÑ∂ÂêéÈÄöËøáÂ∏∏Áî®ÂëΩ‰ª§ÂèäÂèÇÊï∞ËøõË°åÈÖçÁΩÆÂ∑•‰Ωú„ÄÇÂéüÊñáÈìæÊé•Ôºö https://www.linuxcool.com/grub Linux ÈªëËØùËß£ÈáäÔºöLinux ‰∏≠ÁöÑ GRUB ÊòØ‰ªÄ‰πàÔºü | Linux ‰∏≠ÂõΩ - Áü•‰πé (zhihu.com) GNU GRUB - GNU Project - Free Software Foundation (FSF) "},"Misc/GitBook.html":{"url":"Misc/GitBook.html","title":"GitBook","keywords":"","body":"GitBook Product documentation (your users will love) Forget building your own custom docs platform. With GitBook you get beautiful documentation for your users, and a branch-based Git workflow for your team. gitbook.com gitbook-ng.github.io gitbook-documentation zh gitbook-cli github: GitbookIO/gitbook GitbookIO/integrations Gitbook ÊâìÈÄ†ÁöÑ Gitbook ËØ¥ÊòéÊñáÊ°£ GitBook ÊòØÂü∫‰∫é Node.js ÁöÑÂºÄÊ∫êÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ÔºåÁî®‰∫éËæìÂá∫ÊºÇ‰∫ÆÁöÑÁîµÂ≠ê‰π¶„ÄÇ ÈÅóÊÜæÁöÑÊòØÔºåGitBookÂºÄÊ∫êÈ°πÁõÆÂ∑≤ÁªèÂÅúÊ≠¢Áª¥Êä§Ôºå‰∏ìÊ≥®ÊâìÈÄ†ÁöÑ gitbook.com ÁΩëÁ´ôÂú®ÂõΩÂÜÖËÆøÈóÆÂèóÈôê„ÄÇ Extensions awesome-gitbook-plugins include-codeblock edit-link sharing terminull intopic-toc disqus github back-to-top-button download-pdf-link mermaid-newface # open base/Notes.pdf \"get-pdf\": { \"base\": \"https://github.com/houhuawei23/Notes/tree/gh-pages\", \"prefix\": \"Notes\", \"label\": \"Download PDF\" }, # open url \"my-toolbar\": { \"buttons\": [ { \"label\": \"‰∏ãËΩΩPDF\", \"icon\": \"fa fa-file-pdf-o\", \"url\": \"https://github.com/houhuawei23/Notes/tree/gh-pages/Notes.pdf\", \"position\": \"left\", \"text\": \"‰∏ãËΩΩPDF\", \"target\": \"_blank\" } ] } `` ## Install ```bash # install nvm curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash # install node version 10.24.1 nvm install 10.24.1 # install gitbook-cli (with change npm source) npm config set registry https://registry.npmmirror.com npm install gitbook-cli -g # install gitbook gitbook -V # ‰∏ãËΩΩÊ∑ªÂä†ÁöÑÊèí‰ª∂ & build gitbook install gitbook build # generate static files under `_book` directory # start server: localhost:4000 gitbook serve Ê†ºÂºè Ê†ºÂºè‰∏ªË¶ÅÊ≥®ÈáçÁÆÄÂçïÂíåÊòìËØªÊÄß GitBook Á∫¶ÂÆö‰∫Ü‰∏ãÈù¢Ëøô‰∫õÊñá‰ª∂ÁöÑ‰ΩúÁî®Ôºö READMEÔºö‰π¶Êú¨ÁöÑ‰ªãÁªç SUMMARYÔºöÁ´†ËäÇÁªìÊûÑ, Áî®Êù•ÁîüÊàê‰π¶Êú¨ÂÜÖÂÆπÁöÑÈ¢ÑËßàË°®„ÄÇ LANGSÔºöÂ§öËØ≠Ë®Ä‰π¶Á±ç GLOSSARYÔºöÊúØËØ≠ÊèèËø∞ÁöÑÊ∏ÖÂçï Ëá≥Â∞ëÈúÄË¶Å‰∏Ä‰∏™ README Âíå SUMMARY Êñá‰ª∂Êù•ÊûÑÂª∫‰∏ÄÊú¨‰π¶„ÄÇ Gitbook pdf gitbook pdf .pdf # gitbook-action.yml - name: Install Calibre (for ebook-convert) run: | sudo apt-get update sudo apt-get install -y calibre + Github Action # use prebuild image? coenvl/gitbook-calibre image: coenvl/gitbook-calibre pdf: script: - gitbook pdf ./ ./$CI_PROJECT_NAME.pdf artifacts: paths: - $CI_PROJECT_NAME.pdf # or install from scratch ... "},"Misc/Hyper-V.html":{"url":"Misc/Hyper-V.html","title":"Hyper-V","keywords":"","body":"Hyper-V Êèê‰æõÁ°¨‰ª∂ËôöÊãüÂåñ Windows 10 ‰∏äÁöÑ Hyper-V ÁÆÄ‰ªã | Microsoft Learn ÂàõÂª∫ËôöÊãüÁΩëÁªú | Microsoft Learn Hyper-V ÊòØÂæÆËΩØÂºÄÂèëÁöÑ‰∏ÄÈ°πËôöÊãüÂåñÊäÄÊúØÔºåÂú® Windows Server Âíå Windows 10 Êìç‰ΩúÁ≥ªÁªü‰∏≠ÂùáÂèØ‰ΩøÁî®„ÄÇÁÆÄÂçïÊù•ËØ¥ÔºåÂÆÉÂèØ‰ª•ËÆ©‰∏Ä‰∏™Áâ©ÁêÜÊúçÂä°Âô®ËøêË°åÂ§ö‰∏™ËôöÊãüÊú∫ÔºåÂπ∂Â∞ÜÁâ©ÁêÜËµÑÊ∫êÔºàÂ¶Ç CPU„ÄÅÂÜÖÂ≠ò„ÄÅÁ£ÅÁõòÁ©∫Èó¥Á≠âÔºâÂàÜÈÖçÁªôËøô‰∫õËôöÊãüÊú∫Ôºå‰ªéËÄåÂÆûÁé∞ËôöÊãüÂåñ„ÄÇ ‰ΩøÁî® Hyper-V ÂèØ‰ª•Âú®Âêå‰∏ÄÂè∞ËÆ°ÁÆóÊú∫‰∏äËøêË°åÂ§ö‰∏™Êìç‰ΩúÁ≥ªÁªüÔºåËøô‰∫õÊìç‰ΩúÁ≥ªÁªüÂèØ‰ª•ÊòØ Windows„ÄÅLinux ÊàñÂÖ∂‰ªñÊìç‰ΩúÁ≥ªÁªü„ÄÇÊØè‰∏™ËôöÊãüÊú∫ÂèØ‰ª•Áã¨Á´ãËøêË°åÔºåÂ∞±ÂÉèÂú®Áâ©ÁêÜÁ°¨‰ª∂‰∏äËøêË°å‰∏ÄÊ†∑„ÄÇHyper-V ËøòÊèê‰æõ‰∫Ü‰∏Ä‰∏™ËôöÊãüÊú∫ÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºåÂèØ‰ª•ÁÆ°ÁêÜËôöÊãüÊú∫ÁöÑÈÖçÁΩÆ„ÄÅÂêØÂä®„ÄÅÂÅúÊ≠¢Á≠âÊìç‰Ωú„ÄÇ Hyper-V ÂÖ∑ÊúâÂæàÂ§ö‰ºòÁÇπÔºåÂ¶ÇËµÑÊ∫êÂÖ±‰∫´„ÄÅÂø´ÈÄüÈÉ®ÁΩ≤„ÄÅÁÅµÊ¥ªÊÄßÂíåÂèØÊâ©Â±ïÊÄßÁ≠â„ÄÇÂÆÉÂèØ‰ª•Â∏ÆÂä©ÁªÑÁªáËäÇÁúÅÊàêÊú¨Âπ∂ÊèêÈ´òÊïàÁéá„ÄÇÂêåÊó∂ÔºåHyper-V ‰πüÊîØÊåÅÂæàÂ§öÈ´òÁ∫ßÂäüËÉΩÔºåÂ¶ÇÂä®ÊÄÅÂÜÖÂ≠ò„ÄÅËôöÊãüÊú∫Âø´ÁÖß„ÄÅËøúÁ®ãÁÆ°ÁêÜÁ≠âÔºå‰ΩøÂÖ∂Êõ¥Âä†Âº∫Â§ßÂíå‰æøÊç∑„ÄÇ ÊÄªÁöÑÊù•ËØ¥ÔºåHyper-V ÊòØ‰∏ÄÈ°πÈùûÂ∏∏ÈáçË¶ÅÁöÑËôöÊãüÂåñÊäÄÊúØÔºåÂÆÉ‰∏∫ÁªÑÁªáÂíå‰ºÅ‰∏öÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑËµÑÊ∫êÁÆ°ÁêÜÂíåÂà©Áî®ËÉΩÂäõÔºåÂèØ‰ª•Â∏ÆÂä©ÂÆûÁé∞Êõ¥Âä†È´òÊïàÁöÑ IT ËøêËê•„ÄÇ ËôöÊãü‰∫§Êç¢Êú∫ÔºöHyper-V ‰ΩøÁî®ËôöÊãü‰∫§Êç¢Êú∫Â∞ÜËôöÊãüÊú∫ËøûÊé•Âà∞Áâ©ÁêÜÁΩëÁªú„ÄÇÊÇ®ÂèØ‰ª•ÂàõÂª∫Êñ∞ÁöÑËôöÊãü‰∫§Êç¢Êú∫Êàñ‰ΩøÁî®Áé∞ÊúâÁöÑ‰∫§Êç¢Êú∫„ÄÇ ËôöÊãüÊú∫ËÆæÁΩÆ: ÊÇ®ÂèØ‰ª•ÈÖçÁΩÆËôöÊãüÊú∫ÁöÑÂêÑÁßçËÆæÁΩÆÔºå‰æãÂ¶ÇÂÜÖÂ≠òÂàÜÈÖçÔºåÂ§ÑÁêÜÂô®ÂàÜÈÖçÂíåÁΩëÁªúÈÄÇÈÖçÂô®ËÆæÁΩÆ„ÄÇ ÈõÜÊàêÊúçÂä°: Hyper-V ÁöÑÈõÜÊàêÊúçÂä°ÂèØ‰ª•ÊèêÂçáËôöÊãüÊú∫ÁöÑÊÄßËÉΩÂíåÂäüËÉΩ„ÄÇÊÇ®ÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÂêØÁî®ÊàñÁ¶ÅÁî®ÈõÜÊàêÊúçÂä°„ÄÇ Virtual switch: Hyper-V uses a virtual switch to connect virtual machines to your physical network. You can create a new virtual switch or use an existing one. Virtual machine settings: You can configure various settings for your virtual machine, such as memory allocation, processor allocation, and network adapter settings. Integration services: Hyper-V integration services enhance the performance and functionality of virtual machines. You can enable or disable integration services as needed. "},"Misc/LLVM.html":{"url":"Misc/LLVM.html","title":"LLVM","keywords":"","body":"LLVM CN "},"Misc/Logics.html":{"url":"Misc/Logics.html","title":"Logics","keywords":"","body":"„ÄäÈÄªËæëÁöÑÂºïÊìé„ÄãMartinDavis Turing,HisMachine and Computability Jurg Kohlas RegisterMachinesareTuringMachines ColinB.Price "},"Misc/Markdown.html":{"url":"Misc/Markdown.html","title":"Markdown","keywords":"","body":"Markdown John Gruber: Markdown syntax Markdown-Cheatsheet fullstackpython: markdown; some useful resources collections blog: python-markdown vscode extenssion Markdown All in One Key Command Ctrl/Cmd + B Toggle bold Ctrl/Cmd + I Toggle italic Alt+S (on Windows) Toggle strikethrough1 Ctrl + Shift + ] Toggle heading (uplevel) Ctrl + Shift + [ Toggle heading (downlevel) Ctrl/Cmd + M Toggle math environment Alt + C Check/Uncheck task list item Ctrl/Cmd + Shift + V Toggle preview Ctrl/Cmd + K V Toggle preview to side Tips Complete list of github markdown emoji markup developer-icons devicon Markdown Parser marked: js, ts markdown-it: js python: Python-Markdown: A Python implementation of John Gruber‚Äôs Markdown with Extension support. mistune: py mistletoe: py; md -> html/latex/ast/md markdown-it-py marko: python markdown-worker-python: a versatile Python module for parsing, reading, and writing Markdown files. mrkdwn_analysis mrkdwn_analysis is a Python library for analyzing Markdown files. It extracts and categorizes Markdown elements like headers, sections, links, images, etc. Ideal for data analysis, content generation, and tool-building that requires Markdown parsing. mkreports Misc markdown-here: Google Chrome, Firefox, and Thunderbird extension that lets you write email in Markdown and render it before sending. "},"Misc/MemoryOrder.html":{"url":"Misc/MemoryOrder.html","title":"MemoryOrder","keywords":"","body":"text "},"Misc/NPM.html":{"url":"Misc/NPM.html","title":"NPM","keywords":"","body":"Node Package Manager (NPM) # change npm registry source npm config set registry https://registry.npmmirror.com # check in verbose mode npm install --verbose # clean cache and reinstall npm cache clean --force npm install # set proxy for npm npm config set proxy http://proxy.example.com:8080 npm config set https-proxy http://proxy.example.com:8080 # update npm npm install -g npm Node Version Manager (NVM) nvm PNPM (Fast, disk space efficient package manager) https://pnpm.io/installation "},"Misc/PowerShell.html":{"url":"Misc/PowerShell.html","title":"PowerShell","keywords":"","body":"PowerShell Â∏∏Áî®ÂëΩ‰ª§ Proxy settings # C:\\Users\\ludiser\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 function set_proxy0 { $env:HTTP_PROXY=\"http://127.0.0.1:7890\" } function set_proxy1 { $env:HTTPS_PROXY=\"https://127.0.0.1:7890\" } function unset_proxy0 { $env:HTTP_PROXY=\"\" } function unset_proxy1 { $env:HTTPS_PROXY=\"\" } Âà†Èô§ # Âà†Èô§ÊåáÂÆöÊñá‰ª∂ Remove-Item * -Include *.json -Recurse # Âà†Èô§Êñá‰ª∂ËÄå‰øùÁïôÊñá‰ª∂Â§π # „ÄåThis example deletes all of the files that have names that include a dot (.) „Äç Remove-Item * -Include *.* -Exclude *.md -Recurse # Âà†Èô§ÂåÖÂê´ÊåáÂÆöÂ≠óÁ¨¶ÁöÑÊñá‰ª∂Â§π # ‰∏ÄÂÆöË¶ÅÊ≥®ÊÑèÂä†‰∏äÈÄöÈÖçÁ¨¶„Äå*bin*„ÄçÔºåÂê¶ÂàôÂè™‰ºöÂà†Èô§binËøôÊ†∑ÁöÑÊñá‰ª∂Â§π Remove-Item * -Recurse -Include *bin* Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ $PSVersionTable.PSVersion Ëé∑Âèñ‰∏ªÊú∫‰ø°ÊÅØ Get-Host ‰∏ãËΩΩÊñá‰ª∂ Invoke-WebRequest / iwr ÂëΩ‰ª§ get-command ËøõÁ®ã get-process Êåá‰ª§ÈáçÂëΩÂêç Set-Alias xxx0 xxx1 Ê∏ÖÂ±ècls Êü•ÊâæÁ®ãÂ∫èË∑ØÂæÑ Get-Command -Name xxname "},"Misc/RegularExp.html":{"url":"Misc/RegularExp.html","title":"RegularExp","keywords":"","body":"Regular Expressions wikipedia runoob [^a-z] // Èô§‰∫ÜÂ∞èÂÜôÂ≠óÊØç‰ª•Â§ñÁöÑÊâÄÊúâÂ≠óÁ¨¶ [^\\\\\\/\\^] // Èô§‰∫Ü(\\)(/)(^)‰πãÂ§ñÁöÑÊâÄÊúâÂ≠óÁ¨¶ [^\\\"\\'] // Èô§‰∫ÜÂèåÂºïÂè∑(\")ÂíåÂçïÂºïÂè∑(')‰πãÂ§ñÁöÑÊâÄÊúâÂ≠óÁ¨¶ a.*b // aÂêéÈù¢ÂèØ‰ª•Êúâ‰ªªÊÑèÂ≠óÁ¨¶ÔºåÁõ¥Âà∞ÈÅáÂà∞b "},"Misc/StorageTechs.html":{"url":"Misc/StorageTechs.html","title":"StorageTechs","keywords":"","body":"Â≠òÂÇ®ÊäÄÊúØÊØîËæÉ ‰ª•‰∏ãÊòØSDÔºàÂÆâÂÖ®Êï∞Â≠óÔºâ„ÄÅeMMCÔºàÂµåÂÖ•ÂºèÂ§öÂ™í‰ΩìÂç°ÔºâÂíåNVMeÔºàÈùûÊòìÂ§±ÊÄßÂ≠òÂÇ®Âô®Âø´ËΩ¶ÔºâËøô‰∏âÁßç‰∏çÂêåÂ≠òÂÇ®ÊäÄÊúØÁöÑÊØîËæÉÔºö SDÔºàÂÆâÂÖ®Êï∞Â≠óÔºâ Á±ªÂûã ÔºöÂèØÁßªÂä®Èó™Â≠òÂç°„ÄÇ Â∏∏ËßÅÁî®ÈÄî ÔºöÁõ∏Êú∫„ÄÅÊô∫ËÉΩÊâãÊú∫„ÄÅÂπ≥ÊùøÁîµËÑëÂèäÂÖ∂‰ªñ‰æøÊê∫ËÆæÂ§á„ÄÇ Â§ñÂΩ¢Â∞∫ÂØ∏ ÔºöÂ∞èÔºåÊúâÊ†áÂáÜSD„ÄÅminiSDÂíåmicroSDÁ≠âÂ§öÁßçÂ∞∫ÂØ∏„ÄÇ ÈÄüÂ∫¶ ÔºöÊ†πÊçÆÁ±ªÂà´ÂíåÁ±ªÂûãÔºàÂ¶ÇSDHC„ÄÅSDXC„ÄÅUHS-I„ÄÅUHS-IIÔºâËÄåÊúâÂæàÂ§ßÂ∑ÆÂºÇ„ÄÇ Êé•Âè£ Ôºö‰ΩøÁî®SDÊé•Âè£ÔºåÈÄüÂ∫¶ÊØîPCIeÂíåSATAÊé•Âè£ÊÖ¢„ÄÇ ÂÆπÈáè ÔºöÈÄöÂ∏∏‰ªéÂá†GBÂà∞Âá†ÁôæGB‰∏çÁ≠â„ÄÇ ÊÄßËÉΩ Ôºö‰∏ÄËà¨‰Ωé‰∫éeMMCÂíåNVMeÔºåÈÄÇÂêàÈúÄÊ±ÇËæÉ‰ΩéÁöÑÂ≠òÂÇ®‰ªªÂä°„ÄÇ eMMCÔºàÂµåÂÖ•ÂºèÂ§öÂ™í‰ΩìÂç°Ôºâ Á±ªÂûã ÔºöÂµåÂÖ•Âºè‰∏çÂèØÁßªÂä®Èó™Â≠òÂ≠òÂÇ®„ÄÇ Â∏∏ËßÅÁî®ÈÄî ÔºöÊô∫ËÉΩÊâãÊú∫„ÄÅÂπ≥ÊùøÁîµËÑë„ÄÅ‰ΩéÁ´ØÁ¨îËÆ∞Êú¨ÁîµËÑë„ÄÅÁâ©ËÅîÁΩëËÆæÂ§áÂèä‰∏Ä‰∫õÊ±ΩËΩ¶Â∫îÁî®„ÄÇ Â§ñÂΩ¢Â∞∫ÂØ∏ ÔºöÁõ¥Êé•ÁÑäÊé•Âú®ËÆæÂ§á‰∏ªÊùø‰∏ä„ÄÇ ÈÄüÂ∫¶ ÔºöÊØîSDÂç°Âø´‰ΩÜÊØîSSDÔºàÂ∞§ÂÖ∂ÊòØNVMe SSDÔºâÊÖ¢ÔºåÈÄöÂ∏∏Âú®200-400 MB/sÂ∑¶Âè≥„ÄÇ Êé•Âè£ Ôºö‰ΩøÁî®Á±ª‰ººSDÁöÑÊé•Âè£Ôºå‰ΩÜ‰∏∫ÂµåÂÖ•Âºè‰ΩøÁî®ËøõË°å‰∫Ü‰ºòÂåñ„ÄÇ ÂÆπÈáè ÔºöÈÄöÂ∏∏Âú®16 GBÂà∞128 GB‰πãÈó¥Ôºå‰ΩÜ‰πüÊúâÊõ¥È´òÂÆπÈáèÁöÑ‰∫ßÂìÅ„ÄÇ ÊÄßËÉΩ ÔºöÊèê‰æõÈÄÇ‰∏≠ÁöÑÊÄßËÉΩÔºåË∂≥‰ª•Êª°Ë∂≥Â§ßÂ§öÊï∞Ê∂àË¥πÁ±ªÁßªÂä®Â∫îÁî®ÁöÑÈúÄÊ±ÇÔºå‰ΩÜ‰∏çÈÄÇÂêàÈ´òÊÄßËÉΩËÆ°ÁÆó‰ªªÂä°„ÄÇ NVMeÔºàÈùûÊòìÂ§±ÊÄßÂ≠òÂÇ®Âô®Âø´ËΩ¶Ôºâ Á±ªÂûã ÔºöÈ´òÊÄßËÉΩSSDÂ≠òÂÇ®ÊäÄÊúØ„ÄÇ Â∏∏ËßÅÁî®ÈÄî ÔºöÈ´òÁ´ØÁ¨îËÆ∞Êú¨ÁîµËÑë„ÄÅÂè∞ÂºèÊú∫„ÄÅÊúçÂä°Âô®Âèä‰ºÅ‰∏öÂ≠òÂÇ®Ëß£ÂÜ≥ÊñπÊ°à„ÄÇ Â§ñÂΩ¢Â∞∫ÂØ∏ ÔºöÂ§öÁßçÔºåÂåÖÊã¨M.2„ÄÅU.2ÂíåPCIeÊâ©Â±ïÂç°„ÄÇ ÈÄüÂ∫¶ ÔºöÊòæËëóÂø´‰∫éSDÂíåeMMCÔºåËØªÂÜôÈÄüÂ∫¶Ë∂ÖËøá3000 MB/s„ÄÇ Êé•Âè£ Ôºö‰ΩøÁî®PCIeÊé•Âè£ÔºåÊîØÊåÅÊõ¥È´òÁöÑÊï∞ÊçÆ‰º†ËæìÈÄüÁéáÂíåÊõ¥‰ΩéÁöÑÂª∂Ëøü„ÄÇ ÂÆπÈáè Ôºö‰ªé256 GBÂà∞Êï∞TB‰∏çÁ≠â„ÄÇ ÊÄßËÉΩ ÔºöÈ´òÊÄßËÉΩÔºåÈÄÇÁî®‰∫éÊ∏∏Êàè„ÄÅËßÜÈ¢ëÁºñËæëÂíåÊúçÂä°Âô®Â∑•‰ΩúË¥üËΩΩÁ≠âÈ´òË¶ÅÊ±ÇÂ∫îÁî®„ÄÇ ‰∏ªË¶ÅÂ∑ÆÂºÇ Â§ñÂΩ¢Â∞∫ÂØ∏ Ôºö SD ÔºöÂèØÁßªÂä®Âç°„ÄÇ eMMC ÔºöÂµåÂÖ•Âºè‰∏î‰∏çÂèØÁßªÂä®„ÄÇ NVMe ÔºöÂèØ‰ª•ÂµåÂÖ•ÊàñÁî®‰ΩúÊâ©Â±ïÂç°ÔºåÊúâÂ§öÁßçÂ§ñÂΩ¢Â∞∫ÂØ∏„ÄÇ ÊÄßËÉΩ Ôºö SD ÔºöÊÄßËÉΩÊúÄ‰ΩéÔºåÈÄÇÁî®‰∫éÂü∫Êú¨Â≠òÂÇ®ÈúÄÊ±Ç„ÄÇ eMMC ÔºöÊÄßËÉΩÈÄÇ‰∏≠ÔºåÊª°Ë∂≥Â§ßÂ§öÊï∞ÁßªÂä®ÂíåÊ∂àË¥πÁ±ªÂ∫îÁî®„ÄÇ NVMe ÔºöÊÄßËÉΩÊúÄÈ´òÔºåÈÄÇÁî®‰∫éÈ´òË¶ÅÊ±ÇÂ∫îÁî®ÂíåÈ´òÈÄüÊï∞ÊçÆ‰º†Ëæì„ÄÇ Êé•Âè£ Ôºö SD ÔºöSDÊé•Âè£„ÄÇ eMMC ÔºöÁ±ª‰ººSD‰ΩÜ‰ºòÂåñÁî®‰∫éÂµåÂÖ•Âºè‰ΩøÁî®„ÄÇ NVMe ÔºöPCIeÊé•Âè£ÔºåÈÄüÂ∫¶Êõ¥Âø´ÔºåÂª∂ËøüÊõ¥‰Ωé„ÄÇ ‰ΩøÁî®Âú∫ÊôØ Ôºö SD ÔºöÈÄÇÂêàÁõ∏Êú∫Âíå‰æøÊê∫ËÆæÂ§áÁ≠âÂèØÁßªÂä®Â≠òÂÇ®ÈúÄÊ±Ç„ÄÇ eMMC ÔºöÈÄÇÂêàÊàêÊú¨ÊïàÁõäÈ´òÁöÑÊ∂àË¥πÁîµÂ≠êÂµåÂÖ•ÂºèÂ≠òÂÇ®„ÄÇ NVMe ÔºöÊúÄ‰Ω≥ÈÄâÊã©Áî®‰∫éËÆ°ÁÆóÊú∫Âíå‰ºÅ‰∏öÂ∫îÁî®‰∏≠ÁöÑÈ´òÊÄßËÉΩÂ≠òÂÇ®„ÄÇ ÂÆπÈáè Ôºö SD ÔºöÂÆπÈáèÈÄöÂ∏∏‰Ωé‰∫éeMMCÂíåNVMe„ÄÇ eMMC ÔºöÂÆπÈáèÈÄÇ‰∏≠ÔºåÂ∏∏ËßÅ‰∫éÊ∂àË¥πÁîµÂ≠ê‰∫ßÂìÅ„ÄÇ NVMe ÔºöÂÆπÈáèËæÉÂ§ßÔºåÊª°Ë∂≥Êõ¥È´òÁöÑÂ≠òÂÇ®ÈúÄÊ±Ç„ÄÇ ÊÄªÁªìÊù•ËØ¥ÔºåSDÂç°ÈÄÇÁî®‰∫éÂØπÊÄßËÉΩË¶ÅÊ±ÇËæÉ‰ΩéÁöÑÂèØÁßªÂä®Â≠òÂÇ®ÔºåeMMCÈÄÇÂêàÊ∂àË¥πÁîµÂ≠ê‰∫ßÂìÅ‰∏≠ÁöÑÂµåÂÖ•ÂºèÂ∫îÁî®ÔºåNVMeÂàôÊèê‰æõÊúÄÈ´òÊÄßËÉΩÔºåÈÄÇÁî®‰∫éÈ´òË¶ÅÊ±ÇÂ∫îÁî®ÂíåÈ´òÈÄüÊï∞ÊçÆ‰º†Ëæì„ÄÇ SD (Secure Digital), eMMC (embedded MultiMediaCard), and NVMe (Non-Volatile Memory Express) are different types of storage technologies used in various devices. Here's a detailed comparison of each: SD (Secure Digital) Type : Removable flash memory card. Common Uses : Cameras, smartphones, tablets, and other portable devices. Form Factor : Small, with various sizes including standard SD, miniSD, and microSD. Speed : Varies significantly by class and type (e.g., SDHC, SDXC, UHS-I, UHS-II). Interface : Uses the SD interface, which is slower compared to PCIe and SATA interfaces. Capacity : Typically ranges from a few GB to several hundred GB. Performance : Generally lower than eMMC and NVMe, suitable for less demanding storage tasks. eMMC (embedded MultiMediaCard) Type : Embedded non-removable flash storage. Common Uses : Smartphones, tablets, low-end laptops, IoT devices, and some automotive applications. Form Factor : Soldered directly onto the device's motherboard. Speed : Faster than SD cards but slower than SSDs (especially NVMe SSDs). Typically around 200-400 MB/s. Interface : Uses an interface similar to SD, but optimized for embedded use. Capacity : Usually ranges from 16 GB to 128 GB, though higher capacities are available. Performance : Provides moderate performance, sufficient for most consumer mobile applications but not for high-performance computing tasks. NVMe (Non-Volatile Memory Express) Type : High-performance SSD storage technology. Common Uses : High-end laptops, desktops, servers, and enterprise storage solutions. Form Factor : Various, including M.2, U.2, and PCIe add-in cards. Speed : Significantly faster than both SD and eMMC, with speeds exceeding 3,000 MB/s for reads and writes. Interface : Uses the PCIe interface, allowing for much higher data transfer rates and lower latency. Capacity : Ranges from 256 GB to several TB. Performance : High performance, suitable for demanding applications like gaming, video editing, and server workloads. Key Differences Form Factor : SD : Removable cards. eMMC : Embedded and non-removable. NVMe : Can be embedded or used as add-in cards, with various form factors. Performance : SD : Lowest performance, suitable for basic storage needs. eMMC : Moderate performance, sufficient for most mobile and consumer applications. NVMe : Highest performance, suitable for demanding applications and high-speed data transfer. Interface : SD : SD interface. eMMC : Similar to SD but optimized for embedded use. NVMe : PCIe interface, much faster and lower latency. Usage Scenarios : SD : Ideal for removable storage needs like cameras and portable devices. eMMC : Suitable for cost-effective embedded storage in consumer electronics. NVMe : Best for high-performance storage in computers and enterprise applications. Capacity : SD : Typically lower capacities compared to eMMC and NVMe. eMMC : Moderate capacities, often seen in consumer electronics. NVMe : Higher capacities, catering to more intensive storage requirements. In summary, SD cards are ideal for removable storage with moderate performance needs, eMMC is suitable for embedded applications with moderate performance, and NVMe offers the highest performance for demanding applications and high-speed data transfer. "},"Misc/TWRP.html":{"url":"Misc/TWRP.html","title":"TWRP","keywords":"","body":"TWRP: Team Win Recovery Project TeamWin - TWRP TWRPÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁ¨¨‰∏âÊñπRecoveryÁ≥ªÁªüÔºåÁî®‰∫éÊõø‰ª£AndroidËÆæÂ§áÁöÑÂéüÁîüRecoveryÁ≥ªÁªüÔºåÊèê‰æõÊõ¥Â§öÂäüËÉΩÂíåÈÄâÈ°πÔºåÂ¶ÇÂ§á‰ªΩ„ÄÅÊÅ¢Â§ç„ÄÅÂà∑Êú∫Á≠âÔºå‰∏∫Áî®Êà∑Êèê‰æõÊõ¥ÁÅµÊ¥ªÂíåÂÆöÂà∂ÂåñÁöÑÊìç‰Ωú‰ΩìÈ™å„ÄÇ TWRPÊîØÊåÅÂ§öÁßçAndroidËÆæÂ§áÔºåÊèê‰æõ‰∫ÜÁõ¥ËßÇÁöÑÂõæÂΩ¢ÁïåÈù¢ÂíåËß¶Êë∏Â±èÊîØÊåÅÔºå‰ΩøÁî®Êà∑ËÉΩÂ§üËΩªÊùæËøõË°åÊâπÈáèÊìç‰ΩúÔºåÊõ¥Êñπ‰æøÂú∞ÁÆ°ÁêÜÂíåÁª¥Êä§Ëá™Â∑±ÁöÑËÆæÂ§á„ÄÇ "},"Misc/TimeSeriesPrediction/ACF.html":{"url":"Misc/TimeSeriesPrediction/ACF.html","title":"ACF","keywords":"","body":"Autocorrelation Function (ACF) The Autocorrelation Function (ACF) is a statistical tool used to measure the correlation between a time series and its lagged versions. In other words, it quantifies how similar a time series is to itself at different points in time. The ACF is widely used in time series analysis, particularly in the context of identifying patterns, trends, and seasonality, as well as in model building for forecasting. Key Concepts: Lag: The lag $k$ represents the time difference between the observations in the time series. For example, if you have a monthly time series, a lag of 1 means you are comparing each month with the previous month, a lag of 2 means you are comparing each month with the month before the previous one, and so on. Correlation: The correlation between two variables measures how closely they are related. In the context of the ACF, the correlation is between the time series and its lagged versions. Autocorrelation Coefficient: The ACF at lag $k$ is the correlation coefficient between the time series and its lagged version at lag $k$. It is denoted as $\\rho_k$. Mathematical Definition: The autocorrelation function at lag $k$ is given by: œÅk=Cov(Xt,Xt‚àík)Var(Xt) \\rho_k = \\frac{\\text{Cov}(X_t, X_{t-k})}{\\text{Var}(X_t)} œÅk‚Äã=Var(Xt‚Äã)Cov(Xt‚Äã,Xt‚àík‚Äã)‚Äã where: $X_t$ is the value of the time series at time $t$. $X_{t-k}$ is the value of the time series at time $t-k$ (i.e., $k$ time periods earlier). $\\text{Cov}(Xt, X{t-k})$ is the covariance between $Xt$ and $X{t-k}$. $\\text{Var}(X_t)$ is the variance of the time series. Interpretation: Lag 0 (k=0): The autocorrelation at lag 0 is always 1 because it represents the correlation of the time series with itself, which is perfect. Positive Autocorrelation: If $\\rho_k > 0$, it indicates that the time series values at lag $k$ are positively correlated. This means that high values in the time series tend to be followed by high values, and low values tend to be followed by low values. Negative Autocorrelation: If $\\rho_k Zero Autocorrelation: If $\\rho_k \\approx 0$, it indicates that there is no significant linear relationship between the time series and its lagged version at lag $k$. Example: Consider a simple time series representing the monthly sales of a product over a year: Sales={100,120,110,130,140,150,160,170,180,190,200,210} \\text{Sales} = \\{100, 120, 110, 130, 140, 150, 160, 170, 180, 190, 200, 210\\} Sales={100,120,110,130,140,150,160,170,180,190,200,210} To calculate the ACF at lag 1, we compare each month's sales with the sales from the previous month: Lag¬†1:¬†{120,110,130,140,150,160,170,180,190,200,210} \\text{Lag 1: } \\{120, 110, 130, 140, 150, 160, 170, 180, 190, 200, 210\\} Lag¬†1:¬†{120,110,130,140,150,160,170,180,190,200,210} We then calculate the correlation coefficient between the original series and the lagged series. If the correlation coefficient is positive and close to 1, it indicates a strong positive autocorrelation at lag 1, meaning that sales in one month are highly correlated with sales in the previous month. Visual Representation: The ACF is often visualized using a plot called the Autocorrelation Plot or ACF Plot. This plot shows the autocorrelation coefficients for different lags on the y-axis and the lags on the x-axis. The plot typically includes a dashed line representing the significance level, which helps in determining whether the autocorrelation coefficients are statistically significant. Conclusion: The Autocorrelation Function is a powerful tool in time series analysis that helps in understanding the internal structure of the data, identifying patterns, and selecting appropriate models. By examining the ACF, analysts can determine whether a time series is stationary, has a trend, or exhibits seasonality, which are crucial steps in building accurate forecasting models. "},"Misc/TimeSeriesPrediction/ACF_vs_PACF.html":{"url":"Misc/TimeSeriesPrediction/ACF_vs_PACF.html","title":"ACF_vs_PACF","keywords":"","body":"Differences Between ACF and PACF The Autocorrelation Function (ACF) and the Partial Autocorrelation Function (PACF) are both essential tools in time series analysis, but they serve different purposes and provide different insights into the structure of the time series data. Here are the key differences between ACF and PACF: 1. Definition and Purpose Autocorrelation Function (ACF): Definition: The ACF measures the correlation between a time series and its lagged versions. It quantifies how similar the time series is to itself at different points in time. Purpose: The ACF helps in identifying the overall pattern of correlation in the time series, including both short-term and long-term dependencies. Partial Autocorrelation Function (PACF): Definition: The PACF measures the correlation between a time series and its lagged versions, after removing the effects of shorter lags. It isolates the relationship between the time series and a specific lag, controlling for the influence of other lags. Purpose: The PACF helps in identifying the direct relationship between the time series and a specific lag, after accounting for the effects of intermediate lags. It is particularly useful for determining the order of the autoregressive (AR) component in ARIMA models. 2. Mathematical Interpretation ACF: The ACF at lag $k$ is the correlation coefficient between the time series and its lagged version at lag $k$. It is given by: œÅk=Cov(Xt,Xt‚àík)Var(Xt) \\rho_k = \\frac{\\text{Cov}(X_t, X_{t-k})}{\\text{Var}(X_t)} œÅk‚Äã=Var(Xt‚Äã)Cov(Xt‚Äã,Xt‚àík‚Äã)‚Äã PACF: The PACF at lag $k$ is the coefficient $\\phi_{kk}$ in the autoregressive model of order $k$. It is given by: Xt=œïk1Xt‚àí1+œïk2Xt‚àí2+‚ãØ+œïkkXt‚àík+œµt X_t = \\phi_{k1} X_{t-1} + \\phi_{k2} X_{t-2} + \\cdots + \\phi_{kk} X_{t-k} + \\epsilon_t Xt‚Äã=œïk1‚ÄãXt‚àí1‚Äã+œïk2‚ÄãXt‚àí2‚Äã+‚ãØ+œïkk‚ÄãXt‚àík‚Äã+œµt‚Äã The PACF at lag $k$ is the partial correlation between $Xt$ and $X{t-k}$, controlling for the effects of $X{t-1}, X{t-2}, \\ldots, X_{t-(k-1)}$. 3. Visual Interpretation ACF Plot: The ACF plot shows the autocorrelation coefficients for different lags on the y-axis and the lags on the x-axis. It helps in identifying the overall pattern of correlation in the time series, including both short-term and long-term dependencies. Significant spikes in the ACF plot indicate the presence of autocorrelation at those lags. PACF Plot: The PACF plot shows the partial autocorrelation coefficients for different lags on the y-axis and the lags on the x-axis. It helps in identifying the direct relationship between the time series and a specific lag, after accounting for the effects of intermediate lags. Significant spikes in the PACF plot indicate the presence of partial autocorrelation at those lags, which is particularly useful for determining the order of the AR component in ARIMA models. 4. Use in Model Identification ACF: The ACF is useful for identifying the order of the moving average (MA) component in ARIMA models. A rapidly decaying ACF suggests that the time series is dominated by the MA component. PACF: The PACF is useful for identifying the order of the autoregressive (AR) component in ARIMA models. A rapidly decaying PACF suggests that the time series is dominated by the AR component. Example Consider a time series with the following characteristics: ACF Plot: The ACF plot shows significant spikes at lags 1, 2, and 3, but the spikes decay rapidly after lag 3. PACF Plot: The PACF plot shows significant spikes at lags 1 and 2, but the spikes decay rapidly after lag 2. Interpretation: The significant spikes in the ACF plot at lags 1, 2, and 3 suggest that the time series has a moving average component of order 3 (i.e., MA(3)). The significant spikes in the PACF plot at lags 1 and 2 suggest that the time series has an autoregressive component of order 2 (i.e., AR(2)). Conclusion The ACF and PACF are complementary tools in time series analysis. The ACF helps in identifying the overall pattern of correlation in the time series, while the PACF helps in isolating the direct relationship between the time series and specific lags, after accounting for the effects of intermediate lags. Together, they are essential for identifying the appropriate ARIMA model for forecasting. "},"Misc/TimeSeriesPrediction/ARIMA.html":{"url":"Misc/TimeSeriesPrediction/ARIMA.html","title":"ARIMA","keywords":"","body":"ARIMA Time Series Prediction Model The ARIMA (AutoRegressive Integrated Moving Average) model is a widely used statistical method for time series forecasting. It combines three components: AutoRegressive (AR), Integrated (I), and Moving Average (MA). The ARIMA model is denoted as ARIMA(p, d, q), where $p$, $d$, and $q$ are parameters that need to be determined. Components of ARIMA AutoRegressive (AR) Component (p): The AR component models the relationship between an observation and a number of lagged observations (i.e., previous values in the time series). The parameter$p$represents the number of lag observations included in the model. For example, if$p = 2$, the model uses the two previous observations to predict the current value. Integrated (I) Component (d): The I component represents the degree of differencing (i.e., the number of times the data have had past values subtracted). The parameter$d$indicates the number of non-seasonal differences needed to make the time series stationary. Stationarity means that the statistical properties of the time series, such as mean and variance, are constant over time. Moving Average (MA) Component (q): The MA component models the relationship between an observation and a residual error from a moving average model applied to lagged observations. The parameter$q$represents the number of lag residual errors included in the model. For example, if$q = 1$, the model uses the error from the previous time step to predict the current value. Determining the Proper$p$,$d$, and$q$ Determining$d$(Differencing Order): The first step is to check if the time series is stationary. If not, differencing is applied to make it stationary. Use statistical tests like the Augmented Dickey-Fuller (ADF) test to check for stationarity. If the series is not stationary, apply differencing (i.e., subtract the previous value from the current value) and repeat the test. The number of times differencing is applied until the series becomes stationary is the value of$d$. Determining$p$(AR Order): Use the Autocorrelation Function (ACF) plot to identify the number of significant lags. The ACF plot shows the correlation between the time series and its lagged versions. The value of$p$is determined by the number of significant lags in the ACF plot. Determining$q$(MA Order): Use the Partial Autocorrelation Function (PACF) plot to identify the number of significant lags. The PACF plot shows the correlation between the time series and its lagged versions, after removing the effects of shorter lags. The value of$q$is determined by the number of significant lags in the PACF plot. Example Suppose you have a monthly sales time series and you want to build an ARIMA model. Here are the steps to determine$p$,$d$, and$q$: Check for Stationarity: Apply the ADF test. If the series is not stationary, apply differencing once (i.e.,$d = 1$) and check again. If the series becomes stationary after one differencing,$d = 1$. Determine$p$Using ACF Plot: Plot the ACF for the differenced series. If the ACF shows significant lags at lags 1 and 2, but not beyond, then$p = 2$. Determine$q$Using PACF Plot: Plot the PACF for the differenced series. If the PACF shows significant lags at lag 1, but not beyond, then$q = 1$. Thus, the ARIMA model for this time series would be ARIMA(2, 1, 1). Model Selection and Validation Model Selection: Once$p$,$d$, and$q$are determined, fit the ARIMA model to the data and evaluate its performance using metrics like Mean Absolute Error (MAE), Mean Squared Error (MSE), or Root Mean Squared Error (RMSE). Cross-Validation: Use techniques like rolling forecasting origin or time series cross-validation to validate the model's performance on out-of-sample data. Parameter Tuning: Experiment with different combinations of$p$,$d$, and$q$to find the model that minimizes the chosen error metric. Conclusion The ARIMA model is a versatile tool for time series forecasting, but its effectiveness depends on the proper selection of the parameters$p$,$d$, and$q$. By carefully analyzing the ACF and PACF plots and ensuring the series is stationary, you can determine the appropriate ARIMA model for your time series data. "},"Misc/TimeSeriesPrediction/PACF.html":{"url":"Misc/TimeSeriesPrediction/PACF.html","title":"PACF","keywords":"","body":"Partial Autocorrelation Function (PACF) The Partial Autocorrelation Function (PACF) is a statistical tool used in time series analysis to measure the correlation between a time series and its lagged versions, after removing the effects of shorter lags. In other words, the PACF helps to isolate the relationship between the time series and a specific lag, controlling for the influence of other lags. Key Concepts: Autocorrelation: As discussed earlier, autocorrelation measures the correlation between a time series and its lagged versions. However, this correlation can be influenced by other lags. Partial Autocorrelation: The partial autocorrelation at lag ( k ) (denoted as ( \\phi_{kk} )) is the correlation between the time series and its ( k )-th lag, after removing the effects of all shorter lags (i.e., lags 1 through ( k-1 )). PACF Plot: The PACF plot shows the partial autocorrelation coefficients for different lags on the y-axis and the lags on the x-axis. It helps in identifying the significant lags that are not explained by shorter lags. Mathematical Definition: The partial autocorrelation at lag ( k ) is the coefficient ( \\phi_{kk} ) in the following autoregressive model: [ Xt = \\phi{k1} X{t-1} + \\phi{k2} X{t-2} + \\cdots + \\phi{kk} X_{t-k} + \\epsilon_t ] where: ( X_t ) is the value of the time series at time ( t ). ( X_{t-k} ) is the value of the time series at time ( t-k ) (i.e., ( k ) time periods earlier). ( \\epsilon_t ) is the error term at time ( t ). ( \\phi_{kk} ) is the partial autocorrelation coefficient at lag ( k ). Interpretation: Lag 0 (k=0): The partial autocorrelation at lag 0 is always 1 because it represents the correlation of the time series with itself, which is perfect. Positive Partial Autocorrelation: If ( \\phi_{kk} > 0 ), it indicates that the time series values at lag ( k ) are positively correlated after controlling for shorter lags. Negative Partial Autocorrelation: If ( \\phi_{kk} Zero Partial Autocorrelation: If ( \\phi_{kk} \\approx 0 ), it indicates that there is no significant linear relationship between the time series and its lagged version at lag ( k ) after controlling for shorter lags. Example: Consider a simple time series representing the monthly sales of a product over a year: [ \\text{Sales} = {100, 120, 110, 130, 140, 150, 160, 170, 180, 190, 200, 210} ] To calculate the PACF at lag 2, we need to fit an autoregressive model of order 2 and extract the coefficient ( \\phi_{22} ): Fit the AR(2) Model: [ Xt = \\phi{21} X{t-1} + \\phi{22} X{t-2} + \\epsilon_t ] Using the sales data, estimate the coefficients ( \\phi{21} ) and ( \\phi_{22} ). Extract ( \\phi_{22} ): The coefficient ( \\phi_{22} ) represents the partial autocorrelation at lag 2, controlling for the effect of lag 1. Visual Representation: The PACF is often visualized using a plot called the Partial Autocorrelation Plot or PACF Plot. This plot shows the partial autocorrelation coefficients for different lags on the y-axis and the lags on the x-axis. The plot typically includes a dashed line representing the significance level, which helps in determining whether the partial autocorrelation coefficients are statistically significant. Conclusion: The Partial Autocorrelation Function (PACF) is a crucial tool in time series analysis, particularly in identifying the order of the autoregressive (AR) component in ARIMA models. By examining the PACF, analysts can determine which lags are significant after controlling for the effects of shorter lags, which is essential for building accurate forecasting models. "},"Misc/Typst.html":{"url":"Misc/Typst.html","title":"Typst","keywords":"","body":"Typst Links Typst polylux: package to create presentation slides. Reference #show rule #show \"ArtosFlow\": name => box[ #box(image( \"logo.svg\", height: 0.7em, )) #name ] This report is embedded in the ArtosFlow project. ArtosFlow is a project of the Artos Institute. With show rules, you can redefine how Typst displays certain elements. You specify which elements Typst should show differently and how they should look. Show rules can be applied to instances of text, many functions, and even the whole document. ‰ΩøÁî® show rulesÔºåÊÇ®ÂèØ‰ª•ÈáçÊñ∞ÂÆö‰πâ Typst ÊòæÁ§∫Êüê‰∫õÂÖÉÁ¥†ÁöÑÊñπÂºè„ÄÇÊÇ®ÂèØ‰ª•ÊåáÂÆö Typst Â∫îËØ•‰ª•‰∏çÂêåÁöÑÊñπÂºèÊòæÁ§∫Âì™‰∫õÂÖÉÁ¥†‰ª•ÂèäÂÆÉ‰ª¨Â∫îËØ•Â¶Ç‰ΩïÊòæÁ§∫„ÄÇÊòæÁ§∫ËßÑÂàôÂèØ‰ª•Â∫îÁî®‰∫éÊñáÊú¨ÂÆû‰æã„ÄÅËÆ∏Â§öÂáΩÊï∞ÔºåÁîöËá≥Êï¥‰∏™ÊñáÊ°£„ÄÇ There is a lot of new syntax in this example: We write the show keyword, followed by a string of text we want to show differently and a colon. Then, we write a function that takes the content that shall be shown as an argument. Here, we called that argument name. We can now use the name variable in the function's body to print the ArtosFlow name. Our show rule adds the logo image in front of the name and puts the result into a box to prevent linebreaks from occurring between logo and name. The image is also put inside of a box, so that it does not appear in its own paragraph. Ëøô‰∏™‰æãÂ≠ê‰∏≠ÊúâÂæàÂ§öÊñ∞ÁöÑËØ≠Ê≥ïÔºöÊàë‰ª¨ÁºñÂÜô show ÂÖ≥ÈîÆÂ≠óÔºåÂêéË∑üÊàë‰ª¨ÊÉ≥Ë¶Å‰ª•‰∏çÂêåÊñπÂºèÊòæÁ§∫ÁöÑ‰∏Ä‰∏≤ÊñáÊú¨Âíå‰∏Ä‰∏™ÂÜíÂè∑„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨ÁºñÂÜô‰∏Ä‰∏™ÂáΩÊï∞ÔºåËØ•ÂáΩÊï∞Â∞ÜÂ∫îÊòæÁ§∫‰∏∫ÂèÇÊï∞ÁöÑÂÜÖÂÆπ„ÄÇÂú®ËøôÈáåÔºåÊàë‰ª¨Â∞ÜËØ•ÂèÇÊï∞Áß∞‰∏∫ name„ÄÇÊàë‰ª¨Áé∞Âú®ÂèØ‰ª•‰ΩøÁî®ÂáΩÊï∞‰Ωì‰∏≠ÁöÑ name ÂèòÈáèÊù•ÊâìÂç∞ ArtosFlow ÂêçÁß∞„ÄÇÊàë‰ª¨ÁöÑ show ËßÑÂàôÂ∞Ü logo ÂõæÂÉèÊ∑ªÂä†Âà∞ÂêçÁß∞ÂâçÈù¢ÔºåÂπ∂Â∞ÜÁªìÊûúÊîæÂÖ•‰∏Ä‰∏™Ê°Ü‰∏≠Ôºå‰ª•Èò≤Ê≠¢ logo Âíå name ‰πãÈó¥Âá∫Áé∞Êç¢Ë°å„ÄÇÂõæÂÉè‰πüË¢´ÊîæÂú®‰∏Ä‰∏™Ê°ÜÂÜÖÔºåËøôÊ†∑ÂÆÉÂ∞±‰∏ç‰ºöÂá∫Áé∞Âú®Ëá™Â∑±ÁöÑÊÆµËêΩ‰∏≠„ÄÇ "},"Misc/VScode.html":{"url":"Misc/VScode.html","title":"VScode","keywords":"","body":"VScode Shortcuts Ctrl+p Âø´ÈÄüÊâìÂºÄÊñá‰ª∂ Ctrl+shift+p ÊâìÂºÄÂëΩ‰ª§Èù¢Êùø Ctrl+w ÂÖ≥Èó≠ÂΩìÂâçÊñá‰ª∂ Ctrl+k+w ÂÖ≥Èó≠ÊâÄÊúâÊñá‰ª∂ Ctrl+f Âø´ÈÄüÊêúÁ¥¢ Ctrl+g Ë∑≥ËΩ¨Âà∞ÊåáÂÆöË°å Ctrl+Alt+f Find in Explorer Ctrl+R Run Recent Command Others Êñá‰ª∂ÊÅ¢Â§ç Âú® vscode ÁïåÈù¢ÔºåÊåâ‰Ωè Ctrl+shift+p ÊâìÂºÄÂëΩ‰ª§Èù¢ÊùøÔºåÊâæÂà∞Êú¨Âú∞ÂéÜÂè≤ËÆ∞ÂΩï VScode server Á°ÆËÆ§ server commit_id # ~/.vscode-server/bin # ‰∏ãËΩΩÂØπÂ∫îÁöÑserverÁ®ãÂ∫è # ÔºàÊ≥®ÊÑèÊää:${commit_id}ÊõøÊç¢ÊàêÂØπÂ∫îÁöÑCommit IDÔºâ https://update.code.visualstudio.com/commit:${commit_id}/server-linux-x64/stable # vscode-server-linux-x64.tar.gz # ÊîæÂà∞ ~/.vscode-server/bin/${commit_id}/ Êñá‰ª∂Â§π‰∏ã # Ëß£Âéã tar -zxvf vscode-server-linux-x64.tar.gz --strip=1 https://update.code.visualstudio.com/commit:e7e037083ff4455cf320e344325dacb480062c3c/server-linux-x64/stable Debugging Launch Configuration Debugging Launch Configuration "},"Misc/Vitural-Card.html":{"url":"Misc/Vitural-Card.html","title":"Vitural-Card","keywords":"","body":" nobepay "},"Misc/WSL.html":{"url":"Misc/WSL.html","title":"WSL","keywords":"","body":"Windows Subsystem for Linux Â∑•‰ΩúÂéüÁêÜ ÈÖçÁΩÆÊñá‰ª∂ Â§á‰ªΩËøòÂéü ÁΩëÁªú Êñá‰ª∂Á≥ªÁªü ÂÜÖÊ†∏ÊõøÊç¢ "},"Network/Network.html":{"url":"Network/Network.html","title":"Network","keywords":"","body":"Network ipcheck.ing: The best IP Toolbox., github: MyIP "},"Network/ChangeMac.html":{"url":"Network/ChangeMac.html","title":"ChangeMac","keywords":"","body":"Changing the MAC address of your laptop can help with privacy or troubleshooting network issues. Here's how to do it for different operating systems: For Windows Open Device Manager: Right-click on the Start button and select Device Manager. Locate Network Adapters: Find Network adapters and expand the section. Right-click on your Wi-Fi adapter and select Properties. Change MAC Address: Go to the Advanced tab. In the Property box, select Network Address or Locally Administered Address. In the Value box, enter your new MAC address (without colons or dashes). For example, 00AABBCCDDEE. Make sure the address is valid (it should be 12 hexadecimal digits). Restart Your Adapter: Disable and re-enable your network adapter for the changes to take effect. For Linux Open Terminal. Identify Your Network Interface: Run the command:ip link Note the name of your network interface (e.g., wlan0). Bring Down the Interface: Replace wlan0 with your interface name:sudo ip link set wlan0 down Change the MAC Address: Run:sudo ip link set wlan0 address XX:XX:XX:XX:XX:XX Replace XX:XX:XX:XX:XX:XX with your desired MAC address. Bring Up the Interface: Run:sudo ip link set wlan0 up Verify the Change: Check your new MAC address:ip link show wlan0 For macOS Open Terminal. Find Your Network Interface: Run the command:ifconfig Identify your Wi-Fi interface (usually en0). Change the MAC Address: Run the following command (replace en0 with your interface name and XX:XX:XX:XX:XX:XX with your desired MAC address):sudo ifconfig en0 ether XX:XX:XX:XX:XX:XX Verify the Change: Check your new MAC address:ifconfig en0 | grep ether Important Notes Temporary Change: The changes you make are temporary and will revert after a reboot. To make permanent changes, you would need to create scripts or use specific settings. Network Policies: Be cautious when changing your MAC address, as some networks have policies against this and may block access. Unique MAC Address: Ensure the new MAC address is unique on your local network to avoid conflicts. By following these steps, you can successfully change the MAC address on your laptop! "},"Network/DNS.html":{"url":"Network/DNS.html","title":"DNS","keywords":"","body":"Greate Article for DNS Server Config: The Sisyphean Task Of DNS Client Config on Linux DNS (Domain Name Service): turn names into IP addresses TimeLine/History/Development: 4.3 BSD: use /etc/resolv.conf to configure DNS servers but DHCP program need to determine the DNS servers in the network, it may edit and change the /etc/resolv.conf file. When more than one program what to edit the /etc/resolv.conf file, it may cause conflict and cause problems. resolvconf: a loose convention for managing DNS, common 2 versions are Deian and Openresolv. "},"Network/RandomMac.html":{"url":"Network/RandomMac.html","title":"RandomMac","keywords":"","body":"To use a random MAC address on Debian 12, you can utilize a few different methods, including temporary changes or setting it to generate random addresses automatically. Here's how you can do it: Method 1: Temporary Change Using macchanger Install macchanger: Open a terminal and install macchanger using the following command: sudo apt update sudo apt install macchanger Identify Your Network Interface: Find the name of your network interface (e.g., wlan0, eth0) by running: ip link Bring Down the Interface: Replace wlan0 with your interface name: sudo ip link set wlan0 down Change the MAC Address: Use macchanger to set a random MAC address: sudo macchanger -r wlan0 Bring Up the Interface: sudo ip link set wlan0 up Verify the Change: ip link show wlan0 Method 2: Permanent Random MAC Address on Startup To have a random MAC address every time you boot, you can modify the Network Manager configuration. Open NetworkManager Configuration: Edit the connection file for your network interface. The path may vary, but you can typically find it in /etc/NetworkManager/system-connections/. You can list the available connections with: sudo ls /etc/NetworkManager/system-connections/ Then open the specific connection file using a text editor (replace YourConnection with the actual connection name): sudo nano /etc/NetworkManager/system-connections/YourConnection Modify the Configuration: Look for the [802-11-wireless] section and add or modify the following lines: [connection] ... ethernet.cloned-mac-address=random or for Wi-Fi connections: [802-11-wireless] ... 802-11-wireless.cloned-mac-address=random Save and Exit: Save the file and exit the editor. Restart NetworkManager: Restart the NetworkManager to apply the changes: sudo systemctl restart NetworkManager Method 3: Manual Random MAC Address Generation If you want to generate a random MAC address manually, you can use a simple script or command. Generate a Random MAC Address: You can use the following command to generate a random MAC address: printf '02:%x:%x:%x:%x:%x:%x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) Set the Random MAC Address: Use ip to change the MAC address as shown in Method 1, substituting XX:XX:XX:XX:XX:XX with the output of the above command. Notes Temporary Changes: The MAC address will revert to the original on reboot unless you use the NetworkManager method. Network Policies: Be aware that changing your MAC address may violate certain network policies. Conflict Avoidance: Ensure that the generated MAC address does not conflict with other devices on your network. By following these methods, you can effectively use a random MAC address on your Debian 12 system! "},"Network/Tailscale.html":{"url":"Network/Tailscale.html","title":"Tailscale","keywords":"","body":""},"Network/Wifi.html":{"url":"Network/Wifi.html","title":"Wifi","keywords":"","body":"In Debian 12's Wi-Fi identity management, here are the key terms and their meanings: SSID (Service Set Identifier): This is the name of the Wi-Fi network. It's what you see when you scan for available networks. Each SSID is unique within a given area. BSSID (Basic Service Set Identifier): This refers to the MAC address of the access point (AP) providing the network. While SSID is the name, BSSID identifies the actual hardware of the AP. MAC Address: The Media Access Control (MAC) address is a unique identifier assigned to network interfaces for communications on a network. Each device on a network has a distinct MAC address. Cloned Address Options: Preserve: This option keeps the device's original MAC address. Permanent: This sets a fixed MAC address for the device, which will remain the same across reboots and disconnections. Random: This generates a new, random MAC address each time the device connects to the network, enhancing privacy by making tracking more difficult. Stable: This generates a MAC address that remains consistent but is not the original. It's typically based on the device's original MAC but altered to provide some level of anonymity. These options help manage network identity and privacy in various scenarios. Âú® Debian 12 ÁöÑ Wi-Fi Ë∫´‰ªΩÁÆ°ÁêÜ‰∏≠Ôºå‰ª•‰∏ãÊòØÂÖ≥ÈîÆÊúØËØ≠ÂèäÂÖ∂Âê´‰πâÔºö SSIDÔºàÊúçÂä°ÈõÜÊ†áËØÜÁ¨¶ÔºâÔºöËøôÊòØ Wi-Fi ÁΩëÁªúÁöÑÂêçÁß∞„ÄÇÂΩì‰Ω†Êâ´ÊèèÂèØÁî®ÁΩëÁªúÊó∂Ôºå‰ºöÁúãÂà∞Ëøô‰∏™ÂêçÁß∞„ÄÇÊØè‰∏™ SSID Âú®ÁâπÂÆöÂå∫ÂüüÂÜÖÊòØÂîØ‰∏ÄÁöÑ„ÄÇ BSSIDÔºàÂü∫Êú¨ÊúçÂä°ÈõÜÊ†áËØÜÁ¨¶ÔºâÔºöËøôÊåáÁöÑÊòØÊèê‰æõÁΩëÁªúÁöÑÊé•ÂÖ•ÁÇπÔºàAPÔºâÁöÑ MAC Âú∞ÂùÄ„ÄÇËôΩÁÑ∂ SSID ÊòØÂêçÁß∞Ôºå‰ΩÜ BSSID ËØÜÂà´ÁöÑÊòØÂÆûÈôÖÁ°¨‰ª∂ÁöÑÊé•ÂÖ•ÁÇπ„ÄÇ MAC Âú∞ÂùÄÔºöÂ™í‰ΩìËÆøÈóÆÊéßÂà∂ÔºàMACÔºâÂú∞ÂùÄÊòØÂàÜÈÖçÁªôÁΩëÁªúÊé•Âè£ÁöÑÂîØ‰∏ÄÊ†áËØÜÁ¨¶ÔºåÁî®‰∫éÁΩëÁªúÈÄö‰ø°„ÄÇÁΩëÁªú‰∏äÁöÑÊØè‰∏™ËÆæÂ§áÈÉΩÊúâ‰∏Ä‰∏™Áã¨ÁâπÁöÑ MAC Âú∞ÂùÄ„ÄÇ ÂÖãÈöÜÂú∞ÂùÄÈÄâÈ°πÔºö ‰øùÁïôÔºöÊ≠§ÈÄâÈ°π‰øùÊåÅËÆæÂ§áÁöÑÂéüÂßã MAC Âú∞ÂùÄ„ÄÇ Ê∞∏‰πÖÔºöËøô‰ºö‰∏∫ËÆæÂ§áËÆæÁΩÆ‰∏Ä‰∏™Âõ∫ÂÆöÁöÑ MAC Âú∞ÂùÄÔºåËØ•Âú∞ÂùÄÂú®ÈáçÂêØÂíåÊñ≠ÂºÄËøûÊé•ÂêéÂ∞Ü‰øùÊåÅ‰∏çÂèò„ÄÇ ÈöèÊú∫ÔºöËøô‰ºöÂú®ËÆæÂ§áËøûÊé•Âà∞ÁΩëÁªúÊó∂ÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑÈöèÊú∫ MAC Âú∞ÂùÄÔºåÊèêÈ´òÈöêÁßÅÊÄßÔºå‰ΩøËøΩË∏™Êõ¥Âõ∞Èöæ„ÄÇ Á®≥ÂÆöÔºöËøô‰ºöÁîüÊàê‰∏Ä‰∏™‰øùÊåÅ‰∏ÄËá¥ÁöÑ MAC Âú∞ÂùÄÔºå‰ΩÜ‰∏çÊòØÂéüÂßãÂú∞ÂùÄ„ÄÇÈÄöÂ∏∏ÊòØÂü∫‰∫éËÆæÂ§áÁöÑÂéüÂßã MAC Âú∞ÂùÄ‰ΩÜËøõË°å‰∫Ü‰øÆÊîπÔºå‰ª•Êèê‰æõ‰∏ÄÂÆöÁ®ãÂ∫¶ÁöÑÂåøÂêçÊÄß„ÄÇ Ëøô‰∫õÈÄâÈ°πÊúâÂä©‰∫éÂú®‰∏çÂêåÂú∫ÊôØ‰∏≠ÁÆ°ÁêÜÁΩëÁªúË∫´‰ªΩÂíåÈöêÁßÅ„ÄÇ "},"Papers/Papers.html":{"url":"Papers/Papers.html","title":"Papers","keywords":"","body":""},"Papers/AttentionIsTuringComplete.html":{"url":"Papers/AttentionIsTuringComplete.html","title":"AttentionIsTuringComplete","keywords":"","body":"Attention Is Turing Complete Not yet complete. Attention Is Turing Complete TLDR: Êú¨ÊñáËØÅÊòé‰∫Ü Attention Êú∫Âà∂ÊòØÂõæÁÅµÂÆåÂ§áÁöÑÔºåÊú¨ÊñáÊûÑÈÄ†‰∫Ü‰∏Ä‰∏™Êúâ1Â±ÇEncoderÂíå3Â±ÇDecoderÁöÑTransformerÔºåÁî®ÂÖ∂Ê®°Êãü‰∫ÜÂõæÁÅµÊú∫ÁöÑËÆ°ÁÆóËøáÁ®ãÔºàÂç≥ËÆ°ÁÆóÊ†ºÂ±ÄÁöÑÂèòÂåñÔºâ„ÄÇ Abstract Alternatives to recurrent neural networks, in particular, architectures based on self-attention, are gaining momentum for processing input sequences. In spite of their relevance, the computational properties of such networks have not yet been fully explored. We study the computational power of the Transformer, one of the most paradigmatic architectures exemplifying self-attention. We show that the Transformer with hard-attention is Turing complete exclusively based on their capacity to compute and access internal dense representations of the data. Our study also reveals some minimal sets of elements needed to obtain this completeness result. Âæ™ÁéØÁ•ûÁªèÁΩëÁªúÁöÑÊõø‰ª£ÊñπÊ°àÔºåÁâπÂà´ÊòØÂü∫‰∫éËá™Ê≥®ÊÑèÂäõÁöÑÊû∂ÊûÑÔºåÂú®Â§ÑÁêÜËæìÂÖ•Â∫èÂàóÊñπÈù¢Ê≠£Âú®Ëé∑ÂæóÂä®Âäõ„ÄÇÂ∞ΩÁÆ°ÂÆÉ‰ª¨ÂÖ∑ÊúâÁõ∏ÂÖ≥ÊÄßÔºå‰ΩÜÊ≠§Á±ªÁΩëÁªúÁöÑËÆ°ÁÆóÁâπÊÄßÂ∞öÊú™ÂæóÂà∞ÂÖÖÂàÜÊé¢Á¥¢„ÄÇÊàë‰ª¨Á†îÁ©∂TransformerÁöÑËÆ°ÁÆóËÉΩÂäõÔºåÂÆÉÊòØ‰ΩìÁé∞Ëá™ÊàëÊ≥®ÊÑèÂäõÁöÑÊúÄÂÖ∑ËåÉÂºèÁöÑÊû∂ÊûÑ‰πã‰∏Ä„ÄÇÊàë‰ª¨ËØÅÊòéÔºåÂÖ∑ÊúâÁ°¨Ê≥®ÊÑèÂäõÁöÑTransformer ÂÆåÂÖ®Âü∫‰∫éÂÖ∂ËÆ°ÁÆóÂíåËÆøÈóÆÊï∞ÊçÆÂÜÖÈÉ®ÂØÜÈõÜË°®Á§∫ÁöÑËÉΩÂäõÔºåÊòØÂõæÁÅµÂÆåÂ§áÁöÑ„ÄÇÊàë‰ª¨ÁöÑÁ†îÁ©∂ËøòÊè≠Á§∫‰∫ÜËé∑ÂæóËøôÁßçÂÆåÊï¥ÊÄßÁªìÊûúÊâÄÈúÄÁöÑ‰∏Ä‰∫õÊúÄÂ∞èÂÖÉÁ¥†ÈõÜ„ÄÇ Introduction Â∫èÂàóÂà∞Â∫èÂàóÁ•ûÁªèÁΩëÁªú Êàë‰ª¨ÂØπÂ∫èÂàóÂà∞Â∫èÂàó (seq-to-seq) Á•ûÁªèÁΩëÁªúÊû∂ÊûÑÊÑüÂÖ¥Ë∂£,Êàë‰ª¨Êé•‰∏ãÊù•Â∞ÜÊ≠£ÂºèÂåñ„ÄÇÂØπ‰∫éÊüê‰∫õ d > 0,seq-to-seq ÁΩëÁªú N Êé•Êî∂ÂêëÈáè x‚àà Q ÁöÑÂ∫èÂàó X = (x, . . . . , x) ‰Ωú‰∏∫ËæìÂÖ•,Âπ∂ÁîüÊàêÂêëÈáè y‚àà Q ÁöÑÂ∫èÂàó Y = (y, . . . . , y) ‰Ωú‰∏∫ËæìÂá∫„ÄÇÂ§ßÂ§öÊï∞ËøôÁßçÁ±ªÂûãÁöÑÊû∂ÊûÑÈÉΩÈúÄË¶Å‰∏Ä‰∏™ÁßçÂ≠êÂêëÈáè s Âíå‰∏Ä‰∫õÂÅúÊ≠¢Ê†áÂáÜÊù•Á°ÆÂÆöËæìÂá∫ÁöÑÈïøÂ∫¶„ÄÇÂêéËÄÖÈÄöÂ∏∏Âü∫‰∫éÁâπÂÆöËæìÂá∫ÂêëÈáèÁöÑÁîüÊàê,Áß∞‰∏∫Â∫èÂàóÁªìÊùüÊ†áËÆ∞„ÄÇÁõ∏Âèç,Âú®Êàë‰ª¨ÁöÑÂΩ¢ÂºèÂåñ‰∏≠,Êàë‰ª¨ÂÖÅËÆ∏ÁΩëÁªú‰∫ßÁîü‰∏Ä‰∏™Âõ∫ÂÆöÊï∞ÈáèÁöÑ r ‚â• 0 ÁöÑËæìÂá∫ÂêëÈáè„ÄÇÂõ†Ê≠§,‰∏∫Êñπ‰æøËµ∑ËßÅ,Êàë‰ª¨Â∞Ü‰∏ÄËà¨ÁöÑ seq-to-seq ÁΩëÁªúËßÜ‰∏∫ÂáΩÊï∞ N,‰ΩøÂæóÂÄº N (X, s, r) ÂØπÂ∫î‰∫é Y = (y, y, . . . . , y) ÂΩ¢ÂºèÁöÑËæìÂá∫Â∫èÂàó„ÄÇÈÄöËøáÊ≠§ÂÆö‰πâ,Êàë‰ª¨ÂèØ‰ª•Â∞Ü seq-to-seq ÁΩëÁªúËß£Èáä‰∏∫Â≠óÁ¨¶‰∏≤ÁöÑËØ≠Ë®ÄËØÜÂà´Âô®,Â¶Ç‰∏ãÊâÄÁ§∫„ÄÇ ÂÆö‰πâ 1 seq-to-seq ËØ≠Ë®ÄËØÜÂà´Âô®ÊòØ‰∏Ä‰∏™ÂÖÉÁªÑ A = (Œ£, f, N, s, F),ÂÖ∂‰∏≠ Œ£ ÊòØÊúâÈôêÂ≠óÊØçË°®,f : Œ£ ‚Üí Q ÊòØÂµåÂÖ•ÂáΩÊï∞,N ÊòØ seq-to-seq ÁΩëÁªú,s ‚àà Q ÊòØÁßçÂ≠êÂêëÈáè,F ‚äÜ QÊòØ‰∏ÄÁªÑÊúÄÁªàÂêëÈáè„ÄÇÊàë‰ª¨ËØ¥ A Êé•ÂèóÂ≠óÁ¨¶‰∏≤ w ‚àà Œ£,Â¶ÇÊûúÂ≠òÂú®‰∏Ä‰∏™Êï¥Êï∞ r ‚àà N,‰ΩøÂæó N (f (w), s, r) = (y, . . . , y) Âíå y‚àà F„ÄÇ A Êé•ÂèóÁöÑËØ≠Ë®Ä(Áî® L(A) Ë°®Á§∫)ÊòØ A Êé•ÂèóÁöÑÊâÄÊúâÂ≠óÁ¨¶‰∏≤ÁöÑÈõÜÂêà„ÄÇ Êàë‰ª¨ÂØπËØÜÂà´Âô®ÊñΩÂä†‰∫Ü‰∏§‰∏™È¢ùÂ§ñÁöÑÈôêÂà∂„ÄÇ ÂµåÂÖ•ÂáΩÊï∞ f : Œ£ ‚Üí QÂ∫îËØ•Áî±ÂõæÁÅµÊú∫‰ª• Œ£ Â§ßÂ∞èÁöÑÂ§öÈ°πÂºèÊó∂Èó¥ËÆ°ÁÆó„ÄÇËøôÊ∂µÁõñ‰∫ÜËÆ°ÁÆóÁ¨¶Âè∑ÁöÑ input ÂµåÂÖ•ÁöÑ‰∏§ÁßçÊúÄÂÖ∏ÂûãÊñπÊ≥ï:one-hot ÁºñÁ†ÅÂíåÁî±Âõ∫ÂÆöÂâçÈ¶àÁΩëÁªúËÆ°ÁÆóÁöÑÂµåÂÖ•„ÄÇ Ê≠§Â§ñ,ÈõÜÂêà F ‰πüÂ∫îËØ•Âú®Â§öÈ°πÂºèÊó∂Èó¥ÂÜÖÂèØËØÜÂà´;ÁªôÂÆö‰∏Ä‰∏™ÂêëÈáè f ,Èö∂Â±ûÂ∫¶ F ‚àà F Â∫îËØ•Áî±Âú®Â§öÈ°πÂºèÊó∂Èó¥ÂÜÖÁõ∏ÂØπ‰∫é f ÁöÑÂ§ßÂ∞è(‰ª•‰Ωç‰∏∫Âçï‰Ωç)Â∑•‰ΩúÁöÑÂõæÁÅµÊú∫ÂÜ≥ÂÆö„ÄÇËøôÊ∂µÁõñ‰∫Ü‰ΩøÁî®Âõ∫ÂÆöÂ∫èÂàóÁªìÊùüÂêëÈáèÊ£ÄÊü•Áõ∏Á≠âÊÄßÁöÑÂ∏∏Áî®ÊñπÊ≥ï„ÄÇ Êàë‰ª¨ÊñΩÂä†Ëøô‰∫õÈôêÂà∂ÊòØ‰∏∫‰∫ÜÈò≤Ê≠¢ÈÄöËøáÂú® input embedding Êàñ stopping Êù°‰ª∂‰∏≠ÁºñÁ†Å‰ªªÊÑèËÆ°ÁÆóÊù•‰ΩúÂºäÁöÑÂèØËÉΩÊÄß,ÂêåÊó∂Ë∂≥Â§üÂÆΩÂÆπÂú∞ÊûÑÂª∫ÊúâÊÑè‰πâÁöÑ embeddings Âíå stopping criterions„ÄÇ ÂõæÁÅµÊú∫ËÆ°ÁÆó ËÆ©Êàë‰ª¨ÂõûÈ°æ‰∏Ä‰∏ã,(Á°ÆÂÆöÊÄßÁöÑ)ÂõæÁÅµÊú∫ÊòØ M = (Q, Œ£, Œ¥, q, F ) ÂΩ¢ÂºèÁöÑÂÖÉÁªÑ,ÂÖ∂‰∏≠: seq-to-seq Á•ûÁªèÁΩëÁªúÊû∂ÊûÑÁöÑÂõæÁÅµÂÆåÂ§áÊÄß seq-to-seq Á•ûÁªèÁΩëÁªúÊû∂ÊûÑÁöÑ N Á±ªÂÆö‰πâ‰∫ÜÁ±ª L,ËØ•Á±ªÁî±‰ΩøÁî® N ‰∏≠ÁöÑÁΩëÁªúÁöÑËØ≠Ë®ÄËØÜÂà´Âô®Êé•ÂèóÁöÑÊâÄÊúâËØ≠Ë®ÄÁªÑÊàê„ÄÇ‰ªéËøô‰∫õÊ¶ÇÂøµ‰∏≠,N Á±ªÁöÑÂõæÁÅµÂÆåÂ§áÊÄßÁöÑÂΩ¢ÂºèÂåñËá™ÁÑ∂ËÄåÁÑ∂Âú∞Èöè‰πãËÄåÊù•„ÄÇ ÂÆö‰πâ 2 Â¶ÇÊûú L ÂåÖÂê´ÊâÄÊúâÂèØÂà§ÂÆöËØ≠Ë®Ä(Âç≥ÂõæÁÅµÊú∫ÂèØËØÜÂà´ÁöÑÊâÄÊúâËØ≠Ë®Ä),Âàô seq-to-seq Á•ûÁªèÁΩëÁªúÊû∂ÊûÑÁöÑ N Á±ª‰∏∫ÂõæÁÅµÂÆåÂ§á„ÄÇ The Transformer architecture Âú®Êú¨ËäÇ‰∏≠,Êàë‰ª¨ÊèêÂá∫‰∫Ü Transformer Êû∂ÊûÑÁöÑÂΩ¢ÂºèÂåñ(Vaswani et al., 2017),‰ªéÂáΩÊï∞ÂíåÂèÇÊï∞ÁöÑ‰∏Ä‰∫õÂÖ∑‰ΩìÈÄâÊã©‰∏≠ÊäΩË±°Âá∫Êù•„ÄÇÊàë‰ª¨ÁöÑÂΩ¢ÂºèÂåñÂπ∂‰∏çÊòØ‰∏∫‰∫Ü‰∫ßÁîü Transformer ÁöÑÊúâÊïàÂÆûÁé∞,ËÄåÊòØÊèê‰æõ‰∏Ä‰∏™ÁÆÄÂçïÁöÑËÆæÁΩÆ,ÈÄöËøáËØ•ËÆæÁΩÆÂèØ‰ª•‰ª•Ê≠£ÂºèÁöÑÊñπÂºèÂª∫Á´ãÂÖ∂Êï∞Â≠¶Â±ûÊÄß„ÄÇ Transformer Âú®ÂæàÂ§ßÁ®ãÂ∫¶‰∏äÂü∫‰∫éÊé•‰∏ãÊù•‰ªãÁªçÁöÑÊ≥®ÊÑèÂäõÊú∫Âà∂„ÄÇËÄÉËôëËØÑÂàÜÂáΩÊï∞ score : Q√ó Q‚Üí Q ÂíåÂΩí‰∏ÄÂåñÂáΩÊï∞ œÅ : Q‚Üí Q,ÂØπ‰∫é d„ÄÅn > 0„ÄÇÂÅáËÆæ q ‚àà Q,Âπ∂‰∏î K = (k, . . . , k) Âíå V = (v, . . . , v) ÊòØ Q ‰∏≠ÂÖÉÁ¥†ÁöÑÂÖÉÁªÑ„ÄÇÁî± Att(q, K, V) Ë°®Á§∫ÁöÑ q-attention over (K, V) ÊòØ Q ‚ààÂêëÈáè a,ÂÆö‰πâÂ¶Ç‰∏ã„ÄÇ (s1,‚Ä¶,sn)=œÅ(score‚Å°(q,k1),score‚Å°(q,k2),‚Ä¶,score‚Å°(q,kn)) \\left(s_{1}, \\ldots, s_{n}\\right) =\\rho\\left(\\operatorname{score}\\left(\\boldsymbol{q}, \\boldsymbol{k}_{1}\\right), \\operatorname{score}\\left(\\boldsymbol{q}, \\boldsymbol{k}_{2}\\right), \\ldots, \\operatorname{score}\\left(\\boldsymbol{q}, \\boldsymbol{k}_{n}\\right)\\right) (s1‚Äã,‚Ä¶,sn‚Äã)=œÅ(score(q,k1‚Äã),score(q,k2‚Äã),‚Ä¶,score(q,kn‚Äã)) a=s1v1+s2v2+‚ãØ+snvn \\boldsymbol{a} =s_{1} \\boldsymbol{v}_{1}+s_{2} \\boldsymbol{v}_{2}+\\cdots+s_{n} \\boldsymbol{v}_{n} a=s1‚Äãv1‚Äã+s2‚Äãv2‚Äã+‚ãØ+sn‚Äãvn‚Äã ÈÄöÂ∏∏,q Áß∞‰∏∫Êü•ËØ¢,K Áß∞‰∏∫ÈîÆ,V Áß∞‰∏∫ÂÄº„ÄÇÊàë‰ª¨ÂØπËØÑÂàÜÂáΩÊï∞Ê≤°Êúâ‰ªª‰ΩïÈôêÂà∂,‰ΩÜÊàë‰ª¨Á°ÆÂÆûÂØπÂΩí‰∏ÄÂåñÂáΩÊï∞ÊñΩÂä†‰∫Ü‰∏Ä‰∫õÈôêÂà∂,‰ª•Á°Æ‰øùÂÆÉÂú®ÊåÅ‰ªì‰∏ä‰∫ßÁîüÊ¶ÇÁéáÂàÜÂ∏É„ÄÇÊàë‰ª¨Ë¶ÅÊ±ÇÂΩí‰∏ÄÂåñÂáΩÊï∞Êª°Ë∂≥‰ª•‰∏ãÊù°‰ª∂:ÂØπ‰∫éÊØè‰∏™ x = (x, . . . , x) ‚àà Q,Êúâ‰∏Ä‰∏™ÂáΩÊï∞ f‰ªé Q Âà∞ Q,‰ΩøÂæó œÅ(x) ÁöÑÁ¨¨ i ‰∏™ÂàÜÈáè œÅ(x) Áõ∏Á≠â j=1 f(x) ÁöÑ f(x) „ÄÇÊàë‰ª¨Ê≥®ÊÑèÂà∞,‰æãÂ¶Ç,ÂèØ‰ª•ÈÄöËøáÁÆÄÂçïÂú∞ÈÄâÊã© f(x) ‰Ωú‰∏∫ÊåáÊï∞ÂáΩÊï∞ e Êù•‰ª•ËøôÁßçÊñπÂºèÂÆö‰πâ softmax ÂáΩÊï∞,‰ΩÜÊàë‰ª¨ÂÖÅËÆ∏ÂÖ∂‰ªñÂèØËÉΩÊÄß,Êé•‰∏ãÊù•Êàë‰ª¨Â∞ÜËß£Èáä„ÄÇ Âú®ËØÅÊòéÂèØËÉΩÊÄßÁªìÊûúÊó∂,Êàë‰ª¨ÈúÄË¶ÅÈÄâÊã©ÁâπÂÆöÁöÑËØÑÂàÜÂíåÂΩí‰∏ÄÂåñÂáΩÊï∞„ÄÇËØÑÂàÜÂáΩÊï∞ÁöÑÈÄöÂ∏∏ÈÄâÊã©ÊòØÁî±ÂÖ∑ÊúâËæìÂÖ• (q, k) ÁöÑÂâçÈ¶àÁΩëÁªúÂÆö‰πâÁöÑÈùûÁ∫øÊÄßÂáΩÊï∞,ÊúâÊó∂Áß∞‰∏∫Âä†ÊÄßÊ≥®ÊÑèÂäõ (Bahdanau et al., 2014)„ÄÇÂè¶‰∏ÄÁßçÂèØËÉΩÊÄßÊòØ‰ΩøÁî®ÁÇπÁßØ „Äàq, k„Äâ,Áß∞‰∏∫‰πòÊ≥ïÊ≥®ÊÑèÂäõ (Vaswani et al., 2017)„ÄÇ Êàë‰ª¨ÂÆûÈôÖ‰∏ä‰ΩøÁî®‰∫Ü‰∏§ËÄÖÁöÑÁªÑÂêà:‰πòÊ≥ïÊ≥®ÊÑèÂäõÂä†‰∏äÂÆö‰πâ‰∏∫ œÉ(g(¬∑)) ÂΩ¢ÂºèÁöÑÂáΩÊï∞ÁªÑÊàêÁöÑÂâçÈ¶àÁΩëÁªú,ÂÖ∂‰∏≠ g ÊòØ‰ªøÂ∞ÑÂèòÊç¢,œÉ ÊòØÊñπÁ®ã (1) ‰∏≠ÂÆö‰πâÁöÑÂàÜÊÆµÁ∫øÊÄß S ÂΩ¢ÊøÄÊ¥ª„ÄÇÂØπ‰∫éÂΩí‰∏ÄÂåñÂáΩÊï∞,softmax ÊòØ‰∏Ä‰∏™Ê†áÂáÜÈÄâÈ°π„ÄÇÂ∞ΩÁÆ°Â¶ÇÊ≠§,Âú®Êàë‰ª¨ÁöÑËØÅÊòé‰∏≠,Êàë‰ª¨‰ΩøÁî® hardmax ÂáΩÊï∞,Â¶ÇÊûú xÊòØ x ‰∏≠ÁöÑÊúÄÂ§ßÂÄº,ÂàôÈÄöËøáËÆæÁΩÆ f(x) = 1 Êù•Ëé∑Âæó,Âê¶ÂàôËÆæÁΩÆ f(x) = 0„ÄÇÂõ†Ê≠§,ÂØπ‰∫éÊúÄÂ§ßÂÄºÂá∫Áé∞ r Ê¨°ÁöÑÂêëÈáè x,Â¶ÇÊûú xÊòØ x ÁöÑÊúÄÂ§ßÂÄº,Âàô hardmax(x) = ,Âê¶Âàô‰∏∫ hardmax(x) = 0„ÄÇÊØèÂΩì hardmax Áî®‰ΩúÂΩí‰∏ÄÂåñÂáΩÊï∞Êó∂,Êàë‰ª¨ÈÉΩÁß∞ÂÖ∂‰∏∫ hard attention„ÄÇ ËÆ©Êàë‰ª¨ËßÇÂØü‰∏Ä‰∏ã,hardmax ÁöÑÈÄâÊã©ÂØπ‰∫éÊàë‰ª¨ÁöÑËØÅÊòé‰ª•ÂΩìÂâçÂΩ¢ÂºèÂ∑•‰ΩúËá≥ÂÖ≥ÈáçË¶Å,Âõ†‰∏∫ÂÆÉÂÖÅËÆ∏Ê®°Êãü ‚ÄúËÆøÈóÆ‚Äù ÂêëÈáèÂ∫èÂàó‰∏≠ÁâπÂÆö‰ΩçÁΩÆÁöÑËøáÁ®ã„ÄÇHard attention ‰ª•Ââç‰∏ìÈó®Áî®‰∫éÂ§ÑÁêÜÂõæÂÉè(Xu et al., 2015;Elsayed et al., 2019),‰ΩÜÊòØ,ÊçÆÊàë‰ª¨ÊâÄÁü•,ÂÆÉÂ∞öÊú™Âú®Ëá™ÊàëÊ≥®ÊÑèÊû∂ÊûÑÁöÑ‰∏ä‰∏ãÊñá‰∏≠Áî®‰∫éÂ§ÑÁêÜÂ∫èÂàó„ÄÇÊúâÂÖ≥Êàë‰ª¨ÂØπÊ≠£ÁªìÊûúÂáΩÊï∞ÁöÑÈÄâÊã©ÁöÑËøõ‰∏ÄÊ≠•ËÆ®ËÆ∫,ËØ∑ÂèÇËßÅÁ¨¨ 5 ËäÇ„ÄÇÊåâÁÖßÊÉØ‰æã,ÂØπ‰∫éÂáΩÊï∞ F : Q‚Üí Q ÂíåÂ∫èÂàó X = (x, x, . . . , x),ÂÖ∂‰∏≠ x‚àà Q,Êàë‰ª¨ÂÜô F (X) Êù•Ë°®Á§∫Â∫èÂàó (F (x), . . . , F (x))„ÄÇ Transformer ÁºñÁ†ÅÂô®ÂíåËß£Á†ÅÂô® Transformer ÁöÑÂçïÂ±ÇÁºñÁ†ÅÂô®ÊòØ‰∏Ä‰∏™ÂèÇÊï∞ÂáΩÊï∞ Enc(Œ∏),ÂÖ∂‰∏≠ Œ∏ ÊòØÂèÇÊï∞,ÂÆÉÊé•Êî∂ Q ‰∏≠ÂêëÈáèÁöÑÂ∫èÂàó X = (x, . . . , x) ‰Ωú‰∏∫ËæìÂÖ•,ËøîÂõû‰∏Ä‰∏™Â∫èÂàó Enc(X; Œ∏) = (z, . . . . , z) Q‰∏≠‰∏é X ÈïøÂ∫¶Áõ∏ÂêåÁöÑÂêëÈáè„ÄÇ‰∏ÄËà¨Êù•ËØ¥,Êàë‰ª¨ËÆ§‰∏∫ Œ∏ ‰∏≠ÁöÑÂèÇÊï∞ÊòØÂèÇÊï∞ÂåñÂáΩÊï∞ Q(¬∑)„ÄÅK(¬∑)„ÄÅV (¬∑) Âíå O(¬∑),ÂÆÉ‰ª¨ÈÉΩ‰ªé QÂà∞ Q„ÄÇÁÑ∂Âêé,ÂçïÂ±ÇÁºñÁ†ÅÂô®ÂÆö‰πâÂ¶Ç‰∏ã a= Att(Q(x), K(X), V (X)) + x (4) z= O(a) + a (5) ËØ∑Ê≥®ÊÑè,Âú®Á≠âÂºè 4 ‰∏≠,Êàë‰ª¨Â∞ÜÂáΩÊï∞ Q Âíå V ÂàÜÂà´Â∫îÁî®‰∫é X ‰∏≠ÁöÑÊØè‰∏™Êù°ÁõÆ„ÄÇÂú®ÂÆûË∑µ‰∏≠,Q(¬∑)„ÄÅK(¬∑)„ÄÅV (¬∑) ÈÄöÂ∏∏ÊòØÊåáÂÆö‰∏∫Áª¥Â∫¶ (d √ó d) Áü©ÈòµÁöÑÁ∫øÊÄßÂèòÊç¢,ËÄå O(¬∑) ÊòØÂâçÈ¶àÁΩëÁªú„ÄÇ+ xand + asummands ÈÄöÂ∏∏Áß∞‰∏∫ÊÆãÂ∑ÆËøûÊé•(He et al., 2016;‰ªñÁ≠â‰∫∫)„ÄÇÂΩìÁî®‰ΩúÂèÇÊï∞ÁöÑÁâπÂÆöÂáΩÊï∞‰∏çÈáçË¶ÅÊó∂,Êàë‰ª¨Âè™ÈúÄÁºñÂÜô Z = Enc(X)„ÄÇ Transformer ÁºñÁ†ÅÂô®Ë¢´ÁÆÄÂçïÂú∞ÂÆö‰πâ‰∏∫ÂçïÂ±ÇÁºñÁ†ÅÂô®(ÂÖ∑ÊúâÁã¨Á´ãÂèÇÊï∞)ÁöÑÈáçÂ§çÂ∫îÁî®,Âä†‰∏ä‰∏§‰∏™ÊúÄÁªàÂèòÊç¢ÂáΩÊï∞ K(¬∑) Âíå V (¬∑) Â∫îÁî®‰∫éÊúÄÁªàÂ±ÇËæìÂá∫Â∫èÂàó‰∏≠ÁöÑÊØè‰∏™ÂêëÈáè„ÄÇÂõ†Ê≠§,L Â±Ç Transformer ÁºñÁ†ÅÂô®Áî±‰ª•‰∏ãÈÄíÂΩíÂÆö‰πâ(1 ‚â§ ' ‚â§ L‚àí1 ‰∏î X= X): X= Enc(X; Œ∏), K = K(X), V = V (X).(6) V = V (X) Êàë‰ª¨ÂÜô (K, V ) = TEnc(X) Êù•Ë°®Á§∫ (K, V ) ÊòØ L Â±ÇÂèòÂéãÂô®ÁºñÁ†ÅÂô®Âú®ËæìÂÖ•Â∫èÂàó X ‰∏äÁöÑÁªìÊûú„ÄÇ Ëß£Á†ÅÂô® ÂçïÂ±ÇËß£Á†ÅÂô®Á±ª‰ºº‰∫éÂçïÂ±ÇÁºñÁ†ÅÂô®,‰ΩÜÈúÄË¶ÅÈ¢ùÂ§ñÊ≥®ÊÑè‰∏ÄÂØπÂ§ñÈÉ®ÈîÆÂÄºÂêëÈáè (K, V )„ÄÇÂçïÂ±ÇËß£Á†ÅÂô®ÁöÑËæìÂÖ•ÊòØÂ∫èÂàó Y = (y, . . . , y) Âä†‰∏äÂ§ñÈÉ®ÂØπ (K, V ),ËæìÂá∫ÊòØ‰∏é Y ÈïøÂ∫¶Áõ∏ÂêåÁöÑÂ∫èÂàó Z = (z, . . . . , z) „ÄÇÂú®ÂÆö‰πâËß£Á†ÅÂô®Â±ÇÊó∂,Êàë‰ª¨Áî® Y Ë°®Á§∫Â∫èÂàó (y, . . . , y),‰∏∫ 1 ‚â§ i ‚â§ k„ÄÇËØ•Â±ÇÁöÑËæìÂá∫ Z = (z, . . . . , z) ‰πüË¢´ÂèÇÊï∞Âåñ,ËøôÊ¨°Áî±Âõõ‰∏™ÂáΩÊï∞ Q(¬∑)„ÄÅK(¬∑)„ÄÅV (¬∑) Âíå O(¬∑) ‰ªé Q to Q ÁªÑÊàê,Âπ∂‰∏îÂØπ‰∫éÊØè‰∏™ 1 ‚â§ i ‚â§ k ÂÆö‰πâÂ¶Ç‰∏ã: p= Att(Q(y), K(Y), V (Y)) + y (7) a= Att(p, K, V ) + p (8) z= O(a) + a (9) ËØ∑Ê≥®ÊÑè,ÂØπ (K(Y), V (Y)) ÁöÑÁ¨¨‰∏Ä‰∏™(Ëá™Êàë)ÂÖ≥Ê≥®‰ªÖÂú®Á¥¢Âºï i ‰πãÂâçËÄÉËôë Y ÁöÑÂ≠êÂ∫èÂàó,Âπ∂Áî®‰∫éÁîüÊàêÊü•ËØ¢ pto ÂÖ≥Ê≥®Â§ñÈÉ®ÂØπ (K, V)„ÄÇÊàë‰ª¨Â∞Ü Y Âíå (K, V ) ‰∏äÁöÑÂçïËß£Á†ÅÂô®Â±ÇÁöÑËæìÂá∫Ë°®Á§∫‰∏∫ Dec((K, V ), Y ; Œ∏)„ÄÇ Transformer Ëß£Á†ÅÂô®ÊòØÂçïÂ±ÇËß£Á†ÅÂô®ÁöÑÈáçÂ§çÂ∫îÁî®,Âä†‰∏ä‰∏Ä‰∏™ËΩ¨Êç¢ÂáΩÊï∞ F : Q‚Üí QÂ∫îÁî®‰∫éËß£Á†ÅÂ∫èÂàóÁöÑÊúÄÁªàÂêëÈáè„ÄÇÂõ†Ê≠§,Ëß£Á†ÅÂô®ÁöÑËæìÂá∫ÊòØ Q ‚ààÂçï‰∏™ÂêëÈáè z„ÄÇÊ≠£ÂºèÂú∞,L Â±Ç Transformer Ëß£Á†ÅÂô®ÂÆö‰πâ‰∏∫ Y = Dec((K, V ), Y ; Œ∏), z = F (y) (1 ‚â§ ' ‚â§ L ‚àí 1 Âíå Y = Y ).(10) Êàë‰ª¨‰ΩøÁî® z = TDec((K, V ), Y ) Êù•Ë°®Á§∫ z ÊòØËøô‰∏™ L Â±ÇÂèòÂéãÂô®Ëß£Á†ÅÂô®Âú®ËæìÂÖ• Y Âíå (K, V) ‰∏äÁöÑËæìÂá∫„ÄÇ Transformer ÁöÑ‰∏Ä‰∏™ÈáçË¶ÅÈôêÂà∂ÊòØ Transformer Ëß£Á†ÅÂô®ÁöÑËæìÂá∫ÊÄªÊòØÂØπÂ∫î‰∫éÊüê‰∫õÊúâÈôêÂ≠óÊØçŒì‰∏≠ÁöÑÂ≠óÊØçÁºñÁ†Å„ÄÇ‰ªéÂΩ¢Âºè‰∏äËÆ≤,ÈúÄË¶ÅÂ≠òÂú®‰∏Ä‰∏™ÊúâÈôêÂ≠óÊØçŒìÂíå‰∏Ä‰∏™ÂµåÂÖ•ÂáΩÊï∞ g : Œì ‚Üí Q,‰ΩøÂæó Transformer Ëß£Á†ÅÂô®ÁöÑÊúÄÁªàÂèòÊç¢ÂáΩÊï∞ F Â∞Ü Q ‰∏≠ÁöÑ‰ªª‰ΩïÂêëÈáèÊò†Â∞ÑÂà∞ Œì ‰∏≠Â≠óÊØçÂµåÂÖ•ÁöÑÊúâÈôêÈõÜ g(Œì) ‰∏≠ÁöÑÂêëÈáè„ÄÇ ÂÆåÊï¥ÁöÑ Transformer Transformer ÁΩëÁªúÊé•Êî∂‰∏Ä‰∏™ËæìÂÖ•Â∫èÂàó X„ÄÅ‰∏Ä‰∏™ÁßçÂ≠êÂêëÈáè y Âíå‰∏Ä‰∏™ÂÄº r ‚àà N„ÄÇÂÆÉÁöÑËæìÂá∫ÊòØ‰∏Ä‰∏™Â∫èÂàó Y = (y, . . . , y),ÂÆö‰πâ‰∏∫ y= TDec(TEnc(X), (y, y, . . . , y)), ÂØπ‰∫é 0 ‚â§ t ‚â§ r ‚àí 1„ÄÇ(11) yt+1=TDec‚Å°(TEnc‚Å°(X),(y0,y1,‚Ä¶,yt)),for¬†0‚â§t‚â§r‚àí1. \\boldsymbol{y}_{t+1}=\\operatorname{TDec}\\left(\\operatorname{TEnc}(\\boldsymbol{X}),\\left(\\boldsymbol{y}_{0}, \\boldsymbol{y}_{1}, \\ldots, \\boldsymbol{y}_{t}\\right)\\right), \\quad for ~ 0 \\leq t \\leq r-1. yt+1‚Äã=TDec(TEnc(X),(y0‚Äã,y1‚Äã,‚Ä¶,yt‚Äã)),for¬†0‚â§t‚â§r‚àí1. Êàë‰ª¨Â∞ÜÂèòÂéãÂô®ÁöÑËæìÂá∫Â∫èÂàóË°®Á§∫‰∏∫ Y = (y, y, . . . . , y) = Trans(X, y, r)„ÄÇ 3.1 ÊØî‰æã‰∏ãÁöÑ‰∏çÂèòÊÄß Â¶Ç‰∏äÊâÄËø∞,Transformer ÁΩëÁªúÂú®ÊçïËé∑ËØ≠Ë®ÄÁöÑËÉΩÂäõÊñπÈù¢Áõ∏ÂΩìÂº±„ÄÇËøôÊòØÂõ†‰∏∫ Transformer ÊòØÈ°∫Â∫è‰∏çÂèòÁöÑ,Âç≥ÂÆÉ‰ª¨Êó†Ê≥ïËÆøÈóÆ input ‰∏≠ÂÖÉÁ¥†ÁöÑÁõ∏ÂØπÈ°∫Â∫è„ÄÇÊõ¥Ê≠£ÂºèÂú∞ËØ¥,‰∏§‰∏™Áõ∏‰∫íÊéíÂàóÁöÑ Importing Â∫èÂàó‰ºö‰∫ßÁîüÂÆåÂÖ®Áõ∏ÂêåÁöÑËæìÂá∫„ÄÇËøôÊòØÊ≥®ÊÑèÂäõÂáΩÊï∞ÁöÑ‰ª•‰∏ãÂ±ûÊÄßÁöÑÁªìÊûú:Â¶ÇÊûú K = (k, . . . . , k), V = (v, . . . , v) ‰∏î œÄ : {1, . . . . , n} ‚Üí {1, . . . , n} ÊòØÊéíÂàó,ÂàôÂØπ‰∫éÊØè‰∏™Êü•ËØ¢ q,Att(q, K, V ) = Att(q, œÄ(K), œÄ(V ))„ÄÇ ai=Att‚Å°(Q(xi),K(X),V(X))+xi \\boldsymbol{a}_{i} =\\operatorname{Att}\\left(Q\\left(\\boldsymbol{x}_{i}\\right), K(\\boldsymbol{X}), V(\\boldsymbol{X})\\right)+\\boldsymbol{x}_{i} ai‚Äã=Att(Q(xi‚Äã),K(X),V(X))+xi‚Äã zi=O(ai)+ai \\boldsymbol{z}_{i} =O\\left(\\boldsymbol{a}_{i}\\right)+\\boldsymbol{a}_{i} zi‚Äã=O(ai‚Äã)+ai‚Äã 4. Transformer ÁöÑ‰ΩçÁΩÆÁºñÁ†ÅÁöÑÂõæÁÅµÂÆåÂ§áÊÄß ÂÆöÁêÜ 6 ÂÖ∑Êúâ‰ΩçÁΩÆÁºñÁ†ÅÁöÑ Transformer ÁΩëÁªúÁ±ªÊòØÂõæÁÅµÂÆåÂ§áÁöÑ„ÄÇÊ≠§Â§ñ,ÂõæÁÅµÂÆåÂ§áÊÄßÂç≥‰ΩøÂú®ÂèóÈôêËÆæÁΩÆ‰∏≠‰πüÊàêÁ´ã,ÂÖ∂‰∏≠ n ‚àà N ÁöÑ‰ΩçÁΩÆÂµåÂÖ• posÔºànÔºâ ‰∏≠ÂîØ‰∏ÄÁöÑÈùûÊÅíÂÆöÂÄºÊòØ n„ÄÅ1/n Âíå 1/n,Âπ∂‰∏î Transformer ÁΩëÁªúÂÖ∑ÊúâÂçï‰∏™ÁºñÁ†ÅÂô®Â±ÇÂíå‰∏â‰∏™Ëß£Á†ÅÂô®Â±Ç„ÄÇ ÂÆûÈôÖ‰∏ä,Ëøô‰∏™ÁªìÊûúÁöÑËØÅÊòéÊòæÁ§∫‰∫ÜÊõ¥ÊúâÂäõÁöÑ‰∏úË•ø:‰∏ç‰ªÖ Transformers ÂèØ‰ª•ËØÜÂà´ÂõæÁÅµÊú∫Êé•ÂèóÁöÑÊâÄÊúâËØ≠Ë®Ä,Âç≥ÊâÄË∞ìÁöÑÂèØËØÜÂà´ÊàñÂèØÂà§ÂÆöËØ≠Ë®Ä;ÂÆÉ‰ª¨ÂèØ‰ª•ËØÜÂà´ÊâÄÊúâÈÄíÂΩíÂèØÊûö‰∏æÊàñÂçäÂèØÂà§ÂÆöÁöÑËØ≠Ë®Ä,Ëøô‰∫õËØ≠Ë®Ä L Â≠òÂú®Êûö‰∏æ L ‰∏≠ÊâÄÊúâÂ≠óÁ¨¶‰∏≤ÁöÑ TM„ÄÇ Êàë‰ª¨Áé∞Âú®Êèê‰æõÂÆöÁêÜ 6 ÁöÑÂÆåÊï¥ËØÅÊòé„ÄÇ‰∏∫‰∫ÜÂèØËØªÊÄß,‰∏Ä‰∫õ‰∏≠Èó¥ÂºïÁêÜÁöÑËØÅÊòéË¢´ÂΩíÂÖ•ÈôÑÂΩï„ÄÇ ËÆæ M = ÔºàQ, Œ£, Œ¥, q, F Ôºâ ÊòØ‰∏Ä‰∏™ÂõæÁÅµÊú∫,ÂÖ∂Á£ÅÂ∏¶ÂêëÂè≥ÊòØÊó†ÈôêÁöÑ,Âπ∂ÂÅáËÆæÁâπÊÆäÁ¨¶Âè∑ # ‚àà Œ£ Áî®‰∫éÊ†áËÆ∞Á£ÅÂ∏¶‰∏≠ÁöÑÁ©∫ÁôΩ‰ΩçÁΩÆ„ÄÇ Êàë‰ª¨ÂØπ M Âú®Â§ÑÁêÜ Importing Â≠óÁ¨¶‰∏≤Êó∂ÁöÑÂ∑•‰ΩúÂéüÁêÜÂÅöÂá∫‰ª•‰∏ãÂÅáËÆæ: M ‰ªéÁä∂ÊÄÅ q ÂºÄÂßã,ÊåáÂêëÁ£ÅÂ∏¶ÁöÑÁ¨¨‰∏Ä‰∏™ËØªÂèñÁ©∫ÁôΩÁ¨¶Âè∑ #ÁöÑÂçïÂÖÉÊ†º„ÄÇËæìÂÖ•Â∞ÜÁ´ãÂç≥ÂÜôÂÖ•Á¨¨‰∏Ä‰∏™ÂçïÂÖÉÊ†ºÁöÑÂè≥‰æß„ÄÇ Q ÂÖ∑ÊúâÁâπÊÆäÁä∂ÊÄÅ qused Êù•ËØªÂèñÂÆåÊï¥ÁöÑËæìÂÖ•„ÄÇ ÊúÄÂàùÔºàÊ≠•È™§ 0Ôºâ,M ËøáÊ∏°Âà∞Áä∂ÊÄÅ q,Âπ∂Â∞ÜÂÖ∂Â§¥ÈÉ®ÂêëÂè≥ÁßªÂä®„ÄÇ ÂΩìÂ§Ñ‰∫éÁä∂ÊÄÅÊó∂,qit ÂêëÂè≥ÁßªÂä®,Áõ¥Âà∞ËØªÂèñÁ¨¶Âè∑ #„ÄÇ ‰∏çÊé•ÂèóÁä∂ÊÄÅÔºàF ‰∏≠ÁöÑÁä∂ÊÄÅÔºâÊ≤°ÊúâËΩ¨Êç¢„ÄÇ ÂæàÂÆπÊòìËØÅÊòé,ÊØè‰∏™ÈÄöÁî®ÁöÑÂõæÁÅµÊú∫ÈÉΩÁ≠âÂêå‰∫éÊª°Ë∂≥‰∏äËø∞ÂÅáËÆæÁöÑÂõæÁÅµÊú∫„ÄÇÊàë‰ª¨ËØÅÊòé‰∫ÜÂèØ‰ª•ÊûÑÂª∫‰∏Ä‰∏™ transformer ÁΩëÁªú Transthat ËÉΩÂ§üÂú®ÊØè‰∏™ÂèØËÉΩÁöÑËæìÂÖ•Â≠óÁ¨¶‰∏≤‰∏äÊ®°Êãü M;ÊàñËÄÖ,Êõ¥Ê≠£ÂºèÂú∞ËØ¥,LÔºàM Ôºâ = LÔºàTransÔºâ„ÄÇ ÊûÑÈÄ†‰ª•ÊüêÁßçÊñπÂºèÂèÇ‰∏éÂÖ∂‰∏≠,Âπ∂‰ΩøÁî®‰∫ÜÂá†‰∏™ËæÖÂä©ÂÆö‰πâÂíå‰∏≠Èó¥ÁªìÊûú„ÄÇ‰∏∫‰∫Ü‰æø‰∫éÈòÖËØª,Êàë‰ª¨Â∞ÜÊûÑÈÄ†ÂíåËØÅÊòéÂàÜ‰∏∫‰∏â‰∏™ÈÉ®ÂàÜ„ÄÇÊàë‰ª¨È¶ñÂÖàÁªôÂá∫Êàë‰ª¨‰ΩøÁî®ÁöÑÁ≠ñÁï•ÁöÑÈ´òÁ∫ßËßÜÂõæ„ÄÇÁÑ∂Âêé,Êàë‰ª¨ËØ¶ÁªÜ‰ªãÁªç‰∫ÜÂÆûÁé∞Êàë‰ª¨ÁöÑÁ≠ñÁï•ÊâÄÈúÄÁöÑÁºñÁ†ÅÂô®ÂíåËß£Á†ÅÂô®ÁöÑÊû∂ÊûÑ,ÊúÄÂêéÊàë‰ª¨Ê≠£ÂºèËØÅÊòéÊàë‰ª¨Êû∂ÊûÑÁöÑÊØè‰∏™ÈÉ®ÂàÜÈÉΩÂèØ‰ª•ÂÆûÈôÖÂÆûÁé∞„ÄÇ Âú® Transwe ÁöÑÁºñÁ†ÅÂô®ÈÉ®ÂàÜÊé•Êî∂Â≠óÁ¨¶‰∏≤ w = ss¬∑ ¬∑ ¬∑s.Êàë‰ª¨È¶ñÂÖà‰ΩøÁî®ÂµåÂÖ•ÂáΩÊï∞Â∞ÜÊØè‰∏™ sas Ë°®Á§∫‰∏∫ one-hot ÂêëÈáè,Âπ∂‰∏∫ÊØè‰∏™Á¥¢ÂºïÊ∑ªÂä†‰ΩçÁΩÆÁºñÁ†Å„ÄÇÁºñÁ†ÅÂô®‰∫ßÁîüËæìÂá∫ ÔºàK, VÔºâ,ÂÖ∂‰∏≠ K= Ôºàk, . . . , kÔºâ Âíå V = Ôºàv, . . . , vÔºâ ÊòØÈîÆÂíåÂÄºÁöÑÂ∫èÂàó,‰ΩøÂæó vÂåÖÂê´Ê≤ôÂ≠êÁöÑ‰ø°ÊÅØ kÂåÖÂê´Á¨¨ i ‰∏™‰ΩçÁΩÆÁºñÁ†ÅÁöÑ‰ø°ÊÅØ„ÄÇÊàë‰ª¨Á®çÂêé‰ºöËØÅÊòé,ËøôÂÖÅËÆ∏Êàë‰ª¨ÂÖ≥Ê≥®ÊØè‰∏™ÁâπÂÆö‰ΩçÁΩÆ,Âπ∂Â∞ÜÊØè‰∏™ËæìÂÖ•Á¨¶Âè∑‰ªéÁºñÁ†ÅÂô®Â§çÂà∂Âà∞Ëß£Á†ÅÂô®ÔºàÂèÇËßÅÂºïÁêÜ 7Ôºâ„ÄÇ Âú® Transwe ÁöÑËß£Á†ÅÂô®ÈÉ®ÂàÜÊ®°Êãü M Âú® w = ss¬∑ ¬∑ ¬∑ ¬∑s.‰∏∫Ê≠§,Êàë‰ª¨ÂÆö‰πâ‰ª•‰∏ãÂ∫èÂàóÔºàÂØπ‰∫é i ‚â• 0Ôºâ: q:ËÆ°ÁÆóÊ≠•È™§ i ‰∏≠ M ÁöÑÁä∂ÊÄÅ s:Ê≠•È™§ i ‰∏≠ M Â§¥ÈÉ®ËØªÂèñÁöÑÁ¨¶Âè∑ v:Ê≠•È™§ i ‰∏≠ M ÂÜôÂÖ•ÁöÑÁ¨¶Âè∑ m:Ê≠•È™§ i ‰∏≠ M Â§¥ÈÉ®Âú®ËøáÊ∏°‰∏≠ÁßªÂä®ÁöÑÊñπÂêë v = [ q1, s1, x1, q2, s2, x2, x3, x4, x5, s3, x6, s4, x7 x8, x9, x10, x11 ], "},"Papers/Spatially varying nanophotonic neural networks.html":{"url":"Papers/Spatially varying nanophotonic neural networks.html","title":"Spatially varying nanophotonic neural networks","keywords":"","body":"Á©∫Èó¥ÂèòÂåñÁöÑÁ∫≥Á±≥ÂÖâÂ≠êÁ•ûÁªèÁΩëÁªú Spatially varying nanophotonic neural networks Abstract The explosive growth in computation and energy cost of artificial intelligence has spurred interest in alternative computing modalities to conventional electronic processors. Photonic processors, which use photons instead of electrons, promise optical neural networks with ultralow latency and power consumption. However, existing optical neural networks, limited by their designs, have not achieved the recognition accuracy of modern electronic neural networks. In this work, we bridge this gap by embedding parallelized optical computation into flat camera optics that perform neural network computations during capture, before recording on the sensor. We leverage large kernels and propose a spatially varying convolutional network learned through a low-dimensional reparameterization. We instantiate this network inside the camera lens with a nanophotonic array with angle-dependent responses. Combined with a lightweight electronic back-end of about 2K parameters, our reconfigurable nanophotonic neural network achieves 72.76% accuracy on CIFAR-10, surpassing AlexNet (72.64%), and advancing optical neural networks into the deep learning era. ‰∫∫Â∑•Êô∫ËÉΩÁöÑËÆ°ÁÆóÂíåËÉΩÊ∫êÊàêÊú¨ÁöÑÁàÜÁÇ∏ÂºèÂ¢ûÈïøÊøÄÂèë‰∫Ü‰∫∫‰ª¨ÂØπ‰º†ÁªüÁîµÂ≠êÂ§ÑÁêÜÂô®ÁöÑÊõø‰ª£ËÆ°ÁÆóÊ®°ÂºèÁöÑÂÖ¥Ë∂£„ÄÇÂÖâÂ≠êÂ§ÑÁêÜÂô®‰ΩøÁî®ÂÖâÂ≠êËÄå‰∏çÊòØÁîµÂ≠êÔºåÊúâÊúõÂÆûÁé∞ÂÖ∑ÊúâË∂Ö‰ΩéÂª∂ËøüÂíå‰ΩéÂäüËÄóÁöÑÂÖâÂ≠¶Á•ûÁªèÁΩëÁªú„ÄÇÁÑ∂ËÄåÔºåÁé∞ÊúâÁöÑÂÖâÂ≠¶Á•ûÁªèÁΩëÁªúÂèóÂÖ∂ËÆæËÆ°ÁöÑÈôêÂà∂ÔºåÂ∞öÊú™ËææÂà∞Áé∞‰ª£ÁîµÂ≠êÁ•ûÁªèÁΩëÁªúÁöÑËØÜÂà´Á≤æÂ∫¶„ÄÇÂú®ËøôÈ°πÂ∑•‰Ωú‰∏≠ÔºåÊàë‰ª¨ÈÄöËøáÂ∞ÜÂπ∂Ë°åÂÖâÂ≠¶ËÆ°ÁÆóÂµåÂÖ•Âà∞Âπ≥Èù¢Áõ∏Êú∫ÂÖâÂ≠¶ÂÖÉ‰ª∂‰∏≠Êù•Âº•ÂêàËøô‰∏ÄÂ∑ÆË∑ùÔºåËøô‰∫õÂÖâÂ≠¶ÂÖÉ‰ª∂Âú®ÊçïËé∑ÊúüÈó¥ÊâßË°åÁ•ûÁªèÁΩëÁªúËÆ°ÁÆóÔºåÁÑ∂ÂêéÂÜçÂú®‰º†ÊÑüÂô®‰∏äËÆ∞ÂΩï„ÄÇÊàë‰ª¨Âà©Áî®Â§ßÂûãÂÜÖÊ†∏ÔºåÂπ∂ÊèêÂá∫‰∫Ü‰∏Ä‰∏™ÈÄöËøá‰ΩéÁª¥ÈáçÊñ∞ÂèÇÊï∞ÂåñÂ≠¶‰π†ÁöÑÁ©∫Èó¥ÂèòÂåñÂç∑ÁßØÁΩëÁªú„ÄÇÊàë‰ª¨Âú®Áõ∏Êú∫ÈïúÂ§¥ÂÜÖ‰ΩøÁî®ÂÖ∑ÊúâËßíÂ∫¶Áõ∏ÂÖ≥ÂìçÂ∫îÁöÑÁ∫≥Á±≥ÂÖâÂ≠êÈòµÂàóÊù•ÂÆû‰æãÂåñËøô‰∏™ÁΩëÁªú„ÄÇÁªìÂêàÁ∫¶ 2K ÂèÇÊï∞ÁöÑËΩªÈáèÁ∫ßÁîµÂ≠êÂêéÁ´ØÔºåÊàë‰ª¨ÁöÑÂèØÈáçÊûÑÁ∫≥Á±≥ÂÖâÂ≠êÁ•ûÁªèÁΩëÁªúÂú® CIFAR-10 ‰∏äÂÆûÁé∞‰∫Ü 72.76% ÁöÑÂáÜÁ°ÆÁéáÔºåË∂ÖËøá‰∫Ü AlexNetÔºà72.64%ÔºâÔºåÂ∞ÜÂÖâÂ≠¶Á•ûÁªèÁΩëÁªúÂ∏¶ÂÖ•‰∫ÜÊ∑±Â∫¶Â≠¶‰π†Êó∂‰ª£„ÄÇ INTRODUCTION ‰ªãÁªç Increasing demands for high-performance artificial intelligence (AI) in the last decade have levied immense pressure on computing architectures across domains, including robotics, transportation, personal devices, medical imaging and scientific imaging. Although electronic microprocessors have undergone drastic evolution over the past 50 years (1), providing us with general-purpose central processing units and custom accelerator platforms (e.g., graphical processing unit and Digital Signal Processor (DSP) ASICs), this growth rate is far outpaced by the explosive growth of AI models. Specifically, the Moore‚Äôs law delivers a doubling in transistor counts every 2 years (2), whereas deep neural networks (DNNs) (3), arguably the most influential algorithms in AI, have doubled in size every 6 months (4). However, the end of voltage scaling has made the power consumption, and not the number of transistors, the principal factor limiting further improvements in computing performance (5). Overcoming this limitation and radically reducing compute latency and power consumption could drive unprecedented applications from low-power edge computation in the camera, potentially enabling computation in thin eyeglasses or microrobots and reducing power consumption in data centers used for training of neural network architectures. Âú®ËøáÂéªÂçÅÂπ¥‰∏≠ÔºåÂØπÈ´òÊÄßËÉΩ‰∫∫Â∑•Êô∫ËÉΩ ÔºàAIÔºâ ÁöÑÈúÄÊ±Ç‰∏çÊñ≠Â¢ûÈïøÔºåËøôÁªôÊú∫Âô®‰∫∫„ÄÅËøêËæì„ÄÅ‰∏™‰∫∫ËÆæÂ§á„ÄÅÂåªÂ≠¶ÊàêÂÉèÂíåÁßëÂ≠¶ÊàêÂÉèÁ≠âÂêÑ‰∏™È¢ÜÂüüÁöÑËÆ°ÁÆóÊû∂ÊûÑÂ∏¶Êù•‰∫ÜÂ∑®Â§ßÂéãÂäõ„ÄÇÂ∞ΩÁÆ°ÁîµÂ≠êÂæÆÂ§ÑÁêÜÂô®Âú®ËøáÂéª 50 Âπ¥‰∏≠ÁªèÂéÜ‰∫ÜÂ∑®Â§ßÁöÑÂèëÂ±ï Ôºà1ÔºâÔºå‰∏∫Êàë‰ª¨Êèê‰æõ‰∫ÜÈÄöÁî®ÁöÑ‰∏≠Â§ÆÂ§ÑÁêÜÂô®ÂíåËá™ÂÆö‰πâÂä†ÈÄüÂô®Âπ≥Âè∞Ôºà‰æãÂ¶ÇÂõæÂΩ¢Â§ÑÁêÜÂçïÂÖÉÂíåÊï∞Â≠ó‰ø°Âè∑Â§ÑÁêÜÂô® ÔºàDSPÔºâ ASICÔºâÔºå‰ΩÜËøô‰∏ÄÂ¢ûÈïøÁéáËøúËøúË∂ÖËøá‰∫Ü AI Ê®°ÂûãÁöÑÁàÜÁÇ∏ÂºèÂ¢ûÈïø„ÄÇÂÖ∑‰ΩìÊù•ËØ¥ÔºåÊë©Â∞îÂÆöÂæãÁöÑÊô∂‰ΩìÁÆ°Êï∞ÈáèÊØè 2 Âπ¥Áøª‰∏ÄÁï™ Ôºà2ÔºâÔºåËÄåÊ∑±Â∫¶Á•ûÁªèÁΩëÁªú ÔºàDNNÔºâ Ôºà3Ôºâ ÂèØ‰ª•ËØ¥ÊòØ AI È¢ÜÂüüÊúÄÊúâÂΩ±ÂìçÂäõÁöÑÁÆóÊ≥ïÔºåÂÖ∂Â§ßÂ∞èÊØè 6 ‰∏™ÊúàÁøª‰∏ÄÁï™ Ôºà4Ôºâ„ÄÇÁÑ∂ËÄåÔºåÁîµÂéãÁº©ÊîæÁöÑÁªìÊùü‰ΩøÂäüËÄóËÄå‰∏çÊòØÊô∂‰ΩìÁÆ°Êï∞ÈáèÊàê‰∏∫ÈôêÂà∂ËÆ°ÁÆóÊÄßËÉΩËøõ‰∏ÄÊ≠•ÊèêÈ´òÁöÑ‰∏ªË¶ÅÂõ†Á¥† Ôºà5Ôºâ„ÄÇÂÖãÊúçËøô‰∏ÄÈôêÂà∂Âπ∂‰ªéÊ†πÊú¨‰∏äÈôç‰ΩéËÆ°ÁÆóÂª∂ËøüÂíåÂäüËÄóÔºåÂèØ‰ª•Êé®Âä®Áõ∏Êú∫‰∏≠ÁöÑ‰ΩéÂäüËÄóËæπÁºòËÆ°ÁÆóÂ∏¶Êù•ÂâçÊâÄÊú™ÊúâÁöÑÂ∫îÁî®ÔºåÊúâÂèØËÉΩÂú®ËñÑÁúºÈïúÊàñÂæÆÂûãÊú∫Âô®‰∫∫‰∏≠ÂÆûÁé∞ËÆ°ÁÆóÔºåÂπ∂Èôç‰ΩéÁî®‰∫éÁ•ûÁªèÁΩëÁªúÊû∂ÊûÑËÆ≠ÁªÉÁöÑÊï∞ÊçÆ‰∏≠ÂøÉÁöÑÂäüËÄó„ÄÇ Optical computing has been proposed as a potential avenue to alleviate several inherent limitations of digital electronics, e.g., compute speed, heat dissipation, and power, and could potentially boost computational throughput, processing speed, and energy efficiency by orders of magnitude (6‚Äì10). Such optical computers leverage several advantages of photonics to achieve high throughput, low latency, and low power consumption (11). These performance improvements are achieved by sacrificing reconfigurability. Thus, although general-purpose optical computing has yet to be practically realized due to obstacles such as larger physical footprints and inefficient optical switches (12, 13), several notable advances have already been made toward optical/photonic processors tailored specifically for AI (14, 15). Representative examples include optical computers that perform widely used signal processing operators (16‚Äì22), e.g., spatial/temporal differentiation, integration, and convolution with performance far beyond those of contemporary electronic processors. Most notably, optical neural networks (ONNs) (6, 23‚Äì38) can perform AI inference tasks such as image recognition when implemented as fully optical or hybrid opto-electronical computers. ÂÖâÂ≠¶ËÆ°ÁÆóÂ∑≤Ë¢´ÊèêËÆÆ‰Ωú‰∏∫‰∏ÄÁßçÊΩúÂú®ÁöÑÈÄîÂæÑÊù•ÁºìËß£Êï∞Â≠óÁîµÂ≠êÂ≠¶ÁöÑÂá†‰∏™Âõ∫ÊúâÈôêÂà∂Ôºå‰æãÂ¶ÇËÆ°ÁÆóÈÄüÂ∫¶„ÄÅÊï£ÁÉ≠ÂíåÂäüÁéáÔºåÂπ∂ÂèØËÉΩÂ∞ÜËÆ°ÁÆóÂêûÂêêÈáè„ÄÅÂ§ÑÁêÜÈÄüÂ∫¶ÂíåËÉΩÊ∫êÊïàÁéáÊèêÈ´òÂá†‰∏™Êï∞ÈáèÁ∫ß Ôºà6‚Äì10Ôºâ„ÄÇËøôÁßçÂÖâÂ≠¶ËÆ°ÁÆóÊú∫Âà©Áî®ÂÖâÂ≠êÂ≠¶ÁöÑÂá†‰∏™‰ºòÂäøÊù•ÂÆûÁé∞È´òÂêûÂêêÈáè„ÄÅ‰ΩéÂª∂ËøüÂíå‰ΩéÂäüËÄó Ôºà11Ôºâ„ÄÇËøô‰∫õÊÄßËÉΩÊîπËøõÊòØÈÄöËøáÁâ∫Áâ≤ÂèØÈáçÊñ∞ÈÖçÁΩÆÊÄßÊù•ÂÆûÁé∞ÁöÑ„ÄÇÂõ†Ê≠§ÔºåÂ∞ΩÁÆ°Áî±‰∫éËæÉÂ§ßÁöÑÁâ©ÁêÜÂç†Áî®Á©∫Èó¥Âíå‰ΩéÊïàÁöÑÂÖâÂºÄÂÖ≥Á≠âÈöúÁ¢çÔºåÈÄöÁî®ÂÖâËÆ°ÁÆóÂ∞öÊú™ÂÆûÈôÖÂÆûÁé∞ Ôºà12Ôºå 13ÔºâÔºå‰ΩÜ‰∏ìÈó®‰∏∫ AI ÈáèË∫´ÂÆöÂà∂ÁöÑÂÖâ/ÂÖâÂ≠êÂ§ÑÁêÜÂô®Â∑≤ÁªèÂèñÂæó‰∫Ü‰∏Ä‰∫õÊòæÁùÄËøõÂ±ï Ôºà14Ôºå 15Ôºâ„ÄÇ‰ª£Ë°®ÊÄßÁ§∫‰æãÂåÖÊã¨ÊâßË°åÂπøÊ≥õ‰ΩøÁî®ÁöÑ‰ø°Âè∑Â§ÑÁêÜËøêÁÆóÁ¨¶ Ôºà16-22Ôºâ ÁöÑÂÖâÂ≠¶ËÆ°ÁÆóÊú∫Ôºå‰æãÂ¶ÇÁ©∫Èó¥/Êó∂Èó¥ÂæÆÂàÜ„ÄÅÁßØÂàÜÂíåÂç∑ÁßØÔºåÂÖ∂ÊÄßËÉΩËøúËøúË∂ÖËøáÂΩì‰ª£ÁîµÂ≠êÂ§ÑÁêÜÂô®„ÄÇÊúÄÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂÖâÂ≠¶Á•ûÁªèÁΩëÁªú ÔºàONNÔºâ Ôºà6Ôºå 23‚Äì38Ôºâ Âú®‰Ωú‰∏∫ÂÖ®ÂÖâÂ≠¶ÊàñÊ∑∑ÂêàÂÖâÁîµËÆ°ÁÆóÊú∫ÂÆûÁé∞Êó∂ÂèØ‰ª•ÊâßË°å AI Êé®ÁêÜ‰ªªÂä°Ôºå‰æãÂ¶ÇÂõæÂÉèËØÜÂà´„ÄÇ Existing ONNs can be broadly classified into two categories based on either integrated photonics (24‚Äì30) [e.g., Mach-Zehnder interferometers (23, 26), phase change materials (24), microring resonators (29), multimode fibers (30)] for physically realizing multiply-adds floating point operations (FLOPs), or with free-space optics (6, 31‚Äì37) that implement convolutional layers with light propagation through diffractive elements [e.g., 3D-printed surfaces (6), 4F optical correlators (37), optical masks (35), and meta-surfaces (36)]. The design of these ONN architectures has been fundamentally restricted by the underlying network design, including the challenge of scaling to large numbers of neurons (within integrated photonic circuits) and the lack of scalable energy-efficient nonlinear optical operators. As a result, even the most successful ensemble ONNs (31) that use dozens of ONNs in parallel, have only achieved LeNet (39)‚Äìlevel accuracy on image classification, which was achieved by their electronic counterparts over 30 years ago. Moreover, most high-performance ONNs can only operate under coherent illumination, prohibiting the integration into the camera optics under natural lighting conditions. Although hybrid opto-electronic networks (35, 36, 40) working on incoherent light do exist, most of them do not yield favorable results as their optical front-end is designed for small-kernel spatially uniform convolutional layers, which this work finds does not fully exploit the design space available for optical convolution. Áé∞ÊúâÁöÑ ONN Â§ßËá¥ÂèØÂàÜ‰∏∫‰∏§Á±ªÔºåÂü∫‰∫éÈõÜÊàêÂÖâÂ≠êÂ≠¶ Ôºà24-30Ôºâ [‰æãÂ¶ÇÔºåÈ©¨Ëµ´-ÊõæÂæ∑Â∞îÂπ≤Ê∂â‰ª™ Ôºà23Ôºå 26Ôºâ„ÄÅÁõ∏ÂèòÊùêÊñô Ôºà24Ôºâ„ÄÅÂæÆÁéØË∞êÊåØÂô® Ôºà29Ôºâ„ÄÅÂ§öÊ®°ÂÖâÁ∫§ Ôºà30Ôºâ] Áî®‰∫éÁâ©ÁêÜÂÆûÁé∞‰πòÂä†ÊµÆÁÇπËøêÁÆó ÔºàFLOPÔºâÔºåÊàñÂÖ∑ÊúâËá™Áî±Á©∫Èó¥ÂÖâÂ≠¶Âô®‰ª∂ Ôºà6Ôºå31-37ÔºâÔºåÂÆÉ‰ª¨ÂÆûÁé∞‰∫ÜÂç∑ÁßØÂ±ÇÔºåÂÖâÈÄöËøáË°çÂ∞ÑÂÖÉ‰ª∂‰º†Êí≠ [‰æãÂ¶ÇÔºå3D ÊâìÂç∞Ë°®Èù¢ Ôºà6Ôºâ„ÄÅ4F ÂÖâÂ≠¶Áõ∏ÂÖ≥Âô® Ôºà37Ôºâ„ÄÅÂÖâÂ≠¶Êé©Ê®° Ôºà35Ôºâ ÂíåË∂ÖË°®Èù¢ Ôºà36Ôºâ]„ÄÇËøô‰∫õ ONN Êû∂ÊûÑÁöÑËÆæËÆ°‰ªéÊ†πÊú¨‰∏äÂèóÂà∞Â∫ïÂ±ÇÁΩëÁªúËÆæËÆ°ÁöÑÈôêÂà∂ÔºåÂåÖÊã¨Êâ©Â±ïÂà∞Â§ßÈáèÁ•ûÁªèÂÖÉÔºàÂú®ÈõÜÊàêÂÖâÂ≠êÁîµË∑ØÂÜÖÔºâÁöÑÊåëÊàò‰ª•ÂèäÁº∫‰πèÂèØÊâ©Â±ïÁöÑËäÇËÉΩÈùûÁ∫øÊÄßÂÖâÂ≠¶ËøêÁÆóÁ¨¶„ÄÇÂõ†Ê≠§ÔºåÂç≥‰ΩøÊòØÊúÄÊàêÂäüÁöÑÈõÜÊàê ONN Ôºà31Ôºâ Âπ∂Ë°å‰ΩøÁî®Êï∞ÂçÅ‰∏™ ONNÔºå‰πüÂè™ËÉΩËææÂà∞ LeNet Ôºà39Ôºâ Á∫ßÁöÑÂõæÂÉèÂàÜÁ±ªÁ≤æÂ∫¶ÔºåËÄåËøôÊòØ 30 Â§öÂπ¥ÂâçÁîµÂ≠êÂêåÁ±ª‰∫ßÂìÅÂÆûÁé∞ÁöÑ„ÄÇÊ≠§Â§ñÔºåÂ§ßÂ§öÊï∞È´òÊÄßËÉΩ ONN Âè™ËÉΩÂú®Áõ∏Âπ≤ÁÖßÊòé‰∏ãÂ∑•‰ΩúÔºåÂõ†Ê≠§Êó†Ê≥ïÂú®Ëá™ÁÑ∂ÂÖâÊù°‰ª∂‰∏ãÈõÜÊàêÂà∞Áõ∏Êú∫ÂÖâÂ≠¶ÂÖÉ‰ª∂‰∏≠„ÄÇ Â∞ΩÁÆ°Á°ÆÂÆûÂ≠òÂú®Â§ÑÁêÜÈùûÁõ∏Âπ≤ÂÖâÁöÑÊ∑∑ÂêàÂÖâÁîµÁΩëÁªú Ôºà35Ôºå 36Ôºå 40ÔºâÔºå‰ΩÜÂÆÉ‰ª¨‰∏≠ÁöÑÂ§ßÂ§öÊï∞Âπ∂Ê≤°Êúâ‰∫ßÁîüÊúâÂà©ÁöÑÁªìÊûúÔºåÂõ†‰∏∫ÂÆÉ‰ª¨ÁöÑÂÖâÂ≠¶ÂâçÁ´ØÊòØ‰∏∫Â∞èÊ†∏Á©∫Èó¥ÂùáÂåÄÁöÑÂç∑ÁßØÂ±ÇËÆæËÆ°ÁöÑÔºåËøôÈ°πÂ∑•‰ΩúÂèëÁé∞ËøôÂπ∂Ê≤°ÊúâÂÖÖÂàÜÂà©Áî®ÂèØÁî®‰∫éÂÖâÂ≠¶Âç∑ÁßØÁöÑËÆæËÆ°Á©∫Èó¥„ÄÇ In this work, we report a novel nanophotonic neural network that lifts the aforementioned limitations, allowing us to close the gap to the first modern DNN architectures (41) with optical compute in a flat form factor of only 4 mm length, akin to performing computation on the sensor cover glass, in lieu of the bulky compound 4-f system‚Äìbased Fourier filter setup (40). We leverage the ability of a lens system to perform large-kernel spatially varying (LKSV) convolutions tailored specifically for image recognition and semantic segmentation. These operations are performed during the capture before the sensor makes a measurement. We learn large kernels via low-dimensional reparameterization techniques, which circumvent spurious local extremum caused by direct optimization. To physically realize the ONN, we develop a differentiable spatially varying inverse design framework that solves for metasurfaces (42‚Äì46) that can produce the desired angle-dependent responses under spatially incoherent illumination. Because of the compact footprint and complementary metal-oxide semiconductor (CMOS) sensor compatibility, the resulting optical system is not only a photonic accelerator but also an ultracompact computational camera that directly operates on the ambient light from the environment before the analog to digital conversion. We find that this approach facilitates generalization and transfer learning to other tasks, such as semantic segmentation, reaching performance comparable to AlexNet (41) in 1000-category ImageNet (47) classification and PASCAL VOC (48) semantic segmentation. Âú®ËøôÈ°πÂ∑•‰Ωú‰∏≠ÔºåÊàë‰ª¨Êä•ÈÅì‰∫Ü‰∏ÄÁßçÊñ∞È¢ñÁöÑÁ∫≥Á±≥ÂÖâÂ≠êÁ•ûÁªèÁΩëÁªúÔºåÂÆÉÊ∂àÈô§‰∫Ü‰∏äËø∞ÈôêÂà∂Ôºå‰ΩøÊàë‰ª¨ËÉΩÂ§üÁº©Â∞è‰∏éÁ¨¨‰∏Ä‰∏™Áé∞‰ª£ DNN Êû∂ÊûÑ Ôºà41Ôºâ ÁöÑÂ∑ÆË∑ùÔºåÂÖâÂ≠¶ËÆ°ÁÆóÈááÁî®‰ªÖ 4 mm ÈïøÂ∫¶ÁöÑÊâÅÂπ≥Â§ñÂΩ¢Â∞∫ÂØ∏ÔºåÁ±ª‰ºº‰∫éÂú®‰º†ÊÑüÂô®ÁõñÁéªÁíÉ‰∏äÊâßË°åËÆ°ÁÆóÔºåËÄå‰∏çÊòØÁ¨®ÈáçÁöÑÂü∫‰∫éÂåñÂêàÁâ© 4-f Á≥ªÁªüÁöÑÂÇÖÈáåÂè∂Êª§Ê≥¢Âô®ËÆæÁΩÆ Ôºà40).Êàë‰ª¨Âà©Áî®ÈïúÂ§¥Á≥ªÁªüÁöÑËÉΩÂäõÊù•ÊâßË°å‰∏ì‰∏∫ÂõæÂÉèËØÜÂà´ÂíåËØ≠‰πâÂàÜÂâ≤ÈáèË∫´ÂÆöÂà∂ÁöÑÂ§ßÂÜÖÊ†∏Á©∫Èó¥ÂèòÂåñ ÔºàLKSVÔºâ Âç∑ÁßØ„ÄÇËøô‰∫õÊìç‰ΩúÊòØÂú®‰º†ÊÑüÂô®ËøõË°åÊµãÈáè‰πãÂâçÂú®ÊçïËé∑ÊúüÈó¥ÊâßË°åÁöÑ„ÄÇÊàë‰ª¨ÈÄöËøá‰ΩéÁª¥ÈáçÊñ∞ÂèÇÊï∞ÂåñÊäÄÊúØÂ≠¶‰π†Â§ßÂÜÖÊ†∏ÔºåËØ•ÊäÄÊúØËßÑÈÅø‰∫ÜÁõ¥Êé•‰ºòÂåñÂºïËµ∑ÁöÑ‰º™Â±ÄÈÉ®ÊûÅÂÄº„ÄÇ‰∏∫‰∫ÜÁâ©ÁêÜÂÆûÁé∞ ONNÔºåÊàë‰ª¨ÂºÄÂèë‰∫Ü‰∏Ä‰∏™ÂèØÂæÆÂàÜÁ©∫Èó¥ÂèòÂåñÈÄÜÂêëËÆæËÆ°Ê°ÜÊû∂ÔºåËØ•Ê°ÜÊû∂Ê±ÇËß£Ë∂ÖË°®Èù¢ Ôºà42-46ÔºâÔºåËØ•Ë∂ÖË°®Èù¢ÂèØ‰ª•Âú®Á©∫Èó¥ÈùûÁõ∏Âπ≤ÁÖßÊòé‰∏ã‰∫ßÁîüÊâÄÈúÄÁöÑËßíÂ∫¶Áõ∏ÂÖ≥ÂìçÂ∫î„ÄÇÁî±‰∫éÁ¥ßÂáëÁöÑÂ∞ÅË£ÖÂíå‰∫íË°•ÁöÑÈáëÂ±ûÊ∞ßÂåñÁâ©ÂçäÂØº‰Ωì ÔºàCMOSÔºâ ‰º†ÊÑüÂô®ÂÖºÂÆπÊÄßÔºåÊúÄÁªàÁöÑÂÖâÂ≠¶Á≥ªÁªü‰∏ç‰ªÖÊòØ‰∏Ä‰∏™ÂÖâÂ≠êÂä†ÈÄüÂô®ÔºåËÄå‰∏îËøòÊòØ‰∏Ä‰∏™Ë∂ÖÁ¥ßÂáëÁöÑËÆ°ÁÆóÁõ∏Êú∫ÔºåÂú®Ê®°Êï∞ËΩ¨Êç¢‰πãÂâçÁõ¥Êé•ÂØπÊù•Ëá™ÁéØÂ¢ÉÁöÑÁéØÂ¢ÉÂÖâËøõË°åÊìç‰Ωú„ÄÇÊàë‰ª¨ÂèëÁé∞ËøôÁßçÊñπÊ≥ïÊúâÂä©‰∫éÊ≥õÂåñÂíåÂ∞ÜÂ≠¶‰π†ËΩ¨ÁßªÂà∞ÂÖ∂‰ªñ‰ªªÂä°ÔºåÂ¶ÇËØ≠‰πâÂàÜÂâ≤ÔºåÂú®1000‰∏™Á±ªÂà´ÁöÑImageNetÔºà47ÔºâÂàÜÁ±ªÂíåPASCAL VOCÔºà48ÔºâËØ≠‰πâÂàÜÂâ≤‰∏≠ËææÂà∞‰∏éAlexNetÔºà41ÔºâÁõ∏ÂΩìÁöÑÊÄßËÉΩ„ÄÇ Recent work (49) concurrent to ours reported a novel metasurface doublet that implements a multichannel optical convolution via angular and polarization multiplexing under spatially incoherent illuminance, and extensions (50, 51) leverage large convolutional kernels for image classification and semantic segmentation. While this work shares advantages with ours, such as multichannel operation, high performance, and the use of incoherent light, our method uses a single metasurface and relies on LKSV convolution instead of uniform convolutions increasing the parameter space by an order of magnitude. ‰∏éÊàë‰ª¨ÂêåÊó∂ËøõË°åÁöÑÊúÄÊñ∞Â∑•‰Ωú Ôºà49Ôºâ Êä•ÈÅì‰∫Ü‰∏ÄÁßçÊñ∞ÁöÑË∂ÖË°®Èù¢ÂèåÂêà‰ΩìÔºåÂÆÉÂú®Á©∫Èó¥ÈùûÁõ∏Âπ≤ÁÖßÂ∫¶‰∏ãÈÄöËøáËßíÂ∫¶ÂíåÂÅèÊåØÂ§öË∑ØÂ§çÁî®ÂÆûÁé∞Â§öÈÄöÈÅìÂÖâÂ≠¶Âç∑ÁßØÔºåËÄåÊâ©Â±ï Ôºà50Ôºå 51Ôºâ Âà©Áî®Â§ßÂûãÂç∑ÁßØÊ†∏ËøõË°åÂõæÂÉèÂàÜÁ±ªÂíåËØ≠‰πâÂàÜÂâ≤„ÄÇËôΩÁÑ∂ËøôÈ°πÂ∑•‰Ωú‰∏éÊàë‰ª¨ÁöÑÂ∑•‰ΩúÂÖ∑ÊúâÂÖ±ÂêåÁöÑ‰ºòÂäøÔºå‰æãÂ¶ÇÂ§öÈÄöÈÅìÊìç‰Ωú„ÄÅÈ´òÊÄßËÉΩÂíåÈùûÁõ∏Âπ≤ÂÖâÁöÑ‰ΩøÁî®Ôºå‰ΩÜÊàë‰ª¨ÁöÑÊñπÊ≥ï‰ΩøÁî®Âçï‰∏™Ë∂ÖË°®Èù¢ÔºåÂπ∂‰æùËµñ‰∫é LKSV Âç∑ÁßØËÄå‰∏çÊòØÂùáÂåÄÂç∑ÁßØÔºåÂ∞ÜÂèÇÊï∞Á©∫Èó¥Â¢ûÂä†‰∫Ü‰∏Ä‰∏™Êï∞ÈáèÁ∫ß„ÄÇ Hence, by on-chip integration of the flat-optics front-end (>99% FLOPs) with an extremely lightweight electronic back-end (99% FLOPsÔºâ ‰∏éÊûÅËΩªÁöÑÁîµÂ≠êÂêéÁ´Ø Ôºà41Ôºâ ‰∏∫ 72.64% Ôºà52Ôºâ ÊµãËØïÈõÜ]ÔºåÂêåÊó∂Â∞ÜÁîµÂ≠êÂèÇÊï∞ÁöÑÊï∞ÈáèÂáèÂ∞ë‰∫ÜÂõõ‰∏™Êï∞ÈáèÁ∫ßÔºå‰ªéËÄåÂ∞Ü ONN Â∏¶ÂÖ•‰∫ÜÁé∞‰ª£Ê∑±Â∫¶Â≠¶‰π†Êó∂‰ª£„ÄÇ RESULTS ÁªìÊûú LKSV parameterization LKSV ÂèÇÊï∞Âåñ The working principle and optoelectronic implementation of the proposed spatially varying nanophotonic neural network (SVN3) are illustrated in Fig. 1A. The SVN3 is an optoelectronic neuromorphic computer that comprises a metalens array nanophotonic front-end and a lightweight electronic back-end (embedded in a low-cost microcontroller unit) for image classification or semantic segmentation. The metalens array front-end consists of 50 metalens elements that are made of 390-nm pitch nano-antennas and are optimized for incoherent light in a band around 525 nm. The wavefront modulation induced by each metalens can be represented by the optical convolution of the incident field and the point spread functions (PSFs) of the individual device. Therefore, the nanophotonic front-end performs parallel multichannel convolutions, at the speed of light, without any power consumption. We also refer to texts S1 and S3 for additional details on the physical forward model and the neural network design, respectively. ÊâÄÊèêÂá∫ÁöÑÁ©∫Èó¥ÂèòÂåñÁ∫≥Á±≥ÂÖâÂ≠êÁ•ûÁªèÁΩëÁªú ÔºàSVN3Ôºâ ÁöÑÂ∑•‰ΩúÂéüÁêÜÂíåÂÖâÁîµÂÆûÁé∞Â¶ÇÂõæ 1A ÊâÄÁ§∫„ÄÇSVN3 ÊòØ‰∏ÄÁßçÂÖâÁîµÁ•ûÁªèÂΩ¢ÊÄÅËÆ°ÁÆóÊú∫ÔºåÂåÖÊã¨‰∏Ä‰∏™Ë∂ÖÈÄèÈïúÈòµÂàóÁ∫≥Á±≥ÂÖâÂ≠êÂâçÁ´ØÂíå‰∏Ä‰∏™Áî®‰∫éÂõæÂÉèÂàÜÁ±ªÊàñËØ≠‰πâÂàÜÂâ≤ÁöÑËΩªÈáèÁ∫ßÁîµÂ≠êÂêéÁ´ØÔºàÂµåÂÖ•Âú®‰ΩéÊàêÊú¨ÂæÆÊéßÂà∂Âô®ÂçïÂÖÉ‰∏≠Ôºâ„ÄÇË∂ÖÈÄèÈïúÈòµÂàóÂâçÁ´ØÁî± 50 ‰∏™Ë∂ÖÈÄèÈïúÂÖÉ‰ª∂ÁªÑÊàêÔºåËøô‰∫õÂÖÉ‰ª∂Áî± 390 nm Èó¥Ë∑ùÁ∫≥Á±≥Â§©Á∫øÂà∂ÊàêÔºåÂπ∂ÈíàÂØπ 525 nm Â∑¶Âè≥Ê≥¢ÊÆµÁöÑÈùûÁõ∏Âπ≤ÂÖâËøõË°å‰∫Ü‰ºòÂåñ„ÄÇÊØè‰∏™Ë∂ÖÈÄèÈïúËØ±ÂØºÁöÑÊ≥¢ÂâçË∞ÉÂà∂ÂèØ‰ª•Áî®ÂÖ•Â∞ÑÂú∫ÁöÑÂÖâÂ≠¶Âç∑ÁßØÂíåÂçï‰∏™Âô®‰ª∂ÁöÑÁÇπÊâ©Êï£ÂáΩÊï∞ ÔºàPSFÔºâ Êù•Ë°®Á§∫„ÄÇÂõ†Ê≠§ÔºåÁ∫≥Á±≥ÂÖâÂ≠êÂâçÁ´Ø‰ª•ÂÖâÈÄüÊâßË°åÂπ∂Ë°åÂ§öÈÄöÈÅìÂç∑ÁßØÔºåÊó†ÈúÄ‰ªª‰ΩïÂäüËÄó„ÄÇÊàë‰ª¨ËøòÂèÇËÄÉ‰∫ÜÊñáÊú¨ S1 Âíå "},"Programming/Programming.html":{"url":"Programming/Programming.html","title":"Programming","keywords":"","body":""},"Programming/CRTP.html":{"url":"Programming/CRTP.html","title":"CRTP","keywords":"","body":"CRTP: Compile-Time-Reflection-Programming wiki // The Curiously Recurring Template Pattern (CRTP) template class Base { // methods within Base can use template to access members of Derived }; class Derived : public Base { // ... }; Why? Polymorphic chaining // Base class template class Printer { public: Printer(ostream& pstream) : m_stream(pstream) {} template ConcretePrinter& print(T&& t) { m_stream (*this); } template ConcretePrinter& println(T&& t) { m_stream (*this); } private: ostream& m_stream; }; // Derived class class CoutPrinter : public Printer { public: CoutPrinter() : Printer(cout) {} CoutPrinter& SetConsoleColor(Color c) { // ... return *this; } }; // usage CoutPrinter().print(\"Hello \").SetConsoleColor(Color.red).println(\"Printer!\"); Polymorphic copy construction Â§öÊÄÅÂ§çÂà∂ÊûÑÈÄ† When using polymorphism, one sometimes needs to create copies of objects by the base class pointer. A commonly used idiom for this is adding a virtual clone function that is defined in every derived class. The CRTP can be used to avoid having to duplicate that function or other similar functions in every derived class. ‰ΩøÁî®Â§öÊÄÅÊÄßÊó∂ÔºåÊúâÊó∂ÈúÄË¶ÅÈÄöËøáÂü∫Á±ªÊåáÈíàÂàõÂª∫ÂØπË±°ÁöÑÂâØÊú¨„ÄÇ‰∏∫Ê≠§ÔºåÂ∏∏Áî®ÁöÑ‰π†ÊÉØÁî®Ê≥ïÊòØÊ∑ªÂä†Âú®ÊØè‰∏™Ê¥æÁîüÁ±ª‰∏≠ÂÆö‰πâÁöÑËôöÊãüÂÖãÈöÜÂáΩÊï∞„ÄÇ CRTP ÂèØÁî®‰∫éÈÅøÂÖçÂú®ÊØè‰∏™Ê¥æÁîüÁ±ª‰∏≠ÈáçÂ§çËØ•ÂáΩÊï∞ÊàñÂÖ∂‰ªñÁ±ª‰ººÂáΩÊï∞„ÄÇ // Base class has a pure virtual function for cloning class AbstractShape { public: virtual ~AbstractShape() = default; virtual std::unique_ptr clone() const = 0; }; // This CRTP class implements clone() for Derived template class Shape : public AbstractShape { public: std::unique_ptr clone() const override { return std::make_unique(static_cast(*this)); } protected: // We make clear Shape class needs to be inherited Shape() = default; Shape(const Shape&) = default; Shape(Shape&&) = default; }; // Every derived class inherits from CRTP class instead of abstract class class Square : public Shape {}; class Circle : public Shape {}; This allows obtaining copies of squares, circles or any other shapes by shapePtr->clone(). ËøôÂÖÅËÆ∏ÈÄöËøáshapePtr->clone()Ëé∑ÂèñÊ≠£ÊñπÂΩ¢„ÄÅÂúÜÂΩ¢Êàñ‰ªª‰ΩïÂÖ∂‰ªñÂΩ¢Áä∂ÁöÑÂâØÊú¨„ÄÇ "},"PythonLibs/PythonLibs.html":{"url":"PythonLibs/PythonLibs.html","title":"PythonLibs","keywords":"","body":"Python Libs Misc pypi tuna source: https://pypi.tuna.tsinghua.edu.cn/simple tuna help anaconda: tuna help Misc Pip # all install pkgs pip freeze > requirements.txt # only pkgs used in project pip install pipreqs pipreqs path/to/your/project pip install -r requirements.txt Conda OS-agnostic, system-level binary package and environment manager. ‰∏éÊìç‰ΩúÁ≥ªÁªüÊó†ÂÖ≥ÁöÑÁ≥ªÁªüÁ∫ß‰∫åËøõÂà∂ÂåÖÂíåÁéØÂ¢ÉÁÆ°ÁêÜÂô®„ÄÇ github: conda docs Conda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them. It works on Linux, OS X and Windows, and was created for Python programs but can package and distribute any software. Conda ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÂåÖÁÆ°ÁêÜÁ≥ªÁªüÂíåÁéØÂ¢ÉÁÆ°ÁêÜÁ≥ªÁªüÔºåÁî®‰∫éÂÆâË£ÖÂ§ö‰∏™ÁâàÊú¨ÁöÑËΩØ‰ª∂ÂåÖÂèäÂÖ∂‰æùËµñÈ°πÔºåÂπ∂Âú®ÂÆÉ‰ª¨‰πãÈó¥ËΩªÊùæÂàáÊç¢„ÄÇÂÆÉÈÄÇÁî®‰∫é Linux„ÄÅOS X Âíå WindowsÔºåÊòØ‰∏∫ Python Á®ãÂ∫èÂàõÂª∫ÁöÑÔºå‰ΩÜÂèØ‰ª•ÊâìÂåÖÂíåÂàÜÂèë‰ªª‰ΩïËΩØ‰ª∂„ÄÇ # list/update/install/remove/search conda list conda list numpy conda update --all conda install numpy # create env conda create -n env_name list_of_packages # list envs conda env list # activate/deactivate conda activate/deactivate env_name # check config info conda config --show # change source conda config --set custom_channels.auto https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ # export conda env export > environment.yml # close auto activate conda config --set auto_activate_base false # add to tuna source conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes # recover default source conda config --remove-key channels conda ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè doc cd $CONDA_PREFIX mkdir -p ./etc/conda/activate.d mkdir -p ./etc/conda/deactivate.d touch ./etc/conda/activate.d/env_vars.sh touch ./etc/conda/deactivate.d/env_vars.sh Miniconda Miniconda ÊòØ Anaconda Distribution ÁöÑÂÖçË¥πÂæÆÂûãÂÆâË£ÖÔºåÂÖ∂‰∏≠‰ªÖÂåÖÊã¨ conda„ÄÅPython„ÄÅÂÆÉ‰ª¨ÈÉΩ‰æùËµñÁöÑÂåÖ‰ª•ÂèäÂ∞ëÈáèÂÖ∂‰ªñÊúâÁî®ÁöÑÂåÖ„ÄÇ Â¶ÇÊûúÊÇ®ÈúÄË¶ÅÊõ¥Â§öËΩØ‰ª∂ÂåÖÔºåËØ∑‰ΩøÁî®ÂëΩ‰ª§ conda install ‰ªé Anaconda ÁöÑÂÖ¨ÂÖ±Â≠òÂÇ®Â∫ì‰∏≠ÈªòËÆ§ÂèØÁî®ÁöÑÊï∞ÂçÉ‰∏™ËΩØ‰ª∂ÂåÖ‰∏≠ÂÆâË£ÖÔºåÊàñËÄÖ‰ªé conda-forge Êàñ bioconda Á≠âÂÖ∂‰ªñ channels ËøõË°åÂÆâË£Ö„ÄÇ ipython # in vscode, ipython extension need ipykernel (manual install): conda install -n {your_env_name} ipykernel --update-deps --force-reinstall Module Dependency Check pipdeptree pydeps: Python Module Dependency graphs pydeps xxx.py # show all packages installed pip list conda list # show package details pip show numpy conda list numpy # upgrade package pip install --upgrade pyarrow # rebuild dependencies pip uninstall pyarrow pip install pyarrow --no-binary pyarrow # Force recompile # use pipdeptree to visualize the dep tree pip install pipdeptree pipdeptree # show all dependencies pipdeptree --packages pyarrow # only show pyarrow pipdeptree --reverse --packages pyarrow # show who dep on pyarrow Pylint: Static Code Analyser Additional tools in pylint pyreverse(standalone tool that generates package and class diagrams.) symilar(duplicate code finder that is also integrated in pylint) pyreverse pyreverse [options] # eg. # generate classes.dot and packages.dot of marko lib pyreverse marko 01_Misc$ dot -Tsvg classes.dot > classes.svg 01_Misc$ dot -Tsvg packages.dot > packages.svg "},"PythonLibs/ArgParse.html":{"url":"PythonLibs/ArgParse.html","title":"ArgParse","keywords":"","body":"ArgParse in Python unexpected parser.add_argument(\"--train\", type=bool) Âú®‰ΩøÁî® argparse Êó∂Ôºåparser.add_argument(\"--train\", type=bool) ÁöÑÁî®Ê≥ïÂèØËÉΩ‰ºöÂØºËá¥‰∏Ä‰∫õÊÑèÂ§ñË°å‰∏∫ÔºåÂõ†‰∏∫ type=bool Âπ∂‰∏ç‰ºöÂ∞ÜËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤Ëá™Âä®ËΩ¨Êç¢‰∏∫Â∏ÉÂ∞îÂÄº„ÄÇÁõ∏ÂèçÔºåÂÆÉ‰ºöÂ∞ùËØïÂ∞ÜËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤‰Ωú‰∏∫ Python ÁöÑ bool() ÂáΩÊï∞ÁöÑÂèÇÊï∞ÔºåËøôÈÄöÂ∏∏‰ºöÂØºËá¥ËæìÂÖ•ÁöÑÂÄºË¢´Ëß£Èáä‰∏∫ True Êàñ FalseÔºå‰ΩÜÁªìÊûúÂèØËÉΩ‰∏çÁ¨¶ÂêàÈ¢ÑÊúü„ÄÇ ÈóÆÈ¢òÂàÜÊûê bool(\"True\") ËøîÂõû TrueÔºå‰ΩÜ bool(\"False\") ‰πüËøîÂõû TrueÔºåÂõ†‰∏∫ÈùûÁ©∫Â≠óÁ¨¶‰∏≤Âú® Python ‰∏≠Ë¢´ËßÜ‰∏∫ True„ÄÇ Âõ†Ê≠§ÔºåÁõ¥Êé•‰ΩøÁî® type=bool Êó†Ê≥ïÊ≠£Á°ÆËß£ÊûêÂ∏ÉÂ∞îÂÄºÂèÇÊï∞„ÄÇ Ê≠£Á°ÆÁöÑÁî®Ê≥ï ‰∏∫‰∫ÜÊ≠£Á°ÆËß£ÊûêÂ∏ÉÂ∞îÂÄºÂèÇÊï∞ÔºåÂèØ‰ª•‰ΩøÁî® action='store_true' Êàñ action='store_false'ÔºåÊàñËÄÖËá™ÂÆö‰πâÁ±ªÂûãËΩ¨Êç¢ÂáΩÊï∞„ÄÇ ÊñπÊ≥ï 1Ôºö‰ΩøÁî® action='store_true' Êàñ action='store_false' ËøôÊòØÊúÄÂ∏∏Áî®ÁöÑÊñπÊ≥ïÔºåÈÄÇÁî®‰∫éÂ∏ÉÂ∞îÂÄºÂèÇÊï∞ÁöÑÈªòËÆ§Ë°å‰∏∫„ÄÇ import argparse parser = argparse.ArgumentParser() parser.add_argument(\"--train\", action='store_true', help=\"ÊòØÂê¶ÂêØÁî®ËÆ≠ÁªÉÊ®°Âºè\") args = parser.parse_args() print(f\"ËÆ≠ÁªÉÊ®°Âºè: {args.train}\") ‰ΩøÁî®Á§∫‰æã python script.py --train ËæìÂá∫Ôºö ËÆ≠ÁªÉÊ®°Âºè: True Â¶ÇÊûú‰∏ç‰º†ÈÄí --train ÂèÇÊï∞Ôºö python script.py ËæìÂá∫Ôºö ËÆ≠ÁªÉÊ®°Âºè: False ÊñπÊ≥ï 2ÔºöËá™ÂÆö‰πâÁ±ªÂûãËΩ¨Êç¢ÂáΩÊï∞ Â¶ÇÊûú‰Ω†Â∏åÊúõÁî®Êà∑ÊòéÁ°Æ‰º†ÈÄí True Êàñ FalseÔºåÂèØ‰ª•‰ΩøÁî®Ëá™ÂÆö‰πâÁ±ªÂûãËΩ¨Êç¢ÂáΩÊï∞„ÄÇ import argparse def str_to_bool(value): if value.lower() in ['true', '1', 't', 'y', 'yes']: return True elif value.lower() in ['false', '0', 'f', 'n', 'no']: return False else: raise argparse.ArgumentTypeError(\"Â∏ÉÂ∞îÂÄºÂøÖÈ°ªÊòØ 'True' Êàñ 'False'\") parser = argparse.ArgumentParser() parser.add_argument(\"--train\", type=str_to_bool, help=\"ÊòØÂê¶ÂêØÁî®ËÆ≠ÁªÉÊ®°Âºè\") args = parser.parse_args() print(f\"ËÆ≠ÁªÉÊ®°Âºè: {args.train}\") ‰ΩøÁî®Á§∫‰æã python script.py --train True ËæìÂá∫Ôºö ËÆ≠ÁªÉÊ®°Âºè: True python script.py --train False ËæìÂá∫Ôºö ËÆ≠ÁªÉÊ®°Âºè: False Â¶ÇÊûú‰º†ÈÄí‰∫ÜÊó†ÊïàÁöÑÂÄºÔºö python script.py --train maybe ËæìÂá∫Ôºö usage: script.py [-h] [--train TRAIN] script.py: error: argument --train: Â∏ÉÂ∞îÂÄºÂøÖÈ°ªÊòØ 'True' Êàñ 'False' ÊÄªÁªì Â¶ÇÊûúÂ∏åÊúõÂèÇÊï∞ÈªòËÆ§ÊòØÂ∏ÉÂ∞îÂÄºÔºåÊé®Ëçê‰ΩøÁî® action='store_true' Êàñ action='store_false'„ÄÇ Â¶ÇÊûúÈúÄË¶ÅÁî®Êà∑ÊòéÁ°Æ‰º†ÈÄí True Êàñ FalseÔºåÂèØ‰ª•‰ΩøÁî®Ëá™ÂÆö‰πâÁ±ªÂûãËΩ¨Êç¢ÂáΩÊï∞„ÄÇ Áõ¥Êé•‰ΩøÁî® type=bool ÂèØËÉΩ‰ºöÂØºËá¥ÊÑèÂ§ñË°å‰∏∫Ôºå‰∏çÊé®Ëçê‰ΩøÁî®„ÄÇ "},"PythonLibs/AsyncSSH.html":{"url":"PythonLibs/AsyncSSH.html","title":"AsyncSSH","keywords":"","body":"AsyncSSH doc "},"PythonLibs/Dask.html":{"url":"PythonLibs/Dask.html","title":"Dask","keywords":"","body":"Dask Easy Parallel Python that does what you need "},"PythonLibs/Dlib/DlibPythonBindings.html":{"url":"PythonLibs/Dlib/DlibPythonBindings.html","title":"DlibPythonBindings","keywords":"","body":"Dlib Dlib C++ Library Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems. It is used in both industry and academia in a wide range of domains including robotics, embedded devices, mobile phones, and large high performance computing environments. Dlib's open source licensing allows you to use it in any application, free of charge. Dlib ÊòØ‰∏Ä‰∏™Áé∞‰ª£ C++ Â∑•ÂÖ∑ÂåÖÔºåÂåÖÂê´Êú∫Âô®Â≠¶‰π†ÁÆóÊ≥ïÂíåÂ∑•ÂÖ∑ÔºåÁî®‰∫éÁî® C++ ÂàõÂª∫Â§çÊùÇÁöÑËΩØ‰ª∂Êù•Ëß£ÂÜ≥Áé∞ÂÆû‰∏ñÁïåÁöÑÈóÆÈ¢ò„ÄÇÂÆÉÂú®Â∑•‰∏öÁïåÂíåÂ≠¶ÊúØÁïåÂπøÊ≥õ‰ΩøÁî®ÔºåÂåÖÊã¨Êú∫Âô®‰∫∫„ÄÅÂµåÂÖ•ÂºèËÆæÂ§á„ÄÅÁßªÂä®ÁîµËØùÂíåÂ§ßÂûãÈ´òÊÄßËÉΩËÆ°ÁÆóÁéØÂ¢É„ÄÇ DlibÁöÑÂºÄÊ∫êËÆ∏ÂèØ ÂÖÅËÆ∏ÊÇ®Âú®‰ªª‰ΩïÂ∫îÁî®Á®ãÂ∫è‰∏≠ÂÖçË¥π‰ΩøÁî®ÂÆÉ„ÄÇ pkg-config --cflags --libs dlib-1 -I/usr/local/include -L/usr/local/lib -ldlib /usr/lib/x86_64-linux-gnu/libsqlite3.so local build and install: apt install: get_frontal_face_detector() This function returns an object_detector that is configured to find human faces that are looking more or less towards the camera. It is created using the scan_fhog_pyramid object. python bindings class dlib.image_window This is a GUI window capable of showing images on the screen. add_overlay(rectangles, color=rgb_pixel(255,0,0)) -> None add_overlay(rectangle, color=rgb_pixel(255,0,0)) -> None add_overlay(full_object_detection, color=rgb_pixel(255,0,0)) -> None clear_overlay() get_next_double_click(self: dlib.image_window) -> object get_next_keypress() is_closed() -> bool set_image(img: numpy.ndarray[(rows, cols), int]) -> None set_title(title: str) -> None wait_until_closed() -> None wait_for_keypress(key: str) -> int Blocks until the user presses the given key or closes the window. class dlib.face_recognition_model_v1 This object maps human faces into 128D vectors where pictures of the same person are mapped near to each other and pictures of different people are mapped far apart. The constructor loads the face recognition model from a file. defcompute_face_descriptor( img: numpy.ndarray[(rows, cols, 3), uint8], face: full_object_detection, num_jitters: int=0, padding: float=0.25), -> dlib.vector Takes an image and a full_object_detection that references a face in that image and converts it into a 128D face descriptor. If num_jitters>1 then each face will be randomly jittered slightly num_jitters times, each run through the 128D projection, and the average used as the face descriptor. Optionally allows to override default padding of 0.25 around the face. dlib.vector This object is an array of vector objects. shape_predictor_68_face_landmarks facial-point-annotations shape_predictor One Millisecond Face Alignment with an Ensemble of Regression Trees, CVPR 2014 ËøôÁØáËÆ∫ÊñáËß£ÂÜ≥‰∫ÜÂçïÂº†ÂõæÂÉèÁöÑ‰∫∫ËÑ∏ÂØπÈΩêÈóÆÈ¢ò„ÄÇÊàë‰ª¨Â±ïÁ§∫‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî®ÂõûÂΩíÊ†ëÈõÜÊàêÁõ¥Êé•‰ªéÂÉèÁ¥†Âº∫Â∫¶ÁöÑÁ®ÄÁñèÂ≠êÈõÜ‰º∞ËÆ°‰∫∫ËÑ∏ÁöÑÂÖ≥ÈîÆÁÇπ‰ΩçÁΩÆÔºå‰ªéËÄåÂÆûÁé∞Ë∂ÖÂÆûÊó∂ÁöÑÈ´òË¥®ÈáèÈ¢ÑÊµã„ÄÇÊàë‰ª¨ÊèêÂá∫‰∫Ü‰∏ÄÁßçÂü∫‰∫éÊ¢ØÂ∫¶ÊèêÂçáÁöÑÈÄöÁî®Ê°ÜÊû∂ÔºåÁî®‰∫éÂ≠¶‰π†ÂõûÂΩíÊ†ëÈõÜÊàêÔºå‰ºòÂåñÂπ≥ÊñπËØØÂ∑ÆÊçüÂ§±ÂíåËá™ÁÑ∂Â§ÑÁêÜÁº∫Â§±ÊàñÈÉ®ÂàÜÊ†áÊ≥®ÁöÑÊï∞ÊçÆ„ÄÇÊàë‰ª¨Â±ïÁ§∫‰∫ÜÂ¶Ç‰ΩïÂà©Áî®ÈÄÇÂΩìÁöÑÂÖàÈ™å‰ø°ÊÅØÔºåÂà©Áî®ÂõæÂÉèÊï∞ÊçÆÁöÑÁªìÊûÑÊù•Â∏ÆÂä©È´òÊïàÁöÑÁâπÂæÅÈÄâÊã©„ÄÇÊàë‰ª¨ËøòÁ†îÁ©∂‰∫Ü‰∏çÂêåÁöÑÊ≠£ÂàôÂåñÁ≠ñÁï•ÂèäÂÖ∂Âú®Èò≤Ê≠¢ËøáÊãüÂêà‰∏≠ÁöÑÈáçË¶ÅÊÄß„ÄÇÊ≠§Â§ñÔºåÊàë‰ª¨ÂàÜÊûê‰∫ÜËÆ≠ÁªÉÊï∞ÊçÆÈáèÂØπÈ¢ÑÊµãÁ≤æÂ∫¶ÁöÑÂΩ±ÂìçÔºåÂπ∂Êé¢ËÆ®‰∫Ü‰ΩøÁî®ÂêàÊàêÊï∞ÊçÆËøõË°åÊï∞ÊçÆÂ¢ûÂº∫ÁöÑÊïàÊûú„ÄÇ "},"PythonLibs/LearnPyQt5/PyQt5.html":{"url":"PythonLibs/LearnPyQt5/PyQt5.html","title":"PyQt5","keywords":"","body":"PyQt5 doc QtCore ‚àí ÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®ÁöÑÊ†∏ÂøÉÈùû GUI Á±ª QtGui ‚àí ÂõæÂΩ¢Áî®Êà∑ÁïåÈù¢ÁªÑ‰ª∂ QtMultimedia ‚àí ‰ΩéÁ∫ßÂ§öÂ™í‰ΩìÁºñÁ®ãÁ±ª QtNetwork ‚àí ÁΩëÁªúÁºñÁ®ãÁ±ª QtOpenGL ‚àí OpenGL ÊîØÊåÅÁ±ª QtScript ‚àí ËØÑ‰º∞ Qt ËÑöÊú¨ÁöÑÁ±ª QtSql ‚àí ‰ΩøÁî® SQL ËøõË°åÊï∞ÊçÆÂ∫ìÈõÜÊàêÁöÑÁ±ª QtSvg ‚àí ÊòæÁ§∫ SVG Êñá‰ª∂ÂÜÖÂÆπÁöÑÁ±ª QtWebKit ‚àí Ê∏≤ÊüìÂíåÁºñËæë HTML ÁöÑÁ±ª QtXml ‚àí Â§ÑÁêÜ XML ÁöÑÁ±ª QtWidgets ‚àí ÂàõÂª∫ÁªèÂÖ∏Ê°åÈù¢È£éÊ†º UI ÁöÑÁ±ª QtDesigner ‚àí Êâ©Â±ï Qt Designer ÁöÑÁ±ª QWidgetÊ¥æÁîüËá™ QObject Âíå QPaintDevice Á±ªÁöÑÁ±ªÊòØÊâÄÊúâÁî®Êà∑ÁïåÈù¢ÂØπË±°ÁöÑÂü∫Á±ª„ÄÇQDialogÂíåQFrameÁ±ª‰πüÊ¥æÁîüËá™ QWidget Á±ª„ÄÇ‰ªñ‰ª¨ÊúâËá™Â∑±ÁöÑÂ≠êÁ±ªÁ≥ªÁªü„ÄÇ ËøôÊòØÂ∏∏Áî®Â∞èÈÉ®‰ª∂ÁöÑÈÄâÊã©ÂàóË°® Â∫èÂè∑ Â∞èÈÉ®‰ª∂ÂíåËØ¥Êòé 1 QLabelÁî®‰∫éÊòæÁ§∫ÊñáÊú¨ÊàñÂõæÂÉè 2 QLineEditÂÖÅËÆ∏Áî®Êà∑ËæìÂÖ•‰∏ÄË°åÊñáÊú¨ 3 QTextEditÂÖÅËÆ∏Áî®Êà∑ËæìÂÖ•Â§öË°åÊñáÊú¨ 4 QPushButtonË∞ÉÁî®Êìç‰ΩúÁöÑÂëΩ‰ª§ÊåâÈíÆ 5 QRadioButtonÂÖÅËÆ∏‰ªéÂ§ö‰∏™ÈÄâÈ°π‰∏≠ÈÄâÊã©‰∏Ä‰∏™ 6 QCheckBoxÂÖÅËÆ∏ÈÄâÊã©Â§ö‰∏™ÈÄâÈ°π 7 QSpinBoxÂÖÅËÆ∏Â¢ûÂä†/ÂáèÂ∞ëÊï¥Êï∞ÂÄº 8 QScrollBarÂÖÅËÆ∏ËÆøÈóÆË∂ÖÂá∫ÊòæÁ§∫Â≠îÂæÑÁöÑÂ∞èÈÉ®‰ª∂ÂÜÖÂÆπ 9 QSliderÂÖÅËÆ∏Á∫øÊÄßÊîπÂèòËæπÁïåÂÄº„ÄÇ 10 QComboBoxÊèê‰æõÂèØ‰æõÈÄâÊã©ÁöÑÈ°πÁõÆÁöÑ‰∏ãÊãâÂàóË°® 11 QMenuBarÂåÖÂê´ QMenu ÂØπË±°ÁöÑÂçïÊù† 12 QStatusBarÈÄöÂ∏∏Âú® QMainWindow ÁöÑÂ∫ïÈÉ®ÔºåÊèê‰æõÁä∂ÊÄÅ‰ø°ÊÅØ„ÄÇ 13 QToolBarÈÄöÂ∏∏Âú® QMainWindow È°∂ÈÉ®ÊàñÊµÆÂä®„ÄÇÂåÖÂê´Êìç‰ΩúÊåâÈíÆ 14 QListViewÂú® ListMode Êàñ IconMode ‰∏≠Êèê‰æõÂèØÈÄâÊã©ÁöÑÈ°πÁõÆÂàóË°® 15 QPixmapÊòæÁ§∫Âú® QLabel Êàñ QPushButton ÂØπË±°‰∏äÁöÑÂ±èÂπïÂ§ñÂõæÂÉèË°®Á§∫ 16 QDialogÂèØ‰ª•ÂêëÁà∂Á™óÂè£ËøîÂõû‰ø°ÊÅØÁöÑÊ®°ÊÄÅÊàñÈùûÊ®°ÊÄÅÁ™óÂè£ ‰∏Ä‰∏™ÂÖ∏ÂûãÁöÑÂü∫‰∫é GUI ÁöÑÂ∫îÁî®Á®ãÂ∫èÁöÑÈ°∂Â±ÇÁ™óÂè£ÊòØÁî±QMainWindowÂ∞èÈÉ®‰ª∂ÂØπË±°„ÄÇ‰∏äÈù¢ÂàóÂá∫ÁöÑ‰∏Ä‰∫õÂ∞èÈÉ®‰ª∂Âú®Ê≠§‰∏ªÁ™óÂè£‰∏≠Âç†ÊçÆÊåáÂÆö‰ΩçÁΩÆÔºåËÄåÂÖ∂‰ªñÂ∞èÈÉ®‰ª∂Âàô‰ΩøÁî®ÂêÑÁßçÂ∏ÉÂ±ÄÁÆ°ÁêÜÂô®ÊîæÁΩÆÂú®‰∏≠Â§ÆÂ∞èÈÉ®‰ª∂Âå∫Âüü„ÄÇ QDialog Â∞èÈÉ®‰ª∂ÂëàÁé∞‰∏Ä‰∏™È°∂Á∫ßÁ™óÂè£Ôºå‰∏ªË¶ÅÁî®‰∫éÊî∂ÈõÜÁî®Êà∑ÁöÑÂìçÂ∫î„ÄÇ ÂÆÉÂèØ‰ª•ÈÖçÁΩÆ‰∏∫ ModalÔºàÂÆÉ‰ºöÈòªÊ≠¢ÂÖ∂Áà∂Á™óÂè£ÔºâÊàñ ModelessÔºàÂèØ‰ª•ÁªïËøáÂØπËØùÁ™óÂè£Ôºâ„ÄÇ PyQt API ÊúâËÆ∏Â§öÈ¢ÑÈÖçÁΩÆÁöÑ Dialog Â∞èÈÉ®‰ª∂Ôºå‰æãÂ¶Ç InputDialog„ÄÅFileDialog„ÄÅFontDialog Á≠â„ÄÇ QMessageBox ÊòØ‰∏ÄÁßçÂ∏∏Áî®ÁöÑÊ®°ÂºèÂØπËØùÊ°ÜÔºåÁî®‰∫éÊòæÁ§∫‰∏Ä‰∫õ‰ø°ÊÅØÊÄßÊ∂àÊÅØÔºåÂπ∂ÂèØÈÄâÊã©Ë¶ÅÊ±ÇÁî®Êà∑ÈÄöËøáÂçïÂáªÂÖ∂‰∏äÁöÑ‰ªª‰Ωï‰∏Ä‰∏™Ê†áÂáÜÊåâÈíÆÊù•ÂÅöÂá∫ÂìçÂ∫î„ÄÇ ÊØè‰∏™Ê†áÂáÜÊåâÈíÆÈÉΩÊúâ‰∏Ä‰∏™È¢ÑÂÆö‰πâÁöÑÊ†áÈ¢ò„ÄÅ‰∏Ä‰∏™ËßíËâ≤Âπ∂ËøîÂõû‰∏Ä‰∏™È¢ÑÂÆö‰πâÁöÑÂçÅÂÖ≠ËøõÂà∂Êï∞Â≠ó„ÄÇ Â§öÊñáÊ°£ÁïåÈù¢ ‰∏Ä‰∏™ÂÖ∏ÂûãÁöÑ GUI Â∫îÁî®Á®ãÂ∫èÂèØËÉΩÊúâÂ§ö‰∏™Á™óÂè£„ÄÇ ÈÄâÈ°πÂç°ÂºèÂíåÂ†ÜÂè†ÂºèÂ∞èÈÉ®‰ª∂ÂÖÅËÆ∏‰∏ÄÊ¨°ÊøÄÊ¥ª‰∏Ä‰∏™ËøôÊ†∑ÁöÑÁ™óÂè£„ÄÇ ÁÑ∂ËÄåÔºåÂæàÂ§öÊó∂ÂÄôËøôÁßçÊñπÊ≥ïÂèØËÉΩÊ≤°ÊúâÁî®ÔºåÂõ†‰∏∫ÂÖ∂‰ªñÁ™óÂè£ÁöÑËßÜÂõæË¢´ÈöêËóè‰∫Ü„ÄÇ ÂêåÊó∂ÊòæÁ§∫Â§ö‰∏™Á™óÂè£ÁöÑ‰∏ÄÁßçÊñπÊ≥ïÊòØÂ∞ÜÂÆÉ‰ª¨ÂàõÂª∫‰∏∫Áã¨Á´ãÁöÑÁ™óÂè£„ÄÇ ËøôÁß∞‰∏∫ SDI ÔºàÂçïÊñáÊ°£Êé•Âè£Ôºâ„ÄÇ ËøôÈúÄË¶ÅÊõ¥Â§öÁöÑÂÜÖÂ≠òËµÑÊ∫êÔºåÂõ†‰∏∫ÊØè‰∏™Á™óÂè£ÂèØËÉΩÊúâËá™Â∑±ÁöÑËèúÂçïÁ≥ªÁªü„ÄÅÂ∑•ÂÖ∑Ê†èÁ≠â„ÄÇ MDI ÔºàÂ§öÊñáÊ°£Êé•Âè£Ôºâ Â∫îÁî®Á®ãÂ∫èÊ∂àËÄóËæÉÂ∞ëÁöÑÂÜÖÂ≠òËµÑÊ∫ê„ÄÇ Â≠êÁ™óÂè£Áõ∏ÂØπ‰∫éÂΩºÊ≠§ÊîæÁΩÆÂú®‰∏ªÂÆπÂô®ÂÜÖ„ÄÇ ÂÆπÂô®Â∞èÈÉ®‰ª∂Áß∞‰∏∫ QMdiArea„ÄÇ QMdiArea Â∞èÈÉ®‰ª∂‰∏ÄËà¨Âç†ÊçÆ QMainWondow ÂØπË±°ÁöÑ‰∏≠ÂøÉÂ∞èÈÉ®‰ª∂„ÄÇ ËØ•Âå∫Âüü‰∏≠ÁöÑÂ≠êÁ™óÂè£ÊòØ QMdiSubWindow Á±ªÁöÑÂÆû‰æã„ÄÇ ÂèØ‰ª•Â∞Ü‰ªª‰Ωï QWidget ËÆæÁΩÆ‰∏∫ subWindow ÂØπË±°ÁöÑÂÜÖÈÉ®Â∞èÈÉ®‰ª∂„ÄÇ MDI Âå∫ÂüüÁöÑÂ≠êÁ™óÂè£ÂèØ‰ª•Â±ÇÂè†ÊàñÂπ≥Èì∫ÊéíÂàó„ÄÇ PyQt5 - ÊãñÊîæ ÊãñÊîæÁöÑÊèê‰æõÂØπÁî®Êà∑Êù•ËØ¥ÈùûÂ∏∏Áõ¥ËßÇ„ÄÇ ÂÆÉÂ≠òÂú®‰∫éËÆ∏Â§ö Ê°åÈù¢Â∫îÁî®Á®ãÂ∫è‰∏≠ÔºåÁî®Êà∑ÂèØ‰ª•Âú®ÂÖ∂‰∏≠Â∞ÜÂØπË±°‰ªé‰∏Ä‰∏™Á™óÂè£Â§çÂà∂ÊàñÁßªÂä®Âà∞Âè¶‰∏Ä‰∏™Á™óÂè£„ÄÇ Âü∫‰∫é MIME ÁöÑÊãñÊîæÊï∞ÊçÆ‰º†ËæìÂü∫‰∫é QDrag Á±ª„ÄÇ QMimeData ÂØπË±°Â∞ÜÊï∞ÊçÆ‰∏éÂÖ∂ÂØπÂ∫îÁöÑ MIME Á±ªÂûãÁõ∏ÂÖ≥ËÅî„ÄÇ ÂÆÉÂ≠òÂÇ®Âú®Ââ™Ë¥¥Êùø‰∏äÔºåÁÑ∂ÂêéÂú®ÊãñÊîæËøáÁ®ã‰∏≠‰ΩøÁî®„ÄÇ ‰∏ãÈù¢ÁöÑ QMimeData Á±ªÂáΩÊï∞ÂèØ‰ª•Êñπ‰æøÂú∞Ê£ÄÊµãÂíå‰ΩøÁî® MIME Á±ªÂûã„ÄÇ Êï∞ÊçÆÂ∫ìÂ§ÑÁêÜ PyQt5 Â∫ìÂåÖÂê´ QtSql Ê®°Âùó„ÄÇ ÂÆÉÊòØ‰∏Ä‰∏™Â§çÊùÇÁöÑÁ±ªÁ≥ªÁªüÔºåÂèØ‰ª•‰∏éËÆ∏Â§öÂü∫‰∫é SQL ÁöÑÊï∞ÊçÆÂ∫ìËøõË°åÈÄö‰ø°„ÄÇ ÂÆÉÁöÑ QSqlDatabase ÈÄöËøá Connection ÂØπË±°Êèê‰æõËÆøÈóÆ„ÄÇ ‰ª•‰∏ãÊòØÂΩìÂâçÂèØÁî®ÁöÑ SQL È©±Âä®Á®ãÂ∫èÂàóË°® QGraphicsScene Create a QGraphicsScene : This serves as the container for the graphical elements. ÂàõÂª∫ QGraphicsSceneÔºöÁî®‰ΩúÂõæÂΩ¢ÂÖÉÁ¥†ÁöÑÂÆπÂô®„ÄÇ Load the Image with QPixmap : Use QPixmap to load the image. Load the Image with QPixmapÔºöÁî®‰∫é QPixmap Âä†ËΩΩÂõæÂÉè„ÄÇ Add the Image to the Scene : Create a QGraphicsPixmapItem from the QPixmap and add it to the scene. Â∞ÜÂõæÂÉèÊ∑ªÂä†Âà∞Âú∫ÊôØÔºö QGraphicsPixmapItem ‰ªé ÂàõÂª∫‰∏Ä‰∏™ QPixmap Âπ∂Â∞ÜÂÖ∂Ê∑ªÂä†Âà∞Âú∫ÊôØ‰∏≠„ÄÇ Display the Scene in a QGraphicsView : Use QGraphicsView to display the contents of the scene. Âú® QGraphicsView ‰∏≠ÊòæÁ§∫Âú∫ÊôØÔºöÁî®‰∫é QGraphicsView ÊòæÁ§∫Âú∫ÊôØÁöÑÂÜÖÂÆπ„ÄÇ A QRadioButton class object presents a selectable button with a text label. It is commonly used when the user need to choose one option from a list of options. This widget is represented by a small circular button that can be toggled on (checked) or off (unchecked). This class is derived from QAbstractButton class. QRadioButton Á±ªÂØπË±°Ë°®Á§∫Â∏¶ÊúâÊñáÊú¨Ê†áÁ≠æÁöÑÂèØÈÄâÊåâÈíÆ„ÄÇÂΩìÁî®Êà∑ÈúÄË¶Å‰ªéÈÄâÈ°πÂàóË°®‰∏≠ÈÄâÊã©‰∏Ä‰∏™ÈÄâÈ°πÊó∂ÔºåÈÄöÂ∏∏‰ΩøÁî®ÂÆÉ„ÄÇÊ≠§Â∞èÈÉ®‰ª∂Áî±‰∏Ä‰∏™Â∞èÁöÑÂúÜÂΩ¢ÊåâÈíÆË°®Á§∫ÔºåËØ•ÊåâÈíÆÂèØ‰ª•ÊâìÂºÄÔºàÈÄâ‰∏≠ÔºâÊàñÂÖ≥Èó≠ÔºàÂèñÊ∂àÈÄâ‰∏≠Ôºâ„ÄÇÊ≠§Á±ªÊ¥æÁîüËá™ QAbstractButton Á±ª„ÄÇ "},"PythonLibs/LearnPyQt5/QtStyleSheets.html":{"url":"PythonLibs/LearnPyQt5/QtStyleSheets.html","title":"QtStyleSheets","keywords":"","body":"Qt Style Sheets stylesheet-examples Customizing Qt Widgets Using Style Sheets Qt Style Sheets Reference blog: ‰ΩøÁî® QSS ÁæéÂåñ PyQt5 ÁïåÈù¢ qt-material Qt-Meterial: pip install qt-material import sys from PySide6 import QtWidgets # from PySide2 import QtWidgets # from PyQt5 import QtWidgets from qt_material import apply_stylesheet # create the application and the main window app = QtWidgets.QApplication(sys.argv) window = QtWidgets.QMainWindow() # setup stylesheet apply_stylesheet(app, theme='dark_teal.xml') # run window.show() app.exec_() "},"ReadingNotes/ReadingNotes.html":{"url":"ReadingNotes/ReadingNotes.html","title":"ReadingNotes","keywords":"","body":"Reading Notes ËÆ∫ÈùíÂπ¥ÁöÑ‰øÆÂÖª-Âº†ÈóªÂ§©-1938 ËÆ∫ÈùíÂπ¥‰øÆÂÖª-Âº†Áî≥Â∫ú-1946 Á†îÁ©∂‰∏éÂ≠¶È£é-Âº†Áî≥Â∫ú-1948 ÈùíÂπ¥Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÁöÑËÄÉËôë-È©¨ÂÖãÊÄù ËØ≠ÂΩï ËÆ°ÁÆó‰πãÈ≠Ç References jyywiki.cn/Letter.md „ÄäÊ∏ÖÂçéÂêçÂ∏àË∞àÂ≠¶È£é„Äã-Ê∏ÖÂçéÂ§ßÂ≠¶Ê†°Âè≤È¶Ü "},"ReadingNotes/A_Brief_History_of_Humankind.html":{"url":"ReadingNotes/A_Brief_History_of_Humankind.html","title":"A_Brief_History_of_Humankind","keywords":"","body":"A Brief History of Humankind ÂÜÖÂÆπÁÆÄ‰ªã „Ää‰∫∫Á±ªÁÆÄÂè≤Ôºö‰ªéÂä®Áâ©Âà∞‰∏äÂ∏ù„ÄãÊòØÂ∞§Áì¶Â∞î¬∑Ëµ´ÊãâÂà©Âàõ‰ΩúÁöÑÂéÜÂè≤Á±ªËëó‰ΩúÔºåËÆ≤Ëø∞‰∫Ü‰∫∫Á±ª‰ªéÁü≥Âô®Êó∂‰ª£Ëá≥ 21 ‰∏ñÁ∫™ÁöÑÊºîÂåñ‰∏éÂèëÂ±ïÂè≤ÔºåÂπ∂Â∞Ü‰∫∫Á±ªÂéÜÂè≤ÂàÜ‰∏∫Âõõ‰∏™Èò∂ÊÆµÔºöËÆ§Áü•Èù©ÂëΩ„ÄÅÂÜú‰∏öÈù©ÂëΩ„ÄÅ‰∫∫Á±ªÁöÑËûçÂêàÁªü‰∏Ä‰∏éÁßëÂ≠¶Èù©ÂëΩ„ÄÇ ‰ΩúËÄÖ Â∞§Áì¶Â∞î¬∑Ëµ´ÊãâÂà©Ôºå1976 Âπ¥ÁîüÔºåÁâõÊ¥•Â§ßÂ≠¶ÂéÜÂè≤Â≠¶ÂçöÂ£´ÔºåÁé∞‰∏∫ËÄ∂Ë∑ØÊííÂÜ∑Â∏å‰ºØÊù•Â§ßÂ≠¶ÁöÑÂéÜÂè≤Á≥ªÊïôÊéàÔºåÈùíÂπ¥ÊÄ™ÊâçÔºåÂÖ®ÁêÉÁû©ÁõÆÁöÑÊñ∞ÈîêÂéÜÂè≤Â≠¶ÂÆ∂„ÄÇ‰ªñÊìÖÈïø‰∏ñÁïåÂéÜÂè≤ÂíåÂÆèËßÇÂéÜÂè≤ËøõÁ®ãÁ†îÁ©∂„ÄÇÂú®Â≠¶ÊúØÈ¢ÜÂüüÂíåÂ§ß‰ºóÂá∫ÁâàÈ¢ÜÂüüÈÉΩÊúâÂæàÂ§ßÁöÑÂÖ¥Ë∂£„ÄÇ ÂÜÖÂÆπÊëòÂΩï Êó†ËÆ∫ÊòØÁé∞‰ª£ÂõΩÂÆ∂„ÄÅ‰∏≠‰∏ñÁ∫™ÁöÑÊïôÂ†Ç„ÄÅÂè§ËÄÅÁöÑÂüéÂ∏ÇÔºåÊàñËÄÖÂè§ËÄÅÁöÑÈÉ®ËêΩÔºå‰ªª‰ΩïÂ§ßËßÑÊ®°‰∫∫Á±ªÂêà‰ΩúÁöÑÊ†πÂü∫ÔºåÈÉΩÂú®‰∫éÊüêÁßçÂè™Â≠òÂú®‰∫éÈõÜ‰ΩìÊÉ≥Ë±°‰∏≠ÁöÑËôöÊûÑÊïÖ‰∫ã„ÄÇ‰æãÂ¶ÇÊïô‰ºöÁöÑÊ†πÂü∫Â∞±Âú®‰∫éÂÆóÊïôÊïÖ‰∫ã„ÄÇ Ê≠£Âõ†Â¶ÇÊ≠§Ôºå‰∫∫Á±ªÊâç‰∏ÄËµ∑ÊÉ≥Âá∫‰∫Ü‚ÄúÊúâÈôêÂÖ¨Âè∏‚ÄùËøôÁßçÊ¶ÇÂøµ„ÄÇÂú®Ê≥ïÂæã‰∏äÔºåËøôÁßçÂÖ¨Âè∏ÊòØÁã¨Á´ãÁöÑ‰∏™‰ΩìÔºåËÄå‰∏çÁ≠â‰∫éËÆæÁ´ãËÄÖ„ÄÅÊäïËµÑËÄÖÊàñÁÆ°ÁêÜËÄÖ„ÄÇÂú®ËøáÂéªÂá†‰∏ñÁ∫™Èó¥ÔºåËøôÁßçÂÖ¨Âè∏Â∑≤ÁªèÊàê‰∏∫ÁªèÊµé‰∏ªÊµÅÔºåÊàë‰ª¨Â§™‰π†ÊÉØ‰∫éËøôÁßçÊ¶ÇÂøµÔºåËÄåÂøò‰∫ÜËøôÂè™Â≠òÂú®‰∫éÊàë‰ª¨ÁöÑÊÉ≥Ë±°‰πã‰∏≠„ÄÇ‚ÄúÊúâÈôêÂÖ¨Âè∏‚ÄùÁöÑËã±ÊñáÁß∞‰∏∫‚Äúcorporation‚ÄùÔºåËøôÁÇπÈ¢á‰∏∫ËÆΩÂà∫ÔºåÂõ†‰∏∫Ëøô‰∏™Â≠óÁöÑËØ≠Ê∫êÊòØ‚Äúcorpus‚ÄùÔºàÊãâ‰∏ÅÊñáÁöÑ‚ÄúË∫´‰Ωì‚ÄùÔºâÔºåËÄåËøôÊ≠£ÊòØÊúâÈôêÂÖ¨Âè∏ÊâÄÊ≤°ÊúâÁöÑ„ÄÇËôΩÁÑ∂ÂÖ¨Âè∏Âπ∂Ê≤°ÊúâÁúüÊ≠£ÁöÑÂÆû‰ΩìÔºå‰ΩÜÂú®Ê≥ïÂæã‰∏äÊàë‰ª¨Âç¥Â∞ÜÂÆÉÁß∞‰∏∫‚ÄúÊ≥ï‰∫∫‚ÄùÔºåÂ•ΩÂÉèÂÆÉÁúüÁöÑÊòØÊúâË°ÄÊúâËÇâÁöÑ‰∫∫‰∏ÄËà¨„ÄÇ Â¶ÇÊûúË¶ÅË°°ÈáèÊüêÁßçÁâ©ÁßçÊºîÂåñÊàêÂäü‰∏éÂê¶ÔºåËØÑÊñ≠Ê†áÂáÜÂ∞±Âú®‰∫é‰∏ñÁïå‰∏äÂÖ∂ DNA Ëû∫ÊóãÁöÑÊã∑Ë¥ùÊï∞ÁöÑÂ§öÂØ°„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨Êù•ÁúãÁúãÁæéÂõΩ„ÄäÁã¨Á´ãÂÆ£Ë®Ä„ÄãÊîπÁî®ÁîüÁâ©Â≠¶„ÄÅÁßëÂ≠¶ÁöÑËßíÂ∫¶Êù•ÂÜôËØ•ÊòØÂ¶Ç‰ΩïÔºö Êàë‰ª¨ËÆ§‰∏∫‰∏ãÈù¢Ëøô‰∫õÁúüÁêÜÊòØ‰∏çË®ÄËÄåÂñªÁöÑÔºö‰∫∫‰∫∫ÊºîÂåñÂêÑÊúâ‰∏çÂêåÔºåÂá∫ÁîüÂ∞±ÊúâÊüê‰∫õÂèØÂèòÁöÑÁâπÊÄßÔºåÂÖ∂‰∏≠ÂåÖÊã¨ÁîüÂëΩÂíåËøΩÊ±ÇÂø´ÊÑü„ÄÇ Ê≥®ÔºöÊúâ‰∏Ä‰∏™Á¨ëËØùËØ¥ÔºåÁã¨Á´ãÂÆ£Ë®ÄÊâÄËØ¥ÁöÑ‰∏çË®ÄËá™ÊòéÁöÑÁúüÁêÜ‚ÄúAll men are created equal.‚ÄùËøôÂè•ËØù‰∏≠ÔºåÂè™Êúâ‚Äúare‚ÄùÊòØÂê´‰πâÊòéÁ°Æ‰∏îÁúüÊ≠£‰∏∫ÁúüÁöÑ„ÄÇAll ÊòØÂê¶ÂåÖÊã¨Â•¥Èö∂ÔºåMen ÊòØÂê¶ÂåÖÊã¨Â•≥‰∫∫Ôºåcreated ÊòØÁ•ûÂàõËøòÊòØÊºîÂåñÔºåequal ÊòØÂÖ¨Âπ≥ËøòÊòØÂπ≥Á≠âÔºü ËØª‰π¶ÂøÉÂæó ÂÖ∂ÂÆûÂú®Áúã„Ää‰∫∫Á±ªÁÆÄÂè≤„Äã‰πãÂâçÔºåÊàë‰πüÁúãËøáÂæàÂ§öÂÖ≥‰∫é‰∫∫Á±ªÊàñËÄÖËá™ÁÑ∂ÂéÜÂè≤ÁöÑ‰π¶Ôºå‰ΩÜ„Ää‰∫∫Á±ªÁÆÄÂè≤„ÄãËøòÊòØËÆ©ÊàëÂØπ‰∫∫Á±ªÁ§æ‰ºöÁöÑÂéÜÂè≤ÊÄùËÄÉ‰∏éËßÇÂØüÁöÑÁöÑËßíÂ∫¶‰∫ßÁîü‰∫ÜÂæàÂ§ßÁöÑÂèòÂåñ‚Ä¶‚Ä¶ "},"ReadingNotes/Feynman.html":{"url":"ReadingNotes/Feynman.html","title":"Feynman","keywords":"","body":"Feynman wikiquote: Richard_Feynman \"What I cannot create, I do not understand\" ^1 When Feynman said \"create\", he did not literally mean that in order to understand particle physics, he had to go Tony Stark on us and build his own accelerator. Instead, he meant that, starting with a blank piece of paper and the knowledge already in his mind, he could take any theoretical result and re-derive it. (\"Any\" is probably an exaggeration, but he could likely derive whatever he was interested in.) Feynman thought that ability was the true marker of understanding something because the only way to be able to work something out yourself is to have a firm understanding of each step of the reasoning involved. Further, if you try this, even with relatively simple concepts you think you understand well already, you'll find that you frequently come away from the process with a much deeper appreciation for the problem. An even more extreme position from Feynman was1 Once, I [David Goodstein] said to him, \"Dick, explain to me, so that I can understand it, why spin one-half particles obey Fermi-Dirac statistics.\" Sizing up his audience perfectly, Feynman said, \"I'll prepare a freshman lecture on it.\" But he came back a few days later to say, \"I couldn't do it. I couldn't reduce it to the freshman level. That means we don't really understand it.\" Feynman meant here that understanding something is not just about working through advanced mathematics. One must also have a notion that is intuitive enough to explain to an audience that cannot follow the detailed derivation. I've seen a few more sources that spell out Feynman's position on this in detail. The spinning plate story describes how Feynman felt that curiosity about simple things, and working them out for himself, helped him retain an attitude of play towards his professional work that got him out of a slump. Feynman's Tips on Physics, an extension to the Feynman lectures, has a chapter about how to learn physics, emphasizing that memorizing formulas is hopeless in the long run, and that by knowing a few key things and understanding the principles, you can work out whatever details you need. I can't find this chapter online, though. Finally, Feynman's Lost Lecture is a fantastic example of precisely what Feynman meant. In it, he describes his own elementary proof that the inverse square law for gravity leads to elliptical orbits. ÂΩìË¥πÊõºËØ¥‚ÄúÂàõÈÄ†‚ÄùÊó∂Ôºå‰ªñÂπ∂‰∏çÊòØËØ¥ÔºöË¶ÅÁêÜËß£Á≤íÂ≠êÁâ©ÁêÜÔºåÂ∞±ÂøÖÈ°ªÂÉèÊâòÂ∞º¬∑ÊñØÂ°îÂÖãÈÇ£Ê†∑‰∫≤Ëá™ÈÄ†‰∏Ä‰∏™Âä†ÈÄüÂô®„ÄÇËÄåÊòØ‰ªñËÆ§‰∏∫Ôºå‰ªé‰∏ÄÂº†ÁôΩÁ∫∏ÂíåÂ§¥ËÑë‰∏≠Â∑≤ÊúâÁöÑÁü•ËØÜÂá∫ÂèëÔºå‰ªñÂèØ‰ª•ÈáçÊñ∞Êé®ÂØºÂá∫‰ªª‰ΩïÁêÜËÆ∫ÁªìÊûú„ÄÇÔºà‚Äú‰ªª‰Ωï‚ÄùÂèØËÉΩÊúâ‰∫õÂ§∏Âº†Ôºå‰ΩÜÂæàÂèØËÉΩ‰ºöÊé®ÂØºÂá∫‰ªñÊÑüÂÖ¥Ë∂£ÁöÑ‰∏úË•ø„ÄÇÔºâ Ë¥πÊõºËÆ§‰∏∫ÔºåËøôÁßçËÉΩÂäõÊòØÁúüÊ≠£ÁêÜËß£Êüê‰ª∂‰∫ãÁöÑÊ†áÂøóÔºåÂõ†‰∏∫ÂîØ‰∏ÄËÉΩËÆ©‰Ω†Ëá™Â∑±Ëß£Âá∫ÈóÆÈ¢òÁöÑÊñπÊ≥ïÊòØÔºåÂØπÊé®ÁêÜËøáÁ®ã‰∏≠ÁöÑÊØè‰∏ÄÊ≠•ÈÉΩÊúâ‰∏Ä‰∏™ÂùöÂÆöÁöÑÁêÜËß£„ÄÇÊ≠§Â§ñÔºåÂ¶ÇÊûú‰Ω†Â∞ùËØïËøôÊ†∑ÂÅöÔºåÂç≥‰ΩøÊòØÂØπ‰Ω†Â∑≤ÁªèËÆ§‰∏∫ÁêÜËß£ÂæóÂæàÁÆÄÂçïÁöÑÊ¶ÇÂøµÔºå‰Ω†‰πü‰ºöÂèëÁé∞Ôºå‰Ω†ÁªèÂ∏∏‰ªéËøáÁ®ã‰∏≠Ëé∑ÂæóÊõ¥Ê∑±ÁöÑËÆ§ËØÜ„ÄÇ Ë¥πÊõºÁîöËá≥Êõ¥ÊûÅÁ´ØÁöÑËßÇÁÇπÊòØ1Ôºö Êúâ‰∏ÄÊ¨°ÔºåÊàëÂØπ‰ªñËØ¥Ôºå‚ÄúËø™ÂÖãÔºåËß£ÈáäÁªôÊàëÂê¨Ôºå‰ª•‰æøÊàëËÉΩÁêÜËß£Ôºå‰∏∫‰ªÄ‰πàÂçäËá™ÊóãÁ≤íÂ≠êÈÅµÂÆàË¥πÁ±≥-ÁãÑÊãâÂÖãÁªüËÆ°ËßÑÂæãÔºü‚Äù‰ªñÂÆåÁæéÂú∞ËØÑ‰º∞‰∫Ü‰ªñÁöÑÂê¨‰ºóÔºåÁÑ∂ÂêéËØ¥Ôºö‚ÄúÊàëÂáÜÂ§á‰∏Ä‰∏™ÁªôÊñ∞ÁîüÁöÑËÆ≤Â∫ß„ÄÇ‚Äù‰ΩÜÊòØÂá†Â§©Âêé‰ªñÂõûÊù•ËØ¥Ôºå‚ÄúÊàëÂÅö‰∏çÂà∞„ÄÇÊàëÊó†Ê≥ïÈôçÂà∞Êñ∞ÁîüÊ∞¥Âπ≥„ÄÇËøôÊÑèÂë≥ÁùÄÊàë‰ª¨ÂÆûÈôÖ‰∏äÂπ∂‰∏ç‰∫ÜËß£„ÄÇ‚Äù Âú®ËøôÈáåÔºåË¥πÊõºÁöÑÊÑèÊÄùÊòØÔºåÁêÜËß£Êüê‰ª∂‰∫ã‰∏ç‰ªÖ‰ªÖÊòØÈÄöËøáÈ´òÁ∫ßÊï∞Â≠¶Êù•Ëß£ÂÜ≥ÈóÆÈ¢ò„ÄÇËøòÂøÖÈ°ªÊúâ‰∏Ä‰∏™Ë∂≥Â§üÁõ¥ËßÇÁöÑÊ¶ÇÂøµÔºå‰ª•‰æøÂêë‰∏Ä‰∏™Êó†Ê≥ïË∑üÈöèËØ¶ÁªÜÊé®ÂØºÁöÑÂê¨‰ºóËß£Èáä„ÄÇ ÊàëÊâæÂà∞‰∫Ü‰∏Ä‰∫õËØ¶ÁªÜÈòêËø∞Ë¥πÊõºÂú®Ëøô‰∏™ÈóÆÈ¢ò‰∏äÁöÑËßÇÁÇπÁöÑËµÑÊñô„ÄÇ ÊóãËΩ¨ÁõòÁöÑÊïÖ‰∫ãÊèèËø∞‰∫ÜË¥πÊõºÂ¶Ç‰ΩïËÆ§‰∏∫ÔºåÂØπÁÆÄÂçï‰∫ãÁâ©ÁöÑÂ•ΩÂ•áÂøÉ‰ª•Âèä‰ªñËá™Â∑±Ëß£ÂÜ≥ÈóÆÈ¢òÁöÑËÉΩÂäõÔºåÂ∏ÆÂä©‰ªñ‰øùÊåÅ‰∏ÄÁßçÂØπËÅå‰∏öÂ∑•‰ΩúÁöÑÁé©ËÄçÊÄÅÂ∫¶Ôºå‰Ωø‰ªñ‰ªéÂõ∞Â¢É‰∏≠Ëµ∞Âá∫Êù•„ÄÇ „ÄäË¥πÊõºÁâ©ÁêÜÂ≠¶ÊåáÂçó„ÄãÊòØ‰∏ÄÊú¨Êâ©Â±ïË¥πÊõºËÆ≤Â∫ßÁöÑ‰π¶Á±çÔºåÂÖ∂‰∏≠‰∏ÄÁ´†ËÆ≤Ëø∞‰∫ÜÂ¶Ç‰ΩïÂ≠¶‰π†Áâ©ÁêÜÂ≠¶ÔºåÂº∫Ë∞ÉÈïøÊúüÊù•ÁúãËÆ∞ÂøÜÂÖ¨ÂºèÊòØÂæíÂä≥ÁöÑÔºåËÄåÈÄöËøá‰∫ÜËß£‰∏Ä‰∫õÂÖ≥ÈîÆÁÇπ‰ª•ÂèäÁêÜËß£ÂéüÂàôÔºå‰Ω†ÂèØ‰ª•Ëß£ÂÜ≥ÊâÄÈúÄÁöÑ‰ªª‰ΩïÁªÜËäÇ„ÄÇ‰∏çËøáÔºåÊàëÂú®ÁΩë‰∏äÊâæ‰∏çÂà∞Ëøô‰∏ÄÁ´†„ÄÇ ÊúÄÂêéÔºå„ÄäË¥πÊõºÁöÑËø∑Â§±ËÆ≤Â∫ß„ÄãÊ≠£ÊòØË¥πÊõºËßÇÁÇπÁöÑ‰∏Ä‰∏™Áªù‰Ω≥‰æãËØÅ„ÄÇÂú®ÂÖ∂‰∏≠Ôºå‰ªñÊèèËø∞‰∫Ü‰ªñËá™Â∑±Áî®ÂàùÁ≠âÊñπÊ≥ïËØÅÊòé‰∏áÊúâÂºïÂäõÂèçÊØîÂÆöÂæãÂØºËá¥Ê§≠ÂúÜËΩ®ÈÅìÁöÑËøáÁ®ã„ÄÇ "},"ReadingNotes/math_philosiphy.html":{"url":"ReadingNotes/math_philosiphy.html","title":"math_philosiphy","keywords":"","body":"Êï∞Â≠¶ÂÖ∑ÊúâÊó†ÂèØÊÄÄÁñëÁöÑÁúüÁêÜÊÄßÂêóÔºü Êï∞Â≠¶ÔºüÊï∞Â≠¶ÁöÑÁúüÁêÜÊÄß„ÄÅÊ≠£Á°ÆÊÄßÊ∫ê‰∫é‰ªÄ‰πàÔºü ‰ªÄ‰πàÊòØÊï∞Â≠¶Ôºü ÂÆûÈôÖ‰∏≠Êúü‰ª•ÂâçÔºöÊï∞Â≠¶Âì≤Â≠¶‰Ωú‰∏∫‰∏ÄËà¨Âì≤Â≠¶ÁöÑ‰∏Ä‰∏™‰æßÈù¢ Áé∞‰ª£Êï∞Â≠¶Âì≤Â≠¶ ‰ªÄ‰πàÊòØÊï∞Â≠¶ÁöÑÂèØÈù†ÊÄßÂü∫Á°ÄÔºü ÊòØÊï∞Â≠¶Â§ñÈÉ®ÁöÑÊüêÁßçÊàêÂàÜ„ÄÅËøòÊòØÊï∞Â≠¶ÂÜÖÈÉ®ÁöÑÊüêÁßçÂü∫Êú¨ÁêÜËÆ∫Ôºü ÊÄéÊ†∑ÊääÊï∞Â≠¶Âª∫Á´ãÂú®‰∏Ä‰∏™ÂèØÈù†ÁöÑÂü∫Á°Ä‰πã‰∏äÔºü Êï∞Â≠¶Âü∫Á°ÄÁöÑÁ†îÁ©∂ foundations of mathematics ÈÄªËæë‰∏ª‰πâËÄÖÔºöÊï∞Â≠¶ÁöÑÂü∫Á°ÄÂú®‰∫éÈÄªËæëÔºåËé±Â∏ÉÂ∞ºËå® Áõ¥Ëßâ‰∏ª‰πâËÄÖÔºöÊï∞Â≠¶ÁöÑÂü∫Á°ÄÂú®‰∫é‰∫∫Á±ªÊâÄÂõ∫ÊúâÁöÑÁõ¥ËßâËÉΩÂäõÔºåÂ∫∑Âæ∑ Â∏åÂ∞î‰ºØÁâπÔºöÊï∞Â≠¶‰∏çÈúÄË¶Å‰ªª‰ΩïÈôÑÂä†ÁöÑÂâçÊèêÔºåÊï∞Â≠¶Êú¨Ë∫´Â∞±ÂåÖÂê´‰∫ÜÁªùÂØπÂèØÈù†ÁöÑÊàêÂàÜ-ÊúâÈôêÁöÑÊï∞Â≠¶ÔºüÔºü Êï∞Â≠¶Âü∫Á°ÄÁ†îÁ©∂ÁöÑ‰∏ªË¶Å‰ªªÂä°Âú®‰∫éÔºö ÈÄöËøáÁªôÈùûÊúâÈôêÁöÑÊï∞Â≠¶‰ª•ÂΩ¢ÂºèÁöÑËß£ÈáäÔºåÊääÂÖ®ÈÉ®Êï∞Â≠¶Â•†Âü∫‰∫éÊúâÈôêÁöÑÊï∞Â≠¶ Â∏åÂ∞î‰ºØÁâπÁöÑÂΩ¢Âºè‰∏ª‰πâ Êï∞Â≠¶ÁöÑÁëïÁñµ-ÊÇñËÆ∫ Êï∞Â≠¶‰∏≠ÁöÑÊÇñËÆ∫-Êï∞Â≠¶‰∏çÊòØÂÆåÂÖ®ÂèØÈù†ÁöÑÔºü Êï∞Â≠¶Á†îÁ©∂ÂØπË±°ÁöÑÂÆûÂú®ÊÄßÈóÆÈ¢ò-Êï∞Â≠¶Êú¨‰ΩìËÆ∫ÈóÆÈ¢ò ÂÆûÂú®ËÆ∫ÔºöÊï∞Â≠¶ÁöÑÁ†îÁ©∂ÂØπË±°ÊòØ‰∏ÄÁßçÁã¨Á´ãÁöÑ„ÄÅ‰∏ç‰æùËµñ‰∫∫Á±ªÊÄùÁª¥ÁöÑÂÆ¢ËßÇÂ≠òÂú® ÂΩ¢Âºè‰∏ª‰πâÔºöÊï∞Â≠¶ÁöÑÁ†îÁ©∂ÂØπË±°Áü•ËØÜ‰∏ÄÁßçÊó†ÊÑè‰πâÁöÑÁ¨¶Âè∑ÔºåÂØπÊ≠§Ê≤°Êúâ„ÄÅ‰πü‰∏çÂøÖË¶Å‰ΩúÂá∫Ëß£Èáä Á¨¶Âè∑ÂíåËßÑÂàô‰∏≠Ôºå‰Ωï‰ª•Ëï¥Âê´Â¶ÇÊ≠§Â∫ûÊùÇ„ÄÅ‰∏∞ÂØåÁöÑÂèØËÉΩÔºü ÈõÜ‰∏≠Âú®Êó†ÈôêÊÄßÂØπË±°ÁöÑÂÆûÂú®ÊÄßÈóÆÈ¢ò‰∏äÔºö ÂÆûÊó†ÈôêËÆ∫ ÊΩúÊó†ÈôêËÆ∫ ÊñπÊ≥ïËÆ∫ÁöÑÂÆûÊó†ÈôêËÆ∫ Êï∞Â≠¶ÁöÑÁ†îÁ©∂ÂØπË±°ÊòØÂê¶ÊòØ‰∏ÄÁßçÁúüÂÆûÁöÑÂ≠òÂú®Ôºü ‚ÄúÂúÜ‚ÄùÔºå‚ÄúÊ≠£ÊñπÂΩ¢‚ÄùÔºå‚ÄúÊ≠£Âº¶ÂáΩÊï∞‚ÄùÊòØÁúüÂÆûÁöÑÂ≠òÂú®ÂêóÔºü ‰ªÄ‰πàÂè´ÁúüÂÆûÁöÑÂ≠òÂú®Ôºü‰ªÄ‰πàÊòØÂ≠òÂú®Ôºü Ëøô‰∫õÊ¶ÇÂøµÂ≠òÂú®‰∫éÊàë‰ª¨ÁöÑ‚ÄúËÑëÊµ∑‚Äù‰∏≠ÔºüÊàë‰ª¨ËßÇÂØüÂà∞ÁöÑ‚ÄúÂúÜÂΩ¢‚ÄùÁöÑ‰∏úË•øÔºåÂ¶Ç‰∏ÄÂÖÉÁ°¨Â∏ÅÔºåÂ§™Èò≥ÔºåÂúÜÂΩ¢‰∫ïÁõñÔºåÂíåÊ¶ÇÂøµ‰∏≠ÁöÑ‚ÄúÂúÜÂΩ¢‚ÄùÊòØ‰ªÄ‰πàÂÖ≥Á≥ªÔºü Êï∞Â≠¶ÁöÑÁúüÁêÜÊÄßÈóÆÈ¢ò 19‰∏ñÁ∫™20Âπ¥‰ª£ÂâçÔºåÊï∞Â≠¶ÁúüÁêÜÊôÆÈÅçÂú∞Ë¢´ËÆ§‰∏∫ÊòØ‰∏ÄÁßçÁªùÂØπÁúüÁêÜ Áî±‰∫éÈùûÊ¨ßÂá†‰ΩïÁöÑÂª∫Á´ãÔºåÂÖ≥‰∫éÊï∞Â≠¶ÁªùÂØπÁúüÁêÜÊÄßÁöÑ‰º†ÁªüËßÇÂøµÂ¥©Ê∫É‰∫Ü Êó¢ÁÑ∂‰∏§Áßç‰∫í‰∏çÁõ∏ÂÆπÁöÑÂá†‰ΩïÁêÜËÆ∫ÈÉΩÂ∫îË¢´ÁúãÊàêÂêàÁêÜÁöÑÊï∞Â≠¶ÁêÜËÆ∫ÔºåÈÇ£Êï∞Â≠¶ÂëΩÈ¢òÂΩìÁÑ∂Â∞±‰∏çÂÖ∑ÊúâÁªùÂØπÁúüÁêÜÊÄßÔºüÔºü "},"ReadingNotes/philosiphy.html":{"url":"ReadingNotes/philosiphy.html","title":"philosiphy","keywords":"","body":"ÊúØ‰∏éÈÅì ËÄÅÂ≠êÊõ∞ÔºöÊúâÈÅìÊó†ÊúØÔºåÊúØÂ∞öÂèØÊ±Ç‰πü„ÄÇÊúâÊúØÊó†ÈÅìÔºåÊ≠¢‰∫éÊúØ„ÄÇ Â∫ÑÂ≠êÊõ∞Ôºö‰ª•ÈÅìÈ©≠ÊúØÔºåÊúØÂøÖÊàê„ÄÇÁ¶ªÈÅì‰πãÊúØÔºåÊúØÂøÖË°∞„ÄÇ Â≠ôÂ≠êÊõ∞ÔºöÈÅì‰∏∫ÊúØ‰πãÁÅµÔºåÊúØ‰∏∫ÈÅì‰πã‰Ωì„ÄÇ‰ª•ÈÅìÁªüÊúØÔºå‰ª•ÊúØÂæóÈÅì„ÄÇ Âè§‰∫∫Êõ∞Ôºö‰∏ä‰∫∫Áî®ÈÅìÔºå‰∏≠‰∫∫Áî®ÊúØÔºå‰∏ã‰∫∫Áî®Âäõ„ÄÇ Èü©ÊÑàÊõ∞ÔºöÈóªÈÅìÊúâÂÖàÂêéÔºåÊúØ‰∏öÊúâ‰∏ìÊîª„ÄÇ "},"ReadingNotes/Á†îÁ©∂‰∏éÂ≠¶È£é-Âº†Áî≥Â∫ú-1948.html":{"url":"ReadingNotes/Á†îÁ©∂‰∏éÂ≠¶È£é-Âº†Áî≥Â∫ú-1948.html","title":"Á†îÁ©∂‰∏éÂ≠¶È£é-Âº†Áî≥Â∫ú-1948","keywords":"","body":"1948 Á†îÁ©∂‰∏éÂ≠¶È£é-Âº†Áî≥Â∫ú Âú®Â≠¶ÈóÆ‰∏äÔºå‰ªäÊó•‰∏ÄÂÆöË¶ÅÂä†Âº∫Á†îÁ©∂ÔºåÂøÖÈùûÊ∑±ÈÄ†Ëá™Âæó‰∏çÂèØÔºåÂøÖÈ°ªÂÖªÊàêÂ§ßÂô®ÔºåÂÜç‰∏çÂèØÊµÖÂ∞ùËæÑÊ≠¢ÔºåÁöÆÊØõËÇ§ÊµÖ„ÄÇ Êúâ‰∫∫ËØ¥ÔºåÊàë‰∏çË¶ÅÂÅöÂ≠¶ËÄÖ‰∏ìÂÆ∂ÔºåÊàë‰∏∫‰ΩïË¶ÅÁ†îÁ©∂Ôºü‰ΩÜ‰Ω†Âè™Ë¶ÅÊòØ‰∏Ä‰∏™‰∫∫Ôºå‰∏∫Á§æ‰ºöÂÅö‰∏ÄÁÇπ‰∫ãÔºå‰Ω†ÊÄªË¶ÅÊúâ‰∏Ä‰∫õ‰∏úË•øÔºåÊÄªË¶ÅÊúâ‰∏Ä‰∏™‰∏ìÈïø„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨Âú®Â≠¶Ê†°ÈáåÁöÑÊó∂ÂÄôÂ∞±Ë¶ÅÊ∑±ÂéöÔºõËÅîÂ∏¶ÁùÄÊù•ÁöÑÂ∞±Ë¶ÅËÑöË∏èÂÆûÂú∞ÔºåÂÆûÊòØÊ±ÇÊòØÔºåÂ∞±Ë¶ÅËÆ§ÁúüÔºåÂ∞±Ë¶ÅÂÆûÂÆûÂú®Âú®ÔºõÂÜç‰∏ÄÁÇπÂ∞±Ë¶ÅÁ≤æÊ†∏ÔºåË¶Å‰∏Ä‰∏ù‰∏çËãüÔºåÁªù‰∏çÁ≠â‰∫éÊº†ÂøΩÁ¨ºÁªü„ÄÇ Áé∞Âú®ÊâÄË∞ìÁ†îÁ©∂Âú®Ëã±ÊñáÂ∞±ÊòØResearchÔºåÊ≥ïÊñáÔºåÊÑèÂ§ßÂà©ÊñáÔºåË•øÁè≠ÁâôÊñáÔºå‰ª•Ëá≥‰øÑÊñáÈÉΩ‰πüÂ∑Æ‰∏çÂ§ö„ÄÇËøô‰πüÂèØÁøªËØëÊàêËÄÉÁ¥¢ÔºåÊôÆÈÄöÈÉΩ‰ª•‰∏∫Á†îÁ©∂ÂæàÈ´òÊ∑±ÂæàÈöæÔºåÂÖ∂ÂÆûÔºå‰πüÂæàÂπ≥Â∏∏ÔºåËÇØ‰ΩúÂ∞±‰∏çÈöæ„ÄÇÂÖàÁúãÂ≠óÈù¢Ôºö‰ªéResearchÔºåËøô‰∏™Â≠óÁúãÔºå‰∏çËøáÊòØÊâæ‰∫ÜÂèàÊâæ„ÄÇ‰Ω†ËÇØÂéªÊâæÔºåÊâæ‰∫ÜÂèàÊâæÔºåËøôÊòØ‰∏çÈöæÁöÑÔºåÂè™Ë¶Å‰Ω†ËÇØÂéªÊâæÂ∞±Ë°å„ÄÇÂêÑÁßçÂ≠¶ÈóÆÂÖ®ÊòØÊâæÊù•ÁöÑÔºåÂêÑÁßçÁúüÁêÜÂÖ®ÊòØÊâæÊù•ÁöÑ„ÄÇÁ†îÁ©∂Âè§‰π¶ÔºåÁ†îÁ©∂Êñ∞Â≠¶ÔºåÂÖ®Ë¶ÅËÇØÊâæÔºåËÇØÊâæÊâçËÉΩÂæó„ÄÇÊâÄË∞ì ‚ÄúÊ±ÇÂàôÂæó‰πã‚Äù Ëøô‰∏çÊòØÁ©∫ËØù„ÄÇËæüÂ¶ÇÊúâ‰∏ÄÁÆóÂ≠¶ÈöæÈ¢òÔºåÂà´‰∫∫Ëß£Á≠î‰∏çÂá∫ÔºåÊàëËÇØÂéªÊâæÔºåÂ∞±ÊúâÊâæÂá∫Êù•ÁöÑÂ∏åÊúõ„ÄÇÂçÅ‰πù‰∏ñÁ∫™ÂàùÔºåÊ≥ïÂõΩÊúâ‰∏ÄÈùíÂπ¥ÂêçÂè´ËëõÂΩï‰∫öÔºàGaloisÔºâÔºåÊú™ÊàêÂπ¥Â∞±Ê≠ª‰∫Ü„ÄÇ‰ªñÂØπÁÆóÂ≠¶ÊúâÂÖ¥Ë∂£ÔºåËÇØÂéªÊâæÔºå‰∫å‰∏âÂπ¥Èó¥‰æøÊàê‰∏∫‰∏ñÁïå‰∏äÁ¨¨‰∏ÄÊµÅÁöÑÁÆóÂ≠¶ÂÆ∂‰∫Ü„ÄÇÁé∞Âú®‰∏ñÁïåÊúÄ‰ºüÂ§ßÁöÑÂ≠¶ËÄÖÊòØÁà±Âõ†ÊñØÂù¶Ôºå‰ΩúÊàêÁõ∏ÂØπËÆ∫Ôºå‰ªñÁöÑÊàêÂäüÔºå‰πüÊòØÊâæÊù•ÁöÑ„ÄÇÊâæÁöÑÂè¶‰∏Ä‰∏™ÂêçÂ≠óÂèØÂè´Ë∞ÉÊü•„ÄÇÊàëÂõΩÁöÑËÄÉÂè§Â≠¶ÂÆ∂ÂéªÊâæÔºå‰∏çÊòØÊâæÂá∫Âåó‰∫¨‰∫∫Êù•ÂêóÔºüÁ†îÁ©∂‰∏çËøáÂ¶ÇÊ≠§ÔºåËøôÂπ∂‰∏çÈöæÔºå‰∏çË¶ÅÊÄïÔºå‰ªª‰Ωï‰∫∫ÈÉΩËÉΩÂÅö„ÄÇÂÜçÊç¢‰∏™ËØ¥Ê≥ïÔºå‰∏≠ÂõΩ‰∫∫ÊôÆÈÄö‰∏çËØ¥Á†îÁ©∂Ôºå‰ªñËØ¥ÊàëÊçâÊë∏ÊçâÊë∏ÔºåÂõ†Ê≠§ÔºåÁ†îÁ©∂‰πüÂ∞±ÂèØ‰ª•ËØ¥ÊòØÊçâÊë∏„ÄÇÊçâÊë∏ÊòØË¶ÅÂä®ÊâãÂä®ËÑöÁöÑÔºåÊâÄ‰ª•Á†îÁ©∂‰∏ç‰ΩÜË¶ÅÁî®ËÑëÔºåË¶Å‰πüÁî®ÊâãÔºåÁî®ËÑö„ÄÇ‰∏≠ÂõΩÂ≠óÂêåÈü≥ÁöÑÂ∏∏Âêå‰πâÔºåËÄå‰∏î‰∏Ä‰∏™Â≠óÂ∏∏ÊúâÂèçÈù¢ÁöÑÊÑèÊÄù„ÄÇÊúâ‰∏§‰∏™ÂíåÊçâÊë∏Èü≥Áõ∏Ëøë‰πâÁõ∏‰ººÁöÑÔºåÂ∞±ÊòØÁê¢Á£®ÔºåËøôÂ∞±ÊòØËØ¥Á†îÁ©∂Ë¶Å‰∏ÄÁÇπ‰∏ÄÁÇπÊù•„ÄÇÂ¶ÇÁ†îÁ©∂ÊîøÊ≤ªÔºåÁ†îÁ©∂ÁªèÊµéÔºå‰Ω†ÈÉΩË¶Å‰∏ÄÁÇπ‰∏ÄÁÇπÂéªÊçâÊë∏ÊàñÁê¢Á£®ÔºåÊç¢Âè•ËØùËØ¥ÔºåÂ∞±ÊòØË¶ÅÈíª„ÄÇÂâçËæπËØ¥‰∏ìÂÆ∂Ôºå‰∏ìÂÆ∂Â∞±ÊòØËÇØÈíª„ÄÇËÇØÂéªÈíªÔºåËÇØÂéªÊçâÊë∏ÔºåËÇØÂéªÁê¢Á£®ÔºåËøôÂ∞±ÊòØÁ†îÁ©∂„ÄÇÂàöÊâçÊàëËØ¥‰∏≠ÂõΩÂ≠óÂ∏∏ÊúâÂêåÈü≥Âêå‰πâÔºåËÄå‰∏î‰∏Ä‰∏™Â≠óÂ∏∏ÊúâÁõ∏ÂèçÁöÑÊÑèÊÄùÔºåÈíªÂíå‰∏ì‰πüÂ∞±Â¶ÇÊ≠§„ÄÇÂè¶Â¶ÇÂøçÂ≠ó„ÄÇÂøçÊòØÂøçËÄêÔºåËøô‰∏çÂùè„ÄÇ‰ΩÜÁî±ÂøçËÄêÂèòÊàêÊÆãÂøçËøôÂ∞±Âùè‰∫Ü„ÄÇÂøç‰∫éÂ∑±ÊòØÂøçËÄêÔºåÂøç‰∫é‰∫∫Â∞±ÂèòÊàêÊÆãÂøç‰∫Ü„ÄÇÂèàÂ¶ÇÂàõÂíåÊíû‰πüÂ¶ÇÊ≠§ÔºåËøôÂëäËØâ‰∫∫Ë¶ÅÂàõÈÄ†ÈùûÊíû‰∏çÂèØ„ÄÇËøôÈÉΩÊòØ‰ªéÂ≠óÈù¢‰∏äÂæóÂà∞ÁöÑÊÑèÊÄù„ÄÇÂÖ≥‰∫éËøô‰∫õÔºå‰∏çÂÜçËØ¥‰∫Ü„ÄÇÊàë‰∏ªË¶ÅÁöÑÊÑèÊÄùÂ∞±ÊòØËØ¥Á†îÁ©∂‰∏çÈöæÔºåÂè™Ë¶ÅËÇØÊâæ‰∫ÜÂèàÊâæÔºåÂè™Ë¶Å‰∏ÄÊ≠•‰∏ÄÊ≠•‰ΩúÂéªÔºåÂ∞±ËÉΩÊàêÂäü„ÄÇ‰ΩÜÁ†îÁ©∂‰∏çÊòØstudyÔºåÈÇ£ÊòØ‰ªé‰π¶Êú¨‰∏äÊ±ÇÁü•ËØÜÔºõËÄåÊòØResearchÔºåÂ∞±ÊòØË¶ÅÂèëÁé∞ÁúüÁêÜÔºÅ ÈôÑÂ∏¶Ë¶ÅËÆ≤ËÆ≤Á†îÁ©∂ÂÆ§ÁöÑ‰ªªÂä°„ÄÇÊâÄË∞ìÁ†îÁ©∂ÂÆ§Ëã±Êñá‰Ωú SeminaryÔºåÂÆÉÁöÑÂ≠óÊ∫ê‰∏éÁßçÂ≠êÔºåÁ≤æÂêå‰πâÔºåÊâÄ‰ª•ÂÆÉÁöÑÊú¨‰πâÂ∞±ÊòØÂà©‰∫é‰∫ßÁîüÊñ∞ÂìÅÁßçÔºåÊñ∞ÊÄßË¥®ÁöÑÂú∞ÊñπÔºå‰πüÂ∞±ÊòØÂèØ‰ª•‰∫ßÁîüÊñ∞‰∏úË•øÁöÑÂú∞Êñπ„ÄÇÊàë‰ª¨ÁöÑÁ†îÁ©∂ÂÆ§Â∞±Ë¶ÅÊú¨ÁùÄËøô‰∏™ÊÑèÊó®ÂéªÂÅö„ÄÇÊúâÊñ∞Â≠¶ÈóÆÂ∞±ÊúâÊñ∞Ë°åÂä®ÔºåÊúâÊñ∞Ë°åÂä®Â∞±ËÉΩÂàõÈÄ†Êñ∞‰∫ãÁâ©„ÄÇÁ†îÁ©∂Êñ∞ÈÅìÁêÜ‰∏ç‰ªÖÊòØÁü•ÁöÑÔºåËÄå‰∏îÊòØË°åÁöÑÔºåÊòØÁî®ÁöÑ„ÄÇËá™ÁÑ∂ÁßëÂ≠¶ÊúâÁ§æ‰ºöÂäüÁî®ÔºåÁ§æ‰ºöÁßëÂ≠¶ÔºåÁªèÊµéÂ≠¶ÔºåÊîøÊ≤ªÂ≠¶‚Ä¶‚Ä¶Êõ¥ÊúâÁ§æ‰ºöÂäüÁî®ÔºåÊàë‰ª¨Â∫îÊú¨Ê≠§Á≤æÁ•û‰ΩøÊï¥‰∏™Â≠¶ÊúØÔºåÊï¥‰∏™Â≠¶ÊúØÁïåÈÉΩÊúçÂä°‰∫é‰∫∫Ê∞ëÔºåÈÉΩÊúçÂä°‰∫∫Á±ªÔºÅ ÊàëÂçÅ‰∫åÂπ¥‰∏çÊïô‰π¶Ôºå‰∏Ä‰∏™ÂéüÂõ†‰πüËÆ∏ÊòØÂõ†‰∏∫Êúâ‰∫∫ËÆ§Êàë‰∏ÄÊïô‰π¶Â∞±‰ºöË∞àÂà∞ÊîøÊ≤ª„ÄÇÂÖ∂ÂÆûÔºåËøôÊòØ‰∏ÄÁßçËØØ‰ºöÔºåÂú®Â≠¶ÊàëËá™Ë¶ÅË®ÄÂ≠¶„ÄÇËøëÂπ¥ÊàëÊ∑±Ê∑±ÊÑüËßâ‰∏≠ÂõΩÈúÄË¶Å‰∏ÄÁßçÊñ∞Â≠¶È£é„ÄÇÂ∞§ÂÖ∂ÊòØÂ§ßÂ≠¶ÊàñÂ≠¶Èô¢Êõ¥Ë¶ÅÊ≥®ÊÑèÁ†îÁ©∂„ÄÇÊàëÊâÄË∞ìÊñ∞ÁöÑÂ≠¶È£éÂ∞±ÊòØÊ∑±ÂéöÔºåÁ¨ÉÂÆûÔºåÁ≤æÊ†∏ÁöÑÂ≠¶È£éÔºåËøô‰∏éÁ†îÁ©∂ÊúâÂØÜÂàáÂÖ≥Á≥ª„ÄÇ ‰∏≠ÂõΩ‰ªéÂÖ´ÂçÅÂπ¥ÂâçËµ∑ÂäûÊñ∞ÊïôËÇ≤ÔºåÂÖ∂‰∏≠ÊúâÊäÑËã±ÂõΩÁöÑÔºåÊúâÊäÑÊó•Êú¨ÁöÑÔºå‰ª•Ëá≥Âæ∑ÂõΩÁöÑÔºåÁæéÂõΩÁöÑÔºå‰ΩÜÊäÑÁöÑÂÖ®ÊòØÁöÆÊØõ„ÄÇ‰ªäÊó•Èô§Èùû‰∏çÂäûÊïôËÇ≤ÔºåË¶ÅÂäûÊïôËÇ≤Â∞±Â∫îÊ†πÊçÆËá™Â∑±ÁöÑÂÆûÂÜµÔºåËá™Â∑±ÁöÑÈúÄË¶ÅÔºåÁã¨Á´ãÂú∞Êù•Âäû„ÄÇÂú®Â≠¶ÈóÆ‰∏äÔºå‰ªäÊó•‰∏ÄÂÆöË¶ÅÂä†Âº∫Á†îÁ©∂ÔºåÂøÖÈùûÊ∑±ÈÄ†Ëá™Âæó‰∏çÂèØÔºåÂøÖÈ°ªÂÖªÊàêÂ§ßÂô®ÔºåÂÜç‰∏çÂèØÊµÖÂ∞ùËæÑÊ≠¢ÔºåÁöÆÊØõËÇ§ÊµÖ„ÄÇ Êúâ‰∫∫ËØ¥ÔºåÊàë‰∏çË¶ÅÂÅöÂ≠¶ËÄÖ‰∏ìÂÆ∂ÔºåÊàë‰∏∫‰ΩïË¶ÅÁ†îÁ©∂Ôºü‰ΩÜ‰Ω†Âè™Ë¶ÅÊòØ‰∏Ä‰∏™‰∫∫Ôºå‰∏∫Á§æ‰ºöÂÅö‰∏ÄÁÇπ‰∫ãÔºå‰Ω†ÊÄªË¶ÅÊúâ‰∏Ä‰∫õ‰∏úË•øÔºåÊÄªË¶ÅÊúâ‰∏Ä‰∏™‰∏ìÈïø„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨Âú®Â≠¶Ê†°ÈáåÁöÑÊó∂ÂÄôÂ∞±Ë¶ÅÊ∑±ÂéöÔºõËÅîÂ∏¶ÁùÄÊù•ÁöÑÂ∞±Ë¶ÅËÑöË∏èÂÆûÂú∞ÔºåÂÆûÊòØÊ±ÇÊòØÔºåÂ∞±Ë¶ÅËÆ§ÁúüÔºåÂ∞±Ë¶ÅÂÆûÂÆûÂú®Âú®ÔºõÂÜç‰∏ÄÁÇπÂ∞±Ë¶ÅÁ≤æÊ†∏ÔºåË¶Å‰∏Ä‰∏ù‰∏çËãüÔºåÁªù‰∏çÁ≠â‰∫éÊº†ÂøΩÁ¨ºÁªü„ÄÇ ÊàëËÆ§‰∏∫Â≠¶Ê†°Â∫îËØ•Â¶ÇÊ≠§ÔºåÂ∫îËØ•ÈÄ†ÊàêËøôÊ†∑ÁöÑÂ≠¶È£éÔºåÂ∫îËØ•ÂüπÊ§çËøôÊ†∑ÁöÑÂ≠¶ÁîüÔºåËøôÂ∞±ÈúÄË¶ÅÂ§ßÂÆ∂ÂÖ±ÂêåÂä™Âäõ„ÄÇ ÔºàÂéüËΩΩ1948Âπ¥4Êúà20Êó•„ÄäÂ§©Áê¥„ÄãÂàõÂàäÂè∑„ÄÇÈÄâËá™Ê≤≥Âåó‰∫∫Ê∞ëÂá∫ÁâàÁ§æ2005Âπ¥Áâà„ÄäÂº†Áî≥Â∫úÊñáÈõÜ„ÄãÁ¨¨‰∫åÂç∑ÔºåÊúâÂà†ËäÇ„ÄÇÔºâ "},"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp0.html":{"url":"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp0.html","title":"cp0","keywords":"","body":"„ÄäËÆ°ÁÆó‰πãÈ≠Ç„ÄãÂê¥ÂÜõ ‰∫∫Ê∞ëÈÇÆÁîµÂá∫ÁâàÁ§æ ËÆ°ÁÆóÁöÑÊú¨Ë¥®‚Äî‚Äî‰ªéÊú∫Ê¢∞Âà∞ÁîµÂ≠ê Á≠ñÂàí‰∫∫È´òÂçö‰ªãÁªçÔºö Ê∑±Â∫¶+ÂπøÂ∫¶ ÁõÆÊ†áÔºö ÁêÜËß£ËÆ°ÁÆóÁßëÂ≠¶ÁöÑÁ≤æÈ´ìÂíåÁÅµÈ≠Ç ÂùöÂÆöÈïøÊúüÊäïÂÖ•ÂíåÂèëÂ±ïÁöÑ‰ø°ÂøÉ ‚Äî‚ÄîËÅå‰∏öÊΩúÂäõÔºåËÅå‰∏öÈÅìË∑ØÔºåÂèëÂ±ïÂâçÊôØÂπøÈòîË¶ÅÊΩú‰∏ãÂøÉÊù•ÔºåÊâéÊâéÂÆûÂÆûÊäïÂÖ• ÂÖ®‰π¶ÁªìÊûÑÔºöCP1: ÁÆóÊ≥ïÁ∫ßË°°ÈáèÁÆóÊ≥ï‰ºòÂä£CP2: CP3: ÊäΩË±°‰∏éË°®Á§∫ ËÆ°ÁÆóÊú∫Â≠òÂÇ®‰∏éÂ§ÑÁêÜÊï∞ÊçÆÁöÑÂéüÁêÜCP4: ÂàÜÁ±ª‰∏éÁªÑÂêàCP5: ÂõæËÆ∫ÂèäÂ∫îÁî®CP6: ÂàÜÊ≤ª ÁªìÂêà4CP7: Â≠òÂÇ® Êó∂Á©∫ÁöÑÊùÉË°°CP8: Âπ∂Ë°å‰∏é‰∏≤Ë°å CP9: Áä∂ÊÄÅ‰∏éÊµÅÁ®ã CP10: Ê¶ÇÁéáÁÆóÊ≥ïÂèäÂ∫îÁî® Â¶Ç‰ΩïÂØπÂæÖ‰π†È¢ò‰∏éÊÄùËÄÉÈ¢òÔºö ËæÖÂä©ÁêÜËß£‰π¶‰∏≠ÂÜÖÂÆπÔºåÂú®ÂØπ‰π†È¢òÁöÑÊÄùËÄÉ‰∏éËß£Á≠î‰∏≠Ëøõ‰∏ÄÊ≠•Ê∑±ÂåñÂØπ‰π¶‰∏≠ÂÜÖÂÆπÁöÑÁêÜËß£ ÈóÆÈ¢òÔºö Èù¢ÂØπ‰ºóÂ§öÁöÑËÆ°ÁÆóÊú∫ÁßëÂ≠¶Á†îÁ©∂ÊñπÂêëÔºåÂØπÈÄâÊã©‰ªÄ‰πàÊÑüÂà∞Âõ∞ÊÉëÔºüÊØîÂ¶ÇËØ¥Áé∞Âú®ÁÅ´ÁöÑ‰∫∫Â∑•Êô∫ËÉΩÔºåÊ∑±Â∫¶Â≠¶‰π†......ÂèëÂ±ïÊΩúÂäõÂæàÂ§ßÁöÑËÆ°ÁÆóÊú∫‰ΩìÁ≥ªÁªìÊûÑÊÄéÊ†∑ÂàÜËæ®ÔºåÊÄéÊ†∑ÈÄâÊã© Â∑•Á®ãÂ∏àÁöÑÂàÜÁ∫ßÔºöÊØè‰∏ÄÁ∫ßÁöÑË¥°ÁåÆÂ∑ÆÂçÅÂÄç‰ª•‰∏ä ÂÖ≠Á∫ßÔºö~Á†ÅÂÜú‰∫îÁ∫ßÔºöËÉΩÁã¨Á´ãËß£ÂÜ≥ÈóÆÈ¢òÔºåÂÆåÊàêÂ∑•Á®ãÂ∑•‰Ωú„ÄÇ ÁÜüÁªÉÊéåÊè°ÁºñÁ®ãËØ≠Ë®ÄÔºåÂøÖÂ§áÁöÑÂü∫Êú¨ÊäÄËÉΩÂõõÁ∫ßÔºö ‰ªÄ‰πàÊòØËÆ°ÁÆóÊú∫ ËÆ°ÁÆó ËÆ°ÁÆóÊú∫1+1=2 Êï∞ÔºàÊ¶ÇÂøµor‚ÄúÁä∂ÊÄÅ‚ÄùÁöÑÊäΩË±°orÁºñÁ†ÅÔºâ ËøêÁÆóÁ¨¶ÔºàËßÑÂàôÔºåËßÑÂàô‰∏éÊï∞ÁöÑÊ¶ÇÂøµÊó†ÂÖ≥Ôºå‰ΩÜËßÑÂàôÁöÑÁªÑÂêàÂç¥ËÉΩÂÆûÁé∞‚ÄúËÆ°ÁÆó‚ÄùÔºâ ËÆ°ÁÆóÊú∫ÔºàÊâßË°åËÆ°ÁÆóÁöÑÊú∫Âô®-Êú∫Ê¢∞ËøêÂä®ÔºâËΩØ‰ª∂‰∏éÁ°¨‰ª∂ÁöÑÂàÜÈáé ‚Äî‚Äî Êï∞‰∏éÊï∞ÁöÑÁâ©ÁêÜË°®Á§∫ ÁÆóÁõòÔºö‰∏∫‰ªÄ‰πàÂè§‰ª£‰∏≠ÂõΩÁöÑÁÆóÁõòÊòØÊúÄÊó©ÁöÑ ‚ÄúËÆ°ÁÆóÊú∫‚ÄùÔºüÁÆóÁõòÂèäÁÆóÁõòÁöÑ‰ΩøÁî®ÂåÖÂê´‰∫ÜËÆ°ÁÆóÊú∫‰∏éËÆ°ÁÆóÁöÑÂÜÖÊ†∏ÔºöÁÆóÁõòÁè†Â≠êÔºöÊï∞ÁöÑË°®Á§∫‰∏â‰∏ã‰∫îÈô§‰∫åÔºöËÆ°ÁÆóÁöÑËßÑÂàô‰∫∫Êã®Âä®ÁÆóÁè†ÔºöËÆ°ÁÆóÊú∫ÁöÑÊú∫Ê¢∞ËøêÂä®ÂØπË∞ÅÂÅöËøêÁÆóÂíåÂÆûÁé∞‰ªÄ‰πàÊ†∑ÁöÑËøêÁÆóÔºöÁ®ãÂ∫è Êï∞ÁöÑË°®Á§∫‰∏éËøõÂà∂ÁöÑÈÄâÊã©Ôºö‰∏∫‰ªÄ‰πàÈÄâÊã©‰∫åËøõÂà∂Êù•Ë°®Á§∫Êï∞ÔºüÂ∑¥ÊØîÂ•áÔºö ÊÉ≥Áî®Â§çÊùÇÁöÑÁâ©ÁêÜËÆ°ÁÆóË£ÖÁΩÆÔºåÂÆûÁé∞Â§çÊùÇÁöÑËÆ°ÁÆó„ÄÇÊÄùË∑ØÁöÑÊîπÂèòÔºöÂú®Â∏ÉÂ∞î‰ª£Êï∞‰∏éÈ¶ôÂÜúÁöÑÂ∏ÉÂ∞î‰ª£Êï∞ÂÆûÁé∞ËøêÁÆóËøõËÄåÂÆûÁé∞ÈÄªËæëÊéßÂà∂ÁÆÄÂçïÁöÑÂü∫Êú¨ËÆ°ÁÆóË£ÖÁΩÆÔºåÊåâÁÖßÁÆÄÂçïÁöÑËßÑÂàôÔºåËøõË°å‰∫ÜÂ§çÊùÇÁöÑÁªÑÂêàÔºåÂÆûÁé∞‰∫ÜÂ§çÊùÇÁöÑËÆ°ÁÆó ÂõæÁÅµ‰∏éÂõæÁÅµÊú∫Ôºö‰ªÄ‰πàÊòØËÆ°ÁÆóÔºüËÆ°ÁÆóÁöÑË∑®Ë∂ä Á∫∏Â∏¶ÔºöÁä∂ÊÄÅ‰∏é‚ÄúÁ®ãÂ∫è‚ÄùËØªÂÜôÂ§¥ÔºöËØªÂèñ‰∏éËæìÂá∫ËØªÂÜôÂ§¥ÈÅµÂæ™ÁöÑËßÑÂàôÔºöËÆ°ÁÆóÁöÑËßÑÂàô ËÉΩÂ§üÂÆûÁé∞‰∏ÄÂàáÊàë‰ª¨ÊâÄÂÆö‰πâÁöÑ‚ÄúËÆ°ÁÆó‚Äù ‚Äî‚Äî ÈÄöÁî®ËÆ°ÁÆó ÂÜØËØ∫‰æùÊõºÁªìÊûÑ Êï∞ÊçÆÂíåÊåá‰ª§ÁöÑÁªü‰∏ÄË°®Á§∫Ôºå‰∏çÂêåËß£ÈáäÊï∞ÊçÆÂíåÊåá‰ª§ÁöÑÁ≠â‰ª∑ËÆ§ËØÜÔºåËÆ§ËØÜÁöÑÁ™ÅÁ†¥ ÊûÅËá¥ÁöÑÁÆÄÂçïÊâçËÉΩÊûÑÁ≠ëÂ§ßËßÑÊ®°ÁöÑÂ§çÊùÇ ‰ªéÁÆóÁõòÂà∞ËäØÁâáÔºöÊùêÊñôÂ≠¶ÔºåÂ∑•Á®ã‰∏äÁöÑÊîπËøõ ËÆ°ÁÆóÁöÑËæπÁïåÔºö ÂèØËÆ°ÁÆóÂ∞±ÊòØÂõæÁÅµÊú∫ËÉΩËøõË°åÁöÑËÆ°ÁÆóÁé∞‰ª£ËÆ°ÁÆóÊú∫ÔºöÈùûÊó†ÈôêÂ≠òÂÇ®Á∫∏Â∏¶ÔºåÂõæÁÅµÊú∫ÁöÑÁâ©ÁêÜËøë‰ºº„ÄäÂì•Âæ∑Â∞î„ÄÅËâæËàçÂ∞î„ÄÅÂ∑¥Ëµ´ÔºöÈõÜÂºÇÁíß‰πãÂ§ßÊàê„Äã ËæπÁïåÔºöÊï∞Â≠¶ÁöÑËæπÁïåÔºöËÆ°ÁÆóÁöÑËæπÁïåÔºöÂ∑•Á®ãÁöÑËæπÁïåÔºöÔºàÂèØÊé•ÂèóÁöÑÊó∂Á©∫ÊàêÊú¨Ôºâ Êó•Â∏∏ÈóÆÈ¢òÊ±ÇËß£ÁöÑ‰∏ÄËà¨ÊÄùË∑Ø ÈóÆÈ¢òÂª∫Ê®° "},"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp1.html":{"url":"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp1.html","title":"cp1","keywords":"","body":"Á¨¨‰∏ÄÁ´† ÊØ´ÂéòÂçÉÈáå‰πãÂ∑Æ‚Äî‚Äî‚ÄîÂ§ßOÊ¶ÇÂøµ 1.1 ÁÆóÊ≥ïÁöÑËßÑËåÉÂåñÂíåÈáèÂåñÂ∫¶Èáè ËÆ°ÁÆóÊú∫ÁÆóÊ≥ïÂü∫Á°ÄÂàÜÊûêÈºªÁ•ñÔºöÈ´òÂæ∑Á∫≥ ÁºñÁ®ãÁöÑËá™ÊàëË¶ÅÊ±ÇÔºö Âäõ‰∫â‰∏ÄÊ¨°ÂÖ®ÂØπÔºåÊ≤°ÊúâÈîôËØØÔºåÁÆóÊ≥ïÂú®ËÆæËÆ°Êó∂Â∞±ËææÂà∞ÊúÄ‰Ω≥„ÄÇÈÅáÂà∞ÈóÆÈ¢òÊó∂Ëß£ÂÜ≥ÈóÆÈ¢òÁöÑÁßØÊûÅÊÄÅÂ∫¶„ÄÇ ÊÄùËÄÉÈ¢ò1.1Ôºö ‰ªÄ‰πà‰∫ßÂìÅÂíåËÆ°ÁÆóÊú∫Á±ª‰ººÔºåÊòØËΩØÁ°¨‰ª∂ÂàÜÁ¶ªÁöÑÔºü Ëß£Á≠îÔºö‰πêÂô®ÔºåÊ±ΩËΩ¶... 1.2 Â§ßÊï∞ÂíåÊï∞ÈáèÁ∫ßÁöÑÊ¶ÇÂøµ Êàë‰ª¨ÂØπÂ§ßÊï∞Ê≤°ÊúâÊ¶ÇÂøµ‚Äî‚Äî>ÂØπËÆ°ÁÆóÊú∫ËµÑÊ∫êÊ≤°ÊúâÊ¶ÇÂøµÔºö Âú®Ëá™Â∑±‰ΩøÁî®ËÆ°ÁÆóÊú∫Êó∂ÔºåÁªùÂ§ßÈÉ®ÂàÜÊó∂ÂÄôÔºåÈÉΩÊÑüËßâÈÄüÂ∫¶Ë∂ÖÁ∫ßÂø´ÔºåÂÜÖÂ≠òÁî®‰∏çÂÆåÔºåÊ†πÊú¨‰∏ç‰ºöÂú®ÊÑèËÆ°ÁÆóËµÑÊ∫êÁöÑËÄóË¥π„ÄÇ Ë¶ÅÈÄêÊ≠•ÁöÑÂüπÂÖªËµ∑ÂØπËøêÁÆóÈáè„ÄÅËøêÁÆóÈÄüÂ∫¶„ÄÅËøêÁÆóÁ©∫Èó¥ÁöÑ‚ÄúÊÑüËßâ‚ÄùÊù•„ÄÇËøôË¶ÅÊ±ÇÂØπÁÆóÊ≥ïÂÅöÁ©∫Èó¥ÂíåÊó∂Èó¥ÁöÑÂ§çÊùÇÂ∫¶ÂàÜÊûêÔºåÊ†πÊçÆÈôêÂà∂Êù°‰ª∂ÔºåËÆ°ÁÆóÈáèËøõË°åÈ¢Ñ‰º∞„ÄÇ È´òÂæ∑Á∫≥ÁÆóÊ≥ïÂàÜÊûêÊÄùÊÉ≥Ôºö1.Âè™ËÄÉËôëÊï∞ÊçÆÈáèÂ§ßÂà∞Êé•ËøëÊó†Á©∑ÁöÑÊÉÖÂÜµ„ÄÇ2.Â∞ÜÂÜ≥ÂÆöÁÆóÊ≥ïÂø´ÊÖ¢ÁöÑÂõ†Á¥†ÂàíÂàÜ‰∏∫ ‰∏çÈöèÊï∞ÊçÆÈáèÂèòÂåñÁöÑÂõ†Á¥† ‰∏é ÈöèÊï∞ÊçÆÈáèÂèòÂåñÁöÑÂõ†Á¥†„ÄÇ ÊÄùËÄÉÈ¢ò1.2Ôºö Â¶ÇÊûú‰∏Ä‰∏™Á®ãÂ∫èÂè™ËøêË°å‰∏ÄÊ¨°ÔºåÂú®ÁºñÂÜôÂÆÉÁöÑÊó∂ÂÄôÔºå‰Ω†ÊòØÈááÁî®ÊúÄÁõ¥ËßÇ‰ΩÜÊòØÊïàÁéáËæÉ‰ΩéÁöÑÁÆóÊ≥ïÔºåËøòÊòØ‰æùÁÑ∂ÂØªÊâæÂ§çÊùÇÂ∫¶ÊúÄ‰ºòÁöÑÁÆóÊ≥ïÔºü ÂØªÊâæÊúÄ‰ºòÁöÑÁÆóÊ≥ïÔºåÂõ†‰∏∫Ê≠§ÁÆóÊ≥ïÂèØËÉΩÂú®ÂÖ∂‰ªñÂú∞ÊñπÂ§çÁî®„ÄÇ 1.3 ÊÄéÊ†∑ÂØªÊâæÊúÄÂ•ΩÁöÑÁÆóÊ≥ï ‰æãÈ¢ò1.3 ÊÄªÂíåÊúÄÂ§ßÂå∫Èó¥ÈóÆÈ¢ò ÁªôÂÆö‰∏Ä‰∏™ÂÆûÊï∞Â∫èÂàóÔºåËÆæËÆ°‰∏Ä‰∏™ÊúÄÊúâÊïàÁöÑÁÆóÊ≥ïÔºåÊâæÂà∞‰∏Ä‰∏™ÊÄªÂíåÊúÄÂ§ßÁöÑÂå∫Èó¥ ËæìÂÖ•Ê†ºÂºèÔºö Á¨¨‰∏ÄË°åÔºö‰∏Ä‰∏™Ê≠£Êï¥Êï∞NÔºåË°®Á§∫Â∫èÂàóÈïøÂ∫¶Á¨¨‰∫åË°åÔºöN‰∏™ÂÆûÊï∞Ôºå‰ª•Á©∫Ê†º‰∏∫ÂàÜÈöî 1. ‰∏âÈáçÂæ™ÁéØ O(N^3) Á°ÆÂÆö‰∏Ä‰∏™Â≠êÂå∫Èó¥ÈúÄË¶ÅËµ∑ÁÇπpÂíåÁªàÁÇπqÔºåÂÜçÁî±pÂà∞qÈÅçÂéÜÊ±ÇÂíåÔºåÂÖ±‰∏âÈáçÂæ™ÁéØ„ÄÇ #include using namespace std; vector arr; int N; double tmp; int p, q, mp, mq; //ËÆ∞ÂΩïÂ∑¶Âè≥‰∏ãÊ†á double maxSum, sum; //ËÆ∞ÂΩïÂΩìÂâçÊúÄÂ§ßÂ≠êÂ∫èÂíå‰∏éÂ≠êÂ∫èÂíå int main(){ cin>>N; for(int i=0; i>tmp; arr.push_back(tmp); } for(p=0; pmaxSum){ maxSum=sum; mp=p; mq=q; } } } } printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\", maxSum, mp, mq); for(int i=mp; i 2. ‰∏§ÈáçÂæ™ÁéØ O(N^2) Â≠êÂ∫èÂàóÂíåÊ≤°ÂøÖË¶ÅÊØèÊ¨°‰ªéÂ§¥ÂºÄÂßãÈÅçÂéÜÁ¥ØÂä†ÔºåÂè™ÈúÄË¶ÅÂú®Ââç‰∏Ä‰∏™Â≠êÂ∫èÂàóÂíå‰πã‰∏äÂä†ÂáèÂç≥ÂèØ„ÄÇ Âú®‰∏âÈáçÂæ™ÁéØÁöÑ‰ª£Á†Å‰∏äÁ®ç‰Ωú‰øÆÊîπ #include using namespace std; vector arr; int N; double tmp; int p, q, mp, mq; double maxSum, sum; int main(){ cin>>N; for(int i=0; i>tmp; arr.push_back(tmp); } maxSum=arr[0]; for(p=0; pmaxSum){ maxSum=sum; mp=p; mq=q; } } } printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\", maxSum, mp, mq); for(int i=mp; i 3. ÂàÜÊ≤ªÊ≥ï O(NlogN) Â∫èÂàóSÁöÑÊúÄÂ§ßÂíåÂ≠êÂ∫èÂàóÂàÜÂ¶Ç‰∏ã‰∏âÁßçÊÉÖÂÜµÔºö ÂÆåÂÖ®‰Ωç‰∫éÂ∑¶ÂçäÂå∫Èó¥ [p1, q1] ÂÆåÂÖ®‰Ωç‰∫éÂè≥ÂçäÂå∫Èó¥ [p2, q2] Ê®™Ë∑®‰∏≠Èó¥ [p1, q2] 1Âíå2ÂèØÈÄíÂΩíË∞ÉÁî®Ôºå3ÁªèÁÆÄÂçïÂàÜÊûêÂèØÁü•ÔºåÂÖ∂Âå∫Èó¥‰∏∫ [p1, q2] Á¨¨‰∏âÁßçÊÉÖÂÜµÊúâÈóÆÈ¢òÔºå‰π¶‰∏äÁß∞Ôºö 2ÔºéÂâçÂêé‰∏§‰∏™Â≠êÂ∫èÂàóÁöÑÊÄªÂíåÊúÄÂ§ßÂå∫Èó¥‰∏≠Èó¥ÊúâÈó¥ÈöîÔºåÊàë‰ª¨ÂÅáÂÆöËøô‰∏§‰∏™Â≠êÂ∫èÂàóÁöÑÊÄªÂíåÊúÄÂ§ßÂå∫Èó¥ÂàÜÂà´ÊòØ[p1,q1]Âíå[p2,q2]„ÄÇËøôÊó∂ÔºåÊï¥‰∏™Â∫èÂàóÁöÑÊÄªÂíåÊúÄÂ§ßÂå∫Èó¥ÊòØ‰∏ãÈù¢‰∏âËÄÖ‰∏≠ÊúÄÂ§ßÁöÑÈÇ£‰∏Ä‰∏™ÔºöÔºà1Ôºâ[p1,q1]Ôºà2Ôºâ[p2,q2]ÔºõÔºà3Ôºâ[p1,q2]„ÄÇËá≥‰∫é‰∏∫‰ªÄ‰πàÔºåËøôÊòØÊú¨ËäÇÁöÑÊÄùËÄÉÈ¢ò„ÄÇ Page: 037 ‰ΩÜÊòØÔºåÊ®™Ë∑®‰∏≠Èó¥ÁöÑÂèØËÉΩÁöÑÊúÄÂ§ßÂ≠êÂå∫Èó¥Ôºå‰∏ç‰∏ÄÂÆö‰∏∫[p1,q2]„ÄÇ‰∏æ‰æãÊù•ËØ¥ÊòéÔºö Â∫èÂàóÔºö [-2, 1, -3, 4, -1, 2, 1, -5, 4] mid = (0+8)/2 = 4ÂàíÂàÜ‰∏∫: Â∑¶ÂçäÂ≠êÂ∫èÂàóÔºö[-2, 1, -3, 4, -1]ÂÖ∂ÊúÄÂ§ßÂíåÂ≠êÂ∫èÂàó‰∏∫Ôºö[4]ÔºåÂØπÂ∫î‰∏ãÊ†áÂå∫Èó¥‰∏∫Ôºö[3,3]Ôºå Âç≥p1=q1=3Ôºålmsum = 4 Âè≥ÂçäÂ≠êÂ∫èÂàóÔºö[2, 1, -5, 4]ÔºåÂÖ∂ÊúÄÂ§ßÂíåÂ≠êÂ∫èÂàó‰∏∫Ôºö[4]ÔºåÂÖ∂ÂØπÂ∫î‰∏ãÊ†áÂå∫Èó¥‰∏∫Ôºö[8,8]Ôºå Âç≥p2=q2=8Ôºå rmsum = 4 ËøõËÄåÔºå[p1,q2]ÂØπÂ∫îÁöÑÂå∫Èó¥‰∏∫[3,8]ÔºåÂØπÂ∫îÂ≠êÂ∫èÂàóÂíå‰∏∫5 ÁÑ∂ËÄåÔºåÂèØÁü•ÂÆûÈôÖÊúÄÂ§ßÂíåÂ≠êÂ∫èÂàó‰∏∫[4, -1, 2, 1]ÔºåÂØπÂ∫î‰∏ãÊ†áÂå∫Èó¥‰∏∫[3, 6]ÔºåÂØπÂ∫îÂ≠êÂ∫èÂíå‰∏∫6Âπ∂‰∏çÊòØ[p1,q2] Êåâ‰π¶‰∏≠ÊèèËø∞ÁöÑ‰ª£Á†ÅÔºö #include using namespace std; void maxSubSum(vector arr, int p, int q, int &mp, int &mq, double &maxSum); vector arr; int N=0; int mp=0, mq=0; double tmp=0, maxSum=0; int main(){ cin>>N; for(int i=1; i>tmp; arr.push_back(tmp); } maxSubSum(arr, 0, N-1, mp, mq, maxSum); printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\",maxSum, mp, mq); for(int i=mp; i arr, int p, int q, int &mp, int &mq, double &maxSum){ //ËæπÁïåÊÉÖÂÜµ if(p>=q){ mp=mq=p; maxSum=arr[p]; return ; } int mid = p+(q-p)/2; //mid = (p+q)/2; int lmp, lmq, rmp, rmq; double lmsum, rmsum, midsum=0; double tmpsum=0; //ÈÄíÂΩíÊÉÖÂÜµ maxSubSum(arr, p, mid, lmp, lmq, lmsum); maxSubSum(arr, mid+1, q, rmp, rmq, rmsum); /* midsumÈîôËØØÔºåÂéüÊú¨ÊÉ≥midsumÂ∫îËØ•Ëµ∑Ê≠¢‰∫émpÔºå mqÔºåÊÉ≥ÂΩìÁÑ∂‰ª•‰∏∫Ë¶ÅÂåÖÂê´lmsumÔºårmsum‰∫ÜÔºõ Â∫îËØ•ÊåâÁÖß‰ªé‰∏≠Èó¥Âêë‰∏§ËæπÊâ©Â±ï */ for(int i=lmp; irmsum && lmsum>midsum){ mp=lmp; mq=lmq; maxSum=lmsum; } else if(rmsum >lmsum && rmsum>midsum){ mp=rmp; mq=rmq; maxSum=rmsum; } else{ mp=lmp; mq=rmq; maxSum=midsum; } return ; } ËæìÂÖ•Ôºö9-2 1 -3 4 -1 2 1 -5 4 ËæìÂá∫ÔºömaxSum:5.00mp:3mq:84.00 -1.00 2.00 1.00 -5.00 4.00 ÊúüÊúõËæìÂá∫ÔºömaxSum:6.00mp:3mq:64.00 -1.00 2.00 1.00 ‰øÆÊ≠£Ôºö ÈáçÊñ∞ËÄÉËôëË∑®Ë∂ä‰∏≠Èó¥(mid)ÁöÑÁöÑÊÉÖÂÜµÔºö‰ªémidÂºÄÂßãÔºåÂêëÂ∫èÂàóÂ∑¶Âè≥Êâ©Â±ïÔºå‰øùÁïôÊúÄÂ§ßÂÄºÂèäÂØπÂ∫î‰∏ãÊ†á ÂØπÂ∫î‰ª£Á†Å‰∏∫Ôºö #include using namespace std; void maxSubSum(vector arr, int p, int q, int &mp, int &mq, double &maxSum); vector arr; int N=0; int mp=0, mq=0; double tmp=0, maxSum=0; int main(){ cin>>N; for(int i=1; i>tmp; arr.push_back(tmp); } maxSubSum(arr, 0, N-1, mp, mq, maxSum); printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\",maxSum, mp, mq); for(int i=mp; i arr, int p, int q, int &mp, int &mq, double &maxSum){ //ËæπÁïåÊÉÖÂÜµ if(p>=q){ mp=mq=p; maxSum=arr[p]; return ; } int mid = p+(q-p)/2; //mid = (p+q)/2; int lmp, lmq, rmp, rmq; double lmsum, rmsum, midrsum=0, midlsum=0; double tmprsum=0, tmplsum=0; //ÈÄíÂΩíÊÉÖÂÜµ maxSubSum(arr, p, mid, lmp, lmq, lmsum); maxSubSum(arr, mid+1, q, rmp, rmq, rmsum); /* midsumÈîôËØØÔºåÂéüÊú¨ÊÉ≥midsumÂ∫îËØ•Ëµ∑Ê≠¢‰∫émpÔºå mqÔºåÊÉ≥ÂΩìÁÑ∂‰ª•‰∏∫Ë¶ÅÂåÖÂê´lmsumÔºårmsum‰∫ÜÔºõ Â∫îËØ•ÊåâÁÖß‰ªé‰∏≠Èó¥Âêë‰∏§ËæπÊâ©Â±ï */ int midp=mid, midq=mid+1; for(int j=mid; j>=p; j--){ tmplsum+=arr[j]; if(tmplsum>midlsum){ midlsum=tmplsum; midp=j; } } for(int i=mid+1; imidrsum){ midrsum=tmprsum; midq=i; } } double midsum=midlsum+midrsum; if(lmsum>rmsum && lmsum>midsum){ mp=lmp; mq=lmq; maxSum=lmsum; } else if(rmsum >lmsum && rmsum>midsum){ mp=rmp; mq=rmq; maxSum=rmsum; } else{ mp=midp; mq=midq; maxSum=midsum; } return ; } 4. Ê≠£Âèç‰∏§ÈÅçÊâ´ÊèèÊ≥ï O(N) Á±ª‰ºº‰∫éÂâçÁºÄÂíåÔºü #include using namespace std; double maxSubSum(vector arr, int l, int r); vector arr; int N; double tmp; int main(){ cin>>N; for(int i=1; i>tmp; arr.push_back(tmp); } maxSubSum(arr, 0, N-1); return 0; } double maxSubSum(vector arr, int l, int r){ int mp,mq, p, q; mp=mq=p=q=l; int i; double maxsum=0, foresum=0, maxforesum=0; for(p=l; p0){//ÊâæÂà∞Â§ß‰∫é0ÁöÑÈ°π //printf(\"p: %.2f\\n\",arr[p]); //sum=arr[p]; foresum=0; maxforesum=0; for(i=p; imaxforesum){ maxforesum=foresum; q=i; //printf(\"maxforesum: %.2f\\n\",maxforesum); } if(foresummaxsum){ maxsum=maxforesum; mp=p; mq=q; } break; } } p=i; } } printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\",maxsum, mp, mq); for(int i=mp; i 5. Âä®ÊÄÅËßÑÂàídp O(N) Â∞ÜÈóÆÈ¢òÂàÜËß£ËÄÉÂØüÔºåÈ¶ñÂÖàÔºåÊúÄÂ§ßÂ≠êÂ∫èÂíåÂØπÂ∫îÁöÑÂå∫Èó¥‰∏∫[p, q]ÔºåÁõ¥ËßÇ‰∏äÊÑüËßâÂà∞Ôºå‰∏ãÊ†áÂèØ‰ª•‰Ωú‰∏∫ÊüêÁßç‚ÄúÁä∂ÊÄÅ‚ÄùÁöÑÊ†áËØÜ„ÄÇÁä∂ÊÄÅÂÆö‰πâÔºödp[i]Êó∂‰ª•‰∏ãÊ†ái‰∏∫ÁªìÂ∞æÁöÑÊúÄÂ§ßÂ≠êÂ∫èÂàóÁä∂ÊÄÅËΩ¨ÁßªÂÖ≥Á≥ª/ÊñπÁ®ãÔºö ÂΩìdp[i-1] > 0Êó∂Ôºådp[i] = dp[i-1]+arr[i]ÂΩìdp[i-1] ÂàùÂßãÂåñÔºödp[0]=arr[0]; ‰ª£Á†ÅÂÆûÁé∞Â¶Ç‰∏ãÔºö #include using namespace std; template elemType maxSubSum(vector arr, int r, int l); int N; int main(){ cin>>N; vector arr; double tmp; for(int i=0; i>tmp; arr.push_back(tmp); } double maxsum=maxSubSum(arr, 0, N-1); return 0; } template//‰ΩøÁî®Ê®°ÊùøÊù•Êèê‰æõÊõ¥Â•ΩÁöÑÂèØÁßªÊ§çÊÄß elemType maxSubSum(vector arr, int r, int l){ int size = arr.size(); //‰∏ãÊ†á‰∏∫iÂ§ÑÁöÑdpÔºå‰ª£Ë°®Ôºö‰ª•i‰∏∫ÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑÊúÄÂ§ßÂ≠êÂ∫èÂàóÂíå //ÂΩìdp[i-1] > 0Êó∂Ôºådp[i] = dp[i-1]+arr[i] //ÂΩìdp[i-1]0){ dp+=arr[i]; } else{ dp=arr[i]; } if(dp>maxdp){ maxdp=dp; } } //printf(\"maxdp: %.\") cout 6. ÁÆÄÂçïÊâ´Êèè O(N) È¶ñÂÖàÊâ´ÊèèÂà∞‰∏Ä‰∏™Â§ß‰∫éÈõ∂ÁöÑÊï∞Ôºå‰ª•ÂÆÉ‰∏∫Ëµ∑ÁÇπÔºåÂêëÂêéÁ¥ØÂä†ÂæóÂà∞thisSumÔºåÊØèÊ¨°Á¥ØÂä†ÂæóÂà∞ÁöÑhisSum‰∏émaxSumÊØîËæÉÂπ∂ÂéªÁïôÔºåÂõ†‰∏∫maxSumÂØπÂ∫îÁöÑÂ≠êÂ∫èÂàó‰∏çËÉΩ‰ª•Ë¥üÊï∞ÂºÄÂ§¥ÔºåÊâÄ‰ª•ÔºåÂΩìthisSumÈáçÁΩÆÁ¥ØÂä†Ëµ∑ÁÇπÂíåthisSumÔºåÈáçÂ§ç‰∏äÈù¢ÁöÑÊµÅÁ®ã„ÄÇ #include using namespace std; double maxSubsequenceSum(vector a, int &start, int &end); int N; double maxsum; int p, q; int main(){ cin>>N; vector arr; double tmp; for(int i=0; i>tmp; arr.push_back(tmp); } double maxsum=maxSubsequenceSum(arr, p, q); printf(\"maxSum:%.2f\\nmp:%d\\nmq:%d\\n\",maxsum, p, q); return 0; } //Êûö‰∏æÂàÜÊûêÊîπËøõ /* È¶ñÂÖàÊâ´ÊèèÂà∞‰∏Ä‰∏™Â§ß‰∫éÈõ∂ÁöÑÊï∞Ôºå‰ª•ÂÆÉ‰∏∫Ëµ∑ÁÇπÔºåÂêëÂêéÁ¥ØÂä†ÂæóÂà∞thisSumÔºå ÊØèÊ¨°Á¥ØÂä†ÂæóÂà∞ÁöÑhisSum‰∏émaxSumÊØîËæÉÂπ∂ÂéªÁïôÔºå Âõ†‰∏∫maxSumÂØπÂ∫îÁöÑÂ≠êÂ∫èÂàó‰∏çËÉΩ‰ª•Ë¥üÊï∞ÂºÄÂ§¥ÔºåÊâÄ‰ª•ÔºåÂΩìthisSum a, int &start, int &end){ int maxSum=0, thisSum=0, starttmp=0; start=end=0; int size= a.size(); for(int i=0; imaxSum){ maxSum=thisSum; start=starttmp;//Âè™ÊúâthisSum>maxSumÊó∂ÊâçÊõ¥Êñ∞start end=i; } } if(start==size){start=end=0;} return maxSum; } ÊÄùËÄÉÈ¢ò1.3 Q1ÔºéÂ∞Ü‰æãÈ¢ò1.3ÁöÑÁ∫øÊÄßÂ§çÊùÇÂ∫¶ÁÆóÊ≥ïÂÜôÊàê‰º™‰ª£Á†Å„ÄÇ Q2ÔºéÂú®‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠ÂØªÊâæ‰∏Ä‰∏™Âå∫Èó¥Ôºå‰ΩøÂæóÂå∫Èó¥ÂÜÖÁöÑÊï∞Â≠ó‰πãÂíåÁ≠â‰∫éÊüê‰∏™‰∫ãÂÖàÁªôÂÆöÁöÑÊï∞Â≠ó„ÄÇ Q3ÔºéÂú®‰∏Ä‰∏™‰∫åÁª¥Áü©Èòµ‰∏≠ÔºåÂØªÊâæ‰∏Ä‰∏™Áü©ÂΩ¢ÁöÑÂå∫ÂüüÔºå‰ΩøÂÖ∂‰∏≠ÁöÑÊï∞Â≠ó‰πãÂíåËææÂà∞ÊúÄÂ§ßÂÄº„ÄÇ Ëß£Á≠îÔºö Q2ÔºöÂèÇËÄÉ‚Äú‰∏§Êï∞‰πãÂíå‚ÄùÈóÆÈ¢òÊ±ÇËß£ÁöÑÊÄùË∑ØÔºö procedure twoSum(list, target) map: list[i]->i for e, i in list, listindex: if target - e not in map : map[e] = i; else if target - e in map : print(map[e], map[target-e]) //ÊâæÂà∞‰∫Ü Ëß£Á≠îÔºö step1: Âª∫Á´ãÂ≠óÂÖ∏/ÂìàÂ∏åË°®mapÔºöÊï∞ÁªÑlistÁöÑÂâçÁºÄÂíå -> ÂâçÁºÄÂíåÂØπÂ∫îÁöÑ‰∏ãÊ†áqÂõ†‰∏∫ÔºåËã•S(p,q)==targetÔºå Â∞±ÊúâS(1, p-1) = S(1, q) - S(p,q) = S(1, q) - target step2: ÈÅçÂéÜÂà∞qÔºåÂæóÂà∞S(1,q)ÔºåÊü•ËØ¢map‰∏≠ÊúâÊó†key=S(1, q) - target Â¶ÇÊûúÊúâÔºåÂàôËøîÂõûp=map[key]+1 ÂÖ∂‰∏≠ÔºåmapÁöÑÂª∫Á´ãÂèØ‰∏éÈÅçÂéÜÂêåÊó∂ËøõË°å 1.4 ÂÖ≥‰∫éÊéíÂ∫èÁöÑËÆ®ËÆ∫ ÊÄùËÄÉÈ¢ò1.4 Q1ÔºéËµõË∑ëÈóÆÈ¢òÔºàGSÔºâ„ÄÇ ÂÅáÂÆöÊúâ25ÂêçÁü≠Ë∑ëÈÄâÊâãÊØîËµõ‰∫âÂ§∫Ââç‰∏âÂêçÔºåËµõÂú∫‰∏äÊúâ‰∫îÊù°ËµõÈÅìÔºå‰∏ÄÊ¨°ÂèØ‰ª•Êúâ‰∫îÂêçÈÄâÊâãÂêåÊó∂ÊØîËµõ„ÄÇÊØîËµõÂπ∂‰∏çËÆ°Êó∂ÔºåÂè™ÁúãÁõ∏Â∫îÁöÑÂêçÊ¨°„ÄÇÂÅáËÆæÈÄâÊâãÁöÑÂèëÊå•ÊòØÁ®≥ÂÆöÁöÑÔºå‰πüÂ∞±ÊòØËØ¥Â¶ÇÊûúÁ∫¶Áø∞ÊØîÂº†‰∏âË∑ëÂæóÂø´ÔºåÂº†‰∏âÊØîÂáØÂà©Ë∑ëÂæóÂø´ÔºåÁ∫¶Áø∞‰∏ÄÂÆöÊØîÂáØÂà©Ë∑ëÂæóÂø´„ÄÇÊúÄÂ∞ëÈúÄË¶ÅÂá†Ê¨°ÊØîËµõÊâçËÉΩÂÜ≥Âá∫Ââç‰∏âÂêçÔºü Q2ÔºéÂå∫Èó¥ÊéíÂ∫è„ÄÇ Â¶ÇÊûúÊúâN‰∏™Âå∫Èó¥[l1,r1],[l2,r2],‚Ä¶,[lN,rN]ÔºåÂè™Ë¶ÅÊª°Ë∂≥‰∏ãÈù¢ÁöÑÊù°‰ª∂Êàë‰ª¨Â∞±ËØ¥Ëøô‰∫õÂå∫Èó¥ÊòØÊúâÂ∫èÁöÑÔºöÂ≠òÂú®xi‚àà[li,ri]ÔºåÂÖ∂‰∏≠i=1,2,‚Ä¶,N„ÄÇ ÊØîÂ¶ÇÔºå[1, 4]„ÄÅ[2, 3]Âíå[1.5, 2.5]ÊòØÊúâÂ∫èÁöÑÔºåÂõ†‰∏∫Êàë‰ª¨ÂèØ‰ª•‰ªéËøô‰∏â‰∏™Âå∫Èó¥‰∏≠ÈÄâÊã©1.1„ÄÅ2.1Âíå2.2‰∏â‰∏™Êï∞„ÄÇÂêåÊó∂[2, 3]„ÄÅ[1, 4]Âíå[1.5, 2.5]‰πüÊòØÊúâÂ∫èÁöÑÔºåÂõ†‰∏∫Êàë‰ª¨ÂèØ‰ª•ÈÄâÊã©2.1„ÄÅ2.2Âíå2.4„ÄÇ‰ΩÜÊòØ[1, 2]„ÄÅ[2.7, 3.5]Âíå[1.5, 2.5]‰∏çÊòØÊúâÂ∫èÁöÑ„ÄÇ ÂØπ‰∫é‰ªªÊÑè‰∏ÄÁªÑÂå∫Èó¥ÔºåÂ¶Ç‰ΩïÂ∞ÜÂÆÉ‰ª¨ËøõË°åÊéíÂ∫èÔºü "},"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp2.html":{"url":"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/cp2.html","title":"cp2","keywords":"","body":""},"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/":{"url":"ReadingNotes/ËÆ°ÁÆó‰πãÈ≠Ç-Âê¥ÂÜõ/","title":"index","keywords":"","body":" ÂºïÂ≠ê ËÆ°ÁÆóÁöÑÊú¨Ë¥®-‰ªéÊú∫Ê¢∞Âà∞ÁîµÂ≠ê Á¨¨‰∏ÄÁ´† ÊØ´ÂéòÂçÉÈáå‰πãÂ∑Æ-Â§ß O Ê¶ÇÂøµ Á¨¨‰∫åÁ´† ÈÄÜÂêëÊÄùËÄÉ-‰ªéÈÄíÊé®Âà∞ÈÄíÂΩí "},"ReadingNotes/ËÆ∫ÈùíÂπ¥‰øÆÂÖª-Âº†Áî≥Â∫ú-1946.html":{"url":"ReadingNotes/ËÆ∫ÈùíÂπ¥‰øÆÂÖª-Âº†Áî≥Â∫ú-1946.html","title":"ËÆ∫ÈùíÂπ¥‰øÆÂÖª-Âº†Áî≥Â∫ú-1946","keywords":"","body":"ËÆ∫ÈùíÂπ¥‰øÆÂÖª-Âº†Áî≥Â∫ú-1946 ÂøÉ‰∏çÈùôÔºåÂÜô‰∏çÂá∫Á≥ªÁªüÊ∑±ÂàªÁöÑ‰∏úË•øÊù•„ÄÇÊó†ÂèØÂ¶Ç‰ΩïÔºåËøôÊòØÈöè‰æøË∞àË∞àÁΩ¢„ÄÇ‰ΩÜËøôÊ†∑Â≠êÔºå‰πüËÆ∏ÊØîËµ∑Ë£ÖËÖî‰ΩúÂäøÔºåÊùøËµ∑Èù¢Â≠îÊù•ËØ¥ËØùÔºåËØªËÄÖÂèØ‰ª•ÊÑüÁùÄÊõ¥‰∫≤Âàá‰∏ÄÁÇπÂÑø„ÄÇ ÂÖ≥‰∫éÈùíÂπ¥‰øÆÂÖªÔºåÊàëÁé∞Âú®Êúâ‰∏â‰∫îÁÇπÊÑèÊÄùÊ∂å‰∏äÂøÉÂ§¥„ÄÇÁé∞Âú®Â∞±‰ª•Ê¨°ÂàÜÂà´ÂÜôÂú®‰∏ãËæπ„ÄÇ Á¨¨‰∏ÄÔºåÊàë‰πü‰∏éËÆ∏Â§öÂè§‰∫∫‰∏ÄÊ†∑ÔºåÊÄªËßâÁùÄ‰∏Ä‰∏™ÈùíÂπ¥Ôºå‰∏∫Â≠¶ÂøÖÂÖàÁ´ãÂøó„ÄÇÂ∞±‰ª§‰∏Ä‰∏™‰∫∫Ôºå‰∏çÂøÖ‰∏ìÈó®ËØª‰π¶ÔºåÊúâ‰∏Ä‰∏™Â§ßÂøóÂêëÔºå‰πüÊòØÈùûÂ∏∏‰πãË¶ÅÁ¥ß„ÄÇ‰∏Ä‰∏™‰∫∫‰ΩÜ‰ª§Â§öÂ∞ëÊúâÁÇπÂÑøÁü•ËØÜÔºåÂ§öÂ∞ëÊúâÁÇπÂÑøËá™ËßâÔºåÈÇ£Â∞±Ë¶ÅÊúâ‰∏Ä‰∏™ÂøóÂêëÔºåËøôÊ†∑Â≠êÊâçÂèØ‰ª•ÂÖçÂæóÈ∫ªÈ∫ªËÉ°ËÉ°Ëøá‰∏ÄËæàÂ≠ê„ÄÇ Ëá≥‰∫éÁ´ãÂøó‰Ωú‰ªÄ‰πàÔºåÈÇ£Âç¥ÊúâÁÇπÂÑøÈöæËØ¥Ôºå‰ΩÜËá≥‰ΩéÈôêÂ∫¶ÔºåÊúÄ‰∏ÄËà¨Âú∞Êù•ËØ¥Ôºå‰Ω†Ë¶ÅÁ´ãÂøó‰Ωú‰∏Ä‰∏™Â•Ω‰∫∫„ÄÇËøôËØù‰πüËÆ∏Â§ßÁ©∫ÔºåÈÇ£Â∞±ÂèçËøáÊù•ËØ¥‰πüÂèØÔºö‰Ω†ÊÄªË¶ÅÁ´ãÂøó‰∏ç‰∏∫ÊÅ∂„ÄÇÂá°‰Ω†Âπ≥Â∏∏È™Ç‰∫∫ÁöÑ‰∫ãÔºå‰Ω†ÊÄªË¶Å‰∏ãÂÜ≥ÂøÉ‰∏Ä‰ª∂‰πü‰∏ç‰Ωú„ÄÇËøô‰∏ÄÁÇπÂú®‰ªäÊó•ÂÆûÂú®ÊúÄÊúÄË¶ÅÁ¥ß„ÄÇËÆ∏Â§ö‰∫∫‰∏§Èù¢‰ΩúÈ£éÔºåËÆ∏Â§ö‰∫∫Âè£ÊòØÂøÉÈùûÔºåËÆ∏Â§ö‰∫∫Âè£Áß∞Ê∞ë‰∏ªËÄåË°åÂèçÊ∞ë‰∏ªÔºåËÆ∏Â§ö‰∫∫Â§©Â§©È™ÇÂΩìÂ±ÄÔºåËÄå‰ªñÁöÑË°å‰∏∫Ê≤°Êúâ‰∏ÄÁÇπ‰∏ç‰∏éÂΩìÂ±Ä‰∏ÄÊ†∑ÔºåÈô§‰∫ÜÂú∞‰Ωç‰∏çÂêå‰ª•Â§ñ„ÄÇËØ∏Â¶ÇÊ≠§Á±ªÔºåÈÉΩÂõ†‰ªñÊ≤°ÊúâÂùöÂÆöÂøóÂêëÁöÑÁºòÊïÖ„ÄÇ ËØ¥ÂæóÊõ¥ÂÖ∑‰Ωì‰∏ÄÁÇπÔºå‰∏Ä‰∏™‰∫∫ÊÄªË¶Å‰Ωú‰∏Ä‰∏™Âêà‰πéÊó∂‰ª£ÁöÑ‰∫∫ÔºåÂõ†Ê≠§Â∫îËØ•ÂØπ‰∫éËá™Â∑±ÁöÑÊó∂‰ª£‰∏çÂèØ‰∏çÊúâ‰∏ÄÁÇπÂàáÂÆûÁöÑËÆ§ËØÜ„ÄÇ‰ΩÜËøôÂú∞ÊñπÂæàÂÆπÊòìÁäØ‰∏Ä‰∏™ÊØõÁóÖÔºåÈÇ£Â∞±ÊòØÈöèÊ≥¢ÈÄêÊµÅ„ÄÇ‰∏Ä‰∏™‰∫∫Áü•ËØÜË°åÂä®Âêà‰πéÊó∂‰ª£ÊòØÂøÖË¶ÅÁöÑÔºå‰ΩÜÈöèÊ≥¢ÈÄêÊµÅÂèØÂ∞±Â§ßË¶Å‰∏çÂæó„ÄÇÊÄéÊ†∑ÂÖçÊéâËøôÁßçÊØõÁóÖÔºåÈÇ£Â∞±Ë¶ÅÊ≥®ÊÑèËá™ËßâÔºå‰ΩúÂæó‰∫ÜËá™Â∑±ÁöÑ‰∏ªÂÆ∞ÔºåÊúâËá™Âæó‰πãÂ§ÑÔºåÂ∞ΩÈáèÈò≤Â§áËôöËç£ÔºåÂπ∂‰∏îÂØπÊó∂‰ª£ÊúâÊ∑±ÂàªÁöÑËÆ§ËØÜ„ÄÇ ‰∫∫ÊÄéÊ†∑ÊâçËÉΩÊúâÂøóÔºåÂ∞§ÂÖ∂ÊÄéÊ†∑ÊâçËÉΩÊúâÂ§ßÂøóÔºåËøôÂéüÂõ†È¢á‰∏çÁÆÄÂçï„ÄÇ‰ªéÂ§ñÊù•ÂéüÂõ†ËØ¥ÔºåËøô‰∏ÄÁßçË¶ÅÈù†Áà∂ÂÖÑÂ∏àÈïøÁöÑÂëäËØ≠ÊïôÂØº„ÄÇËøô‰∏çÊòØ‰∫∫‰∫∫ÊâÄÂèØÂæó„ÄÇ‰∏ÄÁßçÈù†ÂêåÂ≠¶ÊúãÂèãÁöÑÂàáÁ£ãÈºìÂä±„ÄÇËøô‰πüÂèØÈÅá‰∏çÂèØÊúü„ÄÇÂè¶‰∏ÄÁßçÂ∞±ÊòØÈù†ÈòÖÂêç‰∫∫‰º†ËÆ∞ÔºåËØªÂ§ßÂÆ∂Ëëó‰ΩúÔºõÁîöËá≥ÁúãÂêçÂÆ∂Â∞èËØ¥„ÄÅÊàèÂâß„ÄÅÁîµÂΩ±Ôºå‰πüÈÉΩ‰ºöÊúâÂ•ΩÂ§Ñ„ÄÇËøôÊòØ‰∫∫‰∫∫ÈÉΩÂèØ‰ΩúÂæóÂà∞ÁöÑ„ÄÇ‰ΩÜÊòØ‰Ω†ËøôÊ†∑Â≠ê‰ΩúÊó∂Ôºå‰Ω†ÂøÖÊáÇÂæó‰ΩìÂØüÔºåÊáÇÂæó‰∏éÂ•Ω‰∫∫ÁúãÈΩê„ÄÇÊç¢Ë®Ä‰πãÔºåË¶Å‰Ωú‰∏Ä‰∏™Â•Ω‰∫∫ÔºåÈÄÇÂΩìÁöÑËá™ËßâÊÄªÊòØÂøÖË¶ÅÁöÑ„ÄÇ ÂÜçËøõ‰∏ÄÊ≠•ËØ¥ÔºåÂú®‰ªäÊó•Ëøô‰∏™Êó∂‰ª£ÔºåË¶Å‰Ωú‰∏Ä‰∏™Â•Ω‰∫∫ÔºåÊãøÊóßËØùËØ¥Ôºå‚ÄúÊ∞ëËÉûÁâ©‰∏é‚ÄùÊÄªÊòØ‰∏Ä‰∏™ÂøÖË¶ÅÁöÑÂá∫ÂèëÁÇπ„ÄÇËØ¥ÂæóÈÄö‰øó‰∏ÄÁÇπÔºå‰Ω†Ë¶ÅÊúâ‰∏ÄÁßçÊ≤ªÁóÖÊïë‰∫∫ÁöÑÊÑèË∂£„ÄÇ‰Ω†‰∏çË¶ÅÊääËá™Â∑±Â≠§Á´ãÔºå‰Ω†Ë¶Å‰Ωø‰∏ñÁïåÂõ†Êúâ‰Ω†ËÄå‰∏çÂêåÔºå‰ΩÜ‰Ω†ÈÉΩ‰∏çÂèØÊÄªËßâÁùÄ‰Ω†‰∏é‰∏ÄËà¨‰∫∫‰∏çÂêå„ÄÇ Á¨¨‰∫åÔºåÂÖ≥‰∫é‰∏∫Â≠¶ËØª‰π¶ÔºåÊàëÁâπÂà´ÊÑøÊÑèÂëäËØâ‰Ω†‰∏Ä‰∏™‚Äú‰∏ì‚ÄùÂ≠ó„ÄÇÊú¨Êù•ÔºåÂá°‰∫ãÔºå‚Äú‰∏ì‚ÄùÈÉΩÊòØÊúÄÈ¶ñË¶ÅÁöÑÊàêÂäüËØÄ„ÄÇËØª‰π¶‰∏∫Â≠¶Ôºå‰πü‰∏çÂ§ñÊòØ„ÄÇ‰∏Ä‰∏™‰∫∫Ë¶ÅÂÆπÊòìÊúâÊàêÔºåÈÇ£Â∞±ÊúÄÂ•ΩÂè™Âπ≤‰∏ÄÊ†∑‰∫ã„ÄÇÂè§‰∫∫ËÆ≤Â≠¶ÔºåÂ∏∏ËØ¥Âçö‰∏éÁ∫¶„ÄÇ‰ΩÜÂçöÂ¶ÇÊ≤°Êúâ‰∏≠ÂøÉÔºåÂøÖËá≥Ê≥õÊª•Êó†ÂΩíÔºå‰∫ãÂÄçÂäüÂçäÔºåË¥πÂäõËÄå‰∏çËÆ®Â•Ω„ÄÇ‰∏Ä‰∏™‰∫∫ËØª‰π¶Ôºå‰∏éÂÖ∂ÂØπ‰∏ÄÂàáÁü•ÈÅì‰∏ÄÁÇπÔºåÁ°Æ‰∏çÂ¶ÇÂØπ‰∏ÄÁÇπÁü•ÈÅì‰∏ÄÂàá„ÄÇÁ≠âÂà∞‰Ω†Êúâ‰∫Ü‰∏≠ÂøÉÔºåÊúâ‰∫Ü‰∏ªÂÆ∞ÔºåÊúâ‰∫Ü‰∏ìÈïø‰πãÂêéÔºåÂÜçÂØπ‰∏ÄÂàáÈÉΩÁü•ÈÅì‰∏ÄÁÇπÔºåÈÇ£Â∞±Ê≠£ÂèØ‰ª•‰Ωú‰Ω†ÂéüÊù•‰∏ÄÁÇπÁöÑÂøÖË¶ÅË°•Âä©„ÄÇÊâÄË∞ìÁî±ÂçöËøîÁ∫¶ÔºåËÉΩÁ∫¶Ôºå‰πüÂ∞±‰∏çÂ¶®Âçö„ÄÇ ÂâçÂ∑≤ËØ¥ËøáÔºåË¶ÅËØªÂ§ßÂÆ∂ÁöÑÂêçËëó„ÄÇËøô‰πüÊòØ‰∏∫Â≠¶ËØª‰π¶‰∏äÁöÑ‰∏Ä‰∏™ÂøÖË¶ÅÁöÑË¶ÅËØÄ„ÄÇ‰ª•‰∏ìËÄåË®ÄÔºå‰∏éÂÖ∂Ê≥õËßàÁæ§Á±çÔºå‰∏çÂ¶ÇÁ≤æËØª‰∏Ä‰π¶„ÄÇ‰ΩÜËøô‰∏Ä‰π¶ÂøÖÈ°ªÊòØÂ§ßÂÆ∂ÂêçËëóÔºå‰∏çÂàäÁöÑÁªèÂÖ∏ÔºåÊÑèÂë≥Ê∑±ÈïøÔºå‰Ωø‰Ω†Á†îÂØª‰∏çÂ∞ΩËÄÖ„ÄÇËøôÁßç‰π¶Ôºå‰∏çÊãòÈÇ£‰∏™ÊñáÊòéÂõΩÂÆ∂ÔºåËá™Âè§‰ª•Êù•ÈÉΩÊòØÊúâÁöÑ„ÄÇ‰∏Ä‰∏™‰∫∫ËØª‰π¶ÔºåÊúÄÂ•ΩËØªÂà∞Ê∑±ÈÄ†Ëá™Âæó„ÄÇÂ§ßÂÆ∂ÁöÑÂêçÂÖ∏ÂΩìÁÑ∂ÈÉΩÊòØÊ∑±ÈÄ†Ëá™ÂæóÁöÑ‰π¶„ÄÇ‰∏çÊ∑±ÈÄ†ËÄåÊúâËá™ÂæóÂ§ÑÔºåÂøÖ‰∏ç‰ºöÂºÄËæüÊñ∞Á∫™ÂÖÉ„ÄÅÂàõÂèëÊñ∞Êó∂‰ª£„ÄÇÂ§ßÂÆ∂ÂêçËëóÂøÖÊúâ‰∏çÂêåÊ∞îÂë≥ÔºåÊ≠£‰∏éÂêç‰πê‰∏ÄËà¨„ÄÇ‰Ω†Â¶Ç‰∏éÂÆÉÂåñ‰∫ÜÔºå‰Ω†Ëá™‰πüÂèØ‰ª•‰∏çÂêå„ÄÇ Êàë‰ª•ÂâçÂ∞ù‰∏∫ÈùíÂπ¥ËØªËÄÖÂÜôËøá‰∏ÄÁØá‰ª•‚ÄúÂàáÂÆûÔºåÊ∑±ÂÖ•Ôºå‰∏ì‚Äù‰∏∫È¢òÁöÑ‰∏úË•ø„ÄÇÊ∑±ÂÖ•‰∏é‰∏ìÔºåÂΩìÁÑ∂ÊúâËÅîÂ∏¶ÂÖ≥Á≥ª„ÄÇÊ≠§Â§ñÔºåÊúÄË¶ÅÁ¥ß‰πüÁõ∏ÂÖ≥ÁöÑÔºåÈÇ£Â∞±Ë¶ÅËØ¥Âà∞ÂàáÂÆû„ÄÇ‰∏Ä‰∏™‰∫∫‰Ωú‰∫∫ÔºåÊúÄÊÄï‰ΩúÂà∞È£òÈ£òÁÑ∂„ÄÇ‰∏Ä‰∏™‰∫∫Âú®Êúâ‰∫õÂú∞ÊñπËÉΩÂ§üÈ£òÈ£òËã•‰ªôÔºåÊú™Â∞ùÊ≤°ÊúâÂ•ΩÂ§Ñ„ÄÇ‰ΩÜÂ¶ÇÂÖ®‰∏çÁùÄÂÆûÔºåÂÖ®‰∏çÂÆûÂú®ÔºåÂÖ®‰∏çÂÖ•ÈáåÔºåÂ∞ΩÊòØËÇ§Èù¢Ë°®ÊØõÔºåÊ≤πËÖîÊªëË∞ÉÔºåËä±Ë®ÄÂ∑ßËØ≠ÔºåÈÇ£Â∞±Âè™ËÉΩËØ¥‰ªñÂú®‰Ωú‰∫∫‰∏äÂ∑≤ÁªèÂ§±Ë¥•„ÄÇËØª‰π¶‰∏∫Â≠¶‰πüÂ¶ÇÊ≠§„ÄÇ‰∏çÊãòÊÄéÊ†∑ÊäΩË±°ÁöÑÂ≠¶ÈóÆÔºåÊúÄÂêé‰πü‰∏çËÉΩ‰∏çÂàáÂÆûÈôÖ„ÄÇÊúâÁöÑ‰∫∫ËÆ≤Â≠¶Â∞ö‚ÄúÁ©∫ÁÅµ‚ÄùÔºåÂÖ∂ÂÆûÊ≠£ÊòØ‰∏∫ÁöÑ‚ÄúÂ¶ÇÂÆû‚ÄùËÄå‰∏çÊâßÁùÄ„ÄÇÂÅá‰Ωø‰∏Ä‰∏™‰∫∫‰∏ÄÁîü‰∏∫Â≠¶ÔºåËÄåÂç¥ÂÖ®‰∏éÂÆûÈôÖ‰∏çÁõ∏Âπ≤ÔºåÈÇ£Â∞±ÊòØÊó∂ÂäõÁ≤æÁ•ûÁôΩË¥π‰∫Ü„ÄÇÂâçËØ¥ËØª‰π¶Ë¶ÅËØªÂ§ßÂÆ∂ÂêçËëóÔºåÂÅá‰ΩøËøôÁßç‰π¶ÊòØÁé∞‰ª£ÁöÑÊàñËÆ≤Áé∞‰ª£ÁöÑÔºåÈÇ£Â∞±Êõ¥Â•Ω„ÄÇÂΩìÁÑ∂ÊàëÂπ∂‰∏çÊòØËØ¥Âè§‰π¶Â∞±‰∏çÂàáÂÆûÈôÖ„ÄÇ ÂÜçË°•ÂÖÖ‰∏ÄÂè•„ÄÇ‰∏Ä‰∏™‰∫∫ËØª‰π¶Ë¶Å‰∏ìÔºåË¶ÅËØªÂêçËëóÔºåËøôÈÉΩËØ¥Ëøá‰∫Ü„ÄÇ‰ΩÜ‰∏Ä‰∏™‰∫∫Êúâ‰∏∞ÂØåÁöÑ‰∫∫ÁîüÂ∏∏ËØÜ‰πüÊúâÂÖ∂ÂøÖË¶ÅÔºåÁâπÂà´ÊòØÂÖ≥‰∫é‰Ω†ÁöÑÊó∂‰ª£Ôºå‰Ω†ÁöÑ‰∏ñÁïåÔºå‰Ω†ÁöÑÂõΩÂÆ∂Ôºå‰Ω†ÁöÑÁ§æ‰ºöÔºå‰ª•Âèä‰Ω†ÁöÑË∫´‰ΩìÁ≤æÁ•ûÁöÑÂ∏∏ËØÜ„ÄÇ‰∏Ä‰∏™‰∫∫Â¶ÇÊûúÊ≤°ÊúâÂÖ≥‰∫éÁîüÁêÜ„ÄÅÂøÉÁêÜ„ÄÅÂç´ÁîüÁöÑÂ∏∏ËØÜÔºåÂøÖ‰ºöÂ∏∏Âú®Ëã¶ÊÅº‰∏≠„ÄÇ Á¨¨‰∏âÔºåÂâçËæπÂ∑≤ÁªèÊèêÂà∞Ëá™ËßâÔºåÊàëÁé∞Âú®Ë¶ÅÊõ¥Ëøõ‰∏ÄÊ≠•ÔºåÂÜçÂä†‰∏äÂèçÁúÅ„ÄÇ‰∏Ä‰∏™‰∫∫‰∏çËØÜ‰∏çÁü•ÁöÑÁîüÊ¥ªÊòØ‰∏ÄÁßçÊó†ÊÑèÊÄùÁöÑÁîüÊ¥ªÔºõ‰∏Ä‰∏™‰∫∫‰∏çÈïøËøõÁöÑÁîüÊ¥ª‰πüÂèØËØ¥ÊòØ‰∏éÊ≠ªÂ∑Æ‰∏çÂ§öÁöÑÁîüÊ¥ª„ÄÇ‰∫∫ÊÄéÊ†∑ÊâçËÉΩ‰∏çÊñ≠ÈïøËøõÔºüÊù°‰ª∂‰πã‰∏ÄÂ∞±ÊòØÊó∂Êó∂ÂèçÁúÅ„ÄÇÊÄéÊ†∑ÂèçÁúÅÔºüÂ∞±ÊòØ‰Ω†Ë¶ÅÊó∂Êó∂Ëá™Â∑±Ê£ÄËÆ®ÔºöËøô‰ª∂‰∫ãÊàë‰∏∫‰ªÄ‰πà‰ΩúÂæóÂæàÊàêÂäüÔºüÈÇ£‰ª∂‰∫ãÊàë‰∏∫‰ªÄ‰πàÂ§±Ë¥•‰∫ÜÔºüÊò®Â§©ÊàëË∫´‰ΩìÈÇ£Ê†∑Â•ΩÔºå‰ªäÂ§©Êàë‰∏∫‰ªÄ‰πàÁóÖ‰∫ÜÔºü‰ª•ÂâçÊàëËøôÊ†∑‰ΩúÂæàÈ°∫Âà©ÔºåÁé∞Âú®‰∏∫‰ªÄ‰πàË°å‰∏çÈÄö‰∫ÜÔºü‰∏Ä‰∏™ÊúâÁêÜÊÄßÁöÑ‰∫∫Ôºå‰∏ç‰ΩÜË¶Å‰∫ã‰∫ãËá™ËßâÔºå‰∫ã‰∫ãË¶Å‰ΩúÂæóÊúâÁêÜÁî±ÔºåËÄå‰∏î‰πüË¶ÅÊàêÂäüÁü•ÈÅìÁêÜÁî±ÔºåÂ§±Ë¥•‰πüÁü•ÈÅìÁêÜÁî±„ÄÇÂèçÁúÅ‰∫Ü‰ª•ÂêéÔºåÊõ¥‰∏çÊÉÆ‰∫éË¥•ÔºåËøô‰æøÊòØËøõÊ≠•ÊâÄÁî±Êàê„ÄÇ ÊàëËøëÊù•ÂæàÊÑüÂà∞ÂèçÁúÅÁöÑÂøÖË¶Å„ÄÇÁé∞Âú®ËÆ∏Â§ö‰∫∫‰Ωú‰∫ãÔºåÂ¶ÇÊúâÈîôËøáÔºåÊÄªÊòØÂä†Âú®Âà´‰∫∫Ë∫´‰∏äÔºåÊàñÂä†Âú®‰∏çËÉΩËá™Ë°®ÁöÑÂÆ¢ËßÇÁéØÂ¢ÉË∫´‰∏äÔºåÁªù‰∏çËÇØÂõûÂ§¥ÁúãÁúãËá™Â∑±„ÄÇËøôÊ†∑ÁöÑÂùöÂÜ≥‰ø°ÂøÉÔºåËøôÊ†∑ÁöÑÂãáÂæÄÊ∞îÊ¶ÇÂπ∂‰∏çÊòØÊ≤°ÊúâÊòØÂ§ÑÔºå‰ΩÜÊòØ‰∫ãÊÉÖÂºÑÂæó‰∏çÂ•ΩÔºåÂâçÈÄî‰πü‰ºöÂºÑÂæó‰∏çÂ†™ËÆæÊÉ≥„ÄÇÂõ†Ê≠§ÔºåÈô§‰∫ÜÁõ∏ÂèçÁõ∏ÊàêÔºå‰∏çË¶ÅËøáÂàÜ‰ª•Â§ñÔºåÊàëÊÄªÊÑøÊïô‰∫∫ÂõûÂ§¥ÁúãÁúãÔºå‰πüÊÑøÊïô‰∫∫ÊúâÊó∂‰πü‰Ωú‰∏Ä‰ΩúÈÄÄ‰∏ÄÊ≠•ÊÉ≥„ÄÇ‰πüËÆ∏Êúâ‰∫∫Ë¶ÅÊÑüÁùÄÊâì‰∫Ü‰ªñ‰ª¨ÁöÑÈ´òÂÖ¥„ÄÇÂÖ∂ÂÆûÊàë‰∏çËøáÊÑø‰ªñÂú®‰∏ÄÂæÄÁõ¥Ââç‰∏äÂêåÊó∂‰πüË¶ÅËÑöÊ≠•ÊîæÂæóÁ®≥‰∏Ä‰∫õÔºå‰∏çË¶ÅÂ§±Ë∂≥ÔºåÂ§±Êéâ‰∏çÂøÖË¶ÅÁöÑÁâ∫Áâ≤ËÄåÂ∑≤„ÄÇ ‰∏≠ÂõΩËøáÂéªÊúâËÆ∏Â§öÂú®‰∫∫ÁöÑ‰øÆÂÖª‰∏äÁâπÂà´Ê≥®ÊÑèÁöÑ‰∫ãÔºå‰πüËÆ∏Âõ†‰∏∫Êúâ‰∫ÜÊµÅÂºäÔºåÁé∞Âú®ÈÅÇÂõ†ÂôéÂ∫üÈ£üÔºåÂÜç‰∏çÂ§çÊèêÁöÑ„ÄÇËøôÂÖ∂‰∏≠‰∏Ä‰∏™Â∞±ÊòØ‰∏Ä‰∏™Êï¨Â≠ó„ÄÇÊàëËøëÂπ¥Â§ßÂ§ßÊÑüÂà∞Êï¨Â≠óÁöÑË¶ÅÁ¥ß„ÄÇÊï¨‰∏çÂøÖÂØπ‰∫∫ÔºåÂ∞§ÂÖ∂Ë¶ÅÁ¥ßÁöÑËøòÂú®ÂØπ‰∫ã„ÄÇÊàëÊâÄË∞ìÊï¨ÔºåÂ∑Æ‰∏çÂ§öÂ∞±ÊòØÂ∞èÂøÉÊÖéÈáçÁöÑÊÑèÊÄùÔºå‰ΩÜÊõ¥Âä†‰∫Ü‰∏ÄÁï™Â∫Ñ‰∏•ÈÉëÈáç„ÄÇÊàëËøëÂπ¥ÊØèÈÄ¢‰ªÄ‰πàÂºÑÂùè‰∫ÜÔºåÂç≥Ëá™Ë∞ì‰∏çÊï¨‰∏çÊï¨Ôºå‰ª•Ëá™Ë≠¶ÊÉïÔºå‰ª•Ëá™ÊîπÊ≠£„ÄÇËøôÊòØ‰∏éÂèçÁúÅÁõ∏ËÅîÁöÑ„ÄÇÊàëÁõ∏‰ø°ÔºåÂÅá‰Ωø‰∫∫Â∏∏ËÉΩÂ¶ÇÊ≠§Ôºå‰∏ÄÂÆö‰πüÂèØÂáèÂ∞ë‰∫õËøáÂ§±„ÄÇÊàëÊ∑±ÊÑø‰ªäÊó•ÈùíÂπ¥ÈÉΩËÉΩÊó©ÁÇπÂÖªÊàêËøô‰∏™‰π†ÊÉØ„ÄÇÊâÄË∞ì‰øÆÂÖªÔºå‰πü‰∏çËøáÂ∞±ÊòØÂÖªÊàê‰∫õÂ•Ω‰π†ÊÉØÔºåÂ∞§ÂÖ∂ÊòØÊ≤âÁùÄÊÖéÈáç‰∏çËΩªÊµÆÁöÑ‰π†ÊÉØ„ÄÇ ÊúâÂ§ßÂøóÔºåËØªÂêçÂÖ∏ÔºåÊó∂Ëá™ÂèçÁúÅÔºåÂØπ‰∫ã‰∏ìËÄåÊï¨„ÄÇÈùíÂπ¥ÁöÑÂ∫îÊúâ‰øÆÂÖªÔºåÂΩìÁÑ∂Ëøò‰∏çÊ≠¢„ÄÇËøô‰∏â‰∫îÁÇπÂç¥ÊòØÊàëËøëÊù•Êó∂Âú®ÊÑüÂà∞‰πãÁÇπ„ÄÇÂãâÂº∫ÊäΩÁ©∫ÂÜôÂá∫Êù•Ôºå‰ΩÜÊÑøÂ§ßÂÆ∂‰∏çÂêùÔºåËØïËØïÁúãÔºÅ ÔºàÂõõÊúàÂªøÂÖ≠Â§úÔºâ Âº†Áî≥Â∫úÔºà1893Ôºç1986ÔºâÔºåÂêçÂ¥ßÂπ¥ÔºåÊ≤≥ÂåóÁåÆÂéø‰∫∫„ÄÇÂì≤Â≠¶ÂÆ∂„ÄÇ1920Âπ¥ÂàùÂèÇ‰∏é‰∏≠ÂõΩÂÖ±‰∫ßÂÖöÁöÑÂª∫ÂÖöÊ¥ªÂä®ÔºåÊòØÂë®ÊÅ©Êù•ÁöÑÂÖ•ÂÖö‰ªãÁªç‰∫∫„ÄÇ1931Âπ¥Ëá≥1936Âπ¥‰ªªÊ∏ÖÂçéÂ§ßÂ≠¶Âì≤Â≠¶Á≥ªÊïôÊéà„ÄÇ Ôºà‰Ωú‰∫é1946Âπ¥4Êúà26Êó•„ÄÇÂéüËΩΩ1946Âπ¥5Êúà4Êó•„ÄäÂîØÊ∞ëÂë®Âàä„ÄãÁ¨¨1Âç∑Á¨¨5Êúü„ÄÇÔºâ "},"ReadingNotes/ËÆ∫ÈùíÂπ¥ÁöÑ‰øÆÂÖª-Âº†ÈóªÂ§©-1938.html":{"url":"ReadingNotes/ËÆ∫ÈùíÂπ¥ÁöÑ‰øÆÂÖª-Âº†ÈóªÂ§©-1938.html","title":"ËÆ∫ÈùíÂπ¥ÁöÑ‰øÆÂÖª-Âº†ÈóªÂ§©-1938","keywords":"","body":"ËÆ∫ÈùíÂπ¥ÁöÑ‰øÆÂÖª-Âº†ÈóªÂ§©Ôºà1938Âπ¥4Êúà28Êó•Ôºâ ÂêåÂøó‰ª¨!‰Ω†‰ª¨ÈÉΩÊòØ‰ªéÂÖ®ÂõΩÂêÑÊñπÈù¢Êù•ÁöÑÈùíÂπ¥ÔºåÊâÄ‰ª•Êàë‰ªäÂ§©Â∞±Âêå‰Ω†‰ª¨ËÆ®ËÆ∫ËÆ®ËÆ∫ÂÖ≥‰∫éÈùíÂπ¥ÁöÑÈóÆÈ¢ò„ÄÇ ‰ªéÂÖ®ÂõΩÊ∞ëÊóèÊäóÊàòÂºÄÂßãÂà∞Áé∞Âú®Ëøô‰∏™Êó∂ÊúüÂÜÖÔºåÈùíÂπ¥ÁöÑÁ°ÆÂç†ÁùÄ‰∏Ä‰∏™ÂæàÈáçË¶ÅÁöÑÂú∞‰Ωç„ÄÇÊàë‰ª¨Êó†ËÆ∫‰ªéÂì™‰∏ÄÊñπÈù¢Êù•ÁúãÔºå‰∏çËÆ∫ÊòØÂÜõ‰∫ãÊñπÈù¢‰πüÂ•ΩÔºåÊîøÊ≤ªÊñπÈù¢‰πüÂ•ΩÔºåÊñáÂåñÊïôËÇ≤ÊñπÈù¢‰πüÂ•ΩÔºåÈÉΩÂèØ‰ª•ÁúãÂà∞ÂπøÂ§ßÈùíÂπ¥Áæ§‰ºóÁöÑÊ¥ªË∑É„ÄÇ‰ªñ‰ª¨ÊÄªÊòØÁ´ôÂú®ÊäóÊàòÁöÑÊúÄÂâçÁ∫øÔºå‰∏∫‰∏≠ÂçéÊ∞ëÊóèÁöÑËß£ÊîæËÄåÁâ∫Áâ≤Â•ãÊñó„ÄÇÂêåÊó∂ÔºåÁî±‰∫éÊäóÊàòËßÑÊ®°Êâ©Â§ßÂíåÂ±ïÂºÄÔºåÈùíÂπ¥ÁöÑË¥£‰ªª‰πüÊõ¥Âä†ÈáçË¶Å‰∫Ü„ÄÇÊÄéÊ†∑‰ΩøÊàë‰ª¨ÁöÑÈùíÂπ¥Êõ¥ËÉΩÂú®ÊäóÊàò‰∏≠Â∞Ω‰ªñ‰ª¨ÁöÑË¥£‰ªªÔºåÊòØÊàë‰ª¨Â§ßÂÆ∂ÊâÄË¶ÅÂïÜËÆ®ÁöÑÈóÆÈ¢ò„ÄÇÊàë‰ªäÂ§©ÊâÄË¶ÅËÆ≤ÁöÑÈùíÂπ¥ÁöÑ‰øÆÂÖªÈóÆÈ¢òÔºåÂç≥ÊòØÊÉ≥Âú®ËøôÊñπÈù¢ÂêëÂ§ßÂÆ∂Ë¥°ÁåÆ‰∏ÄÁÇπÊÑèËßÅ„ÄÇ ÊàëËÆ§‰∏∫‰∏≠ÂõΩÁé∞‰ª£ÁöÑÈùíÂπ¥ÔºåÊúâÂæàÂ§öÂÖ±ÂêåÁöÑ‰ºòÁÇπÔºåÂêåÊó∂‰πüÊúâ‰∏Ä‰∫õÂÖ±ÂêåÁöÑÂº±ÁÇπ„ÄÇÊÄéÊ†∑ÂèëÊå•Ëøô‰∫õ‰ºòÁÇπÔºåÂÖãÊúçÈÇ£‰∫õÂº±ÁÇπÔºåÂç≥ÊòØÈùíÂπ¥ÁöÑ‰øÆÂÖªÈóÆÈ¢òÁöÑÂÜÖÂÆπ„ÄÇÊàëÁé∞Âú®Â∞±Ê†πÊçÆÊàë‰ª¨ÁöÑÁªèÈ™å‰∏éËÄÉÂØüÊù•ÂÖ∑‰ΩìËÆ≤Âá†ÁÇπÔºåÂ∏åÊúõÂ§ßÂÆ∂Êù•ËÆ®ËÆ∫„ÄÇ ‰∏Ä„ÄÅË¶ÅÊúâÂùöÂÆöÁöÑÈ´òÂ∞öÁöÑÁêÜÊÉ≥ ÈùíÂπ¥Êúâ‰∏Ä‰∏™ÂæàÂ§ßÁöÑ‰ºòÁÇπÔºåËøôÂ∞±ÊòØ‰ªñ‰ª¨ÊúâÈ´òÂ∞öÁöÑÁêÜÊÉ≥Ôºå‰∏çËÆ∫Ëøô‰∏™ÁêÜÊÉ≥ÊòØÊäóÊó•ÊïëÂõΩ‰πüÂ•ΩÔºåÂÖ±‰∫ß‰∏ª‰πâ‰πüÂ•Ω„ÄÇ‰ªñ‰ª¨ÂØπ‰∫éÁé∞Á§æ‰ºöÊòØ‰∏çÊª°Ë∂≥ÁöÑÔºå‰ªñ‰ª¨Â∏åÊúõÁùÄ‰∏Ä‰∏™ÁêÜÊÉ≥ÁöÑÁ§æ‰ºöÁöÑÂá∫Áé∞„ÄÇÈùíÂπ¥ÁöÑËøôÁßçÁêÜÊÉ≥ÊòØÊúÄÂèØÂÆùË¥µÁöÑ‰∏úË•ø„ÄÇÊ≠£ÊòØËøôÁßçÁêÜÊÉ≥‰∏çÊñ≠Âú∞ÈºìËàûÁùÄÊàë‰ª¨ÁöÑÈùíÂπ¥ÂêëÂâçËøõÊ≠•„ÄÇÊ≠£ÊòØËøôÁßçÁêÜÊÉ≥‰Ωø‰ªñ‰ª¨‰∏çÊÑøÂú®Áé∞Á§æ‰ºö‰∏≠ÈÜâÁîüÊ¢¶Ê≠ªÔºåËÄåÊÑøÊÑè‰∏∫ÁêÜÊÉ≥Á§æ‰ºöÁöÑÂÆûÁé∞Áâ∫Áâ≤Â•ãÊñó„ÄÇÊ≠£ÊòØËøôÁßçÁêÜÊÉ≥Ôºå‰ΩøÊàë‰ª¨ÁöÑÈùíÂπ¥ÔºåÂú®ËøáÂéªÔºåÂú®Áé∞Âú®ÔºåÂàõÈÄ†‰∫ÜËÆ∏Â§öÊÉäÂ§©Âä®Âú∞‰∏éÂèØÊ≠åÂèØÊ≥£ÁöÑ‰ºüÂ§ß‰∫ã‰∏ö„ÄÇÁúºÂâçÁöÑ‰æãÂ≠êÔºå‰πüÂèØËØÅÊòéËøô‰∏ÄÁÇπ„ÄÇÊØîÂ¶Ç‰Ω†‰ª¨ÔºåÈôïÂåóÂÖ¨Â≠¶ÁöÑÂêåÂ≠¶ÔºåÁ©∂Á´ü‰∏∫‰∫Ü‰ªÄ‰πà‰∏çËøúÂçÉÈáåËÄåÊù•ÈôïÂåóËøô‰∏™ÊØîËæÉËçíÂáâÁöÑÂú∞Âå∫Âë¢?ÈôïÂåóÂÖ¨Â≠¶ÁöÑÁâ©Ë¥®Êù°‰ª∂ÊòØÂæàÂõ∞ÈöæÁöÑ„ÄÇ‰ΩèÁöÑÊòØÁ™ëÊ¥ûÔºåÂêÉÁöÑÊòØÂ∞èÁ±≥È•≠„ÄÇÊïôËÇ≤ËÆæÂ§áÈÉΩÂæàÁÆÄÈôã„ÄÇÁÑ∂ËÄå‰Ω†‰ª¨‰∏∫‰ªÄ‰πà‰∏çÊÄï‰∏ÄÂàáÂõ∞ÈöæËÄåÊù•Âë¢?Â¶ÇÊûú‰Ω†‰ª¨‰∏çÊòØ‰∏∫‰∫ÜÂØªÊâæÈ´òÂ∞öÁöÑÁêÜÊÉ≥ÔºåÊàëÊÉ≥‰Ω†‰ª¨ÊòØ‰∏ç‰ºöÊù•ÁöÑ„ÄÇÊâÄ‰ª•È´òÂ∞öÁöÑÁêÜÊÉ≥ÂØπ‰∫éÈùíÂπ¥ÊòØÊúÄÂèØÂÆùË¥µÁöÑ‰∏úË•ø„ÄÇÊàë‰ª¨ÂØπ‰∫éÈùíÂπ¥ÁöÑÁêÜÊÉ≥Ôºå‰∏ç‰ΩÜ‰∏çÂ∫îËØ•ÈÑôËßÜÔºåËÄå‰∏îÂ∫îËØ•ÊûÅÂ§ßÂú∞Áà±Êä§„ÄÇÊóßÁ§æ‰ºöÈáåÁöÑ‰∫∫ÔºåÂ∏∏Â∏∏È™ÇÈùíÂπ¥‰∏∫‚ÄúÁêÜÊÉ≥Â§™È´ò‚Äù„ÄÇËøôÁßçÈ™ÇÊ≥ïÔºåÊàë‰ª¨ËÆ§‰∏∫ÊòØÊ†πÊú¨ÈîôËØØÁöÑ„ÄÇËøôÂè™ÊòØËØÅÊòéÈÇ£‰∫õÈ™ÇÈùíÂπ¥ÁöÑ‰∫∫ÁöÑÊó†ÁêÜÊÉ≥‰πãÂèØÈÑôËÄåÂ∑≤„ÄÇÂ≠ô‰∏≠Â±±ÂÖàÁîü‰∏âÊ∞ë‰∏ª‰πâÁöÑÁêÜÊÉ≥Ôºå‰∏çÊòØ‰πüÁªô‰∫∫ÂÆ∂È™Ç‰∏∫‚ÄúÂ§ßÁÇÆ‚ÄùÂêó?È©¨ÂÖãÊÄù„ÄÅÊÅ©Ê†ºÊñØ„ÄÅÂàóÂÆÅ„ÄÅÊñØÂ§ßÊûóÁöÑÂÖ±‰∫ß‰∏ª‰πâÁêÜÊÉ≥Ôºå‰∏çÊòØÁªô‰∫∫ÂÆ∂È™Ç‰∏∫‚ÄúÁ©∫Ë∞à‚ÄùÂêó?ÁÑ∂ËÄåÊàë‰ª¨Áü•ÈÅìÈ©¨ÂÖãÊÄù„ÄÅÊÅ©Ê†ºÊñØ„ÄÅÂàóÂÆÅ„ÄÅÊñØÂ§ßÊûó„ÄÅÂ≠ô‰∏≠Â±±ÁöÑ‰ºüÂ§ßÔºå‰πüÊ≠£ÊòØÂú®‰∫é‰ªñ‰ª¨ÊúâÈ´òÂ∞öÁöÑÁêÜÊÉ≥„ÄÇÊâÄ‰ª•ÈùíÂπ¥ÊúâÈ´òÂ∞öÁöÑÁêÜÊÉ≥ÔºåÊ≠£ÊòØÈùíÂπ¥ÁöÑ‰ºòÁÇπ„ÄÇ ‰ΩÜÊòØÂ¶ÇÊûúÊàë‰ª¨ÊääÈùíÂπ¥‰∫∫ÁöÑÊüê‰∫õÁêÜÊÉ≥Á†îÁ©∂‰∏Ä‰∏ãÔºåÈÇ£Êàë‰ª¨Âç≥ÂèØÂèëÁé∞Êúâ‰∫õÈùíÂπ¥‰∫∫ÁöÑÁêÜÊÉ≥‰∏çÊòØÁêÜÊÉ≥ËÄåÊòØÁ©∫ÊÉ≥„ÄÇÁ©∫ÊÉ≥ÂèØËÉΩÂ∏∏Â∏∏ÊòØÁæé‰∏ΩÁöÑ‰∏úË•øÔºåÁÑ∂ËÄåÁ©∂Á´üÊòØÁ©∫ÊÉ≥ËÄå‰∏çÊòØÁêÜÊÉ≥„ÄÇÈÇ£‰πàÔºåÁêÜÊÉ≥‰∏éÁ©∫ÊÉ≥ÁöÑÂå∫Âà´Á©∂Á´üÂú®Âì™ÈáåÂë¢? È¶ñÂÖàÔºåÊàë‰ª¨Â∫îËØ•ËØ¥ÔºåÊàë‰ª¨ÁöÑÁêÜÊÉ≥ÊòØÂª∫Á≠ëÂú®Áé∞Á§æ‰ºöÁöÑÁâ©Ë¥®Âü∫Á°Ä‰πã‰∏äÁöÑ‰∏úË•ø„ÄÇ Á©∫‰∏≠Ê•ºÈòÅÔºåÁ©∂Á´üÊòØÂπªÊÉ≥ËÄå‰∏çÊòØÁêÜÊÉ≥ÔºåÂõ†‰∏∫ÂÆÉÊòØËÑ±Á¶ªÁé∞Á§æ‰ºöÁöÑÁâ©Ë¥®Âü∫Á°ÄËÄåÂª∫Á´ãÂú®Á©∫‰∏≠ÁöÑ„ÄÇ‰∏ÄÂàá‰ºüÂ§ßÁöÑÁêÜÊÉ≥ÔºåÈÉΩ‰ªéÁé∞Á§æ‰ºöÁöÑÂÖ∑‰ΩìÂàÜÊûêÂæóÊù•„ÄÇÈó≠Êà∑ÈÄ†ËΩ¶Á©∂Á´üÂè™ËÉΩÊòØÂπªÊÉ≥ËÄå‰∏çÊòØÁêÜÊÉ≥ÔºåÂõ†‰∏∫ÂÆÉÊòØ‰∏™‰∫∫Â§¥ËÑë‰∏≠Èó¥Èöè‰æøÊÉ≥Âá∫Êù•ÁöÑÔºåËÄå‰∏çÂêà‰∫éÂÖ∑‰ΩìÁöÑ‰∏éÂÆûÈôÖÁöÑÁâ©Ë¥®Êù°‰ª∂„ÄÇÂÖ±‰∫ß‰∏ª‰πâÁöÑÁêÜÊÉ≥ÔºåÊòØ‰∫∫Á±ªÊúâÂè≤‰ª•Êù•ÊúÄÂ¥áÈ´òÁöÑÊúÄ‰ºüÂ§ßÁöÑÁêÜÊÉ≥ÔºåÁÑ∂ËÄåËøô‰∏™ÁêÜÊÉ≥ÔºåÂè™ËÉΩ‰ªéËµÑÊú¨‰∏ª‰πâÁ§æ‰ºöÁöÑÁâ©Ë¥®Âü∫Á°Ä‰∏ä‰∫ßÁîüÂá∫Êù•„ÄÇËÑ±Á¶ªÂØπ‰∫éËµÑÊú¨‰∏ª‰πâÁ§æ‰ºöÁöÑÁßëÂ≠¶ÂàÜÊûêÁöÑ‚ÄúÂ§ßÂêå‰∏ñÁïå‚ÄùÁöÑÊÄùÊÉ≥ÔºåÁ©∂Á´üÊòØÂπªÊÉ≥ËÄå‰∏çÊòØÁêÜÊÉ≥„ÄÇ ÂÖ∂Ê¨°ÔºåÊàë‰ª¨ÁöÑÁêÜÊÉ≥Â∫îËØ•ÈÄÇÂêà‰∫é‰∫∫Á±ªÁ§æ‰ºöÂèëÂ±ïÁöÑÂøÖÁÑ∂Ë∂ãÂäø„ÄÇ Êàë‰ª¨ËØ¥Ê∞ëÊóèÁã¨Á´ã„ÄÅÊ∞ëÊùÉËá™Áî±ÔºåÊ∞ëÁîüÂπ∏Á¶èÁöÑ‰∏âÊ∞ë‰∏ª‰πâÂèØ‰ª•ÊòØÊàë‰ª¨‰ªäÂ§©ÁöÑÁêÜÊÉ≥ÔºåÂõ†‰∏∫‰∏≠ÂõΩÁ§æ‰ºö‰ªäÂ§©Ê≠£ÊòØÂêëÁùÄËøô‰∏™ÊñπÂêëÂèëÂ±ïÁùÄÁöÑ„ÄÇÊàë‰ª¨ËØ¥ÂÖ±‰∫ß‰∏ª‰πâÁ§æ‰ºöÊòØÊàë‰ª¨Â∞ÜÊù•ÁöÑÁêÜÊÉ≥ÔºåÂõ†‰∏∫‰∫∫Á±ªÁ§æ‰ºöÁªàÁ©∂ÊòØË¶ÅÂêëÁùÄËøô‰∏™ÊñπÂêëÂèëÂ±ïÂâçÂéªÁöÑ„ÄÇÂ¶ÇÊûú‰ªäÂ§©Êúâ‰∫∫Ë¶ÅÊÅ¢Â§çÂéüÂßãÂÖ±‰∫ßÁ§æ‰ºöÊàñÊÅ¢Â§çÂ•¥Èö∂Á§æ‰ºö„ÄÇÊàñ‰ªøÊïàÂêõ‰∏ª‰∏ìÂà∂ÊàñÊ≥ïË•øÊñØÁã¨Ë£ÅÁöÑÁªüÊ≤ª„ÄÇÈÇ£ËøôÁßçÊÄùÊÉ≥Â∞±‰∏çÊòØÁúüÊ≠£ÁöÑÁêÜÊÉ≥ÔºåÂõ†‰∏∫ËøôÁßçÊÄùÊÉ≥ÊòØËøùÂèç‰∫é‰∫∫Á±ªÁé∞‰ª£Á§æ‰ºöÂèëÂ±ïÁöÑË∂ãÂäøÁöÑ„ÄÇËøôÁßçÊÄùÊÉ≥ÔºåÊàë‰ª¨‰∏çÂè´ÂÆÉÁêÜÊÉ≥ÔºåËÄåÂè´ÂÆÉÂÅöÂèçÂä®ÊÄùÊÉ≥„ÄÇÂõ†‰∏∫ËøôÁßçÊÄùÊÉ≥‰∏çÊòØË¶Å‰ΩøÁ§æ‰ºöËµ∞ÂêëÂâçËøõÔºåËÄåÊòØË¶ÅÂÆÉËΩ¨ÂêëÂêéÈÄÄÔºåÂ∞±ÊòØÊâÄË∞ì‚ÄúÂºÄÂÄíËΩ¶‚Äù„ÄÇ‰∏ÄÂàá‰∏çÂêà‰∫é‰∫∫Á±ªÁ§æ‰ºöÂèëÂ±ïË∂ãÂäøÁöÑÊÄùÊÉ≥ÔºåÂè™ËÉΩÊòØ‰∏ÄÁßçÁ©∫ÊÉ≥„ÄÇ Á¨¨‰∏âÔºåÁêÜÊÉ≥‰∏éÁ©∫ÊÉ≥‰∏çÂêåÔºåÂ∞±ÊòØÁêÜÊÉ≥ÊòØËÉΩÂ§üÂÆûÁé∞ÁöÑÔºåÁ©∫ÊÉ≥ÂàôÊòØÊ∞∏Ëøú‰∏çÂæóÂÆûÁé∞ÁöÑ„ÄÇ ËÄåÁêÜÊÉ≥ÁöÑÂÆûÁé∞ÔºåÈúÄË¶ÅÊúâÂú®‰∏ÄÂÆöÁöÑÁâ©Ë¥®Êù°‰ª∂‰∏ãÊâÄ‰∫ßÁîüÁöÑÁ§æ‰ºöÂäõÈáè„ÄÇÊ≤°ÊúâËøôÁßçÂäõÈáèÔºåÁêÜÊÉ≥‰πüÂ∞±‰∏çËÉΩÂÆûÁé∞„ÄÇÊàòËÉúÊó•Êú¨Â∏ùÂõΩ‰∏ª‰πâ„ÄÅ‰∫âÂèñÊ∞ëÊóèÁã¨Á´ãÁöÑÁêÜÊÉ≥ÔºåÂ∞±Ë¶Å‰æùÈù†Âú®ÂÖ®ÂõΩ‰∏ÄÂàá‰∏çÊÑøÊÑèÂΩì‰∫°ÂõΩÂ•¥ÁöÑÂêÑÈò∂Á∫ß„ÄÅÂêÑÂÖöÊ¥æ„ÄÅÂêÑÂõ¢‰ΩìÁöÑÊ∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÁöÑÂäõÈáè‰πã‰∏ä„ÄÇÁ¶ªÂºÄÂÆûÁé∞Ëá™Â∑±ÁêÜÊÉ≥ÁöÑÁ§æ‰ºöÂäõÈáèËÄåË∞àÁêÜÊÉ≥„ÄÇÈÇ£‰πüÊòØ‰∏ÄÁßçÁ©∫ÊÉ≥ËÄå‰∏çÊòØÁêÜÊÉ≥„ÄÇÂÖ±‰∫ß‰∏ª‰πâÁöÑÊúÄÈ´òÁêÜÊÉ≥ÔºåÁ¶ªÂºÄÂ∑•‰∫∫Èò∂Á∫ßÁöÑÁ§æ‰ºöÂäõÈáèÔºåÂ∞±Êàê‰∏∫‰πåÊâòÈÇ¶ÔºåÊàê‰∏∫Á©∫ÊÉ≥„ÄÇ Á¨¨ÂõõÔºåÁêÜÊÉ≥‰πã‰∏∫ÁêÜÊÉ≥ÔºåÈô§‰∏äËø∞Êù°‰ª∂Â§ñÔºåËøòÈúÄÊúâÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂÖ∑‰ΩìÂäûÊ≥ï„ÄÇ ÊØîÂ¶ÇÔºåÂÆûÁé∞Ê∞ëÊóèËß£ÊîæÁöÑÁêÜÊÉ≥ÔºåÂ∞±Ë¶ÅÊúâÂª∫Á´ã„ÄÅÊâ©Â§ß‰∏éÂ∑©Âõ∫ÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÁöÑÂäûÊ≥ï„ÄÇÂÆûÁé∞ÂÖ±‰∫ß‰∏ª‰πâÔºåÂ∞±Ë¶ÅÊúâ‰∏ÄÂÆöÁöÑÁ∫≤È¢Ü‰∏éÊ≠•È™§Ôºå‰∏ÄÂÆöÁöÑÁ≠ñÁï•‰∏éÊàòÁï•„ÄÇÈ©¨ÂÖãÊÄùÂàóÂÆÅ‰∏ª‰πâÁöÑÁ≠ñÁï•‰∏éÊàòÁï•ÊòØÊØè‰∏ÄÂÖ±‰∫ß‰∏ª‰πâËÄÖÊâÄÂøÖÈ°ªÂ≠¶‰π†ÁöÑÁßëÂ≠¶ÔºåÂõ†‰∏∫Á¶ªÂºÄ‰∫ÜÂÆÉ‰ª¨ÔºåÁêÜÊÉ≥ËôΩÊòØÂæàÂ•ΩÔºåÁÑ∂ËÄå‰ªçÁÑ∂Êàê‰∏∫Á©∫Ë∞àËÄå‰∏çËÉΩÂÆûÁé∞Ôºå‰ΩøÁêÜÊÉ≥Êàê‰∏∫Á©∫ÊÉ≥„ÄÇ ËøôÂ∞±ÊòØÁêÜÊÉ≥‰∏éÁ©∫ÊÉ≥ÁöÑÂü∫Êú¨Âå∫Âà´„ÄÇÊàë‰ª¨ÁöÑÈùíÂπ¥Â¶ÇÊûúËµûÊàêÊàëÊâÄËØ¥ÁöÑËøô‰∫õÂå∫Âà´ÔºåÈÇ£Êú´ËØ∑‰Ω†‰ª¨Â∞±ÊãøËøôÂá†‰∏™Ê†áÂáÜÔºåÊù•Ê£ÄÊü•‰∏Ä‰∏ãËá™Â∑±ÁöÑÁêÜÊÉ≥ÔºöÁ©∂Á´ü‰Ω†‰ª¨ËøáÂéªÊâÄÊä±ÁöÑÁêÜÊÉ≥ÔºåÊòØÁêÜÊÉ≥ËøòÊòØÁ©∫ÊÉ≥?Â¶ÇÊûúÊòØÁ©∫ÊÉ≥ÔºåÈÇ£Â∞±Â∫îËØ•ÂÜ≥ÁÑ∂ÊäõÂºÉ„ÄÇÂ¶ÇÊûúÊòØÁêÜÊÉ≥Ôºå‰ΩÜÂèà‰∏çÂÆåÂÖ®ÔºåÈÇ£Â∞±Â∫îËØ•‰øÆÊ≠£‰∏éÂÖÖÂÆûÔºåÊàñÈáçÊñ∞Âä†‰ª•Ê£ÄËÆ®‰∏éÊï¥ÁêÜ„ÄÇÊàë‰ª¨Â∫îËØ•‰∏çÂÆ¢Ê∞îÂú∞ËØ¥ÔºåÂú®Êàë‰ª¨ÈùíÂπ¥ÁöÑÁêÜÊÉ≥‰∏≠ÔºåÂ∏∏Â∏∏‰∏çÂÖçÊúâ‰∫õÁ©∫ÊÉ≥ÁöÑÊàêÂàÜÔºåÂõ†Ê≠§Ôºå‰ªñ‰ª¨ÊúâÊó∂ÂØπ‰∫éËá™Â∑±ÁöÑÁêÜÊÉ≥ÊääÊè°‰∏çÂÆöÔºåËÄåÂèëÁîü‰∏Ä‰∫õÊúù‰∏âÊöÆÂõõÁöÑÊëáÊëÜÁé∞Ë±°„ÄÇË¶ÅÂÖçÂéªËøôÁßçÁé∞Ë±°ÔºåÂ∞±ÂøÖÈ°ªÊääËá™Â∑±ÁöÑÁêÜÊÉ≥Âª∫Á≠ëÂú®ÁªìÂÆûÂùöÂõ∫ÁöÑÁßëÂ≠¶ÁöÑÂü∫Á°Ä‰πã‰∏ä„ÄÇËøôÊòØÊàëÊâÄË¶ÅËØ¥ÁöÑÁ¨¨‰∏Ä‰∏™ÈóÆÈ¢ò„ÄÇ ‰∫å„ÄÅË¶Å‰∏∫ÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞Â∫ï ÈùíÂπ¥‰∫∫Âú®‰∏ÄÊó¶ËßâÈÜíÔºåÊâæÂà∞‰∫ÜËá™Â∑±ÁöÑÁêÜÊÉ≥‰πãÂêéÔºåÈÉΩËÉΩÂ§ü‰∏çÈ°æ‰∏ÄÂàá‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñó„ÄÇËøôÁßç‰∏∫ÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥ËÄåÁâ∫Áâ≤Â•ãÊñóÁöÑÁ≤æÁ•ûÔºåÊòØÊàë‰ª¨ÈùíÂπ¥ÁöÑ‰∏Ä‰∏™ÂæàÂ§ß‰ºòÁÇπ„ÄÇÊàë‰ª¨Âú®Á§æ‰ºö‰∏≠ÁúãÂà∞‰∏çÂ∞ëËøôÊ†∑ÁöÑ‰∫∫Ôºå‰ªñ‰ª¨‰πü‰∏çÊª°ÊÑè‰∫éÁé∞Áä∂Ôºå‰ªñ‰ª¨‰πüÂ∏åÊúõÊúâ‰∏™ËæÉÂ•ΩÁöÑÁ§æ‰ºöÂá∫Áé∞Ôºå‰ªñ‰ª¨ÁîöËá≥ÂêåÊÉÖÂÖ±‰∫ß‰∏ª‰πâÔºå‰ΩÜÊòØ‰ªñ‰ª¨Ëá™Â∑±‰∏çÊÑøÊÑè‰∏∫ÊîπÈÄ†Á§æ‰ºöËÄåÂ•ãÊñó„ÄÇ‰ªñ‰ª¨Ëàç‰∏çÂæóËá™Â∑±ÁöÑÂ¶ªÂ≠êÂÑøÂ•≥Ôºå‰ªñ‰ª¨Ëàç‰∏çÂæóËá™Â∑±ÁöÑÂÆ∂‰π°ÊïÖÂúüÔºå‰ªñ‰ª¨Ëàç‰∏çÂæóËá™Â∑±ÁöÑÁîüÂëΩË¥¢‰∫ßÔºå‰ªñ‰ª¨‰∏çÂæó‰∏ç‚ÄúÈ©¨È©¨ËôéËôé‚ÄùÂú∞ÁîüÊ¥ªÔºå‰∏çÂæó‰∏ç‚ÄúÂÅö‰∏ÄÂ§©ÂíåÂ∞öÊíû‰∏ÄÂ§©Èíü‚Äù„ÄÇ‰ΩÜÈùíÂπ¥Â∞±‰∏çÊòØËøôÊ†∑„ÄÇ‰ªñ‰ª¨‰∏ç‰∫ÜËß£Âà∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥ÂàôÂ∑≤Ôºå‰∏ÄÊó¶‰ªñ‰ª¨‰∫ÜËß£Âà∞‰∫ÜËá™Â∑±ÁöÑÁêÜÊÉ≥Ôºå‰ªñ‰ª¨Â∞±‰ºöÊäõÂºÉ‰∏ÄÂàáÔºåÂ•îËµ¥Ëá™Â∑±ÁöÑÁêÜÊÉ≥ÔºåÂéª‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥ËÄåÂ•ãÊñó„ÄÇËøôÁßç‰∏çÈ°æ‰∏™‰∫∫Âà©ÂÆ≥ËÄåÁâ∫Áâ≤Â•ãÊñóÁöÑÁ≤æÁ•ûÔºåÊòØÂÄºÂæóÈí¶‰Ω©‰∏éÊ≠åÈ¢ÇÁöÑ„ÄÇ ‰ΩÜÊòØÔºåÂÆûÁé∞ÁêÜÊÉ≥ÔºåÂÆûÂú®‰∏çÊòØ‰∏Ä‰ª∂ÂÆπÊòìÁöÑ‰∫ã„ÄÇÁêÜÊÉ≥ËôΩÊòØÂª∫Á≠ëÂú®Áé∞Á§æ‰ºöÁöÑÁâ©Ë¥®Âü∫Á°Ä‰πã‰∏äÔºå‰ΩÜÁêÜÊÉ≥ÊòØË∂ÖËøáÁé∞Á§æ‰ºöÁöÑ‰∏ú‰∏§„ÄÇÁêÜÊÉ≥Â•ΩÊØîÊ≥•Âúü‰∏≠ÁîüÈïøÂá∫Êù•ÁöÑËä±„ÄÇÂÆÉËôΩÁîüÈïøÂú®Ê≥•Âúü‰∏≠Ôºå‰ΩÜÂÆÉÂèà‰∏çÊòØÊ≥•Âúü„ÄÇÊâÄ‰ª•ÁêÜÊÉ≥ÁúãÊù•Â∏∏Â∏∏ÊòØÁæé‰∏ΩÁöÑÔºåËÄåÁé∞Á§æ‰ºöÂàôÁúãÊù•ÊòØ‰∏ëÊÅ∂ÁöÑ„ÄÇË¶ÅÊääËøô‰∏™‰∏ëÊÅ∂ÁöÑÁé∞Á§æ‰ºöÂèò‰∏∫Áæé‰∏ΩÁöÑÁêÜÊÉ≥Á§æ‰ºöÔºåÈÇ£ÂÜ≥‰∏çÊòØ‰∏ÄÂ§©‰∏§Â§©‰ª•Ëá≥‰∏ÄÂπ¥‰∏§Âπ¥ÁöÑ‰∫ãÔºåËÄåÈúÄË¶ÅÂá†ÂçÅÂπ¥‰ª•Ëá≥‰∏äÁôæÂπ¥ÁöÑÂ•ãÊñó‰∏éÂ∑•‰Ωú„ÄÇ‰∏ç‰ΩÜËøôÊ†∑ÔºåÂú®Â•ãÊñó‰∏éÂ∑•‰ΩúÁöÑËøáÁ®ã‰∏≠ËøòÂøÖÁÑ∂Ë¶ÅÁ¢∞Âà∞Êó†Êï∞ÁöÑÂõ∞Èöæ‰∏éÊ≥¢ÊäòÔºåÊúâÊó∂ÁîöËá≥ÁúãÊù•‰ºº‰πéÊòØ‰∏çËÉΩÂÖãÊúç‰ª•Ëá≥ÁªùÊúõÁöÑÂõ∞Èöæ„ÄÇÊâÄ‰ª•‰∏çËÆ∫Âú®‰ªª‰ΩïÂõ∞Èöæ‰πã‰∏ãÔºåÂùöÊåÅËá™Â∑≤ÁöÑÁêÜÊÉ≥ÔºåÂùöÊåÅ‰∏∫Ëá™Â∑±ÁêÜÊÉ≥ÁöÑÂÆûÁé∞ËÄåÂ•ãÊñóÔºåÊòØÁªùÂØπÂøÖË¶ÅÁöÑ„ÄÇÊ≤°ÊúâËøôÁßçÂùöÊåÅÊÄßÔºå‰ªª‰ΩïÁöÑÁêÜÊÉ≥‰πüÈÉΩ‰∏çËÉΩÂÆûÁé∞„ÄÇ ‰∏ÄÂàá‰ºüÂ§ßÁöÑÈù©ÂëΩÂÆ∂‰πãÊâÄ‰ª•‰ºüÂ§ßÔºå‰∏ç‰ΩÜÂõ†‰∏∫‰ªñ‰ª¨ÊúâÁùÄ‰ºüÂ§ßÁöÑÁêÜÊÉ≥ÔºåËÄå‰∏îËøòÂõ†‰∏∫‰ªñ‰ª¨ÂßãÁªàËÉΩÂ§ü‰∏∫‰∫ÜËá™Â∑≤ÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞Â∫ï„ÄÇÂ≠ô‰∏≠Â±±ÂÖàÁîü‚ÄúËá¥ÂäõÂõΩÊ∞ëÈù©ÂëΩÂá°ÂõõÂçÅÂπ¥‚Äù„ÄÇËôΩÊòØÂú®‰ªñÂ•ãÊñóÁöÑËøáÁ®ã‰∏≠Á¢∞Âà∞‰∫ÜÊó†Êï∞ÁöÑÂõ∞ÈöæÔºåÁÑ∂ËÄå‰ªñÂßãÁªàÂùöÊåÅ‰ªñÁöÑÁêÜÊÉ≥Ôºå‰∏∫‰ªñÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞ÊúÄÂêé„ÄÇ‰∏ñÁïåÊó†‰∫ßÈò∂Á∫ßÁöÑÂØºÂ∏àÈ©¨ÂÖãÊÄù„ÄÅÊÅ©Ê†ºÊñØ„ÄÅÂàóÂÆÅ„ÄÅÊñØÂ§ßÊûóÔºå‰ªñ‰ª¨ÁöÑ‰ºüÂ§ßÔºåÂ∞±ÊòØ‰ªñ‰ª¨ÈÇ£Áßç‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥ËÄåÂùöÊåÅÂ•ãÊñóÂà∞Â∫ïÁöÑÁ≤æÁ•û„ÄÇ‰ªñ‰ª¨Âú®‰∏ëÊÅ∂ÁöÑÊóßÁ§æ‰ºö‰∏≠ÁúãÂà∞Áæé‰∏ΩÔºå‰ªñ‰ª¨Âú®ÈªëÊöó‰∏≠ÁúãÂà∞ÂÖâÊòéÔºå‰ªñ‰ª¨ÊéíÈô§‰∏áÈöæ„ÄÅÂÖãÊúç‰∏ÄÂàáÂõ∞ÈöæËÄåÂâçËøõ„ÄÇ ‰∏≠ÂõΩÂÖ±‰∫ßÂÖö‰∫∫ÊõæÁªèÂÆåÊàê‰∫Ü‰∫å‰∏á‰∫îÂçÉÈáåÈïøÂæÅ„ÄÇËøô‰ª∂‰∫ãÈúáÂä®‰∫ÜÂÖ®‰∏ñÁïå„ÄÇ‰∏∫‰ªÄ‰πà‰∫å‰∏á‰∫îÂçÉÈáåÈïøÂæÅËÉΩÂ§üÊúâËøôÊ†∑‰ºüÂ§ßÁöÑÂΩ±ÂìçÂë¢?ÂéüÂõ†Â∞±Âú®‰∫é‰∏≠ÂõΩÂÖ±‰∫ßÂÖöÂú®ËøôÊ¨°ÈïøÂæÅ‰∏≠ÂÖÖÂàÜÂú∞Ë°®Áé∞Âá∫‰∫ÜÂÆÉ‰∏∫‰∫ÜËá™Â∑±ÁöÑÁêÜÊÉ≥ËÄåÁâ∫Áâ≤Â•ãÊñó‰∏éÂùöÊåÅÂà∞Â∫ïÁöÑÁ≤æÁ•û„ÄÇÊ≤°ÊúâËøôÁßçÁ≤æÁ•ûÔºåÂ∞±ÊòØ‰∏ÄÂçÉÈáåÁöÑÈïøÂæÅ‰πüÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇÂú®ËøôÊ¨°ÈïøÂæÅ‰∏≠ÔºåÊàë‰ª¨ÁöÑÁ°ÆÊõæÁªèÁ¢∞Âà∞‰∫ÜÊó†Êï∞ÁöÑÂõ∞Èöæ„ÄÇÊàë‰ª¨ÊõæÁªèÁ¢∞Âà∞‰∫ÜÂá†‰πé‰∏çËÉΩÊ∏°ËøáÁöÑÂ§©Èô©ÈáëÊ≤ôÊ±ü‰∏éÂ§ßÊ∏°Ê≤≥ÔºåÊàë‰ª¨ÊõæÁªèÁ¢∞Âà∞‰∫Ü‰∫∫Á±ªÂá†‰πéÊ≤°ÊúâÂà∞ËøáÁöÑÈõ™Â±±‰∏éËçâÂú∞ÔºåÊàë‰ª¨Â§ÑÂú®ÊïåÂÜõÁöÑÂõõÈù¢ÂåÖÂõ¥‰πã‰∏≠„ÄÇÂõ∞ÈöæÂá†‰πéÊòØ‰∏çËÉΩÂÖãÊúçÁöÑÔºåÁÑ∂ËÄåÊàë‰ª¨ÈÇ£Êó∂Âè™Êúâ‰∏Ä‰∏™ÊÄùÊÉ≥ÔºåÂ∞±ÊòØÊó†ËÆ∫Â¶Ç‰ΩïË¶ÅÂÖãÊúçËøô‰∫õÂõ∞ÈöæÔºåË¶Å‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞Â∫ï„ÄÇÊúÄÂêéÔºåÊàë‰ª¨ËøòÊòØÂÆåÊàê‰∫ÜÊàë‰ª¨ÂΩìÊó∂ÁöÑ‰ªªÂä°ÔºåÂà∞Ëææ‰∫ÜÂΩìÊó∂ÁöÑÁõÆÁöÑÂú∞„ÄÇ Â∞±‰ª•‰ªäÂ§©ÁöÑÊäóÊàò‰∏∫‰æãÂêßÔºå‰∏≠ÂõΩÁöÑÊ∞ëÊóèÊäóÊàòÊòØ‰∏Ä‰∏™ÊåÅ‰πÖÁöÑÊàò‰∫âÔºåÂõ∞Èöæ‰πüÊòØÂæàÂ§öÁöÑÔºåÊ≥¢Êäò‰πüÊòØÂæàÂ§öÁöÑ„ÄÇÂ¶ÇÊûúÊàë‰ª¨Á¢∞Âà∞‰∏Ä‰∫õÂõ∞ÈöæÔºåÈÅ≠Âèó‰∏Ä‰∫õÊå´ÊäòÔºåÂ∞±ÊÇ≤ËßÇÂ§±ÊúõÔºåÂ∞±ÂáÜÂ§áÂêåÊïå‰∫∫Â¶•ÂçèÔºåÈÇ£‰∏≠ÂõΩÂ∞±Êúâ‰∫°ÂõΩÁöÑÂç±Èô©„ÄÇÊòæÁÑ∂Âú∞ÔºåÂ¶ÇÊûúÊàë‰ª¨‰∏çËÉΩÂùöÊåÅÊäóÊàòÂà∞Â∫ïÔºåÂàôÊúÄÂêéÊàòËÉúÊó•ÂØá„ÄÅÂÆûÁé∞Ê∞ëÊóèÁã¨Á´ãÁöÑÁêÜÊÉ≥ÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇ Ê≠£ÊòØÂú®Ëøô‰∏™ÈóÆÈ¢ò‰∏äÔºåÂú®‰∏∫‰∫ÜËá™Â∑±ÁêÜÊÉ≥ÁöÑÂÆûÁé∞ËÄåÂ•ãÊñóÂà∞Â∫ïÁöÑËøô‰∏™ÈóÆÈ¢ò‰∏äÔºåÊàë‰ª¨Êúâ‰∫õÈùíÂπ¥Â∏∏Â∏∏Ë°®Á§∫‰∏Ä‰∫õÂº±ÁÇπ„ÄÇ‰ªñ‰ª¨‰∏ÄÂºÄÂßãÂæÄÂæÄ‰ª•Êó†ÈôêÁöÑÁÉ≠ÊÉÖ‰∏éÂÖ¥Â•ãÂéªÂ•îËµ¥Ëá™Â∑±ÁöÑÁêÜÊÉ≥Ôºå‰ΩÜÊòØ‰∏ÄÊó¶‰ªñ‰ª¨Á¢∞Âà∞Âõ∞ÈöæÔºåÁ¢∞Âà∞Ê≥¢ÊäòÔºå‰ªñ‰ª¨ÂæÄÂæÄ‰∏çËÉΩÂùöÊåÅÂà∞Â∫ïÔºå‰ª•Ëá≥ÂçäÈÄîËÄåÂ∫ü„ÄÇËøáÂéªÂ∏∏Â∏∏Êúâ‰∫∫‰ª•‚Äú‰∫îÂàÜÈíüÁÉ≠Â∫¶‚ÄùËÆ•Á¨ëÈùíÂπ¥Â≠¶Áîü„ÄÇËøôÁßçËÆ•Á¨ëÂú®Áé∞Âú®ËØ¥Êù•Â∑≤Áªè‰∏çÂØπ‰∫ÜÔºåÂõ†‰∏∫‰∏≠ÂõΩÈùíÂπ¥Â≠¶ÁîüÁªèËøáÊó†Êï∞ÁöÑÊñó‰∫âÔºåÁé∞Âú®Â∑≤ÁªèÊúâ‰∫ÜÊûÅÂ§ßÁöÑËøõÊ≠•„ÄÇÁÑ∂ËÄåÂú®Êüê‰∫õÈÉ®ÂàÜÁöÑÈùíÂπ¥‰∏≠Áº∫‰πèÊñó‰∫âÁöÑÂùöÊåÅÊÄßÔºåÂàô‰æùÁÑ∂ÊòØ‰∏çÂèØÂê¶ËÆ§ÁöÑ‰∫ãÂÆû„ÄÇ ‰∏∫‰ªÄ‰πàÂú®Êàë‰ª¨ÈÉ®ÂàÜÈùíÂπ¥‰∏≠ÂèëÁîüËøôÁßçÁé∞Ë±°Âë¢?Êàë‰ª•‰∏∫Êúâ‰ª•‰∏ãÂá†‰∏™ÂéüÂõ†„ÄÇ Á¨¨‰∏ÄÔºåÊàë‰ª¨ÁöÑÈùíÂπ¥ÂæÄÂæÄÂØπ‰∫éÈù©ÂëΩÁöÑÊåÅ‰πÖÊÄß‰º∞ËÆ°‰∏çË∂≥„ÄÇ Ë¶ÅÊää‰∫∫Á±ªÁöÑÈ´òÂ∞öÁêÜÊÉ≥ÂÆûÁé∞Âá∫Êù•ÁöÑÈù©ÂëΩÔºåÂÉèÊàëÂú®ÂâçÈù¢ËØ¥ËøáÁöÑÔºå‰∏çÊòØ‰∏ÄÂ§©‰∏§Â§©‰ª•Ëá≥‰∏ÄÂπ¥‰∏§Âπ¥ÁöÑ‰∫ãÔºåËÄåÊòØÂá†ÂçÅÂπ¥‰ª•Ëá≥‰∏äÁôæÂπ¥ÁöÑ‰∫ã„ÄÇËøôÊòØ‰∏Ä‰∏™ÊåÅ‰πÖÁöÑÊñó‰∫â„ÄÇ‰∏ç‰ΩÜÂÆûÁé∞ÂÖ±‰∫ß‰∏ª‰πâÁêÜÊÉ≥ÊòØÂ¶ÇÊ≠§ÔºåÂç≥ÊúÄÂêéÊàòËÉúÊó•ÂØá‰πü‰∏çÊòØ‰∏ÄÂπ¥‰∏§Âπ¥ÁöÑ‰∫ãÔºåËÄåÊòØ‰∏Ä‰∏™ÊåÅ‰πÖÊàò„ÄÇÂêåÂøó‰ª¨Â§ßÂ§öÊï∞ÊòØ‰ªéË•øÂÆâÊ≠•Ë°åÂà∞Âª∂ÂÆâÁöÑ„ÄÇ‰Ω†‰ª¨ÂØπ‰∫éËµ∞ÈôïÂåóÁöÑÂ±±Âú∞ÔºåÂ§ßÊ¶ÇÂ∑≤ÁªèÊúâ‰∫ÜÁõ∏ÂΩìÁöÑÁªèÈ™å„ÄÇÈù©ÂëΩÂ∞±Â•ΩÂÉèËµ∞ÈôïÂåóÁöÑÂ±±Âú∞‰∏ÄÊ†∑ÔºåÁøªËøá‰∫Ü‰∏ÄÂ∫ßÂ±±Âèà‰∏ÄÂ∫ßÂ±±„ÄÇ‰Ω†‰ª¨Âú®Ë∑Ø‰∏ä‰∏çÊòØÂ∏∏Â∏∏ÊÉ≥ÔºåÁøªËøá‰∫ÜÂâçÈù¢‰∏Ä‰∏™Â±±Â§¥‰∏ÄÂÆöÂÜçÊ≤°ÊúâÂ±±‰∫ÜÂêßÔºå‰∏ÄÂÆöÂèØ‰ª•Âà∞Âª∂ÂÆâ‰∫ÜÂêß„ÄÇÁÑ∂ËÄå‰∫ãÂÆûÂ∏∏Â∏∏ÊòØÁõ∏ÂèçÁöÑÔºåÂ±±Êé•ËøûÁùÄÂ±±ÔºåËÄåÂª∂ÂÆâÊÄªÊòØËøòÂú®ÂâçÈù¢„ÄÇËøôÊ†∑‰Ω†‰ª¨Âú®Ë∑Ø‰∏äÂ∞±Ë¶ÅËµ∞ÂçÅÂ§©ÔºåÊâçÂæóÂà∞ËææÂª∂ÂÆâ„ÄÇËøôÂØπ‰∫é‰Ω†‰ª¨ÔºåÂ∞±ÊòØ‰∏Ä‰∏™ÂæàÂ•ΩÁöÑÂÖ•Â≠¶ËÄÉËØï„ÄÇÁÑ∂ËÄåÈù©ÂëΩÁ©∂Á´üÊØîÁøªÂ±±Ë¶ÅÊåÅ‰πÖÂæóÂ§öÔºåÂõ∞ÈöæÂæóÂ§ö„ÄÇÂ¶ÇÊûúÊàë‰ª¨ÈùíÂπ¥ÂèÇÂä†Âà∞Èù©ÂëΩ‰∏≠Êù•ÔºåÊ≤°ÊúâÊåÅ‰πÖÊñó‰∫âÁöÑÂáÜÂ§áÔºåÁªìÊûúÊòØ‰∏ÄÂÆöË¶ÅÂ§±Êúõ‰∏éÂçäÈÄîËÄåÂ∫üÁöÑ„ÄÇÊ≠£ÂÉè‰Ω†‰ª¨Âà∞Âª∂ÂÆâÊù•ÔºåÂ¶ÇÊûú‰Ω†‰ª¨Ê≤°ÊúâËøôÊ†∑‰∏ÄÂÆöË¶ÅÂà∞Âª∂ÂÆâÁöÑÂÜ≥ÂøÉÔºå‰Ω†‰ª¨‰∏ÄÂÆö‰ºöÂçäÈÄîËÄåËøîÁöÑ„ÄÇ Á¨¨‰∫åÔºåÊàë‰ª¨ÁöÑÈùíÂπ¥ÂæÄÂæÄÂØπ‰∫éÈù©ÂëΩÁöÑÂõ∞ÈöæÊÄß‰º∞ËÆ°‰∏çË∂≥„ÄÇ Ë¶ÅÊää‰∫∫Á±ªÈ´òÂ∞öÁöÑÁêÜÊÉ≥ÂÆûÁé∞Âá∫Êù•ÁöÑÈù©ÂëΩÔºå‰∏çÂÖãÊúçÊó†Êï∞ÁöÑÂõ∞ÈöæÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇÈù©ÂëΩÂÜ≥‰∏çÂÉè‰∏äÊµ∑ÁöÑÂ§ßÈ©¨Ë∑ØÈÇ£Ê†∑Âπ≥Âù¶Â•ΩËµ∞ÔºåÂÜ≥‰∏çÂÉèÂêÉÈ•≠Áù°ËßâÈÇ£Ê†∑ÂÆπÊòìÁÆÄ‰æø„ÄÇËøôÁÆÄÁõ¥ÂêåÁà¨ÁùÄÊ≤°Êúâ‰∫∫ËøπÂà∞ËøáÁöÑÂ¥éÂ≤ñÁöÑÈ´òÂ±±‰∏ÄÊ†∑ÔºåÂ±±‰∏äÊ≤°ÊúâË∑ØÔºåÊ≤°Êúâ‰∫∫ÂÆ∂ÔºåÂà∞Â§ÑÊòØËçÜÊ£ò‰∏éÊµìÂØÜÁöÑÊ£ÆÊûóÔºåÂà∞Â§ÑÊúâÊØíËõáÁåõÂÖΩÁöÑÂ®ÅËÉÅÔºåÊúâ‰∫õÂú∞ÊñπÁÆÄÁõ¥ÊòØ‰∏çËÉΩË∂äËøáÁöÑÁªùÂ£Å„ÄÇ‰ΩÜÊòØÊàë‰ª¨ÂøÖÈ°ªÂâçËøõÔºåÂøÖÈ°ªÂÖãÊúç‰∏ÄÂàáÂõ∞ÈöæÂâçËøõ„ÄÇÊàë‰ª¨ÊúâÊó∂‰ºöË¢´ËçÜÊ£òÊ†ëÊûùÊâÄÂà∫‰º§ÔºåÊúâÊó∂‰ºöË¢´ÊØíËõáÁåõÂÖΩÊâÄÂí¨‰º§ÔºåÊàë‰ª¨ÂâçÈù¢ÁöÑ‰ºô‰º¥ÊúâÊó∂‰ºöÁî®Â∞Ω‰∫Ü‰∏ÄÂàáÊ∞îÂäõÈù¢ÂÄíÊØôÔºå‰ΩÜÊòØÊàë‰ª¨ÂøÖÈ°ªÂâçËøõ„ÄÇÂ¶ÇÊûúÊàë‰ª¨ÁöÑÈùíÂπ¥ÂèÇÂä†Âà∞Èù©ÂëΩ‰∏≠Êù•Ôºå‰∏çÈ¢ÑÂÖàÁúãÂà∞ËøôÁßçÂõ∞ÈõÖÔºåÊ≤°ÊúâÂÖãÊúç‰∏ÄÂàáÂõ∞ÈöæÁöÑÂáÜÂ§áÔºåÈÇ£ÁªìÊûúÂøÖÁÑ∂ÊòØ‚ÄúÁü•ÈöæËÄåÈÄÄ‚Äù„ÄÇ Á¨¨‰∏âÔºåÊóßÁ§æ‰ºöÁöÑÊÄùÊÉ≥‰π†ÊÉØ‰ª•Âèä‰∏ÄÂàáÁâ©Ë¥®‰∏äÁöÑËØ±ÊÉëÔºå‰πüÂæÄÂæÄÊòØ‰ΩøÈùíÂπ¥ÂçäÈÄîËÄåÂ∫üÁöÑ‰∏ÄÁßçÊûÅÂ§ßÁöÑÂäõÈáè„ÄÇ Êàë‰ª¨Â∏∏Â∏∏ÁúãÂà∞‰∏ÄÊúâÂøóÁöÑÈùíÂπ¥ÔºåÂèó‰∏çËµ∑ËøôÁßçÂäõÈáèÁöÑÂéãËø´ËÄåÈÄÄÂç¥‰∫ÜÔºåËÄåÊîæÂºÉ‰∫ÜËá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÇÊóßÁ§æ‰ºöÂØπ‰∫éÈùíÂπ¥ÁöÑÁêÜÊÉ≥ÔºåÊÄªÊòØÂèñÁùÄÊïåËßÜÁöÑÊÄÅÂ∫¶„ÄÇ‰ªñ‰ª¨Áî®ÂêÑÁßçÊÄùÊÉ≥‰∏äÁöÑÊØíÁ¥†ÔºåËÆ•Á¨ëÈùíÂπ¥ÔºåÈô∑ÂÆ≥ÈùíÂπ¥Ôºå‰ΩøÈùíÂπ¥‚ÄúËÄÅÂ§ß‚ÄùÔºå‚ÄúÈ¢ì‰∏ß‚ÄùÔºå‚ÄúÊ∂àÊ≤â‚Äù„ÄÇ‰ªñ‰ª¨Áî®Âú∞‰Ωç„ÄÅÈáëÈí±„ÄÅÁæéÂ•≥ËÖêÂåñÈùíÂπ¥ÔºåÁ¨ºÁªúÈùíÂπ¥ÔºåÊ∂àÁ£®ÈùíÂπ¥ÁöÑ‚ÄúÊúùÊ∞î‚Äù„ÄÇ‰Ω†‰ª¨ÁúãÂà∞ËøáÊó†Êï∞ËøôÁ±ªÁöÑ‰æãÂ≠êÂêß„ÄÇÂΩìÈùíÂπ¥Â≠¶ÁîüÂú®Â≠¶Ê†°ËØª‰π¶ÁöÑÊó∂ÂÄôÔºåÂæÄÂæÄ‚ÄúÂøóÂêëËøúÂ§ß‚ÄùÔºåÊÉ≥‚ÄúÁªôÂõΩÂÆ∂Ê∞ëÊóèË∞ãÁÇπÂπ∏Á¶è‚ÄùÔºå‚Äú‰∏∫‰∫∫Á±ªËß£ÊîæÂÅöÁï™‰∫ã‰∏ö‚ÄùÔºåÁÑ∂ËÄå‰∏ÄÂá∫Â≠¶Ê†°Âà∞ÊóßÁ§æ‰ºö‰∏≠Ê∑∑‰∏äÂá†Âπ¥ÔºåÂæÄÂæÄÊääËøáÂéªÁöÑ‰∏ÄÂàáÂÆåÂÖ®ÊäõÂºÉ‰∫Ü„ÄÇÊóßÁ§æ‰ºöÂêûÊ≤°‰∫Ü‰ªñ‰ª¨ÔºåÊóßÁ§æ‰ºöËûçÂåñ‰∫Ü‰ªñ‰ª¨„ÄÇÊâÄ‰ª•ÔºåÂ¶ÇÊûúÊàë‰ª¨ÁöÑÈùíÂπ¥‰∏çËÉΩÂêåËøôÁßçÊóßÂäøÂäõÂ•ãÊñóÔºåÂùöÊåÅËá™Â∑±ÁöÑÁêÜÊÉ≥Ôºå‰∏ç‰∏∫Ëøô‰∫õÂäõÈáèÊâÄÂä®ÊëáÔºåÈÇ£ÁªìÊûú‰πüÂøÖÁÑ∂ÊòØÂçäÈÄîËÄåÂ∫ü„ÄÇ Á¨¨ÂõõÔºåÊàë‰ª¨ÁöÑÊúâ‰∫õÈùíÂπ¥Êú¨Ë∫´Â∏∏Â∏∏Êúâ‰∏ÄÁßç‚ÄúÂä®ÊëáÊÄß‚ÄùÔºåÁº∫‰πèË∂≥Â§üÁöÑÂøçËÄê‰∏éÂùöÂÆö„ÄÇ Êàë‰ª¨Â∏∏Â∏∏Áß∞ËøôÁßçÁâπÁÇπ‰∏∫‚ÄúÂ∞èËµÑ‰∫ßÈò∂Á∫ßÊÄß‚Äù„ÄÇ‰ªñ‰ª¨ÂæÄÂæÄ‰ªäÂ§©ÂèÇÂä†Èù©ÂëΩÂ∑•‰ΩúÔºåÂ∞±Â∏åÊúõÈù©ÂëΩÂú®ÊòéÂ§©ËÉúÂà©„ÄÇÂ¶ÇÊûúÊòéÂ§©Èù©ÂëΩ‰∏çËÉΩËÉúÂà©ÔºåÈÇ£‰ªñ‰ª¨Â∞±Â§±ÊúõËÄåÊ∂àÊûÅ‰∫Ü„ÄÇ‰ªñ‰ª¨Âú®Èù©ÂëΩÂΩ¢ÂäøÈ´òÊ∂®ÁöÑÊó∂ÂÄôÔºåÂ∏∏Â∏∏Ë∂ãÂêëÁãÇÁÉ≠‰∏éÁõ≤Âä®ÔºåËÄåÂú®Èù©ÂëΩÂΩ¢Âäø‰ΩéËêΩÁöÑÊó∂ÂÄôÔºåÂàôÂèàËΩ¨Âà∞Ê∂àÊ≤â‰∏éÁªùÊúõÁöÑÊ∑±Ê∏ä„ÄÇ‰ªñ‰ª¨ËÉúÂà©Êó∂Â∏∏Â∏∏‰∏∫ËÉúÂà©ÂÜ≤ÊòèÂ§¥ËÑëÔºåÂ§±Ë¥•Êó∂ÂàôÂèàÂõ†Â§±Ë¥•ËÄåÂûÇÂ§¥‰∏ßÊ∞î„ÄÇ‰ªñ‰ª¨‰∏ç‰ºöÊää‰ªäÂ§©‰∏ÄÁÇπ‰∏ÄÊª¥ÁöÑÂàáÂÆûÁöÑÂ∑•‰ΩúÔºåÂêå‰ªñ‰ª¨ËøúÂ§ßÁöÑÁêÜÊÉ≥ËÅîÁ≥ªËµ∑Êù•Ôºõ‰ªñ‰ª¨‰∏çËÉΩÁ©∑Âπ¥Á¥ØÊúàÂú∞Âéª‰∏∫Ëá™Â∑±ÁöÑËøúÂ§ßÁöÑÁêÜÊÉ≥ËÄåËøõË°å‰ªäÂ§©ÁúãÊù•Â•ΩÂÉèÊòØÊ≤°ÊúâÁªìÊûúÁöÑÂ∑•‰ΩúÔºõ‰ªñ‰ª¨Â∏∏Â∏∏ËÆ®ÂéåËøôÁßç‚ÄúÁêêÁ¢é‚Äù‰∏é‚ÄúÈ∫ªÁÉ¶‚ÄùÁöÑÂ∑•‰ΩúÔºõ‰ªñ‰ª¨‰∏çËÉΩÊ∏ÖÊ•ö‰∫ÜËß£Ôºå‰∏ÄÂàáÈù©ÂëΩÁöÑÂ∑•‰ΩúÔºåÂè™Ë¶ÅËÉΩÂ§üÂùöÊåÅÂú∞Âπ≤‰∏ãÂéªÔºå‰∏ÄÂÆöÂèØ‰ª•ÂæóÂà∞‰∏ÄÂÆöÁöÑÊàêÁª©„ÄÇÂ∑®Â§ßÁöÑÂª∫Á≠ëÂ∑•Á®ãÊ≤°Êúâ‰∏ÄÁ†ñ‰∏ÄÁì¶ÁöÑÁ†åÁ≠ëÔºåÊòØÊ∞∏Ëøú‰∏çËÉΩÊàêÂäüÁöÑ„ÄÇ‰ºüÂ§ßÁöÑÁêÜÊÉ≥‰∏çÁªèËøáËÆ∏Â§öËÉúÂà©‰∏éÂ§±Ë¥•ÔºåÊòØÊ∞∏Ëøú‰∏ç‰ºöÂÆûÁé∞ÁöÑ„ÄÇ Ëøô‰∫õÊòØÂ∏∏Â∏∏‰ΩøÊàë‰ª¨ÁöÑÈùíÂπ¥‰∏çËÉΩÂùöÊåÅËá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÅ‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞Â∫ïÁöÑÂéüÂõ†„ÄÇËøô‰∫õÂº±ÁÇπÁöÑÂÖãÊúçÔºåÊòØÊØè‰∏Ä‰∏™‰∏≠ÂõΩÈùíÂπ¥ÁöÑ‰∏•Èáç‰ªªÂä°„ÄÇËøôÂΩìÁÑ∂‰∏çÊòØ‰∏Ä‰ª∂ÂÆπÊòìÁöÑ‰∫ãÔºåÁÑ∂ËÄåËøô‰ª∂‰∫ãÊòØÂøÖÈ°ªÂÅö‰∏éÂèØËÉΩÂÅöÂà∞ÁöÑ„ÄÇ ÂΩìÁÑ∂Ôºå‰ªäÂ§©Êàë‰ª¨Á¶ªÂºÄÊàë‰ª¨ÁöÑÁêÜÊÉ≥ËøòÂæàËøúÔºåÁÑ∂ËÄåÊàë‰ª¨ÊÄªÊòØÂú®‰∏ÄÂ§©‰∏ÄÂ§©Êé•ËøëÁùÄËá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÇÁ§æ‰ºö‰∏ª‰πâÁöÑÁêÜÊÉ≥ÔºåËøáÂéªËøòÂè™ÊòØÂú®‰π¶Êú¨‰∏äÔºåËÄåÁé∞Âú®Â∑≤ÁªèÂú®Âç†ÂÖ®‰∏ñÁïåÂÖ≠ÂàÜ‰πã‰∏ÄÁöÑÂúüÂú∞ÁöÑËãèËÅîÔºåÂèòÊàê‰∫ÜÂÆåÂÖ®ÁöÑÁé∞ÂÆû„ÄÇÊâÄ‰ª•Âè™Ë¶ÅÊàë‰ª¨ËÉΩÂ§üÂùöÊåÅËá™Â∑±ÁöÑÁêÜÊÉ≥Ôºå‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñóÂà∞Â∫ïÔºåÊàë‰ª¨ÁöÑÁêÜÊÉ≥ÁöÑÂÆûÁé∞ÊòØÂèØËÉΩËÄå‰∏îÊòØÂøÖÁÑ∂ÁöÑ„ÄÇ ‰∏â„ÄÅË¶ÅÂ≠¶‰π†ÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂäûÊ≥ï Êúâ‰∫ÜÁêÜÊÉ≥ÔºåÊúâ‰∫ÜÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂÜ≥ÂøÉÔºåÊòØ‰∏çÊòØÂ∞±Â∑≤ÁªèÂ§ü‰∫ÜÂë¢?ËøòÊòØ‰∏çÂ§üÁöÑ„ÄÇÊàë‰ª¨ÈùíÂπ¥ËøòË¶ÅÊúâÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂäûÊ≥ï„ÄÇ ÈùíÂπ¥Êúâ‰∏ÄÁßçÂæàÂ§ßÁöÑÈïøÂ§ÑÔºåÂ∞±ÊòØÊúâÁÉ≠ÁÉàÁöÑÈù©ÂëΩÊÉÖÁª™ÔºåÁ∫ØÊ¥ÅÂù¶ÁôΩÁöÑËÉ∏ÊÄÄ„ÄÇÊ≠£ÊòØÂõ†‰∏∫‰ªñ‰ª¨ÊúâÁÉ≠ÁÉàÁöÑÈù©ÂëΩÊÉÖÁª™ÔºåÊâÄ‰ª•‰ªñ‰ª¨ËÉΩÂ§üÂãáÂæÄÁõ¥ÂâçÔºå‰∏çÈ°æ‰∏ÄÂàáÂõ∞Èöæ‰∏é‰∏™‰∫∫Âà©ÁõäÔºåÂêëÁùÄËá™Â∑±ÁöÑÁêÜÊÉ≥ÂâçËøõ„ÄÇÊ≠£ÊòØÂõ†‰∏∫‰ªñ‰ª¨ÊúâÁ∫ØÊ¥ÅÂù¶ÁôΩÁöÑËÉ∏ÊÄÄÔºåÂæàÂ∞ëÂèóÂà∞ÊóßÁ§æ‰ºöÁöÑÂêÑÁßçÈôàËÖêÁöÑÊÄùÊÉ≥„ÄÅ‰π†ÊÉØ‰∏é‰º†ÁªüÁöÑÂΩ±ÂìçÔºåÊâÄ‰ª•‰ªñ‰ª¨ÊØîËæÉÂÆπÊòìÊé•ÂèóÈù©ÂëΩÁöÑÁúüÁêÜ„ÄÇÈùíÂπ¥ÂêåÈÇ£‰∫õÈ∫ªÊú®‰∏ç‰ªÅÁöÑ‰∫∫ÊòØ‰∏çÁõ∏ÂêåÁöÑÔºåÂêåÈÇ£È°ΩÂõ∫ÂÆàÊóßÁöÑÊ≠ªÁ°¨Ê¥æ‰πüÊòØ‰∏çÁõ∏ÂêåÁöÑ„ÄÇÈùíÂπ¥ÊòØÊúâÁîüÊ∞îÁöÑÔºåÊ¥ªË∑ÉÁöÑÔºåÂÖÖÊª°ÁùÄÊÑâÂø´‰∏éÂÖâÊòéÁöÑ‰∏Ä‰ª£„ÄÇ‰ªñ‰ª¨ÊòØÊóßÁ§æ‰ºö‰∏≠ÁîüÈïøËµ∑Êù•ÁöÑÁæé‰∏ΩÁöÑËä±Ôºå‰ªñ‰ª¨‰πüÊòØÁæé‰∏ΩÁöÑÊñ∞Á§æ‰ºöÁöÑÂàõÈÄ†ËÄÖ„ÄÇ Âú®‰∏≠ÂõΩÈù©ÂëΩÂè≤‰∏äÔºåÊàë‰ª¨ÂèØ‰ª•‰∏æÂá∫Êó†Êï∞‰æãÂ≠êÔºåÊù•ËØÅÊòé‰∏≠ÂõΩÈùíÂπ¥Â¶Ç‰ΩïÂ∏∏Â∏∏Á´ôÂú®Ê∞ëÊóèËß£ÊîæÁöÑÂâçÂç´Âú∞‰ΩçÔºå‰ª•‰ªñ‰ª¨ÁöÑÂ§¥È¢Ö‰∏éÁÉ≠Ë°ÄÂàõÈÄ†‰∫ÜÊó†Êï∞ÂèØÊ≠åÂèØÊ≥£ÁöÑËã±ÂãáÁöÑÂÖâËç£ÁöÑÂè≤ËØó„ÄÇÂú®‰ªäÂ§©‰ºüÂ§ßÁöÑÊ∞ëÊóèÊäóÊàò‰∏≠ÔºåÊàë‰ª¨‰πüÂèØ‰ª•Âà∞Â§ÑÁúãÂà∞ÈùíÂπ¥ÊÄéÊ†∑‰∏∫Ê∞ëÊóèÊäóÊàòÁöÑÊúÄÂêéËÉúÂà©ËÄåËøõË°åÁùÄÂãáÊï¢Êó†ÊØîÁöÑÊñó‰∫â„ÄÇÂ¶ÇÊûú‰ªñ‰ª¨Ê≤°ÊúâÁÉ≠ÁÉàÁöÑÈù©ÂëΩÊÉÖÁª™‰∏éÁ∫ØÊ¥ÅÂù¶ÁôΩÁöÑËÉ∏ÊÄÄÔºåÂàô‰∏ÄÂàáËøô‰∫õ‰∫ã‰∏öÁöÑÂàõÈÄ†ÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇÊàë‰ª¨ÂÖ±‰∫ßÂÖö‰∫∫ÂØπ‰∫éÈùíÂπ¥ÁöÑËøô‰∏Ä‰ºòËâØÁöÑÁâπË¥®ÔºåÂ∞§ÂÖ∂ÊúâÊ∑±ÂàáÁöÑÊÑüËßâ„ÄÇÂΩìÊàë‰ª¨Âú®ÊúÄÈªëÊöóÊúÄÂõ∞ÈöæÁöÑÊó∂ÂÄôÔºåÂΩìÂú®Êàë‰ª¨ÁöÑÂë®Âõ¥Âà∞Â§ÑÊòØÊÅêÊÄñ‰∏éÈÄ†Ë∞£Ê±°ËîëÁöÑÊó∂ÂÄôÔºåÊàë‰ª¨ÊÄªÊòØ‰ªéËÆ∏Â§öÈùíÂπ¥ÊúãÂèãÈÇ£ÈáåÂæóÂà∞‰ªñ‰ª¨ÁöÑÂêåÊÉÖ‰∏éÊã•Êä§„ÄÇÂú®‰ªäÂ§©Ôºå‰ªñ‰ª¨ÂØπ‰∫éÊàë‰ª¨ÊâÄË°®Á§∫ÁöÑÁà±Êà¥‰∏é‰ø°‰ªªÔºå‰πüÊòØÊàë‰ª¨‰∏çËÉΩ‰ª•Ë®ÄËØ≠Êù•Ë°®Á§∫ÊÑüÊøÄÁöÑ„ÄÇË∞ÅÈÉΩÂèØ‰ª•ÁúãÂà∞ÔºåÂú®Êàë‰ª¨Âª∂ÂÆâÔºåÊ≤°ÊúâÂÆòÂèØÂÅöÔºåÊ≤°ÊúâËñ™Ê∞¥ÂèØÊãøÔºåÊ≤°ÊúâÂæàÂ•ΩÁöÑÁîüÊ¥ªÂèØËøáÔºåËøòÊúâ‰∏çÂ∞ë‰∫∫Âú®Êàë‰ª¨ÁöÑÂë®Âõ¥ÈÄ†Êàë‰ª¨ÁöÑË∞£Ë®ÄÔºåÁ†¥ÂùèÊàë‰ª¨ÔºåÁÑ∂ËÄå‰Ω†‰ª¨‰ªçÁÑ∂‰∏çËøúÂçÉÈáåËÄåÊù•ÔºåÂÖ∂ÂéüÂõ†‰ΩïÂú®Âë¢?Èô§‰∫Ü‰Ω†‰ª¨ÁöÑÈÇ£ÁßçÁÉ≠ÁÉàÁöÑÈù©ÂëΩÊÉÖÁª™‰∏éÁ∫ØÊ¥ÅÂù¶ÁôΩÁöÑËÉ∏ÊÄÄÔºåËøòËÉΩÊúâÂÖ∂‰ªñÁöÑËØ¥ÊòéÂêó? ÈùíÂπ¥ÁöÑËøôÁßç‰ºòËâØÁöÑÂìÅË¥®ÔºåÊòØÊàë‰ª¨ÊâÄÂ∫îÊûÅÂäõÁà±Êä§‰∏éÂèëÊâ¨ÁöÑ„ÄÇ ‰ΩÜÊòØÂÖâÊòØÁÉ≠ÁÉàÁöÑÈù©ÂëΩÊÉÖÁª™ÔºåÁ∫ØÊ¥ÅÂù¶ÁôΩÁöÑËÉ∏ÊÄÄÔºåËøòÊòØ‰∏çËÉΩÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥ÔºåÂÆåÊàê‰ºüÂ§ßÁöÑÈù©ÂëΩ‰∫ã‰∏öÁöÑ„ÄÇÊúâ‰∫õÈùíÂπ¥ÁöÑÂº±ÁÇπÔºåÂ∏∏Â∏∏Ë°®Áé∞Âú®‰∏ç‰ºö‰ΩøÈù©ÂëΩÁöÑÁÉ≠ÊÉÖÂéªÊúç‰ªé‰∫éÈù©ÂëΩÁöÑÁêÜÊô∫Ôºå‰∏ç‰ºöÊääÁ∫ØÊ¥ÅÂù¶ÁôΩÂèò‰∏∫ÂØπ‰∫éÁúüÁêÜÁöÑÊ∑±ÂàªÁöÑËøΩÊ±Ç„ÄÇÂìç‰∫ÆÁöÑÈù©ÂëΩÂè£Âè∑ÔºåËÄÄÁúºÁöÑÈù©ÂëΩËØçÂè•ÔºåÂèØ‰ª•Ëø∑ÊÉëÊàë‰ª¨ÁöÑÈùíÂπ¥Ôºå‰Ωø‰ªñ‰ª¨ÂèëÁãÇÔºå‰Ωø‰ªñ‰ª¨‰ª•Ê≠§‰∏∫Êª°Ë∂≥„ÄÇ‰ªñ‰ª¨ÂæÄÂæÄÊäì‰ΩèÈóÆÈ¢òÁöÑ‰∏ÄÊñπÈù¢ÔºåÊääÂÆÉÂèëÊå•ÔºåÊääÂÆÉÂ§∏Â§ßÔºåËÆ§‰∏∫ËøôÊòØÂîØ‰∏ÄÁöÑ‚ÄúÁúüÁêÜ‚ÄùÔºåÊéíÈô§‰∏ÄÂàáÂÖ∂‰ªñÁöÑÊñπÈù¢ÔºåÂê¶ËÆ§‰∏ÄÂàáÂÖ∂‰ªñÁöÑÊÑèËßÅ„ÄÇ‰ªñ‰ª¨ÁöÑÈù©ÂëΩÁÉ≠ÊÉÖÂÆπÊòìÂèò‰∏∫Áõ≤ÁõÆÁöÑÂÜ≤Âä®Ôºå‰ªñ‰ª¨ÁöÑÁ∫ØÊ¥ÅÂù¶ÁôΩÂÆπÊòìËµ∞ÂêëÁâáÈù¢ÊÄß„ÄÅÁã≠ÈöòÊÄß‰∏éÂπºÁ®öÁóÖ„ÄÇ‰ªñ‰ª¨ÂæÄÂæÄ‰∏çËÉΩÊõ¥ÂÜ∑ÈùôÂú∞ÂéªËÄÉËôëÈóÆÈ¢òÔºåÊÉ≥Âá∫ÂÖ∑‰ΩìÁöÑÂäûÊ≥ïÊù•ÂÆûÁé∞Ëá™Â∑±ÂΩìÂâçÁöÑ‰ªªÂä°ÔºåÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÇËøôÁßçÂº±ÁÇπÔºåÂΩìÁÑ∂ÊòØÊàë‰ª¨ÁöÑÈùíÂπ¥ÊâÄÂ∫îËØ•ËÆæÊ≥ïÂÖãÊúçÁöÑ„ÄÇ Êàë‰ª¨Â∫îËØ•‰ΩøÊàë‰ª¨ÁöÑÈùíÂπ¥Ê∏ÖÊ•öÂú∞‰∫ÜËß£Âà∞ÔºöÂú®ÁêÜÊÉ≥Á°ÆÂÆö‰πãÂêéÔºåÊúâ‰∫Ü‰∏∫ÁêÜÊÉ≥ËÄåÂ•ãÊñóÂà∞Â∫ïÁöÑÂÜ≥ÂøÉ‰πãÂêéÔºåÂ≠¶‰π†ÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂÖ∑‰ΩìÂäûÊ≥ïÂ∞±ÊúâÁùÄÂÜ≥ÂÆöÁöÑÊÑè‰πâ„ÄÇÂú®Ëøô‰∏ÄÊñπÈù¢ÔºåÊàëÊÉ≥ÂêëÂêåÂøó‰ª¨Ë¥°ÁåÆÂá†ÁÇπÊÑèËßÅ„ÄÇ Á¨¨‰∏ÄÔºåÂ∞±ÊòØË¶Å‰∫ÜËß£ÂÖ∑‰ΩìÊÉÖÂÜµ„ÄÇ Êàë‰ª¨Êó†ËÆ∫ÂÅö‰ªÄ‰πà‰∫ãÔºåÈ¶ñÂÖàÁöÑÈóÆÈ¢òÂ∞±ÊòØ‰∫ÜËß£ÊÉÖÂÜµ„ÄÇÊ≠£ÂÉè‰∏Ä‰∏™Âú®ÂâçÁ∫ø‰∏äÊåáÊå•ÂÜõÈòüÁöÑÂ∞ÜÂÜõÔºå‰ªñ‰∏∫‰∫ÜË¶ÅÂÆûÁé∞‰ªñÊâìËÉú‰ªóÁöÑÁêÜÊÉ≥ÔºåÂ∞±ÂøÖÈ°ªË¶ÅËÆ≤Ê±Ç‰ΩúÊàòÁöÑÊñπÊ≥ï„ÄÇËøôÈáåÔºåÈ¶ñÂÖàÂ∞±ÊòØË¶ÅÂºÑÊ∏ÖÊïåÊÉÖÔºåÁÑ∂ÂêéÊù•ÂÜ≥ÂÆö‰ΩúÊàòÁöÑËÆ°Âàí„ÄÇÊàë‰ª¨ÁöÑÂ∑•‰ΩúÊñπÊ≥ï‰πüÊòØÂ¶ÇÊ≠§„ÄÇÊØîÂ¶ÇÔºå‰Ω†‰ª¨Â∞ÜÊù•‰ªéÂ≠¶Ê†°ÊØï‰∏ö‰πãÂêéÔºå‰Ω†‰ª¨Âà∞‰∏Ä‰∏™Âú∞ÊñπÂéªÂ∑•‰ΩúÔºå‰Ω†‰ª¨ÁöÑË¥£‰ªªÂÜ≥‰∏çÊòØÂà∞ÈÇ£ÈáåÂéªÁÖß‰Ω†‰ª¨Ëá™Â∑±ÁöÑÂ§¥ËÑë‰∏≠ÊâÄÊÉ≥ÁöÑÊù•‰π±Âπ≤‰∏ÄÈ°ø„ÄÇËÄåÊòØË¶ÅÈ¶ñÂÖà‰∫ÜËß£ÂΩìÊó∂ÂΩìÂú∞ÁöÑÂÖ∑‰ΩìÊÉÖÂÜµÔºåÊØîÂ¶ÇÈÇ£ÈáåÁöÑÊäóÊàòÂΩ¢ÂäøÔºåÈÇ£ÈáåÁöÑÊîøÊ≤ª‰∏éÁªèÊµéÔºåÂêÑÈò∂Á∫ß„ÄÅÂêÑÈò∂Â±Ç„ÄÅÂêÑÂÖöÊ¥æ„ÄÅÂêÑÊ∞ë‰ºóÂõ¢‰Ωì‰ª•ÂèäÂÖö„ÄÅÊîø„ÄÅÂÜõ„ÄÅÊ∞ëÈó¥ÁöÑÁõ∏‰∫íÂÖ≥Á≥ªÁ≠â„ÄÇÊ≤°ÊúâËøôÁßç‰∫ÜËß£ÔºåÊàë‰ª¨Â∞±Êó†Ê≥ïÂÜ≥ÂÆöÊ≠£Á°ÆÁöÑÂ∑•‰ΩúÊñπÈíà‰∏éÂ∑•‰ΩúËÆ°ÂàíÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÇ ÂΩìÁÑ∂‰∫ÜËß£ÂÖ∑‰ΩìÊÉÖÂÜµ‰∏çÊòØ‰∏Ä‰ª∂ÂÆπÊòìÁöÑ‰∫ã„ÄÇ‰ΩÜÊòØÔºå‰∏ÄÂàáÂÖ∑‰ΩìÊÉÖÂÜµÈÉΩÊòØÂú®ÁüõÁõæ‰∏≠ÂèëÂ±ïÁùÄÁöÑÔºåÈÉΩÊòØ‰æùÁÖßÊôÆÈÅçÁöÑËæ©ËØÅÊ≥ïÁöÑËßÑÂæãÂèòÂä®ÁùÄÁöÑÔºåÊâÄ‰ª•Âè™Ë¶ÅÊàë‰ª¨ËÉΩÂ§üÊääÊè°‰ΩèËøô‰∫õÊñπÊ≥ïÔºåÈÇ£ÊØîËæÉÊ≠£Á°ÆÂú∞Âéª‰∫ÜËß£ÂÖ∑‰ΩìÊÉÖÂÜµ‰πü‰∏çÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇÈóÆÈ¢òÂè™ÊòØË¶ÅÊàë‰ª¨ÁöÑÈùíÂπ¥Âú®Êé•Ëß¶ÂÖ∑‰ΩìÊÉÖÂÜµÁöÑÊó∂ÂÄôÔºåËÉΩÂ§üÊõ¥Â§öÂú∞‚ÄúÊÉ≥‰∏ÄÊÉ≥‚ÄùÔºåÊõ¥Â§öÂú∞Á†îÁ©∂‰∏Ä‰∏ãÔºåËÄÉÂØü‰∏Ä‰∏ãÔºåÂÜ≥‰∏çË¶Å‰ª•Ëá™Â∑±ÁöÑ‰∏Ä‰∫õÁâáÈù¢ÁöÑ‰∏ªËßÇÁöÑ‰∫ÜËß£‰∏∫Êª°Ë∂≥„ÄÇ‰∏ñÁïå‰∏äÁöÑ‰∏ÄÂàáÈÉΩÊòØÈùûÂ∏∏Â§çÊùÇÁöÑÔºå‰∏çÊòØÈ©¨È©¨ËôéËôé„ÄÅÂÜíÂÜíÂ§±Â§±Â∞±ËÉΩÂ§ü‰∫ÜËß£ÁöÑ„ÄÇÂ¶ÇÊûúÊàë‰ª¨Ê≤°ÊúâËøôÁßç‰∫ÜËß£ÂÖ∑‰ΩìÊÉÖÂÜµÁöÑË¶ÅÊ±Ç‰∏éÂøçËÄêÂøÉÔºåÈÇ£ÊàëÂèØ‰ª•ÂëäËØâÂ§ßÂÆ∂Ôºå‰Ω†‰ª¨ÊòØ‰ªÄ‰πà‰∫ã‰πüÂÅö‰∏çÂ•ΩÁöÑ„ÄÇ ÂΩìÁÑ∂ÔºåËøôÂπ∂‰∏çÊòØËØ¥Êàë‰ª¨‰∏ÄÂÆöË¶ÅÂΩªÂ∫ï‰∫ÜËß£ÂÖ∑‰ΩìÊÉÖÂÜµ‰πãÂêéÊâçËÉΩÂºÄÂßãÂ∑•‰Ωú„ÄÇËøôÁßçÂΩªÂ∫ï‰∫ÜËß£ÔºåÂú®‰∏Ä‰∏™Áü≠ÁöÑÊó∂ÊúüÂÜÖÊòØ‰∏çÂèØËÉΩÁöÑ„ÄÇ‰ΩÜÊàë‰ª¨Ë¶ÅÊ±ÇÂú®ÂºÄÂßãÂ∑•‰Ωú‰πãÂâçÔºåÊúâ‰∏ÄÁßçÂàùÊ≠•ÁöÑ‰∏éËµ∑Á†ÅÁöÑ‰∫ÜËß£Ôºå‰∏çÁÑ∂ÔºåÂà∞‰∏Ä‰∏™Âú∞Êñπ‰∏çÁÆ°‰∏ÄÂàá‰π±Âπ≤‰∏ÄÊ∞îÔºåÈÇ£ÊòØÂºÇÂ∏∏Âç±Èô©ÁöÑ„ÄÇ Á¨¨‰∫åÔºåÂú®Êàë‰ª¨ÂØπ‰∫éÂÖ∑‰ΩìÊÉÖÂÜµÊúâ‰∫ÜÂàùÊ≠•ÁöÑ‰∏éËµ∑Á†ÅÁöÑ‰∫ÜËß£‰πãÂêéÔºåÊàë‰ª¨Â∞±Ë¶ÅÊ†πÊçÆÂØπÂÖ∑‰ΩìÊÉÖÂÜµÁöÑ‰∫ÜËß£Êù•ÂÜ≥ÂÆöÊàë‰ª¨ÁöÑÊñπÈíàÔºåÊàë‰ª¨ÁöÑ‰ªªÂä°ÔºåÊñó‰∫âÁöÑÂΩ¢ÂºèÔºåÂ∑•‰ΩúÁöÑÊñπÊ≥ïÊñπÂºèÁ≠â„ÄÇ ÊØîÂ¶Ç‰Ω†‰ª¨Áé∞Âú®Âà∞‰∏äÊµ∑Â∑•‰ΩúÔºå‰Ω†‰ª¨Âú®Ëß£Âà∞‰∫Ü‰∏äÊµ∑ÁöÑÂÖ∑‰ΩìÊÉÖÂÜµ‰πãÂêéÔºå‰Ω†‰ª¨Â∞±ÂøÖÈ°ªËßÑÂÆö‰Ω†‰ª¨‰ªäÂ§©Âú®‰∏äÊµ∑ÈúÄË¶ÅÂÅö‰ªÄ‰πàÔºåËÉΩÂ§üÂÅö‰ªÄ‰πàÔºåËÄå‰∏îÂ¶Ç‰ΩïÂÅöÊ≥ï„ÄÇÊòæÁÑ∂Âú∞ÔºåÂú®‰∏äÊµ∑Êó•ÂØáÂÜõÈòüÂç†È¢ÜÁöÑÂú∞Âå∫ÔºåÊàë‰ª¨‰ªäÂ§©ÁöÑÂÖ∑‰Ωì‰ªªÂä°„ÄÅÊñó‰∫âÂΩ¢Âºè„ÄÅÂ∑•‰ΩúÊñπÊ≥ïÊñπÂºèÁ≠âÔºåÂÜ≥‰∏çËÉΩÂêåÂÖ∂‰ªñÂå∫ÂüüÁõ∏Âêå„ÄÇ‰Ω†‰ª¨Ë¶ÅËÄÅËôëÔºåÁ©∂Á´ü‰ªäÂ§©Âú®‰∏äÊµ∑ÊòØÂêåÂú®ÂÖ∂‰ªñÊüê‰∫õÊàòÂå∫‰∏ÄÊ†∑Âú∞ÂéªÂèëÂ±ïÊ∏∏ÂáªÊàò‰∫âÔºåËøõË°åÂÖ¨ÂºÄÁöÑÂèçÊó•ÁöÑÊ¥ªÂä®ÔºåÊàñËÄÖÊòØËøôÈáåÈúÄË¶ÅÊâßË°åÂè¶‰∏ÄÁßç‰ªªÂä°ÔºåÂç≥ÁßØËÅöËá™Â∑±ÂäõÈáèÂáÜÂ§áÂæÖÊó∂ËÄåÂä®ÁöÑ‰ªªÂä°ÔºåÈááÂèñÂè¶‰∏ÄÁßçÊñó‰∫âÂΩ¢ÂºèÔºåÂç≥ÁßòÂØÜÁöÑÂèçÊó•Êñó‰∫âÁöÑÊ¥ªÂä®Âë¢?ÊòØÁªÑÁªáÂÖ¨ÂºÄÁöÑÊäóÊïåÂêéÊè¥‰ºöÔºåËøòÊòØ‰∏ÄÊñπÈù¢ÁªÑÁªáÁßòÂØÜÁöÑÊäóÊó•Âõ¢‰ΩìËÄåÂêåÊó∂ÂéªÂà©Áî®ÂÖ¨ÂºÄÁöÑÂêàÊ≥ïÁöÑÁªÑÁªáÂΩ¢ÂºèÂë¢?Âè™ÊúâÊ≠£Á°ÆÂú∞Ëß£ÂÜ≥Ëøô‰∫õÈóÆÈ¢òÔºåÊàë‰ª¨ÊâçËÉΩ‰ΩøÊàë‰ª¨ÁöÑÂäõÈáèÂ∑©Âõ∫‰∏éÂèëÂ±ïÔºåËææÂà∞ÊúÄÂêéÈÖçÂêàÂÖ®ÂõΩÂäõÈáèÊàòËÉúÊó•ÂØáÁöÑÁêÜÊÉ≥„ÄÇÂ¶ÇÊûúÊàë‰ª¨ÁöÑ‰ªªÂä°ËßÑÂÆöÂæó‰∏çÊ≠£Á°ÆÔºåÂ∑•‰ΩúÊñπÊ≥ïÊñπÂºèÁ≠âÈÉΩËßÑÂÆöÂæó‰∏çÂØπÔºåÈÇ£Êàë‰ª¨ÂøÖÁÑ∂‰ºöÈÅ≠Âèó‰∏•ÈáçÁöÑÂ§±Ë¥•ÔºåËÄåËææ‰∏çÂà∞Êàë‰ª¨ÁöÑÁõÆÁöÑÂú∞„ÄÇ Âú®ÁõÆÂâçÂÖ®‰∏≠ÂõΩ‰∫∫Ê∞ëÁöÑÂâçÈù¢ÁöÑÊúÄ‰∏≠ÂøÉÁöÑ‰ªªÂä°ÊòØÂùöÊåÅÊäóÊàòÔºåÊúÄÂêéÊàòËÉúÊó•ÂØá„ÄÇ‰ΩÜÊòØÂÆûÁé∞Ëøô‰∏™‰∏≠ÂøÉ‰ªªÂä°ÁöÑÊñπÊ≥ïÊòØÂú®ÂêÑ‰∏™ÂÖ∑‰ΩìÁöÑÂú∞ÊñπÈÉΩ‰∏çËÉΩÂÆåÂÖ®Áõ∏ÂêåÁöÑ„ÄÇÊàë‰ª¨ÈùíÂπ¥Ë¶ÅÂñÑ‰∫éÊ†πÊçÆ‰∏çÂêåÂú∞Âå∫ÁöÑÂÖ∑‰ΩìÊÉÖÂÜµÔºåÊù•ÂÜ≥ÂÆöÂÆûÁé∞Ëøô‰∏™‰∏≠ÂøÉ‰ªªÂä°ÁöÑÂÖ∑‰ΩìÂäûÊ≥ï„ÄÇÁî±‰∫é‰∏≠ÂõΩÊîøÊ≤ªÁªèÊµéÂèëÂ±ïÁöÑ‰∏çÂπ≥Ë°°ÔºåÁî±‰∫é‰∏≠ÂõΩÁöÑÂú∞Â§ßÁâ©ÂçöÔºåÊâÄ‰ª•ÂÆûÁé∞ÁõÆÂâç‰∏≠ÂøÉ‰ªªÂä°ÁöÑÊñπÊ≥ïÔºåÈÉΩ‰∏çËÉΩÊúâÂçÉÁØá‰∏ÄÂæãÁöÑÂÖ¨Âºè„ÄÇÂÖ¨Âºè‰∏ª‰πâÂ∏∏Â∏∏ÊòØÊàë‰ª¨ÂÆûÁé∞ÊÄª‰ªªÂä°‰∏≠ÁöÑÊúÄÂ§ßÁöÑÈöúÁ¢çÁâ©„ÄÇ Â∞±ÊòØÂêÑÂú∞ÊñπÁöÑÂÖ∑‰ΩìÊÉÖÂÜµÔºå‰πü‰∏çÊòØÂõ∫ÂÆö‰∏çÂèòÁöÑ„ÄÇÂÆÉÂêåÊ†∑Âú∞ÂèòÂä®ÁùÄ„ÄÇÊâÄ‰ª•‰Ω†‰ª¨Â∞±Âú®‰∏Ä‰∏™Âú∞ÊñπÁöÑÂ∑•‰Ωú‰∏≠‰ªçÁÑ∂Ë¶ÅÊó∂Êó∂ÂàªÂàªÊ≥®ÊÑèÊñ∞ÁöÑÊÉÖÂÜµÁöÑÂèòÂåñÔºåËÄåÂèäÊó∂Âú∞ÊîπÂèòËá™Â∑±ÁöÑ‰ªªÂä°ÂèäÂ∑•‰ΩúÊñπÊ≥ïÊñπÂºèÁ≠â„ÄÇËá≥Ê≠ª‰∏çÂèòÁöÑ‰∏úË•øÊòØÊ≤°ÊúâÁöÑ„ÄÇËøôÈáåÔºåË¶ÅÊ±ÇÊàë‰ª¨‰ª•ÊûÅÂ§ßÁöÑÁÅµÊ¥ªÊÄß„ÄÅÊú∫Âä®ÊÄß‰∏éÂàõÈÄ†ÊÄßÔºåÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥„ÄÇÂõ∫ÊâßËá™Â∑±ÁöÑÊ≠ªÂÖ¨ÂºèÊàñËÄÅÂäûÊ≥ïÔºåÁªìÊûúÂøÖÁÑ∂‰ºöÈÅ≠Âèó‰∏•ÈáçÁöÑÂ§±Ë¥•ÔºåËÄåËææ‰∏çÂà∞ÁõÆÁöÑÂú∞„ÄÇ Á¨¨‰∏âÔºåÂú®‰ªªÂä°Á≠âËßÑÂÆö‰πãÂêéÔºåÂ∞±Â∫îËØ•Á´ãÂàªÂºÄÂßãËá™Â∑±ÁöÑÂÆûÈôÖÂ∑•‰Ωú„ÄÇ Êàë‰ª¨ÊòØÈù©ÂëΩÂÆ∂ÔºåË°åÂä®ÂÆ∂ÔºåËÄå‰∏çÊòØÁ©∫Ë∞àÂÆ∂„ÄÇ‚ÄúËÆÆËÄå‰∏çÂÜ≥„ÄÅÂÜ≥ËÄå‰∏çË°å‚ÄùÁöÑÊÅ∂‰π†ÊÉØÔºåÊàë‰ª¨ÈùíÂπ¥ÊòØÂÜ≥‰∏çÂ∫îËØ•Â≠¶‰π†ÁöÑ„ÄÇÊàë‰ª¨ÂøÖÈ°ªÊääÊàë‰ª¨Ëá™Â∑±ÊâÄÂÜ≥ÂÆöÁöÑÊñπÈíà‰∏éËÆ°ÂàíÊù•ËßÅËØ∏ÂÆûË°å„ÄÇÂè™ÊúâÈù©ÂëΩÁöÑË°åÂä®ÊâçËÉΩÊîπÈÄ†‰∏ñÁïå„ÄÇÈù©ÂëΩÁöÑ‰ºü‰∫∫È©¨ÂÖãÊÄùÊõæÁªèËØ¥ËøáÔºåÊàë‰ª¨ÁöÑ‰ªªÂä°‰∏ç‰ΩÜÂú®ËÆ§ËØÜ‰∏ñÁïåÔºåËÄå‰∏ªË¶ÅÁöÑÂú®ÊîπÈÄ†‰∏ñÁïå„ÄÇË¶ÅÊîπÈÄ†‰∏ñÁïåÂ∞±Ë¶ÅÊúâÈù©ÂëΩÁöÑÂÆûÈôÖÂ∑•‰ΩúÔºåËÄå‰∏î‰πüÂè™ÊúâÂú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÔºåÊàë‰ª¨ÊâçÊõ¥ËÉΩËøõ‰∏ÄÊ≠•Âú∞ËÆ§ËØÜ‰∏ñÁïåÔºåÊõ¥Ê≠£Á°ÆÂú∞Êù•ÂÜ≥ÂÆöËá™Â∑±ÁöÑ‰ªªÂä°‰∏éÂ∑•‰ΩúÊñπÊ≥ïÊñπÂºèÁ≠â„ÄÇ‰πüÂè™ÊúâÂÆûÈôÖÂ∑•‰ΩúÔºåËÉΩÂ§üËÄÉÈ™åÊàë‰ª¨ËøáÂéªÁöÑÂÜ≥ÂÆöÊòØÂê¶Ê≠£Á°ÆÔºåÂÖÖÂÆû‰∏éÂèëÂ±ïÊàë‰ª¨ÁöÑÂÜ≥ÂÆöÔºåÊîπÊ≠£ÈîôËØØÁ≠â„ÄÇ ÊâÄ‰ª•Êàë‰ª¨ÈùíÂπ¥Âú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠‰πü‰ªçÁÑ∂‰∏çÊòØÁõ≤ÁõÆÂú∞‰π±Âπ≤‰∏ÄÈ°øÔºåËÄåË¶ÅÊó∂Êó∂ÂàªÂàªÊ≥®ÊÑèËá™Â∑±Âú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÊâÄÁ¢∞Âà∞ÁöÑ‰∏ÄÂàáÈóÆÈ¢òÔºåÊÄªÁªìËá™Â∑±Âú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÁöÑÁªèÈ™å„ÄÇÂ¶ÇÊûúÂú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ËØÅÊòéËøáÂéªËá™Â∑±ÁöÑÂÜ≥ÂÆöÊòØ‰∏çÊ≠£Á°ÆÁöÑÔºåÊòØÂÅö‰∏çÈÄöÁöÑÔºåÈÇ£Ëá™Â∑±Â∫îËØ•ÊØ´Êó†ÊÄúÊÉúÂú∞ÊäõÂºÉËøáÂéªËá™Â∑±ÁöÑÂÜ≥ÂÆöÔºåËÄåÊ†πÊçÆËá™Â∑±ÂØπ‰∫éÂÖ∑‰ΩìÊÉÖÂÜµÁöÑÊñ∞ÁöÑ‰∫ÜËß£Êù•ÈáçÊñ∞ÂÜ≥ÂÆöËá™Â∑±ÁöÑ‰ªªÂä°„ÄÇÂ¶ÇÊûúÊúâÈÉ®ÂàÜÁöÑÈîôËØØÔºåÂç≥Â∫îÊîπÊ≠£ÈÉ®ÂàÜÁöÑÈîôËØØ„ÄÇÂ¶ÇÊûúÊúâ‰∏çÂ§üÁöÑÂú∞ÊñπÔºåÂç≥Â∫î‰ª•Êñ∞ÁöÑÁªèÈ™å‰Ωø‰πãÂÖÖÂÆûÔºå‰Ωø‰πãÂèëÂ±ï„ÄÇËøôÈáåÊâÄÈúÄË¶ÅÁöÑÊòØËôöÂøÉÁöÑÊúç‰ªéÁúüÁêÜÁöÑÊÄÅÂ∫¶ÔºåËÄå‰∏çÊòØ‚ÄúËá™‰ΩúËÅ™Êòé‚ÄùÂéªËõÆÂπ≤„ÄÇ‰∏çÈ°æ‰∫ãÂÆûÁöÑËõÆÂπ≤ÔºåÊòØ‰ºöÁ¢∞Âà∞ÈíâÂ≠ê‰ª•Ëá≥ÊØÅÁÅ≠Ëá™Â∑±ÁöÑ„ÄÇ ÊâÄ‰ª•Êàë‰ª¨ÁöÑÈùíÂπ¥ÔºåÂ∫îËØ•Êó∂Êó∂ÂàªÂàªÂú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÂÆûË°åÂ∑•‰ΩúÁöÑÊ£ÄÊü•ÔºåÂèëÂ±ïËá™ÊàëÊâπËØÑÔºåÊÄªÁªìÂ∑•‰Ωú‰∏≠ÁöÑÁªèÈ™å‰∏éÊïôËÆ≠Ôºå‰ΩøÊàë‰ª¨ÁöÑÂ∑•‰ΩúËÉΩÂ§üÊõ¥Â•ΩÂú∞ÂæóÂà∞ËøõÊ≠•‰∏éÊàêÁª©„ÄÇ‰∏ÄÂàáÂÖàËøõÁöÑÈù©ÂëΩÁöÑÁêÜËÆ∫ÔºåÊàë‰ª¨‰πüÂè™ËÉΩÂΩì‰ΩúË°åÂä®ÁöÑÊåáÂçóËÄå‰∏çËÉΩÂΩì‰ΩúÊïôÊù°„ÄÇ‰∏ÄÂàáÂÖàËøõÁöÑÈù©ÂëΩÁêÜËÆ∫Ôºå‰πüË¶ÅÂú®ÂÆûË∑µ‰∏≠ÂÖÖÂÆûËá™Â∑±‰∏éÂèëÂ±ïËá™Â∑±ÁöÑ„ÄÇ ÊàëÊÉ≥ÔºåËøô‰∏âÁÇπÊòØÊàë‰ª¨ÈùíÂπ¥‰∫∫Âú®Â∑•‰Ωú‰∏≠ÊâÄÂ∫îËØ•Ê≥®ÊÑèÁöÑ„ÄÇËøô‰∏âÁÇπÁöÑ‰∏≠ÂøÉÊâÄÂú®ÔºåÂç≥ÊòØË¶Å‰ΩøÊàë‰ª¨ÁöÑÈùíÂπ¥‰∏ç‰ΩÜË¶ÅÊúâÁêÜÊÉ≥ÔºåÊúâÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂÜ≥ÂøÉÔºåËÄå‰∏îË¶ÅÂ≠¶‰π†ÂÆûÁé∞ÁêÜÊÉ≥ÁöÑÂÖ∑‰ΩìÂäûÊ≥ï„ÄÇ ÂΩìÁÑ∂ÔºåÈùíÂπ¥‰∫∫ÁªàÁ©∂ÊòØÈùíÂπ¥‰∫∫Ôºå‰ªñ‰ª¨‰∏ÄËà¨ÊòØÂØå‰∫éÈù©ÂëΩÁÉ≠ÊÉÖËÄåÁº∫‰πèÂÆûÈôÖÁªèÈ™åÔºåÂõ†Ê≠§‰ªñ‰ª¨ÊúâÊó∂Ë¶Å‚ÄúÊÑüÊÉÖÁî®‰∫ã‚ÄùÔºåÊúâÁÇπ‚ÄúÂÜ≤Âä®‚ÄùÔºåÊúâÁÇπ‚ÄúÂπºÁ®öÁóÖ‚Äù„ÄÇÊàë‰ª¨ÊåáÂá∫ÈùíÂπ¥ÁöÑËøô‰∫õÂº±ÁÇπÔºåÂπ∂‰∏çÊÉ≥‰ª•Ê≠§Êù•Ë¥£Â§áÈùíÂπ¥ÔºåËÄåÂè™ÊòØË¶ÅÊ±ÇÈùíÂπ¥‰ª¨Âú®Ëá™Â∑±ÁöÑÂ∑•‰Ωú‰∏≠Ê≥®ÊÑèÂà∞Ëá™Â∑±ÁöÑËøô‰∫õÂº±ÁÇπÔºåÂÖãÊúçËøô‰∫õÂº±ÁÇπÔºå‰ΩøËá™Â∑±ÈÄêÊ∏êÂú∞Âú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠Êàê‰∏∫‰∏Ä‰∏™ÊØîËæÉ‚ÄúËÉΩÂπ≤ÁöÑ‚Äù‰∏é‚ÄúËÄÅÁªÉÁöÑ‚ÄùÈù©ÂëΩÈùíÂπ¥„ÄÇ Âõõ„ÄÅË¶ÅÂêåÁæ§‰ºóÂú®‰∏ÄËµ∑ÂéªÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥ Êàë‰ª¨Âú®ÂâçÈù¢Â∑≤ÁªèËÆ≤ËøáÔºåË¶ÅÂÆûÁé∞Èù©ÂëΩÁöÑÁêÜÊÉ≥Ôºå‰∏ÄÂÆöË¶Å‰æùÈù†‰∫é‰∏ÄÂÆöÁöÑÁ§æ‰ºöÁöÑÂäõÈáèÔºåËøôÁ§æ‰ºöÁöÑÂäõÈáèÂ∞±ÊòØÂçÉÂçÉ‰∏á‰∏áÁöÑÁæ§‰ºó„ÄÇÂéÜÂè≤‰∏äÁöÑ‰ºü‰∫∫ÔºåÂõ∫ÁÑ∂Âú®ÂàõÈÄ†‰∫∫Á±ªÂéÜÂè≤‰∏≠Ëµ∑‰∫ÜÂæàÂ§ßÁöÑ‰ΩúÁî®ÔºåÁÑ∂ËÄåÂ¶ÇÊûúÊ≤°ÊúâÁæ§‰ºóÁöÑÊã•Êä§‰∏éÁæ§‰ºóÁöÑË°åÂä®Ôºå‰ªª‰ΩïÊé®Âä®ÂéÜÂè≤ÂâçËøõÁöÑÁêÜÊÉ≥ÈÉΩÊòØ‰∏çÂèØËÉΩÂÆûÁé∞ÁöÑ„ÄÇÊâÄ‰ª•Êàë‰ª¨ÈùíÂπ¥Ë¶ÅÂÆûÁé∞Ëá™Â∑±ÁöÑÁêÜÊÉ≥ÔºåÂ∞±ÂøÖÈ°ªË¶ÅËÉΩÂ§üÁéáÈ¢ÜÁæ§‰ºóÂéª‰∏∫Ëá™Â∑±ÁöÑÁêÜÊÉ≥Â•ãÊñó„ÄÇ ÈùíÂπ¥Âú®Èù©ÂëΩË°åÂä®‰∏≠ËÇØË¥üË¥£ÔºåËÇØÂá∫Â§¥ÔºåËÇØÊâìÂÖàÈîãÔºåËøôÊòØÂæàÂèØÂÆùË¥µÁöÑÂìÅË¥®„ÄÇÂú®‰∏≠ÂõΩÊ∞ëÊóèËß£ÊîæÁöÑÂéÜÂè≤‰∏≠ÔºåÈùíÂπ¥Â∏∏Â∏∏Ëµ∑ÁùÄÂÖàÈîãÁöÑ‰ΩúÁî®ÔºåÂ∞±ÊòØÁî±‰∫éÈùíÂπ¥ËøôÁßç‰ºòËâØÂìÅË¥®ÁöÑÁªìÊûú„ÄÇ‰ΩÜÊòØÂ∞±Âú®Ëøô‰∏™ÊñπÈù¢ÔºåÈÉ®ÂàÜÈùíÂπ¥‰ªçÁÑ∂Ë°®Áé∞Âá∫‰ªñ‰ª¨ÁöÑÂº±ÁÇπ„ÄÇ‰ªñ‰ª¨ËÇØË¥üË¥£ÔºåËÇØÂá∫Â§¥ÔºåËÇØÊâìÂÖàÈîãÁöÑÂìÅË¥®ÔºåÂæÄÂæÄÂèëÂ±ïÂà∞Â•ΩÂá∫È£éÂ§¥ÔºåÁõÆÁ©∫‰∏ÄÂàáÔºåËá™È´òËá™Â§ßÔºåÂåÖÂäûÔºå‰∏çËÄêÁÉ¶ÔºåËÑ±Á¶ªÁæ§‰ºóÁöÑÂÅèÂêë„ÄÇËøôÁßç‰æãÂ≠êÔºåÊàëÊòØËßÅÂæóÂæàÂ§öÁöÑÔºå‰∏çÁü•ÈÅì‰Ω†‰ª¨ËßÅËøáÊ≤°Êúâ?ÊàëÊÉ≥‰∏ÄÂÆöÊòØËßÅËøáÁöÑ„ÄÇ Âú®ÈôïÂåóÂÖ¨Â≠¶Â≠¶‰π†ÁöÑÈùíÂπ¥Ôºå‰∏ÄËà¨Âú∞ÊòØËßâÊÇüÁ®ãÂ∫¶ËæÉÈ´òÁöÑ‰∏ÄÈÉ®ÂàÜ‰∏≠ÂõΩ‰∫∫Ôºå‰ªñ‰ª¨ÁöÑÁ°ÆÊúâË¥£‰ªªÂéªÈ¢ÜÂØºÂè¶‰∏ÄÈÉ®ÂàÜÊØîËæÉËêΩÂêéËÄåÂèàÂç†ÊúÄÂ§ßÂ§öÊï∞ÁöÑ‰∏≠ÂõΩ‰∫∫ÔºåÂèëÂä®‰ªñ‰ª¨ÔºåÊïôËÇ≤‰ªñ‰ª¨ÔºåËÆ≠ÁªÉ‰ªñ‰ª¨Ôºå‰ª•ÊèêÈ´ò‰ªñ‰ª¨ÁöÑÊîøÊ≤ªÊ∞¥Âπ≥‰∏éÁªÑÁªáÂäõÈáè„ÄÇÊ≤°ÊúâÂÖàÈîãÁöÑÈ¢ÜÂØºÔºåÂπøÂ§ßÁöÑÊØîËæÉËêΩÂêéÁöÑÁæ§‰ºóÔºåÊòØ‰∏ç‰ºöËá™Â∑±Ëµ∞Âà∞ÂÖàÈîãÁöÑÂú∞‰ΩçÁöÑÔºåËøôÊòØÊó†ÂèØÂê¶ËÆ§ÁöÑÁúüÁêÜ„ÄÇ ÁÑ∂ËÄåÊÄéÊ†∑ÂèØ‰ª•‰ΩøÊàë‰ª¨ÈôïÂÖ¨ÁöÑÈùíÂπ¥ËÉΩÂ§üË¥üÊãÖËµ∑Ëøô‰∏™ÂÖàÈîãÁöÑÈ¢ÜÂØºÁöÑË¥£‰ªªÂë¢?ÊòØ‰∏çÊòØÊàë‰ª¨ÈùíÂπ¥Ë£ÖÂá∫‰∏Ä‰∏™È¢ÜÂØºËÄÖÁöÑÊû∂Â≠êÔºåËá™ÂëΩ‰∏çÂá°ÔºåÁõÆÁ©∫‰∏ÄÂàáÔºåÂ∞±ËÉΩÂ§üÂÆûÁé∞Ëøô‰∏™È¢ÜÂØº‰ΩúÁî®Âë¢?ÊòØ‰∏çÊòØÂè™Ë¶ÅÊàë‰ª¨ÁöÑÈùíÂπ¥ÊääÊàë‰ª¨ÁöÑÁêÜÊÉ≥Âú®Áæ§‰ºóÂâçÈù¢‰∏ÄËß£Èáä‰∏ÄÂÆ£Â∏ÉÔºåÁæ§‰ºóÂ∞±‰ºöË∑ü‰∫ÜÊàë‰ª¨Ëµ∞ÔºåÂ∞±ÂÆûÁé∞‰∫ÜÊàë‰ª¨ÁöÑÈ¢ÜÂØº‰ΩúÁî®Âë¢?Ëøô‰∫õÈÉΩÊòØ‰∏çËÉΩÊàêÂäüÁöÑ„ÄÇ‰ªª‰ΩïÈ¢ÜÂØºËÄÖÔºåÂ¶ÇÊûúËá™ÂëΩ‰∏çÂá°ÔºåÁõÆÁ©∫‰∏ÄÂàáÔºåË£ÖÂá∫È¢ÜÂØºËÄÖÁöÑÊû∂Â≠êÔºåÈÇ£ÁªìÊûú‰ªñ‰∏ç‰ΩÜ‰∏çËÉΩÈ¢ÜÂØºÁæ§‰ºóÔºåËÄå‰∏î‰ºöËÑ±Á¶ªÁæ§‰ºó„ÄÇËá≥‰∫éÊääÂæàÁæé‰∏ΩÁöÑÁêÜÊÉ≥ËÆ≤ÁªôÁæ§‰ºóÂê¨;Áæ§‰ºóËá™ÁÑ∂ÂèØËÉΩÊù•Âê¨‰∏Ä‰∏ãÔºåÁÑ∂ËÄåË¶Å‰ªñ‰ª¨‰∏∫‰∫ÜËøô‰∏™ÁêÜÊÉ≥Êù•Áâ∫Áâ≤Â•ãÊñóÔºåÈÇ£ÂçïÈù†ËøôÁßçÂÆ£‰º†Â∑•‰ΩúÊòØ‰∏çËÉΩËææËá≥Âà∞ÁõÆÁöÑÁöÑ„ÄÇ È¢ÜÂØºÁæ§‰ºóÔºåÊòØ‰∏Ä‰ª∂ÈùûÂ∏∏‰∏çÂÆπÊòìÁöÑ‰∫ã„ÄÇÈùíÂπ¥‰∫∫ÂÜ≥‰∏çË¶ÅÊääËøô‰∏™ÈóÆÈ¢òÁúãÂæóÂ§™ÁÆÄÂçï‰∫Ü„ÄÇËøôÈáåÔºåÁ¨¨‰∏Ä‰∏™ÈóÆÈ¢òÔºåÂ∞±ÊòØË¶ÅÊ±ÇÊàë‰ª¨ÁöÑÈùíÂπ¥Âà∞Áæ§‰ºó‰∏≠Âéª„ÄÇÊàë‰ª¨ÁöÑÈùíÂπ¥ÂØπ‰∫é‚ÄúÁæ§‰ºó‚Äù‰∏§‰∏™Â≠óÁöÑËßÇÂøµÂ∏∏Â∏∏ÊòØÊØîËæÉÊäΩË±°ÁöÑÔºåÊúâÊó∂Êää‚ÄúÁæ§‰ºó‚ÄùÁêÜÊÉ≥ÂåñÔºåÊúâÊó∂Áúã‰∏çËµ∑‚ÄúÁæ§‰ºó‚ÄùÔºåËÄå‰∏çËÉΩÊ¥ªÁîüÁîüÂú∞Âéª‰∫ÜËß£‚ÄúÁæ§‰ºó‚Äù„ÄÇÊâÄ‰ª•‰∏ãÂÜ≥ÂøÉÂà∞Áæ§‰ºó‰∏≠ÂéªÔºåÂÆûÊòØÂºÄÂßãÈ¢ÜÂØºÁæ§‰ºóÊó∂ÁöÑÂøÖË¶ÅÁöÑ‰∏ÄÊ≠•„ÄÇ Êàë‰ª¨ÈùíÂπ¥Âà∞‰∫ÜÁæ§‰ºó‰∏≠‰πãÂêéÔºåÂ∞±Ë¶ÅÂ≠¶‰π†Â¶Ç‰ΩïÂéªÊé•ËøëÁæ§‰ºóÔºåÂéªÂêå‰ªñ‰ª¨ÁîüÊ¥ªÂú®‰∏ÄËµ∑ÔºåÂéª‰∫ÜËß£‰ªñ‰ª¨Ôºå‰ª•Ëá≥ÂèñÂæó‰ªñ‰ª¨ÁöÑ‰ø°‰ªª„ÄÇËøôÈáåÔºåÈ¶ñÂÖàÂ∞±ÊòØË¶ÅÊó∂Êó∂ÂàªÂàªÂéª‰∏∫Áæ§‰ºóÊúçÂä°ÔºåÂ§ÑÂ§ÑËÉΩÂ§ü‰∏∫‰ªñ‰ª¨Ë∞ãÂà©ÁõäÔºå‰∏∫‰ªñ‰ª¨ÁöÑÂà©ÁõäÁâ∫Áâ≤Ëá™Â∑±ÁöÑ‰∏ÄÂàá„ÄÇÂÖ∂Ê¨°ÔºåË¶ÅÊàë‰ª¨Â§ÑÂ§ÑË∞¶ÈÄäÂíåÊ∞îÔºåÂàªËã¶ËÄêÂä≥ÔºåÂÆΩÂÆèÂ§ßÈáèÔºåÊÄ•ÂÖ¨Â•Ω‰πâÔºåËØ≤‰∫∫‰∏çÂÄ¶ÔºåÂÅö‰∫∫ÂÆ∂ÁöÑÊ®°ËåÉ‰∏éÊïôÂ∏à„ÄÇÁ¨¨‰∏âÔºåË¶ÅËÉΩÂ§üÂõ¢Áªì‰∏éÂüπÂÖªÁæ§‰ºó‰∏≠ÁöÑÁßØÊûÅÂàÜÂ≠êÔºåÂèëÊå•ÁßØÊûÅÂàÜÂ≠êÁöÑ‰ΩúÁî®„ÄÇ‰æùÈù†ÁßØÊûÅÂàÜÂ≠êÊé®Âä®ÂÖ®‰Ωì„ÄÇÁ¨¨ÂõõÔºåË¶Å‰ª•Ê∞ë‰∏ªÁöÑÁ≤æÁ•û‰∏éÊ∞ë‰∏ªÁöÑÂ∑•‰ΩúÊñπÊ≥ïÊù•Âê∏Êî∂‰∏éÊïôËÇ≤Áæ§‰ºóÁßØÊûÅÂèÇÂä†Â∑•‰ΩúÔºå‰∏çË¶Å‰∏™‰∫∫ÂåÖÂäû‰∏ÄÂàá„ÄÇÁ¨¨‰∫îÔºåË¶ÅÂñÑ‰∫éÂ≠§Á´ãÊúÄÈ°ΩÂõ∫ÁöÑÂ∞ëÊï∞Âùè‰∫∫Ôºå‰æùÈù†Áæ§‰ºóÁöÑÂÖ¨ÊÑ§ÂéªÊâìÂáª‰ªñ‰ª¨‰∏éÈ©±ÈÄê‰ªñ‰ª¨„ÄÇÂè™Ë¶ÅËøôÊ†∑„ÄÇÁæ§‰ºóÂ∞±‰ºöÊääÊàë‰ª¨ÂΩì‰Ωú‰ªñ‰ª¨‚ÄúËá™Â∑±ÁöÑ‰∫∫‚ÄùÔºåÂ∞±‰ºö‰ø°‰ªªÊàë‰ª¨ÔºåÊé•ÂèóÊàë‰ª¨ÁöÑÈ¢ÜÂØº„ÄÇ Êó†ÁñëÁöÑÔºåÂΩìÊàë‰ª¨ÁúüÊ≠£Ê∑±ÂÖ•Âà∞Áæ§‰ºó‰∏≠ÂéªÊó∂ÔºåÊàë‰ª¨ÂøÖÁÑ∂‰ºöÁúãÂà∞Áæ§‰ºó‰∏≠ÊúâËÆ∏Â§öËêΩÂêéÊÑèËØÜÔºåËêΩÂêéÁöÑÊÄùÊÉ≥‰∏é‰π†ÊÉØÔºå‰ªñ‰ª¨ÁöÑÁã≠ÈöòÁöÑÂÆóÊ≥ïÁöÑ‰∏éË°å‰ºöÁöÑËßÇÁÇπ„ÄÇËøô‰∏ÄÂàáÊàë‰ª¨ÈÉΩ‰ºöÁ¢∞Âà∞ÁöÑ„ÄÇÁÑ∂ËÄåÊàë‰ª¨ÊòØ‰∏çÊòØÂõ†Ê≠§Â∞±Â§±ÊúõËÄåËÑ±Á¶ª‰ªñ‰ª¨Âë¢?ÂÜ≥‰∏çÊòØÁöÑ„ÄÇÊàë‰ª¨ÁöÑË¥£‰ªªÔºåÊ≠£ÊòØË¶ÅÊèêÈ´ò‰ªñ‰ª¨ÁöÑÊîøÊ≤ªÊ∞¥Âπ≥ÔºåÂÖãÊúç‰ªñ‰ª¨ÁöÑËêΩÂêéÊÄß„ÄÇ‰ΩÜÊòØÂΩìÊàë‰ª¨ËÆ§ÁúüÂú®Áæ§‰ºó‰∏≠Â∑•‰ΩúÊó∂ÔºåÊàë‰ª¨Êõ¥‰ºöÁ¢∞Âà∞Áæ§‰ºó‰∏≠ÁöÑÂÖâÊòéÁöÑ‰∏ÄÈù¢Ôºå‰ªñ‰ª¨ÁöÑ‰∏∞ÂØåÁöÑÈù©ÂëΩÊÄß‰∏é‰ªñ‰ª¨ÁöÑ‰ºüÂ§ßÁöÑÈù©ÂëΩÂäõÈáè„ÄÇÊàë‰ª¨Âú®‰ªñ‰ª¨ÁöÑÊ∑±Â§ÑÔºåÂèØ‰ª•ÁúãÂà∞Âú®ÊóßÁ§æ‰ºöÁöÑ‰∏äÂ±ÇÊâÄÊ≤°ÊúâÁöÑÈÇ£ÁßçÂæ∑ÊÄß„ÄÇ‰ªñ‰ª¨ÁöÑÂäõÈáèÔºå‰ªñ‰ª¨ÁöÑÂæ∑ÊÄßÔºåÂèØ‰ª•ÁªôÊàë‰ª¨‰ª•ÊúÄÂ§ßÁöÑ‰ø°ÂøÉÔºå‰ΩøÊàë‰ª¨Áõ∏‰ø°‰ªñ‰ª¨ÊòØÊàë‰ª¨ÁöÑÊúÄ‰ºüÂ§ßÁêÜÊÉ≥ÁöÑË¥üÊãÖËÄÖÔºåËÄå‰∏î‰ªñ‰ª¨ÊúÄÂêé‰∏ÄÂÆöËÉΩËÉúÂà©„ÄÇËøôÂ∞±‰ΩøÊàë‰ª¨Âú®‰ªñ‰ª¨‰∏≠Èó¥ÊÑüËßâÂà∞‰∏ÄÁßçÂ¥áÈ´òÁöÑÂÆâÊÖ∞‰∏éÂñúÊÇ¶ÔºåËøôÂ∞±‰ΩøÊàë‰ª¨Âú®‰ªª‰ΩïÂõ∞ÈöæÁöÑÊÉÖÂΩ¢‰πã‰∏ãÔºåÊÄªÊòØ‰∏ç‰ºöËÑ±Á¶ª‰ªñ‰ª¨ÔºåËÄå‰∏îÊÄªÊòØË¶Å‰æùÈù†‰ªñ‰ª¨ÁöÑÂäõÈáèÊù•ÂÖãÊúç‰∏ÄÂàáÂõ∞Èöæ„ÄÇ‰∫ãÂÆûÂ∑≤ÁªèËØÅÊòéÔºåÊ≠£Âú®ËØÅÊòéÔºåÂ∞ÜË¶ÅËØÅÊòéÔºå‰∏ÄÂàáÊàë‰ª¨ÂΩìÂâçÁöÑÂõ∞ÈöæÔºåÂè™Ë¶ÅÊàë‰ª¨ÁúüËÉΩÂèëÂä®ÂçÉÁôæ‰∏áÁæ§‰ºóËµ∑Êù•ÔºåÂπ∂‰∏î‰æùÈù†‰ªñ‰ª¨ÁöÑÂäõÈáèÔºåÂ∞±ÊòØ‰∏ÄÂÆöËÉΩÂ§üÂÖãÊúçÁöÑ„ÄÇ‰∏ÄÂàáÂâçËøõÁöÑÈù©ÂëΩËÄÖÔºåÊòØÂÜ≥‰∏çÂ∫îËØ•ÊÉßÊÄïÁæ§‰ºóÁöÑÔºåÁõ∏ÂèçÁöÑÔºå‰ªñ‰ª¨ÂøÖÈ°ª‰æùÈù†Áæ§‰ºó„ÄÇ È¢ÜÂØºÁæ§‰ºóÁöÑÁ¨¨‰∫å‰∏™ÈóÆÈ¢òÔºåÂ∞±ÊòØË¶ÅÂñÑ‰∫é‰ΩøÁæ§‰ºóÊ†πÊçÆËá™Ë∫´ÁöÑÁªèÈ™åÊù•‰∫ÜËß£Êàë‰ª¨ÁöÑÈ¢ÜÂØºÁöÑÊ≠£Á°Æ„ÄÇÊØîÂ¶ÇÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÁöÑÊñπÈíàÔºåÂºÄÂßãÊó∂‰∏çÊòØÂ§ßÂ§öÊï∞‰∏≠ÂõΩ‰∫∫ÈÉΩËÉΩ‰∫ÜËß£‰∏éÊã•Êä§ÁöÑ„ÄÇÂΩìÊó∂Êàë‰ª¨Áî®‰ªÄ‰πàÂè£Âè∑‰ΩøÁæ§‰ºóÊ†πÊçÆËá™Ë∫´ÁöÑÁªèÈ™åÊù•‰∫ÜËß£Êàë‰ª¨ÁöÑÊñπÈíàÁöÑÊ≠£Á°ÆÂë¢?ËøôÂ∞±ÊòØ‚ÄúÂÅúÊ≠¢ÂÜÖÊàòÔºå‰∏ÄËá¥ÊäóÊó•‚ÄùÁöÑÂè£Âè∑„ÄÇÊØè‰∏Ä‰∏™ÊúâËâØÂøÉÁöÑ‰∏≠ÂõΩ‰∫∫ÔºåÂØπ‰∫é‰∏≠ÂõΩÂÜÖÊàòÁöÑÁóõËã¶ÈÉΩÊòØÂàáË∫´ÊÑüÂèóÂà∞ÁöÑÔºå‰ªñ‰ª¨ÈÉΩËÉΩÂ§üÊáÇÂæóÊó•ÂØáÁöÑÊó†ÈôêÂà∂ÁöÑ‰æµÊé†ÂêåÂÜÖÊàòÊòØ‰∏çËÉΩÂàÜÁ¶ªÁöÑ„ÄÇÂõ†Ê≠§‰ªñ‰ª¨‰πüËÆ∏Ëøò‰∏ç‰∫ÜËß£ÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÁöÑÊñπÈíàÔºåÁÑ∂ËÄåÂØπ‰∫é‚ÄúÂÅúÊ≠¢ÂÜÖÊàòÔºå‰∏ÄËá¥ÊäóÊó•‚ÄùÁöÑÂè£Âè∑ÊòØÁÉ≠ÁÉàÊã•Êä§ÁöÑ„ÄÇÁªìÊûúÔºåÂÜÖÊàòÂÅúÊ≠¢‰∫ÜÔºå‰∏≠ÂõΩÂºÄÂßãÁªü‰∏Ä‰∫ÜÔºåÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÂæóÂà∞‰∫ÜÂàùÊ≠•ÁöÑÊàêÂäü„ÄÇ‰∏ç‰πÖÂç¢Ê≤üÊ°•‰∫ãÂèòÂèëÁîü‰∫Ü„ÄÇÂΩìÊó∂Êàë‰ª¨Áî®‰ªÄ‰πàÂè£Âè∑‰ΩøÁæ§‰ºóÊ†πÊçÆËá™Ë∫´ÁöÑÁªèÈ™åÊù•‰∫ÜËß£Êàë‰ª¨ÁöÑÊñπÈíàÁöÑÊ≠£Á°ÆÂë¢?ËøôÂ∞±ÊòØ‚Äú‰∏∫‰øùÂç´Âπ≥Ê¥•„ÄÅ‰øùÂç´ÂçéÂåó„ÄÅ‰øùÂç´ÂÖ®‰∏≠ÂõΩËÄåÊàò‚Äù„ÄÇÊØè‰∏Ä‰∏™ÊúâËâØÂøÉÁöÑ‰∏≠ÂõΩ‰∫∫ÔºåÂØπ‰∫éÊó•ÂØáÁöÑËøôÁßçÊó†ÈôêÂà∂ÁöÑ‰æµÊé†Â∑≤ÁªèÂà∞‰∫Ü‰∏çËÉΩÂÜçË°åÂøçËÄêÁöÑÂú∞Ê≠•Ôºå‰ªñ‰ª¨ÈÉΩË¶ÅÊ±ÇÊäµÊäó„ÄÇÂÖ®ÂõΩÊäóÊàòÂºÄÂßã‰∫ÜÔºå‰∫éÊòØÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÊúâ‰∫ÜËøõ‰∏ÄÊ≠•ÁöÑÊàêÂäü„ÄÇÂú®ÊäóÊàòÂèëÂä®‰πãÂêéÔºåÊàë‰ª¨Áî®‰ªÄ‰πàÂè£Âè∑‰ΩøÁæ§‰ºóÊ†πÊçÆÂàáË∫´ÁöÑÁªèÈ™åÊù•‰∫ÜËß£Êàë‰ª¨ÁöÑÊñπÈíàÁöÑÊ≠£Á°ÆÂë¢?ËøôÂ∞±ÊòØ‚ÄúÂùöÊåÅÊäóÊàò„ÄÅ‰∫âÂèñÊäóÊàòÊúÄÂêéËÉúÂà©‚ÄùÁöÑÂè£Âè∑„ÄÇÊØè‰∏Ä‰∏™ÊúâËâØÂøÉÁöÑ‰∏≠ÂõΩ‰∫∫ÔºåÂØπ‰∫éËøô‰∏™Âè£Âè∑ÊòØËÉΩÂ§üÊáÇÂæóÁöÑÔºåÂõ†‰∏∫Ë∞ÅÈÉΩÂèØ‰ª•ÁúãÂà∞ÔºåÂ¶ÇÊûú‰∏≠ÂõΩ‰ªäÂ§©ÂçäÈÄîÊäïÈôçÂ¶•ÂçèÔºåÈÇ£‰∏≠ÂõΩÂ∞±‰ºö‰∫°ÂõΩÔºå‰∏≠ÂõΩ‰∫∫Â∞±‰ºöÂèò‰∏∫‰∫°ÂõΩÂ•¥ÔºåËÄå‰∫°ÂõΩÂ•¥ÊòØ‰∏çÂ•ΩÂΩìÁöÑ„ÄÇ‰∫éÊòØÊäóÊó•Ê∞ëÊóèÁªü‰∏ÄÊàòÁ∫øÊúâ‰∫ÜÊõ¥Ëøõ‰∏ÄÊ≠•ÁöÑÊàêÂäü„ÄÇ Ëøô‰∏çËøáÊòØ‰∏æ‰∏Ä‰∏™‰æãÂ≠êÁΩ¢‰∫Ü„ÄÇ‰∏ç‰ΩÜÂú®ÊèêÂá∫Âè£Âè∑‰∏äÊòØÂ¶ÇÊ≠§ÔºåÂç≥Âú®Êñó‰∫âÂΩ¢ÂºèÁöÑÈááÁî®‰∏ä‰πüÊòØÂ¶ÇÊ≠§„ÄÇÊàë‰ª¨Ë¶Å‰ΩøËá™Â∑±‰∏çËÑ±Á¶ªÁæ§‰ºóÔºåÂøÖÈ°ªÈááÂèñÈÇ£ÁßçËÉΩÂ§üÂê∏ÂºïÁæ§‰ºóÂèÇÂä†ÁöÑÊñó‰∫âÂΩ¢ÂºèÔºå‰ªñ‰ª¨ËÆ§‰∏∫‰ªäÂ§©ÂèØ‰ª•ËÄå‰∏îÈúÄË¶ÅÁöÑÊñó‰∫âÂΩ¢ÂºèÔºå‰ª•ÈîªÁÇº‰ªñ‰ª¨ÔºåÊèêÈ´ò‰ªñ‰ª¨ÁöÑËßâÊÇüÁ®ãÂ∫¶‰∏éÁªÑÁªáÂäõÈáè„ÄÇÂú®Êñó‰∫âÂΩ¢Âºè‰∏äÊòØÂ¶ÇÊ≠§ÔºåÂú®ÂÖ∂‰ªñÈóÆÈ¢ò‰∏ä‰πüËé´‰∏çÂ¶ÇÊ≠§„ÄÇ ‰∏ç‰º∞ËÆ°Áæ§‰ºó‰ªäÂ§©ËßâÊÇüÁöÑÁ®ãÂ∫¶ÔºåËÄåÊèêÂá∫ÂæàÈ´òÂæà‚ÄúÂ∑¶‚ÄùÁöÑÂè£Âè∑ÔºåÊòØÂÜ≥ÁÑ∂‰∏çËÉΩÂä®ÂëòÁæ§‰ºóÂèÇÂä†ËøêÂä®ÁöÑ„ÄÇËøôÈáåÈúÄË¶ÅÈááÂèñÂêÑÁßçËøáÊ∏°ÁöÑÂäûÊ≥ïÊù•Âä®Âëò‰ªñ‰ª¨ÔºåÂÜçÂú®ËøêÂä®‰∏≠ÊèêÈ´ò‰ªñ‰ª¨Ëµ∞ÂêëÊàë‰ª¨ÁöÑÁêÜÊÉ≥„ÄÇËøôÈáåÔºå‰∏ÄÂàáÊÄ•ÊÄßÁóÖÊòØÊúâÂÆ≥ÁöÑ;ËøôÈáåÔºåÈ¢ÜÂØºËÄÖÁöÑÂä™ÂäõÂ∑•‰ΩúÁöÑÁ≤æÁ•ûÔºåË¶ÅÂêåÊûÅÂ§ßÁöÑÂøçËÄêÂøÉÈÖçÂêàËµ∑Êù•„ÄÇÁæ§‰ºóÁöÑËßâÊÇüÁöÑÈÄüÂ∫¶Ôºå‰∏ç‰ΩÜ‰æùÈù†‰∫éÊàë‰ª¨ÁöÑÂ∑•‰ΩúÔºåËÄå‰∏î‰æùÈù†‰∫éÊó†Êï∞ÂÆ¢ËßÇÁöÑÊîøÊ≤ªÁªèÊµéÁöÑË¶ÅÁ¥†„ÄÇÈù©ÂëΩÊòØÂÜ≥‰∏çËÉΩÂá≠‰∏ªËßÇÁöÑÊÑøÊúõÊù•Âà∂ÈÄ†ÁöÑ„ÄÇÂú®Ê≤°ÊúâÈù©ÂëΩÂΩ¢ÂäøÁöÑÊó∂ÂÄôÔºåÁâπÂà´Âú®ÂèçÂä®ÁöÑÈªëÊöóÁöÑÊó∂ÊúüÔºåÁæ§‰ºóËßâÊÇüÁöÑÈÄüÂ∫¶ÈùûÂ∏∏ÁºìÊÖ¢„ÄÇÈÇ£Êó∂Êàë‰ª¨Â¶ÇÊûúÊ≤°ÊúâÁ≠âÂæÖÊó∂Êú∫ÁöÑÂøçËÄêÂøÉÔºåËÄåÊÉ≥Áî®Âº∫ËøΩÂëΩ‰ª§ÁöÑÊñπÊ≥ïÂéªÂØπÂæÖÁæ§‰ºóÔºåÈÇ£ÁªìÊûúÊòØÂøÖÁÑ∂‰ºöÂ§±Ë¥•ÁöÑ„ÄÇÊâÄË∞ìÁ≠âÂæÖÊó∂Êú∫ÔºåÂΩìÁÑ∂‰∏çÊòØ‰∏çË¶ÅÂä™ÂäõÂ∑•‰ΩúÔºåËÄåÊòØÊääÊàë‰ª¨ÁöÑÂ∑•‰ΩúÊîæÂú®ÂáÜÂ§áÂøÖË¶ÅÁöÑÂäõÈáè‰∏äÔºå‰ª•‰æøÂ∞ÜÊù•Èù©ÂëΩÂΩ¢ÂäøÂà∞Êù•Êó∂ÔºåÁæ§‰ºóÊàêÂçÉÊàê‰∏áÂç∑ÂÖ•Èù©ÂëΩÊµ™ÊΩÆ‰∏≠Êó∂ÔºåÊàë‰ª¨ËÉΩÂ§üÁ´ôÂú®Êµ™ÊΩÆÁöÑÂâçÈù¢Ë¥üÊãÖËµ∑È¢ÜÂØºËÄÖÁöÑË¥£‰ªª„ÄÇ Âú®Áæ§‰ºóÂ∑•‰ΩúÁöÑÂëΩ‰ª§‰∏ª‰πâÔºåÁªìÊûúÊ≤°Êúâ‰∏çÈÅ≠ÂèóÂ§±Ë¥•ÁöÑ„ÄÇÁæ§‰ºóÂú®ÊüêÁßçÂéãÂäõ‰πã‰∏ãÔºåÂèØËÉΩÂãâÂº∫Âú∞Êúç‰ªéÔºåÁÑ∂ËÄå‰∏ÄÂàá‰∏çÊ†πÊçÆÁæ§‰ºóËá™ËßâÁöÑÊúç‰ªéÔºåËøùÂèç‰∫é‰ªñ‰ª¨ÊÑèÂøóÁöÑÊúç‰ªéÔºåÊúÄÂêéÂøÖÁÑ∂‰ºöÂºïËµ∑‰ªñ‰ª¨ÂèçÊäóÂπ∂Êé®ÁøªÈÇ£‰∫õÂéãËø´ËÄÖÊàñÂëΩ‰ª§‰∏ª‰πâËÄÖ„ÄÇÂè™ÊúâÁæ§‰ºóËá™ËßâÁöÑËá™ÊÑøÁöÑÊúç‰ªéÔºåÊâçËÉΩÂèëÊå•Áæ§‰ºóÁöÑÁßØÊûÅÊÄß‰∏éÂàõÈÄ†ÂäõÈáèÂà∞ÊúÄÈ´òÈôêÂ∫¶ÔºåÊù•ÂÆûÁé∞Êàë‰ª¨ËøúÂ§ßÁöÑÁêÜÊÉ≥„ÄÇÊâÄ‰ª•Êàë‰ª¨È¢ÜÂØºÁæ§‰ºóÁöÑ‰∏≠ÂøÉÈóÆÈ¢òÔºå‰πüÂ∞±ÊòØÂ¶Ç‰Ωï‰ΩøÁæ§‰ºóÂøÉÊÇ¶ËØöÊúçÂú∞Êù•Êé•ÂèóÊàë‰ª¨ÁöÑÈ¢ÜÂØºÔºåÂπ∂‰∏î‰∏∫‰∫ÜÊàë‰ª¨ÁöÑÁêÜÊÉ≥ÁöÑÂÆûÁé∞Áâ∫Áâ≤‰∏ÄÂàá„ÄÇËøôÂ∞±Ë¶ÅÊ±ÇÊàë‰ª¨Âú®È¢ÜÂØºÂ∑•‰Ωú‰∏≠ÂñÑ‰∫é‰ΩøÁæ§‰ºóËÉΩÂ§üÊ†πÊçÆËá™Ë∫´ÁöÑÁªèÈ™åÊù•‰∫ÜËß£Êàë‰ª¨È¢ÜÂØºÁöÑÊ≠£Á°Æ„ÄÇËøôÈáåÔºåÂ∫îËØ•ÂèçÂØπÈÇ£‰∫õÂÖâ‰ºöÂñäÂñäÈù©ÂëΩÂè£Âè∑„ÄÅÂî±Âî±È´òË∞ÉÁöÑÁ©∫Ë∞à‰∏ª‰πâËÄÖÔºå‰∏é‰ºÅÂõæ‰ª•Âº∫Ëø´ÂëΩ‰ª§ÁöÑÊñπÊ≥ïÊù•‚ÄúÈ©±‰ΩøÁæ§‰ºó‰∏∫Â∑±Áî®‚ÄùÁöÑËÄÅÁà∑‰ª¨! ‰ΩÜÊòØÔºåÂΩìÈù©ÂëΩÂΩ¢ÂäøËøÖÈÄüÂèëÂ±ï„ÄÅÁæ§‰ºóËßâÈÜíÁöÑÈÄüÂ∫¶‰∏ÄÊó•ÂçÉÈáåÁöÑÊó∂ÂÄôÔºåÊàë‰ª¨Ë¶ÅË∞®Èò≤Ëá™Â∑±ËêΩÂêé‰∫éÁæ§‰ºóÔºåÂèò‰∏∫Áæ§‰ºóÁöÑÂ∞æÂ∑¥„ÄÇÂú®ËøôÁßçÊÉÖÂÜµ‰πã‰∏ãÔºåÊàë‰ª¨‰ªçÁÑ∂Â∫îËØ•Á´ôÂú®Áæ§‰ºóÁöÑÂâçÈù¢ÔºåÁªÑÁªáÁæ§‰ºóÁöÑÁßØÊûÅÊÄßÂêëÁùÄ‰∏ÄÂÆöÁöÑÁõÆÊ†áÂâçËøõ„ÄÇÊàë‰ª¨Ë¶ÅÂñÑ‰∫éËøÖÈÄüÂú∞ÊîπÂèòËøáÊó∂ÁöÑÂè£Âè∑ÔºåÊèêÂá∫Êñ∞ÁöÑÊõ¥È´òÁöÑÂä®ÂëòÂè£Âè∑ÔºåÈááÂèñÂ§ßÂàÄÈòîÊñßÁöÑÂäûÊ≥ïÊù•Âä®Âëò„ÄÅÁªÑÁªá‰∏éÊ≠¶Ë£ÖÁæ§‰ºóÔºåÊé®Âä®Áæ§‰ºóÊñó‰∫âËµ∞ÂêëÊúÄÈ´òÁöÑÂΩ¢Âºè„ÄÇÊØîÂ¶ÇÂú®ÁõÆÂâçË¢´Êïå‰∫∫Âç†È¢ÜÂå∫ÂüüÁöÑÂπøÂ§ß‰π°Êùë‰∏éÊàòÂå∫ÁöÑÊÉÖÂÜµÔºåÂ∞±ÊòØÂ¶ÇÊ≠§„ÄÇÁæ§‰ºóÊäóÊó•ÁöÑÊñó‰∫âÂæÄÂæÄ‰∏ÄÂºÄÂßãÂ∞±ÈááÂèñÊ≠¶Ë£ÖÊñó‰∫âÁöÑÂΩ¢Âºè„ÄÇÂú®ËøôÈáåÔºåÂá†Â§©ÂÜÖÁæ§‰ºóÊâÄËææÂà∞ÁöÑËßâÈÜíÁ®ãÂ∫¶ÔºåÂèØ‰ª•ÊØî‰∏äËøáÂéªÁöÑÂá†ÂçÅÂπ¥„ÄÇÊóßÁöÑÂè£Âè∑„ÄÅÊóßÁöÑÊñó‰∫âÊñπÂºè‰∏éÂ∑•‰ΩúÊñπÊ≥ïÁ≠âÔºåÂÜ≥‰∏çËÉΩÊª°Ë∂≥Áæ§‰ºó‰ªäÂ§©ÁöÑË¶ÅÊ±Ç„ÄÇÁæ§‰ºóÁöÑÊ∞ëÊóèÈù©ÂëΩÁöÑÈ´òÊΩÆÔºå‰ºöÂÜ≤ÂºÄ‰∏ÄÂàáËøô‰∫õÈôàËÖêÁöÑ‰∏úË•øÔºåÊâæÂà∞‰ªñ‰ª¨ÁöÑÊñ∞ÁöÑÈ¢ÜÂØºËÄÖÔºåËµ∞Âêë‰ªñ‰ª¨ÁöÑÁõÆÁöÑÂú∞„ÄÇ È¢ÜÂØºÁæ§‰ºóÁöÑÁ¨¨‰∏â‰∏™ÈóÆÈ¢òÔºåÂ∞±ÊòØË¶ÅÂêëÁæ§‰ºóÂ≠¶‰π†„ÄÇ‰∏ÄÂàáÈù©ÂëΩÁöÑÁªèÈ™åÔºåÈÉΩÊòØ‰ªéÁæ§‰ºóÁöÑÂÆûÈôÖÊñó‰∫â‰∏≠ÂàõÈÄ†Âá∫Êù•ÁöÑ„ÄÇÁ¶ªÂºÄÁæ§‰ºóÁöÑÈù©ÂëΩÂÆûË∑µÔºåÊàë‰ª¨Â∞±‰∏çËÉΩÊúâÈù©ÂëΩÁöÑÁêÜËÆ∫„ÄÇËÄåÁæ§‰ºóÁöÑÈù©ÂëΩÂÆûË∑µÊòØÈïøÁîüÁöÑÔºåÊòØÊó†Á©∑ÁöÑÔºåÊòØÊ∞∏ËøúÁªßÁª≠ÂâçËøõÁùÄÁöÑ„ÄÇÂÆÉÂèëÂ±ï‰∏éÂÖÖÂÆûÊàë‰ª¨ÁöÑÁêÜËÆ∫ÔºåÂÆÉÊîπÊ≠£Êàë‰ª¨ÁöÑÈîôËØØÔºåÂÆÉ‰ΩøÊàë‰ª¨‰∏ÄÂ§©‰∏ÄÂ§©Êé•ËøëÁùÄÁªùÂØπÁöÑÁúüÁêÜ„ÄÇÊâÄ‰ª•Êàë‰ª¨ÂøÖÈ°ªÂú®Áæ§‰ºóÊñó‰∫â‰∏≠ÂéªÂ≠¶‰π†ÔºåÂú®Ëøô‰∏™‰∫∫ÁîüÁöÑÂ§ßÊµ∑‰∏≠ÂéªÂ≠¶‰π†„ÄÇÊàë‰ª¨ÁöÑÂ≠¶‰π†ÊòØÊ≤°ÊúâÊ≠¢Â¢ÉÁöÑ„ÄÇÁæ§‰ºóÁöÑÈù©ÂëΩÂÆûË∑µ‰∏çÊñ≠ÂàõÈÄ†Âá∫ÊûÅÂèØÂÆùË¥µÁöÑÊñó‰∫âÂΩ¢Âºè„ÄÅÁªÑÁªáÂΩ¢Âºè„ÄÅÂ∑•‰ΩúÊñπÊ≥ï‰∏éÊñπÂºè‰ª•ÂèäÂêÑÁßçÊûÅÂèØÂÆùË¥µÁöÑÁªèÈ™å„ÄÇËøô‰∫õÁæ§‰ºóÂàõÈÄ†Âá∫Êù•ÁöÑ‰∏úË•øÔºåÂ∏∏Â∏∏ÊòØ‰∏Ä‰∏™È¢ÜÂØºËÄÖÔºåÂç≥‰ΩøÊòØÂ§©ÊâçÁöÑÈ¢ÜÂØºËÄÖÔºå‰πü‰∏çËÉΩÈ¢ÑÊñôÂà∞ÁöÑ„ÄÇÊúâÊó∂‰∏Ä‰∏™È¢ÜÂØºËÄÖÂ∏∏Â∏∏Ëã¶‰∫éÊâæ‰∏çÂà∞‰∏Ä‰∏™ÈÄÇÂΩìÁöÑÊñó‰∫âÂΩ¢ÂºèÊàñÁªÑÁªáÂΩ¢Âºè‰ª•Ëøõ‰∏ÄÊ≠•ÂºÄÂ±ïÁæ§‰ºóËøêÂä®„ÄÇ‰ΩÜÊòØÁæ§‰ºóÁöÑÈù©ÂëΩÂÆûË∑µÂ∏∏Â∏∏ÂàõÈÄ†‰∫ÜËøôÁßçÈÄÇÂêàÁöÑÂΩ¢Âºè„ÄÇÁæ§‰ºóÂØπ‰∫é‰∏Ä‰∏™ÈóÆÈ¢òÊâÄÂèëË°®ÁöÑÊÑèËßÅÔºå‰ªñ‰ª¨ÂØπ‰∫é‰∏Ä‰∏™ÈóÆÈ¢òÁöÑÁúãÊ≥ï‰∏éÊÑüËßâÔºåÂ∏∏Â∏∏ÊòØ‰∏Ä‰∏™È¢ÜÂØºËÄÖÔºåÂç≥‰ΩøÊòØÂ§©ÊâçÁöÑÈ¢ÜÂØºËÄÖÔºå‰πüÊÉ≥‰∏çÂà∞ÁöÑ‰∏éÊÑüËßâ‰∏çÂà∞ÁöÑ„ÄÇËÄåÊ≠£ÊòØ‰ªñ‰ª¨ÁöÑÊÑèËßÅÔºå‰ªñ‰ª¨ÁöÑÁúãÊ≥ï‰∏éÊÑüËßâÔºåÂèØ‰ª•Ë°•Ë∂≥‰∏Ä‰∏™È¢ÜÂØºËÄÖÂØπ‰∫éÊüê‰∏™ÈóÆÈ¢òÁöÑÁêÜËß£‰πã‰∏çË∂≥‰∏éÁº∫Èô∑Ôºå‰ΩøÊüê‰∏™ÈóÆÈ¢òÂæóÂà∞ÂúÜÊª°ÁöÑÊ≠£Á°ÆÁöÑËß£ÂÜ≥„ÄÇ ÊâÄ‰ª•ÔºåÁæ§‰ºó‰∏ç‰ΩÜÈúÄË¶ÅÊàë‰ª¨ÂéªÊïôËÇ≤ÔºåËÄå‰∏î‰ªñ‰ª¨‰πüÊïôËÇ≤Êàë‰ª¨„ÄÇÊàë‰ª¨ÁöÑÈùíÂπ¥Âàá‰∏çË¶ÅÂú®Áæ§‰ºóÂâçÈù¢ÊëÜËµÑÊ†ºÔºåËá™È´òËá™Â§ßÔºåÁûß‰∏çËµ∑Áæ§‰ºóÔºåËÄåÂ∫îËØ•ÂæàËôöÂøÉÂú∞ÂéªË∑ü‰ªñ‰ª¨Â≠¶‰π†ÔºåÂæàÁªÜÂøÉÂú∞ÂéªÂÄæÂê¨‰ªñ‰ª¨ÁöÑÊÑèËßÅÔºå‰∏é‰ªñ‰ª¨ÁöÑËÑâÊêè‰∏ÄËµ∑Ë∑≥Âä®„ÄÇ ÊÄª‰πãÔºåÊàë‰ª¨Âú®È¢ÜÂØºÁæ§‰ºó‰∏≠ÁöÑÂü∫Êú¨ÂéüÂàôÔºåÊòØÊó†ËÆ∫Â¶Ç‰ΩïË¶ÅÈ¢ÜÂØºÁæ§‰ºóÂâçËøõÔºåËÄåÂêåÊó∂Êó†ËÆ∫Â¶Ç‰Ωï‰∏çË¶ÅËÑ±Á¶ªÁæ§‰ºó„ÄÇËÑ±Á¶ªÁæ§‰ºóÁöÑÂÖàÈîã‰∏ª‰πâ‰∏éËêΩÂêé‰∫éÁæ§‰ºóÁöÑÂ∞æÂ∑¥‰∏ª‰πâÔºåÈÉΩÊòØÊàë‰ª¨ÊâÄ‰∏çÂ∫îËØ•ËµûÊàêÁöÑ„ÄÇ ÂêåÂøó‰ª¨ÔºåË¶ÅÊääËøôÊ†∑ÂπøÂ§ßÁöÑ„ÄÅÂçÉÂçÉ‰∏á‰∏áÁöÑ„ÄÅËßâÊÇüÁ®ãÂ∫¶‰∏çÂêåÁöÑÁæ§‰ºóÂä®ÂëòÂà∞‰∏∫Êàë‰ª¨ÁöÑÁêÜÊÉ≥ËÄåÁâ∫Áâ≤Â•ãÊñóÁöÑ‰∏ÄÊù°ÊàòÁ∫ø‰∏äÔºåÁúü‰∏çÊòØÁÆÄÂçïÁöÑ‰∫ã„ÄÇË¶ÅËææÂà∞Ëøô‰∏™ÁõÆÁöÑÔºå‰Ω†‰ª¨Êó†ËÆ∫Â¶Ç‰Ωï‰∏çË¶ÅËÑ±Á¶ªÁæ§‰ºóÔºåËÄåË¶ÅÊàê‰∏∫‰ªñ‰ª¨ÁöÑÈ¢ÜË¢ñ„ÄÇ ÂêåÂøó‰ª¨ÔºÅËøôÂ∞±ÊòØÊàë‰ªäÂ§©ÊÉ≥ÂêåÂêåÂøó‰ª¨ËÆ®ËÆ∫ÁöÑÂÖ≥‰∫éÈùíÂπ¥ÁöÑ‰øÆÂÖªÁöÑÂõõ‰∏™ÈóÆÈ¢ò„ÄÇ ÂêåÂøó‰ª¨ÔºÅÊàëÂâçÈù¢Â∑≤ÁªèËØ¥ËøáÔºåÈù©ÂëΩÊòØ‰∏Ä‰ª∂ÊúÄ‰ºü‰∫∫ÁöÑ‰∫ã‰∏öÔºå‰πüÊòØÊúÄÂõ∞ÈöæÁöÑ‰∫ã‰∏ö„ÄÇÊàë‰ª¨Âú®Èù©ÂëΩ‰∏≠ÁäØ‰∫õÈîôËØØÔºåÁîöËá≥ÊòØÈùûÂ∏∏‰∏•ÈáçÁöÑÈîôËØØÔºåÊòØÂÖç‰∏ç‰∫ÜÁöÑ„ÄÇËá≥‰∫éÈùíÂπ¥ÊúãÂèã‰ª¨ÔºåÁî±‰∫éÁîüÊ¥ªÁªèÈ™å‰∏éÊñó‰∫âÁªèÈ™åÁöÑÁº∫‰πèÔºåÁäØ‰∫õÈîôËØØÊõ¥‰∏çÊòØ‰ªÄ‰πà‰∏çÂæó‰∫ÜÁöÑÈóÆÈ¢ò„ÄÇÊàë‰ª¨ÂÜ≥‰∏çËÉΩÂõ†‰∏∫ÊÄïÁäØÈîôËØØÔºåÂ∞±‰∏çÂπ≤Èù©ÂëΩ„ÄÇÁõ∏ÂèçÁöÑÔºåÊàë‰ª¨Â∞±Ë¶ÅÂú®ÈîôËØØ‰∏≠Â≠¶‰π†„ÄÇ Êàë‰ª¨ÈùíÂπ¥‰∫∫Âàá‰∏çË¶Å‰ª•Ëá™Â∑±Â∑≤ÁªèÊúâÁöÑ‰∏ÄÁÇπÁü•ËØÜ‰∏é‰∏ÄÁÇπÁªèÈ™åÔºåÁîöËá≥‰∏Ä‰∫õÁîüÂêûÊ¥ªÂâ•ÁöÑÈù©ÂëΩÁöÑÂÖ¨Âºè‰∏éÂè£Âè∑‰∏∫Êª°Ë∂≥„ÄÇËøôÂØπ‰∫éÈùíÂπ¥‰ª¨ÊòØÊúÄÂ§ßÁöÑÂç±Èô©ÔºåÂõ†‰∏∫ËøôÁßçÊª°Ë∂≥Â∞±ÈòªÁ¢ç‰∫Ü‰Ω†‰ª¨ÁöÑËøõÊ≠•ÔºåÁªìÊûúÂøÖÁÑ∂‰ºö‰Ωø‰Ω†‰ª¨Êàê‰∏∫Êó†Áî®ÁöÑ‚ÄúÁ©∫Â§¥Èù©ÂëΩÂÆ∂‚Äù„ÄÇÈùíÂπ¥‰ª¨ÂøÖÈ°ª‰ª•ÂàóÂÆÅÁöÑ‚ÄúÂ≠¶‰π†Â≠¶‰π†ÂÜçÂ≠¶‰π†‚ÄùÁöÑÂè£Âè∑ÔºåÂΩì‰ΩúËá™Â∑±ÁöÑÂ∫ßÂè≥Èì≠„ÄÇ‰Ω†‰ª¨‰ªäÂ§©Âú®ÈôïÂåóÂÖ¨Â≠¶Â≠¶‰π†ÔºåÊòéÂ§©Â∞±Ë¶ÅÂà∞ÊäóÊàòÁöÑÂâçÁ∫ø‰∏éÂêéÊñπÁöÑÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÂéªÂ≠¶‰π†„ÄÇÈùíÂπ¥Â∫îËØ•ÊúâÊúÄÁÉ≠ÁÉàÁöÑÂ≠¶‰π†ÊÑøÊúõÔºåÂæàÈ´òÁöÑÂ≠¶‰π†Á≤æÁ•û‰∏éË∞¶ÈÄäÁöÑÂ≠¶‰π†ÊÄÅÂ∫¶„ÄÇÂè™ÊúâËøôÁßç‰∏çÊñ≠Âú∞Â≠¶‰π†ÔºåÊâçËÉΩ‰∏∞ÂØå‰Ω†‰ª¨ÁöÑÁü•ËØÜ‰∏éÁªèÈ™åÔºåÊâçËÉΩ‰Ωø‰Ω†‰ª¨Êàê‰∏∫‰∏Ä‰∏™ËÉΩÂπ≤ÁöÑÈù©ÂëΩËÄÖÔºåÊâçËÉΩ‰Ωø‰Ω†‰ª¨Êõ¥ËÉΩË¥üÊãÖËµ∑Âú®Ëá™Â∑±ËÇ©ËÜÄ‰∏äÊâÄË¥üÊãÖÁöÑË¥£‰ªª„ÄÇ ÊàëÈáçÂ§çÂú∞ËØ¥ÔºåÂ∑•‰Ωú‰∏≠ÁöÑÈîôËØØÊòØË∞Å‰πüÂÖç‰∏ç‰∫ÜÁöÑ„ÄÇÊàë‰ª¨Â∞±Ë¶ÅÂú®ÈîôËØØ‰∏≠Â≠¶‰π†„ÄÇ‰ªª‰ΩïÈîôËØØÔºå‰∏çËÆ∫‰∏∫ÂÆÉÊõæÁªè‰ªò‰∫ÜÂ¶Ç‰ΩïÈ´òÊòÇÁöÑ‰ª£‰ª∑ÔºåÂè™Ë¶ÅÊàë‰ª¨‰ªéÈîôËØØ‰∏≠Âæó‰∫ÜÂÆùË¥µÁöÑÁªèÈ™åÔºåÈÇ£ËøôÁßç‰ª£‰ª∑‰πüÊòØ‰∏çÁÆóÂèØÊÉúÁöÑ„ÄÇÊâÄ‰ª•ÔºåÊàë‰ª¨Áî®‰∏çÁùÄÊÄïÁäØÈîôËØØ„ÄÇ‰ΩÜÁäØ‰∫ÜÈîôËØØÔºåÊàë‰ª¨Â∫îËØ•Áü•ÈÅìÂæàÂø´Âú∞ÂéªÊîπÊ≠£ÈîôËØØÔºåÂàá‰∏çË¶ÅÂùöÊåÅÈîôËØØ„ÄÇ‰ªª‰ΩïÈîôËØØÔºåÂ¶ÇÊûúÂùöÊåÅ‰∏ãÂéªÔºåÈÇ£ÊòØÈùûÂ∏∏Âç±Èô©ÁöÑ„ÄÇÈùíÂπ¥‰∫∫Â∫îËØ•ÊâìÁ†¥‚ÄúÁà±Â•ΩÈù¢Â≠ê‚Äù„ÄÅ‰∏çËÇØÊàñËÄÖÂÆ≥ÊÄïÊâøËÆ§ÈîôËØØÁöÑÊÅ∂Âä£ÂÄæÂêë„ÄÇÈùíÂπ¥‰∫∫Â∫îËØ•‚ÄúÁà±Â•ΩÁúüÁêÜ‚Äù„ÄÇ‰∏ÄÂàáÈîôËØØÁöÑÈùûÁúüÁêÜÁöÑ‰∏úË•øÔºåÈÉΩÂ∫îËØ•ÂÜ≥ÁÑ∂ÊäõÂºÉÔºå‰∏ùÊØ´‰πü‰∏çÂ∫îËØ•ÁïôÊÅã„ÄÇÂè™ÊúâËøôÊ†∑ÔºåÊâçËÉΩ‰Ωø‰Ω†‰ª¨‰∏çÊñ≠Âú∞ËøõÊ≠•„ÄÇ ÊâÄ‰ª•ÔºåÂêåÂøó‰ª¨Ôºå‰Ω†‰ª¨Êõ¥Âä™ÂäõÂú∞ÂéªÂ≠¶‰π†Èù©ÂëΩÁêÜËÆ∫ÂêßÔºåÊõ¥Â§ßËÉÜÂú∞ÂéªÂ∑•‰ΩúÂ•ãÊñóÂêßÔºåÂú®Â≠¶‰π†ÁöÑËøáÁ®ã‰∏≠ÔºåÂú®Â∑•‰ΩúÂ•ãÊñóÁöÑËøáÁ®ã‰∏≠ÔºåÂéªÈîªÁÇº‰Ω†‰ª¨Ëá™Â∑±Êàê‰∏∫Èí¢ÈìÅ‰∏ÄÊ†∑ÁöÑÊàòÂ£´ÂêßÔºÅË¶Å‰∏çÊÄïÂõ∞ÈöæÔºå‰∏çÊÄïÊå´Êäò‰∏éÂ§±Ë¥•ÔºåË¶Å‰∏çÊÄïÂ§©‰∏çÊÄïÂú∞ÔºåË¶ÅÂÜçÊé•ÂÜçÂéâÂú∞‰∏çÂ±à‰∏çÊå†Âú∞ÂêëÁùÄ‰Ω†‰ª¨ÂÖâÊòéÁöÑ‰ºüÂ§ßÁöÑÁêÜÊÉ≥ÂâçËøõ! "},"ReadingNotes/ËØ≠ÂΩï-ÊØõÊ≥Ω‰∏ú.html":{"url":"ReadingNotes/ËØ≠ÂΩï-ÊØõÊ≥Ω‰∏ú.html","title":"ËØ≠ÂΩï-ÊØõÊ≥Ω‰∏ú","keywords":"","body":"‰∏¢ÊéâÂπªÊÉ≥ÔºåÂáÜÂ§áÊñó‰∫â ‚ÄúËØ¥Êù•‰πüÊòØÁ¨ëËØùÔºåÊàëËØªËøáÂ∞èÂ≠¶„ÄÅ‰∏≠Â≠¶Ôºå‰πüÂΩìËøáÂÖµÔºåÂç¥‰∏çÊõæÁúãËßÅËøá‰∏ñÁïåÂú∞ÂõæÔºåÂõ†Ê≠§Â∞±‰∏çÁü•ÈÅì‰∏ñÁïåÊúâÂ§öÂ§ß„ÄÇÊπñÂçóÁúÅÂõæ‰π¶È¶ÜÁöÑÂ¢ôÂ£Å‰∏äÔºåÊåÇÊúâ‰∏ÄÂº†‰∏ñÁïåÂ§ßÂú∞ÂõæÔºåÊàëÊØèÂ§©ÁªèËøáÈÇ£ÈáåÔºåÊÄªÊòØÁ´ôÁùÄÁúã‰∏ÄÁúã„ÄÇ ËøáÂéªÊàëËÆ§‰∏∫ÊπòÊΩ≠ÂéøÂ§ßÔºåÊπñÂçóÁúÅÊõ¥Â§ßÔºå‰∏≠ÂõΩËá™Âè§Â∞±Áß∞‰∏∫Â§©‰∏ãÔºåÂΩìÁÑ∂Â§ßÂæó‰∫Ü‰∏çÂæó„ÄÇ‰ΩÜ‰ªéËøô‰∏™Âú∞Âõæ‰∏äÁúãÊù•Ôºå‰∏≠ÂõΩÂè™Âç†‰∏ñÁïåÁöÑ‰∏ÄÂ∞èÈÉ®ÂàÜÔºåÊπñÂçóÁúÅÊõ¥Â∞èÔºåÊπòÊΩ≠ÂéøÂú®Âú∞Âõæ‰∏äÊ≤°ÊúâÁúãËßÅÔºåÈü∂Â±±ÂΩìÁÑ∂Êõ¥Ê≤°ÊúâÂΩ±Â≠ê‰∫Ü„ÄÇ‰∏ñÁïåÂéüÊù•ÊúâËøô‰πàÂ§ßÔºÅ ‰∏ñÁïåÊó¢Â§ßÔºå‰∫∫Â∞±‰∏ÄÂÆöÁâπÂà´Â§ö„ÄÇËøôÊ†∑Â§öÁöÑ‰∫∫ÊÄéÊ†∑ËøáÁîüÊ¥ªÔºåÈöæÈÅì‰∏çÂÄºÂæóÊàë‰ª¨Ê≥®ÊÑèÂêóÔºü‰ªéÈü∂Â±±ÂÜ≤ÁöÑÊÉÖÂΩ¢Êù•ÁúãÔºåÈÇ£ÈáåÁöÑ‰∫∫Â§ßÈÉΩËøáÁùÄÁóõËã¶ÁöÑÁîüÊ¥ªÔºå‰∏çÊòØÊå®È•øÔºåÂ∞±ÊòØÊå®ÂÜª„ÄÇÊúâÊó†Èí±Ê≤ªÁóÖÁúãÁùÄÁóÖÊ≠ªÁöÑÔºõËøòÊúâÂÆ∂Â∫≠Èáå„ÄÅ‰π°ÈÇªÈó¥Ôºå‰∏∫ÁùÄÂ§ßÂ§ßÂ∞èÂ∞èÁöÑÁ∫†Á∫∑ÔºåÂêµÂò¥„ÄÅÊâìÊû∂ÔºåÈóπÂæóÈ∏°Áä¨‰∏çÂÆÅÔºåÁîöËá≥ÂºÑÂæóÊäïÂ°ò„ÄÅÂêäÈ¢àÁöÑÔºõËá≥‰∫éÊ≤°Êúâ‰π¶ËØªÔºåÂÅö‰∏Ä‰∏ñÁùÅÁúºÁûéÂ≠êÁöÑÂ∞±Êõ¥Â§ö‰∫Ü„ÄÇÂú®Èü∂Â±±ÂÜ≤ÈáåÔºåÊàëÂ∞±Ê≤°ÊúâÁúãËßÅÂá†‰∏™ÁîüÊ¥ªËøáÂæóÂø´Ê¥ªÁöÑ‰∫∫„ÄÇÈü∂Â±±ÂÜ≤ÁöÑÊÉÖÂΩ¢ÊòØËøôÊ†∑ÔºåÂÖ®ÊπòÊΩ≠Âéø„ÄÅÂÖ®ÊπñÂçóÁúÅ„ÄÅÂÖ®‰∏≠ÂõΩ„ÄÅÂÖ®‰∏ñÁïåÁöÑÊÉÖÂΩ¢ÔºåÊÅêÊÄï‰πüÂ∑Æ‰∏çÂ§öÔºÅ ÊàëÁúüÊÄÄÁñëÔºå‰∫∫ÁîüÂú®‰∏ñÈó¥ÔºåÈöæÈÅìÈÉΩÊ≥®ÂÆöË¶ÅËøáÁóõËã¶ÁöÑÁîüÊ¥ªÂêóÔºüÂÜ≥‰∏çÔºÅ‰∏∫‰ªÄ‰πà‰ºöÊúâËøôÁßçÁé∞Ë±°Âë¢Ôºü ËøôÊòØÂà∂Â∫¶‰∏çÂ•ΩÔºåÊîøÊ≤ª‰∏çÂ•ΩÔºåÊòØÂõ†‰∏∫‰∏ñÁïå‰∏äÂ≠òÂú®‰∫∫Ââ•Ââä‰∫∫„ÄÅ‰∫∫ÂéãËø´‰∫∫ÁöÑÂà∂Â∫¶ÔºåÊâÄ‰ª•‰Ωø‰∏ñÁïåÂ§ßÂ§öÊï∞ÁöÑ‰∫∫ÈÉΩÈô∑ÂÖ•ÁóõËã¶ÁöÑÊ∑±ÊΩ≠„ÄÇËøôÁßç‰∏çÂêàÁêÜÁöÑÁé∞Ë±°ÔºåÊòØ‰∏çÂ∫îËØ•Ê∞∏ËøúÂ≠òÂú®ÁöÑÔºåÊòØÂ∫îËØ•ÂΩªÂ∫ïÊé®Áøª„ÄÅÂΩªÂ∫ïÊîπÈÄ†ÁöÑÔºÅÊÄªÊúâ‰∏ÄÂ§©Ôºå‰∏ñÁïå‰ºöËµ∑ÂèòÂåñÔºå‰∏ÄÂàáÁóõËã¶ÁöÑ‰∫∫ÔºåÈÉΩ‰ºöÂèòÊàêÂø´Ê¥ªÁöÑ‰∫∫ÔºÅÂπ∏Á¶èÁöÑ‰∫∫ÔºÅ ‰∏ñÁïåÁöÑÂèòÂåñÔºå‰∏ç‰ºöËá™Â∑±ÂèëÁîüÔºåÂøÖÈ°ªÈÄöËøáÈù©ÂëΩÔºåÈÄöËøá‰∫∫ÁöÑÂä™Âäõ„ÄÇÊàëÂõ†Ê≠§ÊÉ≥Âà∞ÔºåÊàë‰ª¨ÈùíÂπ¥ÁöÑË¥£‰ªªÁúüÊòØÈáçÂ§ßÔºåÊàë‰ª¨Â∫îËØ•ÂÅöÁöÑ‰∫ãÊÉÖÁúüÂ§öÔºåË¶ÅËµ∞ÁöÑÈÅìË∑ØÁúüÈïø„ÄÇ ‰ªéËøôÊó∂ÂÄôËµ∑ÔºåÊàëÂ∞±ÂÜ≥ÂøÉË¶Å‰∏∫ÂÖ®‰∏≠ÂõΩÁóõËã¶ÁöÑ‰∫∫„ÄÅÂÖ®‰∏ñÁïåÁóõËã¶ÁöÑ‰∫∫Ë¥°ÁåÆËá™Â∑±ÂÖ®ÈÉ®ÁöÑÂäõÈáè„ÄÇ‚Äù ÊàëÊòØ‰∏™Â≠¶ÁîüÂá∫Ë∫´ÁöÑ‰∫∫ÔºåÈÇ£Êó∂ÔºåÊàëËßâÂæó‰∏ñÁïå‰∏äÂπ≤ÂáÄÁöÑ‰∫∫Âè™ÊúâÁü•ËØÜÂàÜÂ≠êÔºåÂ∑•‰∫∫ÂÜúÊ∞ëÊÄªÊòØÊØîËæÉËÑèÁöÑ„ÄÇÁü•ËØÜÂàÜÂ≠êÁöÑË°£ÊúçÔºåÂà´‰∫∫ÁöÑÊàëÂèØ‰ª•Á©øÔºå‰ª•‰∏∫ÊòØÂπ≤ÂáÄÁöÑÔºõÂ∑•‰∫∫ÂÜúÊ∞ëÁöÑË°£ÊúçÔºåÊàëÂ∞±‰∏çÊÑøÊÑèÁ©øÔºå‰ª•‰∏∫ÊòØËÑèÁöÑ„ÄÇÈù©ÂëΩ‰∫ÜÔºåÂêåÂ∑•‰∫∫ÂÜúÊ∞ëÂíåÈù©ÂëΩÂÜõÁöÑÊàòÂ£´Âú®‰∏ÄËµ∑‰∫ÜÔºåÊàëÈÄêÊ∏êÁÜüÊÇâ‰ªñ‰ª¨Ôºå‰ªñ‰ª¨‰πüÈÄêÊ∏êÁÜüÊÇâ‰∫ÜÊàë„ÄÇËøôÊó∂ÔºåÂè™ÊòØÂú®ËøôÊó∂ÔºåÊàëÊâçÊ†πÊú¨Âú∞ÊîπÂèò‰∫ÜËµÑ‰∫ßÈò∂Á∫ßÂ≠¶Ê†°ÊâÄÊïôÁªôÊàëÁöÑÈÇ£ÁßçËµÑ‰∫ßÈò∂Á∫ßÁöÑÂíåÂ∞èËµÑ‰∫ßÈò∂Á∫ßÁöÑÊÑüÊÉÖ„ÄÇËøôÊó∂ÔºåÊãøÊú™ÊõæÊîπÈÄ†ÁöÑÁü•ËØÜÂàÜÂ≠êÂíåÂ∑•‰∫∫ÂÜúÊ∞ëÊØîËæÉÔºåÂ∞±ËßâÂæóÁü•ËØÜÂàÜÂ≠ê‰∏çÂπ≤ÂáÄ‰∫ÜÔºåÊúÄÂπ≤ÂáÄÁöÑËøòÊòØÂ∑•‰∫∫ÂÜúÊ∞ëÔºåÂ∞ΩÁÆ°‰ªñ‰ª¨ÊâãÊòØÈªëÁöÑÔºåËÑö‰∏äÊúâÁâõÂ±éÔºåËøòÊòØÊØîËµÑ‰∫ßÈò∂Á∫ßÂíåÂ∞èËµÑ‰∫ßÈò∂Á∫ßÁü•ËØÜÂàÜÂ≠êÈÉΩÂπ≤ÂáÄ„ÄÇ ‚Äú‰∏Ä‰∏™‰∫∫ÔºõÂ¶ÇËã•‰∏çË¢´Êïå‰∫∫ÂèçÂØπÔºåÈÇ£Â∞±‰∏çÂ•Ω‰∫ÜÔºåÈÇ£‰∏ÄÂÆöÊòØÂêåÊïå‰∫∫ÂêåÊµÅÂêàÊ±°‰∫Ü„ÄÇÂ¶ÇËã•Ë¢´Êïå‰∫∫ÂèçÂØπÔºåÈÇ£Â∞±Â•Ω‰∫ÜÔºåÈÇ£Â∞±ËØÅÊòéÊàë‰ª¨ÂêåÊïå‰∫∫ÂàíÊ∏ÖÁïåÈôê‰∫Ü„ÄÇÂ¶ÇËã•Êïå‰∫∫Ëµ∑Âä≤Âú∞ÂèçÂØπÊàë‰ª¨ÔºåÊääÊàë‰ª¨ËØ¥Âæó‰∏ÄÂ°åÁ≥äÊ∂ÇÔºå‰∏ÄÊó†ÊòØÂ§ÑÔºåÈÇ£Â∞±Êõ¥Â•Ω‰∫ÜÔºåÈÇ£Â∞±ËØÅÊòéÊàë‰ª¨‰∏ç‰ΩÜÂêåÊïå‰∫∫ÂàíÊ∏Ö‰∫ÜÁïåÈôêÔºåËÄå‰∏îËØÅÊòéÊàë‰ª¨ÁöÑÂ∑•‰ΩúÊòØÂçìÊúâÊàêÊïàÁöÑ‰∫Ü„ÄÇ‚Äù ‰∏éÂ§©Â•ãÊñóÔºåÂÖ∂‰πêÊó†Á©∑Ôºõ ‰∏éÂú∞Â•ãÊñóÔºåÂÖ∂‰πêÊó†Á©∑Ôºõ ‰∏é‰∫∫Â•ãÊñóÔºåÂÖ∂‰πêÊó†Á©∑„ÄÇ ‚ÄúËÆ©ÂÜÖÂ§ñÂèçÂä®Ê¥æÂú®Êàë‰ª¨ÁöÑÈù¢ÂâçÂèëÊäñÂêßÔºÅËÆ©‰ªñ‰ª¨ÂéªËØ¥Êàë‰ª¨Ëøô‰πü‰∏çË°åÈÇ£‰πü‰∏çË°åÂêßÔºÅ‰∏≠ÂõΩ‰∫∫Ê∞ë‰∏çÂ±à‰∏çÊå†ÁöÑÂä™ÂäõÔºåÂøÖÂ∞ÜÁ®≥Ê≠•Âú∞ËææÂà∞Ëá™Â∑±ÁöÑÁõÆÁöÑÔºÅ‚Äù ‚Äú‰ªóÊàë‰ª¨ÊòØ‰∏çÊÄïÊâìÁöÑÔºåÂ∏ùÂõΩ‰∏ª‰πâË¶ÅÊÉ≥‚ÄòÂíåÂπ≥ÊºîÂèò‚ÄôÊàë‰ª¨Ëøô‰∏Ä‰ª£‰∫∫‰πüÈöæÔºõÂèØ‰∏ã‰∏Ä‰ª£„ÄÅÂÜç‰∏ã‰∏Ä‰ª£Â∞±‰∏çÂ•ΩËÆ≤‰∫Ü„ÄÇ‰∏≠ÂõΩ‰∫∫ËÆ≤‚ÄòÂêõÂ≠ê‰πãÊ≥ΩÔºå‰∫î‰∏ñËÄåÊñ©‚ÄôÔºåËã±ÂõΩ‰∫∫ËØ¥‚ÄòÁàµ‰Ωç‰∏ç‰º†‰∏â‰ª£‚ÄôÔºõÂà∞Êàë‰ª¨ÁöÑÁ¨¨‰∏â‰ª£„ÄÅÁ¨¨Âõõ‰ª£‰∫∫Ë∫´‰∏äÔºåÊÉÖÂΩ¢Âèà‰ºöÊòØ‰∏™‰ªÄ‰πàÊ†∑Â≠êÂïäÔºüÊàë‰∏çÊÉ≥Âì™‰∏ÄÂ§©ÔºåÂú®‰∏≠ÂõΩÁöÑÂ§ßÂú∞‰∏äÂÜçÂá∫Áé∞‰∫∫Ââ•Ââä‰∫∫ÁöÑÁé∞Ë±°ÔºåÂÜçÂá∫Áé∞ËµÑÊú¨ÂÆ∂„ÄÅ‰ºÅ‰∏ö‰∏ª„ÄÅÈõáÂ∑•„ÄÅÂ¶ìÂ•≥ÂíåÂê∏È£üÈ∏¶ÁâáÁÉüÔºõÂ¶ÇÊûúÈÇ£Ê†∑ÔºåËÆ∏Â§öÁÉàÂ£´ÁöÑË°ÄÂ∞±ÁôΩÊµÅ‰∫Ü‚Ä¶‚Ä¶‚Äù ÂàõÈÄ†Âº∫Â§ßÁöÑ‰∫∫Ê∞ëÁ©∫ÂÜõÔºåÊ≠ºÁÅ≠ÊÆãÊïåÔºåÂ∑©Âõ∫ÂõΩÈò≤„ÄÇ ÊåáÁÇπÊ±üÂ±±ÔºåÊøÄÊâ¨ÊñáÂ≠óÔºåÁ≤™ÂúüÂΩìÂπ¥‰∏áÊà∑‰æØ„ÄÇ Ë¶Å‰ººÊòÜ‰ªëÂ¥©ÁªùÂ£ÅÔºåÂèàÊÅ∞ÂÉèÂè∞È£éÊâ´ÂØ∞ÂÆá„ÄÇÈáçÊØîÁøºÔºåÂíå‰∫ëÁø•„ÄÇ ÂÜõÂè´Â∑•ÂÜúÈù©ÂëΩÔºåÊóóÂè∑Èï∞ÂàÄÊñßÂ§¥„ÄÇÂå°Â∫ê‰∏ÄÂ∏¶‰∏çÂÅúÁïôÔºåË¶ÅÂêëÊΩáÊπòÁõ¥Ëøõ„ÄÇ ÈõÑÂÖ≥Êº´ÈÅìÁúüÂ¶ÇÈìÅÔºåËÄå‰ªäËøàÊ≠•‰ªéÂ§¥Ë∂ä Á∫¢ÂÜõ‰∏çÊÄïËøúÂæÅÈöæÔºå‰∏áÊ∞¥ÂçÉÂ±±Âè™Á≠âÈó≤ ÂÆâÂæóÂÄöÂ§©ÊäΩÂÆùÂâëÔºåÊääÊ±ùË£Å‰∏∫‰∏âÊà™Ôºü‰∏ÄÊà™ÈÅóÊ¨ßÔºå‰∏ÄÊà™Ëµ†ÁæéÔºå‰∏ÄÊà™Ëøò‰∏úÂõΩ„ÄÇÂ§™Âπ≥‰∏ñÁïåÔºåÁéØÁêÉÂêåÊ≠§ÂáâÁÉ≠„ÄÇ Êµ¥Ë°Ä‰∏úÁìúÂÆàÔºåÈ©±ÂÄ≠Ê£†ÂêâÂΩí„ÄÇÊ≤ôÂú∫Á´üÊÆíÂëΩÔºåÂ£ÆÂøó‰πüÊó†Ëøù„ÄÇ ÈÅçÂú∞ÂìÄÈ∏øÈÅçÂú∞Ë°ÄÔºåÊó†Èùû‰∏ÄÂøµÊïëËãçÁîü„ÄÇ ÂÆúÂ∞ÜÂâ©ÂãáËøΩÁ©∑ÂØáÔºå‰∏çÂèØÊ≤ΩÂêçÂ≠¶Èú∏Áéã„ÄÇ ËØóËØç Êµ™Ê∑òÊ≤ô ÂåóÊà¥Ê≤≥Ôºà1954Âπ¥Â§èÔºâ Â§ßÈõ®ËêΩÂπΩÁáïÔºå ÁôΩÊµ™ÊªîÂ§©Ôºå Áß¶ÁöáÂ≤õÂ§ñÊâìÈ±ºËàπ„ÄÇ ‰∏ÄÁâáÊ±™Ê¥ãÈÉΩ‰∏çËßÅÔºå Áü•ÂêëË∞ÅËæπÔºü ÂæÄ‰∫ãË∂äÂçÉÂπ¥Ôºå È≠èÊ≠¶Êå•Èû≠Ôºå ‰∏ú‰∏¥Á¢£Áü≥ÊúâÈÅóÁØá„ÄÇ ËêßÁëüÁßãÈ£é‰ªäÂèàÊòØÔºå Êç¢‰∫Ü‰∫∫Èó¥„ÄÇ "},"ReadingNotes/ÈùíÂπ¥Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÁöÑËÄÉËôë-È©¨ÂÖãÊÄù-1835.html":{"url":"ReadingNotes/ÈùíÂπ¥Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÁöÑËÄÉËôë-È©¨ÂÖãÊÄù-1835.html","title":"ÈùíÂπ¥Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÁöÑËÄÉËôë-È©¨ÂÖãÊÄù-1835","keywords":"","body":"ÈùíÂπ¥Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÁöÑËÄÉËôë Âç°¬∑È©¨ÂÖãÊÄùÁöÑ‰∏≠Â≠¶ËÄÉËØïÂæ∑ËØ≠‰ΩúÊñá Ëá™ÁÑ∂Êú¨Ë∫´ÁªôÂä®Áâ©ËßÑÂÆö‰∫ÜÂÆÉÂ∫îËØ•ÈÅµÂÆàÁöÑÊ¥ªÂä®ËåÉÂõ¥ÔºåÂä®Áâ©‰πüÂ∞±ÂÆâÂàÜÂú∞Âú®Ëøô‰∏™ËåÉÂõ¥ÂÜÖÊ¥ªÂä®ÔºåËÄå‰∏çËØïÂõæË∂äÂá∫Ëøô‰∏™ËåÉÂõ¥ÔºåÁîöËá≥‰∏çËÄÉËôëÊúâÂÖ∂ÂÆÉËåÉÂõ¥Â≠òÂú®„ÄÇÁ•û‰πüÁªô‰∫∫ÊåáÂÆö‰∫ÜÂÖ±ÂêåÁöÑÁõÆÊ†á‚îÄ‚îÄ‰Ωø‰∫∫Á±ªÂíå‰ªñËá™Â∑±Ë∂ã‰∫éÈ´òÂ∞öÔºå‰ΩÜÊòØÔºåÁ•ûË¶Å‰∫∫Ëá™Â∑±ÂéªÂØªÊâæÂèØ‰ª•ËææÂà∞Ëøô‰∏™ÁõÆÊ†áÁöÑÊâãÊÆµÔºõÁ•ûËÆ©‰∫∫Âú®Á§æ‰ºö‰∏äÈÄâÊã©‰∏Ä‰∏™ÊúÄÈÄÇÂêà‰∫é‰ªñ„ÄÅÊúÄËÉΩ‰Ωø‰ªñÂíåÁ§æ‰ºöÂèòÂæóÈ´òÂ∞öÁöÑÂú∞‰Ωç„ÄÇ ËøôÁßçÈÄâÊã©ÊòØ‰∫∫ÊØîÂÖ∂ÂÆÉÂàõÈÄ†Áâ©Ëøú‰∏∫‰ºòË∂äÁöÑÂú∞ÊñπÔºå‰ΩÜÂêåÊó∂‰πüÊòØÂèØËÉΩÊØÅÁÅ≠‰∫∫ÁöÑ‰∏ÄÁîü„ÄÅÁ†¥Âùè‰ªñÁöÑ‰∏ÄÂàáËÆ°ÂàíÂπ∂‰Ωø‰ªñÈô∑‰∫é‰∏çÂπ∏ÁöÑË°å‰∏∫„ÄÇÂõ†Ê≠§ÔºåËÆ§ÁúüÂú∞ÊùÉË°°ËøôÁßçÈÄâÊã©ÔºåÊó†ÁñëÊòØÂºÄÂßãËµ∞‰∏äÁîüÊ¥ªÈÅìË∑ØËÄåÂèà‰∏çÊÑøÂú®ÊúÄÈáçË¶ÅÁöÑ‰∫ãÊÉÖ‰∏äÂê¨Â§©Áî±ÂëΩÁöÑÈùíÂπ¥ÁöÑÈ¶ñË¶ÅË¥£‰ªª„ÄÇ ÊØè‰∏™‰∫∫ÁúºÂâçÈÉΩÊúâ‰∏Ä‰∏™ÁõÆÊ†áÔºåËøô‰∏™ÁõÆÊ†áËá≥Â∞ëÂú®‰ªñÊú¨‰∫∫ÁúãÊù•ÊòØ‰ºüÂ§ßÁöÑÔºåËÄå‰∏îÂ¶ÇÊûúÊúÄÊ∑±ÂàªÁöÑ‰ø°ÂøµÔºåÂç≥ÂÜÖÂøÉÊ∑±Â§ÑÁöÑÂ£∞Èü≥ÔºåËÆ§‰∏∫Ëøô‰∏™ÁõÆÊ†áÊòØ‰ºüÂ§ßÁöÑÔºåÈÇ£ÂÆÉÂÆûÈôÖ‰∏ä‰πüÊòØ‰ºüÂ§ßÁöÑÔºåÂõ†‰∏∫Á•ûÂÜ≥‰∏ç‰ºö‰Ωø‰∏ñ‰∫∫ÂÆåÂÖ®Ê≤°ÊúâÂºïÂØºËÄÖÔºõÁ•ûËΩªÂ£∞Âú∞‰ΩÜÂùöÂÆöÂú∞‰ΩúÂêØÁ§∫„ÄÇ ‰ΩÜÊòØÔºåËøôÂ£∞Èü≥ÂæàÂÆπÊòìË¢´Ê∑πÊ≤°ÔºõÊàë‰ª¨ËÆ§‰∏∫ÊòØÁÉ≠ÊÉÖÁöÑ‰∏úË•øÂèØËÉΩÂÄèÂøΩËÄåÁîüÔºåÂêåÊ†∑ÂèØËÉΩÂÄèÂøΩËÄåÈÄù„ÄÇ‰πüËÆ∏ÔºåÊàë‰ª¨ÁöÑÂπªÊÉ≥Ëì¶ÁÑ∂Ëø∏ÂèëÔºåÊàë‰ª¨ÁöÑÊÑüÊÉÖÊøÄÂä®Ëµ∑Êù•ÔºåÊàë‰ª¨ÁöÑÁúºÂâçÊµÆÊÉ≥ËÅîÁø©ÔºåÊàë‰ª¨ÁãÇÁÉ≠Âú∞ËøΩÊ±ÇÊàë‰ª¨‰ª•‰∏∫ÊòØÁ•ûÊú¨Ë∫´ÁªôÊàë‰ª¨ÊåáÂá∫ÁöÑÁõÆÊ†áÔºõ‰ΩÜÊòØÔºåÊàë‰ª¨Ê¢¶ÂØê‰ª•Ê±ÇÁöÑ‰∏úË•øÂæàÂø´Â∞±‰ΩøÊàë‰ª¨ÂéåÊÅ∂Ôºå‰∫éÊòØÔºåÊàë‰ª¨‰æøÊÑüÂà∞Ëá™Â∑±ÁöÑÊï¥‰∏™Â≠òÂú®ÈÅ≠Âà∞‰∫ÜÊØÅÁÅ≠„ÄÇ Âõ†Ê≠§ÔºåÊàë‰ª¨Â∫îÂΩìËÆ§ÁúüËÄÉËôëÔºöÊàë‰ª¨ÂØπÊâÄÈÄâÊã©ÁöÑËÅå‰∏öÊòØ‰∏çÊòØÁúüÁöÑÊÄÄÊúâÁÉ≠ÊÉÖÔºüÂèëËá™Êàë‰ª¨ÂÜÖÂøÉÁöÑÂ£∞Èü≥ÊòØ‰∏çÊòØÂêåÊÑèÈÄâÊã©ËøôÁßçËÅå‰∏öÔºüÊàë‰ª¨ÁöÑÁÉ≠ÊÉÖÊòØ‰∏çÊòØ‰∏ÄÁßçËø∑ËØØÔºüÊàë‰ª¨ËÆ§‰∏∫ÊòØÁ•ûÁöÑÂè¨Âî§ÁöÑ‰∏úË•øÊòØ‰∏çÊòØ‰∏ÄÁßçËá™ÊàëÊ¨∫È™óÔºü‰∏çËøáÔºåÂ¶ÇÊûú‰∏çÂØπÁÉ≠ÊÉÖÁöÑÊù•Ê∫êÊú¨Ë∫´Âä†‰ª•Êé¢Á©∂ÔºåÊàë‰ª¨ÂèàÊÄé‰πàËÉΩËÆ§Ê∏ÖËøô‰∏ÄÂàáÂë¢Ôºü ‰ºüÂ§ßÁöÑ‰∏úË•øÊòØÈó™ÂÖâÁöÑÔºåÈó™ÂÖâ‰ºöÊøÄÂèëËôöËç£ÂøÉÔºåËôöËç£ÂøÉÂÆπÊòì‰Ωø‰∫∫‰∫ßÁîüÁÉ≠ÊÉÖÊàñËÄÖ‰∏ÄÁßçÊàë‰ª¨ËßâÂæóÊòØÁÉ≠ÊÉÖÁöÑ‰∏úË•øÔºõ‰ΩÜÊòØÔºåË¢´ÂêçÂà©Ëø∑‰Ωè‰∫ÜÂøÉÁ™çÁöÑ‰∫∫ÔºåÁêÜÊÄßÊòØÊó†Ê≥ïÂä†‰ª•Á∫¶ÊùüÁöÑÔºå‰∫éÊòØ‰ªñ‰∏ÄÂ§¥Ê†ΩËøõÈÇ£‰∏çÂèØÊäóÊãíÁöÑÊ¨≤ÂøµÂè¨Âî§‰ªñÂéªÁöÑÂú∞ÊñπÔºõ‰ªñÁöÑËÅå‰∏öÂ∑≤Áªè‰∏çÂÜçÊòØÁî±‰ªñËá™Â∑±ÈÄâÊã©ÔºåËÄåÊòØÁî±ÂÅ∂ÁÑ∂Êú∫‰ºöÂíåÂÅáË±°ÂéªÂÜ≥ÂÆö‰∫Ü„ÄÇ Êàë‰ª¨ÁöÑ‰ΩøÂëΩÂÜ≥‰∏çÊòØÊ±ÇÂæó‰∏Ä‰∏™ÊúÄË∂≥‰ª•ÁÇ´ËÄÄÁöÑËÅå‰∏öÔºåÂõ†‰∏∫ÂÆÉ‰∏çÊòØÈÇ£ÁßçÂèØËÉΩÁî±Êàë‰ª¨ÈïøÊúü‰ªé‰∫ãÔºå‰ΩÜÂßãÁªà‰∏ç‰ºö‰ΩøÊàë‰ª¨ÊÑüÂà∞ÂéåÂÄ¶„ÄÅÂßãÁªà‰∏ç‰ºö‰ΩøÊàë‰ª¨Âä≤Â§¥‰ΩéËêΩ„ÄÅÂßãÁªà‰∏ç‰ºö‰ΩøÊàë‰ª¨ÁöÑÁÉ≠ÊÉÖÂÜ∑Âç¥ÁöÑËÅå‰∏öÔºåÁõ∏ÂèçÔºåÊàë‰ª¨ÂæàÂø´Â∞±‰ºöËßâÂæóÔºåÊàë‰ª¨ÁöÑÊÑøÊúõÊ≤°ÊúâÂæóÂà∞Êª°Ë∂≥ÔºåÊàë‰ª¨ÁöÑÁêÜÊÉ≥Ê≤°ÊúâÂÆûÁé∞ÔºåÊàë‰ª¨Â∞±Â∞ÜÊÄ®Â§©Â∞§‰∫∫„ÄÇ ‰ΩÜÊòØÔºå‰∏ç‰ªÖËôöËç£ÂøÉËÉΩÂ§üÂºïËµ∑ÂØπÊüêÁßçËÅå‰∏öÁöÑÁ™ÅÁÑ∂ÁöÑÁÉ≠ÊÉÖÔºåËÄå‰∏îÊàë‰ª¨‰πüËÆ∏‰ºöÁî®Ëá™Â∑±ÁöÑÂπªÊÉ≥ÊääËøôÁßçËÅå‰∏öÁæéÂåñÔºåÊääÂÆÉÁæéÂåñÊàêÁîüÊ¥ªÊâÄËÉΩÊèê‰æõÁöÑËá≥È´òÊó†‰∏äÁöÑ‰∏úË•ø„ÄÇÊàë‰ª¨Ê≤°Êúâ‰ªîÁªÜÂàÜÊûêÂÆÉÔºåÊ≤°ÊúâË°°ÈáèÂÆÉÁöÑÂÖ®ÈÉ®ÂàÜÈáèÔºåÂç≥ÂÆÉÂä†Âú®Êàë‰ª¨ËÇ©‰∏äÁöÑÈáçÂ§ßË¥£‰ªªÔºõÊàë‰ª¨Âè™ÊòØ‰ªéËøúÂ§ÑËßÇÂØüÂÆÉÔºåËÄå‰ªéËøúÂ§ÑËßÇÂØüÊòØÈù†‰∏ç‰ΩèÁöÑ„ÄÇ Âú®ËøôÈáåÔºåÊàë‰ª¨Ëá™Â∑±ÁöÑÁêÜÊÄß‰∏çËÉΩÁªôÊàë‰ª¨ÂÖÖÂΩìÈ°æÈóÆÔºåÂõ†‰∏∫ÂΩìÂÆÉË¢´ÊÑüÊÉÖÊ¨∫È™óÔºåÂèóÂπªÊÉ≥ËíôËîΩÊó∂ÔºåÂÆÉÊó¢‰∏ç‰æùÈù†ÁªèÈ™åÔºå‰πü‰∏ç‰æùÈù†Êõ¥Ê∑±ÂÖ•ÁöÑËßÇÂØü„ÄÇÁÑ∂ËÄåÔºåÊàë‰ª¨ÁöÑÁõÆÂÖâÂ∫îËØ•ÊäïÂêëË∞ÅÂë¢ÔºüÂΩìÊàë‰ª¨‰∏ßÂ§±ÁêÜÊÄßÁöÑÊó∂ÂÄôÔºåË∞ÅÊù•ÊîØÊåÅÊàë‰ª¨Âë¢Ôºü ÊòØÊàë‰ª¨ÁöÑÁà∂ÊØçÔºå‰ªñ‰ª¨Ëµ∞Ëøá‰∫ÜÊº´ÈïøÁöÑÁîüÊ¥ªÈÅìË∑ØÔºåÈ•±Â∞ù‰∫Ü‰∫∫‰∏ñËæõÈÖ∏„ÄÇ‚îÄ‚îÄÊàë‰ª¨ÁöÑÂøÉËøôÊ†∑ÊèêÈÜíÊàë‰ª¨„ÄÇ Â¶ÇÊûúÊàë‰ª¨ÁªèËøáÂÜ∑ÈùôÁöÑËÄÉÂØüÔºåËÆ§Ê∏Ö‰∫ÜÊâÄÈÄâÊã©ÁöÑËÅå‰∏öÁöÑÂÖ®ÈÉ®ÂàÜÈáèÔºå‰∫ÜËß£ÂÆÉÁöÑÂõ∞Èöæ‰ª•ÂêéÔºå‰ªçÁÑ∂ÂØπÂÆÉÂÖÖÊª°ÁÉ≠ÊÉÖÔºå‰ªçÁÑ∂Áà±ÂÆÉÔºåËßâÂæóËá™Â∑±ÈÄÇÂêà‰∫éÂÆÉÔºåÈÇ£Êó∂Êàë‰ª¨Â∞±ÂèØ‰ª•ÈÄâÊã©ÂÆÉÔºåÈÇ£Êó∂Êàë‰ª¨Êó¢‰∏ç‰ºöÂèóÁÉ≠ÊÉÖÁöÑÊ¨∫È™óÔºå‰πü‰∏ç‰ºö‰ªì‰øÉ‰ªé‰∫ã„ÄÇ ‰ΩÜÊòØÔºåÊàë‰ª¨Âπ∂‰∏çÊÄªÊòØËÉΩÂ§üÈÄâÊã©Êàë‰ª¨Ëá™ËÆ§‰∏∫ÈÄÇÂêàÁöÑËÅå‰∏öÔºõÊàë‰ª¨Âú®Á§æ‰ºö‰∏äÁöÑÂÖ≥Á≥ªÔºåËøòÂú®Êàë‰ª¨ÊúâËÉΩÂäõÂÜ≥ÂÆöÂÆÉ‰ª¨‰ª•ÂâçÂ∞±Â∑≤ÁªèÂú®ÊüêÁßçÁ®ãÂ∫¶‰∏äÂºÄÂßãÁ°ÆÁ´ã‰∫Ü„ÄÇ Êàë‰ª¨ÁöÑ‰ΩìË¥®Â∏∏Â∏∏Â®ÅËÉÅÊàë‰ª¨ÔºåÂèØÊòØ‰ªª‰Ωï‰∫∫‰πü‰∏çÊï¢ËóêËßÜÂÆÉÁöÑÊùÉÂà©„ÄÇ ËØöÁÑ∂ÔºåÊàë‰ª¨ËÉΩÂ§üË∂ÖË∂ä‰ΩìË¥®ÁöÑÈôêÂà∂Ôºå‰ΩÜËøô‰πà‰∏ÄÊù•ÔºåÊàë‰ª¨‰πüÂ∞±ÂûÆÂæóÊõ¥Âø´ÔºõÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊàë‰ª¨Â∞±ÊòØÂÜíÈô©ÊääÂ§ßÂé¶Âª∫Á≠ëÂú®ÊÆãÁ†¥ÁöÑÂ∫üÂ¢ü‰∏äÔºåÊàë‰ª¨ÁöÑ‰∏ÄÁîü‰πüÂ∞±ÂèòÊàê‰∏ÄÂú∫Á≤æÁ•ûÂéüÂàôÂíåËÇâ‰ΩìÂéüÂàô‰πãÈó¥ÁöÑ‰∏çÂπ∏ÁöÑÊñó‰∫â„ÄÇ‰ΩÜÊòØÔºå‰∏Ä‰∏™‰∏çËÉΩÂÖãÊúçËá™Ë∫´Áõ∏‰∫íÊñó‰∫âÁöÑÂõ†Á¥†ÁöÑ‰∫∫ÔºåÂèàÊÄéËÉΩÊäóÂæ°ÁîüÊ¥ªÁöÑÁåõÁÉàÂÜ≤ÂáªÔºåÊÄéËÉΩÂÆâÈùôÂú∞‰ªé‰∫ãÊ¥ªÂä®Âë¢ÔºüÁÑ∂ËÄåÂè™Êúâ‰ªéÂÆâÈùô‰∏≠ÊâçËÉΩ‰∫ßÁîüÂá∫‰ºüÂ§ßÂ£Æ‰∏ΩÁöÑ‰∫ã‰∏öÔºåÂÆâÈùôÊòØÂîØ‰∏ÄËÉΩÁîüÈïøÂá∫ÊàêÁÜüÊûúÂÆûÁöÑÂúüÂ£§„ÄÇ Â∞ΩÁÆ°Êàë‰ª¨Áî±‰∫é‰ΩìË¥®‰∏çÈÄÇÂêàÊàë‰ª¨ÁöÑËÅå‰∏öÔºå‰∏çËÉΩÊåÅ‰πÖÂú∞Â∑•‰ΩúÔºåËÄå‰∏îÂæàÂ∞ëËÉΩÂ§üÊÑâÂø´Âú∞Â∑•‰ΩúÔºå‰ΩÜÊòØÔºå‰∏∫‰∫ÜÂÖãÂ∞ΩËÅåÂÆàËÄåÁâ∫Áâ≤Ëá™Â∑±Âπ∏Á¶èÁöÑÊÄùÊÉ≥ÊøÄÂä±ÁùÄÊàë‰ª¨‰∏çÈ°æ‰ΩìÂº±ÂéªÂä™ÂäõÂ∑•‰Ωú„ÄÇÂ¶ÇÊûúÊàë‰ª¨ÈÄâÊã©‰∫ÜÂäõ‰∏çËÉú‰ªªÁöÑËÅå‰∏öÔºåÈÇ£‰πàÊàë‰ª¨ÂÜ≥‰∏çËÉΩÊääÂÆÉÂÅöÂ•ΩÔºåÊàë‰ª¨ÂæàÂø´Â∞±‰ºöËá™ÊÑßÊó†ËÉΩÔºåÂ∞±‰ºöÊÑüÂà∞Ëá™Â∑±ÊòØÊó†Áî®ÁöÑ‰∫∫ÔºåÊòØ‰∏çËÉΩÂÆåÊàêËá™Â∑±‰ΩøÂëΩÁöÑÁ§æ‰ºöÊàêÂëò„ÄÇÁî±Ê≠§‰∫ßÁîüÁöÑÊúÄËá™ÁÑ∂ÁöÑÁªìÊûúÂ∞±ÊòØËá™Âçë„ÄÇËøòÊúâÊØîËøôÊõ¥ÁóõËã¶ÁöÑÊÑüÊÉÖÂêóÔºüËøòÊúâÊØîËøôÊõ¥Èöæ‰∫éÈù†Â§ñÁïåÁöÑÂêÑÁßçËµê‰∫àÊù•Ë°•ÂÅøÁöÑÊÑüÊÉÖÂêóÔºüËá™ÂçëÊòØ‰∏ÄÊù°ÊØíËõáÔºåÂÆÉÊó†Â∞ΩÊó†‰ºëÂú∞ÊêÖÊâ∞„ÄÅÂïÉÂïÆÊàë‰ª¨ÁöÑËÉ∏ËÜõÔºåÂêÆÂê∏Êàë‰ª¨ÂøÉ‰∏≠ÊªãÊ∂¶ÁîüÂëΩÁöÑË°ÄÊ∂≤ÔºåÊ≥®ÂÖ•Âéå‰∏ñÂíåÁªùÊúõÁöÑÊØíÊ∂≤„ÄÇ Â¶ÇÊûúÊàë‰ª¨ÈîôËØØÂú∞‰º∞ËÆ°‰∫ÜËá™Â∑±ÁöÑËÉΩÂäõÔºå‰ª•‰∏∫ËÉΩÂ§üËÉú‰ªªÁªèËøáËæÉ‰∏∫‰ªîÁªÜÁöÑËÄÉËôëËÄåÈÄâÂÆöÁöÑËÅå‰∏öÔºåÈÇ£‰πàËøôÁßçÈîôËØØÂ∞Ü‰ΩøÊàë‰ª¨ÂèóÂà∞ÊÉ©ÁΩö„ÄÇÂç≥‰Ωø‰∏çÂèóÂà∞Â§ñÁïåÁöÑÊåáË¥£ÔºåÊàë‰ª¨‰πü‰ºöÊÑüÂà∞ÊØîÂ§ñÁïåÊåáË¥£Êõ¥‰∏∫ÂèØÊÄïÁöÑÁóõËã¶„ÄÇ Â¶ÇÊûúÊàë‰ª¨ÊääËøô‰∏ÄÂàáÈÉΩËÄÉËôëËøá‰∫ÜÔºåÂ¶ÇÊûúÊàë‰ª¨ÁöÑÁîüÊ¥ªÊù°‰ª∂ÂÆπËÆ∏Êàë‰ª¨ÈÄâÊã©‰ªª‰Ωï‰∏ÄÁßçËÅå‰∏öÔºåÈÇ£‰πàÊàë‰ª¨Â∞±ÂèØ‰ª•ÈÄâÊã©‰∏ÄÁßç‰ΩøÊàë‰ª¨Ëé∑ÂæóÊúÄÈ´òÂ∞ä‰∏•ÁöÑËÅå‰∏öÔºå‰∏ÄÁßçÂª∫Á´ãÂú®Êàë‰ª¨Ê∑±‰ø°ÂÖ∂Ê≠£Á°ÆÁöÑÊÄùÊÉ≥‰∏äÁöÑËÅå‰∏öÔºå‰∏ÄÁßçËÉΩÁªôÊàë‰ª¨Êèê‰æõÊúÄÂπøÈòîÁöÑÂú∫ÊâÄÊù•‰∏∫‰∫∫Á±ªÂ∑•‰ΩúÔºåÂπ∂‰ΩøÊàë‰ª¨Ëá™Â∑±‰∏çÊñ≠Êé•ËøëÂÖ±ÂêåÁõÆÊ†áÂç≥Ëáª‰∫éÂÆåÁæéÂ¢ÉÁïåÁöÑËÅå‰∏öÔºåËÄåÂØπ‰∫éËøô‰∏™ÂÖ±ÂêåÁõÆÊ†áÊù•ËØ¥Ôºå‰ªª‰ΩïËÅå‰∏öÈÉΩÂè™‰∏çËøáÊòØ‰∏ÄÁßçÊâãÊÆµ„ÄÇ Â∞ä‰∏•ÊòØÊúÄËÉΩ‰Ωø‰∫∫È´òÂ∞ö„ÄÅ‰Ωø‰ªñÁöÑÊ¥ªÂä®Âíå‰ªñÁöÑ‰∏ÄÂàáÂä™ÂäõÂÖ∑ÊúâÊõ¥Âä†Â¥áÈ´òÂìÅË¥®ÁöÑ‰∏úË•øÔºåÊòØ‰Ωø‰ªñÊó†ÂèØÈùûËÆÆ„ÄÅÂèóÂà∞‰ºó‰∫∫Èí¶‰Ω©Âπ∂È´òÂá∫‰∫é‰ºó‰∫∫‰πã‰∏äÁöÑ‰∏úË•ø„ÄÇ ‰ΩÜÊòØÔºåËÉΩÁªô‰∫∫‰ª•Â∞ä‰∏•ÁöÑÂè™ÊúâËøôÊ†∑ÁöÑËÅå‰∏öÔºåÂú®‰ªé‰∫ãËøôÁßçËÅå‰∏öÊó∂Êàë‰ª¨‰∏çÊòØ‰Ωú‰∏∫Â•¥Èö∂Ëà¨ÁöÑÂ∑•ÂÖ∑ÔºåËÄåÊòØÂú®Ëá™Â∑±ÁöÑÈ¢ÜÂüüÂÜÖÁã¨Á´ãÂú∞ËøõË°åÂàõÈÄ†ÔºõËøôÁßçËÅå‰∏ö‰∏çÈúÄË¶ÅÊúâ‰∏ç‰ΩìÈù¢ÁöÑË°åÂä®ÔºàÂì™ÊÄïÂè™ÊòØË°®Èù¢‰∏ä‰∏ç‰ΩìÈù¢ÁöÑË°åÂä®ÔºâÔºåÁîöËá≥ÊúÄ‰ºòÁßÄÁöÑ‰∫∫Áâ©‰πü‰ºöÊÄÄÁùÄÂ¥áÈ´òÁöÑËá™Ë±™ÊÑüÂéª‰ªé‰∫ãÂÆÉ„ÄÇÊúÄÂêà‰πéËøô‰∫õË¶ÅÊ±ÇÁöÑËÅå‰∏öÔºåÂπ∂‰∏çÊÄªÊòØÊúÄÈ´òÁöÑËÅå‰∏öÔºå‰ΩÜÂæÄÂæÄÊòØÊúÄÂèØÂèñÁöÑËÅå‰∏ö„ÄÇ ‰ΩÜÊòØÔºåÊ≠£Â¶ÇÊúâÂ§±Â∞ä‰∏•ÁöÑËÅå‰∏ö‰ºöË¥¨‰ΩéÊàë‰ª¨‰∏ÄÊ†∑ÔºåÈÇ£ÁßçÂª∫Á´ãÂú®Êàë‰ª¨ÂêéÊù•ËÆ§‰∏∫ÊòØÈîôËØØÁöÑÊÄùÊÉ≥‰∏äÁöÑËÅå‰∏ö‰πü‰∏ÄÂÆö‰ºöÊàê‰∏∫Êàë‰ª¨ÁöÑÊ≤âÈáçË¥üÊãÖ„ÄÇ ËøôÈáåÔºåÊàë‰ª¨Èô§‰∫ÜËá™ÊàëÊ¨∫È™óÔºåÂà´Êó†Ëß£ÊïëÂäûÊ≥ïÔºåËÄåËÆ©‰∫∫Ëá™ÊàëÊ¨∫È™óÁöÑËß£ÊïëÂäûÊ≥ïÊòØÂ§ö‰πà‰ª§‰∫∫Â§±ÊúõÂïäÔºÅ ÈÇ£‰∫õ‰∏ªË¶Å‰∏çÊòØÂπ≤È¢ÑÁîüÊ¥ªÊú¨Ë∫´ÔºåËÄåÊòØ‰ªé‰∫ãÊäΩË±°ÁúüÁêÜÁöÑÁ†îÁ©∂ÁöÑËÅå‰∏öÔºåÂØπ‰∫éËøòÊ≤°ÊúâÁ°ÆÁ´ãÂùöÂÆöÁöÑÂéüÂàôÂíåÁâ¢Âõ∫ÁöÑ„ÄÅ‰∏çÂèØÂä®ÊëáÁöÑ‰ø°ÂøµÁöÑÈùíÂπ¥ÊòØÊúÄÂç±Èô©ÁöÑÔºåÂΩìÁÑ∂ÔºåÂ¶ÇÊûúËøô‰∫õËÅå‰∏öÂú®Êàë‰ª¨ÂøÉÈáåÊ∑±Ê∑±Âú∞Êâé‰∏ã‰∫ÜÊ†πÔºåÂ¶ÇÊûúÊàë‰ª¨ËÉΩÂ§ü‰∏∫ÂÆÉ‰ª¨ÁöÑ‰∏ªÂØºÊÄùÊÉ≥ËÄåÁâ∫Áâ≤ÁîüÂëΩ„ÄÅÁ´≠Â∞ΩÂÖ®ÂäõÔºåËøô‰∫õËÅå‰∏öÁúãÊù•ËøòÊòØÊúÄÈ´òÂ∞öÁöÑ„ÄÇ Ëøô‰∫õËÅå‰∏öËÉΩÂ§ü‰ΩøÂÖ∑ÊúâÂêàÈÄÇÊâçÂπ≤ÁöÑ‰∫∫Âπ∏Á¶èÔºå‰ΩÜÊòØ‰πü‰ºö‰ΩøÈÇ£‰∫õ‰∏çÁªèËÄÉËôë„ÄÅÂá≠‰∏ÄÊó∂ÂÜ≤Âä®ËÄåË¥∏ÁÑ∂‰ªé‰∫ãÁöÑ‰∫∫ÊØÅÁÅ≠„ÄÇ Áõ∏ÂèçÔºåÈáçËßÜ‰Ωú‰∏∫Êàë‰ª¨ËÅå‰∏öÁöÑÂü∫Á°ÄÁöÑÊÄùÊÉ≥Ôºå‰ºö‰ΩøÊàë‰ª¨Âú®Á§æ‰ºö‰∏äÂç†ÊúâËæÉÈ´òÁöÑÂú∞‰ΩçÔºåÊèêÈ´òÊàë‰ª¨Ëá™Â∑±ÁöÑÂ∞ä‰∏•Ôºå‰ΩøÊàë‰ª¨ÁöÑË°å‰∏∫‰∏çÂèØÂä®Êëá„ÄÇ ‰∏Ä‰∏™ÈÄâÊã©‰∫ÜËá™Â∑±ÊâÄÁèçËßÜÁöÑËÅå‰∏öÁöÑ‰∫∫Ôºå‰∏ÄÊÉ≥Âà∞‰ªñÂèØËÉΩ‰∏çÁß∞ËÅåÊó∂Â∞±‰ºöÊàòÊàòÂÖ¢ÂÖ¢‚îÄ‚îÄËøôÁßç‰∫∫ÂçïÊòØÂõ†‰∏∫‰ªñÂú®Á§æ‰ºö‰∏äÊâÄÂ§ÑÁöÑÂú∞‰ΩçÊòØÈ´òÂ∞öÁöÑÔºå‰ªñ‰πüÂ∞±‰ºö‰ΩøËá™Â∑±ÁöÑË°å‰∏∫‰øùÊåÅÈ´òÂ∞ö„ÄÇ Âú®ÈÄâÊã©ËÅå‰∏öÊó∂ÔºåÊàë‰ª¨Â∫îËØ•ÈÅµÂÆàÁöÑ‰∏ªË¶ÅÊåáÈíàÊòØ‰∫∫Á±ªÁöÑÂπ∏Á¶èÂíåÊàë‰ª¨Ëá™Ë∫´ÁöÑÂÆåÁæé„ÄÇ‰∏çÂ∫îËÆ§‰∏∫ÔºåËøô‰∏§ÁßçÂà©Áõä‰ºöÂΩºÊ≠§ÊïåÂØπ„ÄÅ‰∫íÁõ∏ÂÜ≤Á™ÅÔºå‰∏ÄÁßçÂà©ÁõäÂøÖÂÆöÊ∂àÁÅ≠Âè¶‰∏ÄÁßçÂà©ÁõäÔºõÁõ∏ÂèçÔºå‰∫∫ÁöÑÊú¨ÊÄßÊòØËøôÊ†∑ÁöÑÔºö‰∫∫Âè™Êúâ‰∏∫ÂêåÊó∂‰ª£‰∫∫ÁöÑÂÆåÁæé„ÄÅ‰∏∫‰ªñ‰ª¨ÁöÑÂπ∏Á¶èËÄåÂ∑•‰ΩúÔºåËá™Â∑±ÊâçËÉΩËææÂà∞ÂÆåÁæé„ÄÇ Â¶ÇÊûú‰∏Ä‰∏™‰∫∫Âè™‰∏∫Ëá™Â∑±Âä≥Âä®Ôºå‰ªñ‰πüËÆ∏ËÉΩÂ§üÊàê‰∏∫ËëóÂêçÁöÑÂ≠¶ËÄÖ„ÄÅ‰ºüÂ§ßÁöÑÂì≤‰∫∫„ÄÅÂçìË∂äÁöÑËØó‰∫∫ÔºåÁÑ∂ËÄå‰ªñÊ∞∏Ëøú‰∏çËÉΩÊàê‰∏∫ÂÆåÁæéÁöÑ„ÄÅÁúüÊ≠£‰ºüÂ§ßÁöÑ‰∫∫Áâ©„ÄÇ ÂéÜÂè≤ÊääÈÇ£‰∫õ‰∏∫ÂÖ±ÂêåÁõÆÊ†áÂ∑•‰ΩúÂõ†ËÄåËá™Â∑±ÂèòÂæóÈ´òÂ∞öÁöÑ‰∫∫Áß∞‰∏∫ÊúÄ‰ºüÂ§ßÁöÑ‰∫∫Áâ©ÔºõÁªèÈ™åËµûÁæéÈÇ£‰∫õ‰∏∫Â§ßÂ§öÊï∞‰∫∫Â∏¶Êù•Âπ∏Á¶èÁöÑ‰∫∫ÊòØÊúÄÂπ∏Á¶èÁöÑ‰∫∫ÔºõÂÆóÊïôÊú¨Ë∫´‰πüÊïôËØ≤Êàë‰ª¨Ôºå‰∫∫‰∫∫Êï¨‰ª∞ÁöÑÂÖ∏ËåÉÔºåÂ∞±Êõæ‰∏∫‰∫∫Á±ªËÄåÁâ∫Áâ≤Ëá™Â∑±‚îÄ‚îÄÊúâË∞ÅÊï¢Âê¶ÂÆöËøôÁ±ªÊïôËØ≤Âë¢Ôºü Â¶ÇÊûúÊàë‰ª¨ÈÄâÊã©‰∫ÜÊúÄËÉΩ‰∏∫‰∫∫Á±ªËÄåÂ∑•‰ΩúÁöÑËÅå‰∏öÔºåÈÇ£‰πàÔºåÈáçÊãÖÂ∞±‰∏çËÉΩÊääÊàë‰ª¨ÂéãÂÄíÔºåÂõ†‰∏∫ËøôÊòØ‰∏∫Â§ßÂÆ∂‰ΩúÂá∫ÁöÑÁâ∫Áâ≤ÔºõÈÇ£Êó∂Êàë‰ª¨ÊâÄ‰∫´ÂèóÁöÑÂ∞±‰∏çÊòØÂèØÊÄúÁöÑ„ÄÅÊúâÈôêÁöÑ„ÄÅËá™ÁßÅÁöÑ‰πêË∂£ÔºåÊàë‰ª¨ÁöÑÂπ∏Á¶èÂ∞ÜÂ±û‰∫éÂçÉÁôæ‰∏á‰∫∫ÔºåÊàë‰ª¨ÁöÑ‰∫ã‰∏öÂ∞ÜÊÇÑÁÑ∂Êó†Â£∞Âú∞Â≠òÂú®‰∏ãÂéªÔºå‰ΩÜÊòØÂÆÉ‰ºöÊ∞∏ËøúÂèëÊå•‰ΩúÁî®ÔºåËÄåÈù¢ÂØπÊàë‰ª¨ÁöÑÈ™®ÁÅ∞ÔºåÈ´òÂ∞öÁöÑ‰∫∫‰ª¨Â∞ÜÊ¥í‰∏ãÁÉ≠Ê≥™„ÄÇ Âç°¬∑È©¨ÂÖãÊÄùÂÜô‰∫é1835Âπ¥8Êúà "}}